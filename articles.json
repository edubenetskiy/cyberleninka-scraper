[
  {
    "url": "https://cyberleninka.ru/article/n/metody-predvaritelnoy-optimizatsii-programm-na-yazyke-javascript",
    "slug": "metody-predvaritelnoy-optimizatsii-programm-na-yazyke-javascript",
    "title": "Методы предварительной оптимизации программ на языке JavaScript",
    "abstract_description": "Современные виртуальные машины для языка JavaScript используют многоуровневую компиляцию во время выполнения для создания машинного кода. При компиляции во время выполнения нецелесообразно выполнение сложных оптимизаций. Статическая компиляция, наоборот, имеет неограниченные возможности для выполнения сложных оптимизационных преобразований, но не может эффективно применяться к динамическим языкам, таким как JavaScript. В данной работе предлагается общий подход к предварительной компиляции программ на динамических языках, а также применение этого подхода для улучшения двух виртуальных машин JavaScriptCore и V8. При реализации улучшенной виртуальной машины JavaScriptCore c использованием предварительной компиляции была учтена специфика использования JavaScript-программ в составе локально хранящихся приложений для платформы ARM. Для виртуальной машины V8 для платформы x86-64 в рамках исследования предварительная компиляция была реализована с помощью кэширования в отдельный файл одного из оптимизированных внутренних представлений.",
    "full_text_body": "\n\n\n\n\uFEFFТруды ИСП РАН, том 27, вып. 6, 2015 г..\nМетоды предварительной оптимизации программ на языке JavaScript\n‘Роман Жуйков <zhroma@ispras.ru>\n2Евгений Шарыгин <eugene.sharygin@gmail.com>\n1ИСП РАН, 109004, Россия, г. Москва, ул. А. Солженицына, дом 25 2МГУ им. Ломоносова, 119991, Россия, г. Москва, Ленинские горы, д. 1, стр.\n52, факультет ВМК\nАннотация. Современные виртуальные машины для языка JavaScript используют многоуровневую компиляцию во время выполнения для создания машинного кода. При компиляции во время выполнения нецелесообразно выполнение сложных оптимизаций. Статическая компиляция, наоборот, имеет неограниченные возможности для выполнения сложных оптимизационных преобразований, но не может эффективно применяться к динамическим языкам, таким как JavaScript. В данной работе предлагается общий подход к предварительной компиляции программ на динамических языках, а также применение этого подхода для улучшения двух виртуальных машин — JavaScriptCore и V8. При реализации улучшенной виртуальной машины JavaScriptCore с использованием предварительной компиляции была учтена специфика использования JavaScript-программ в составе локально хранящихся приложений для платформы ARM. Для виртуальной машины V8 для платформы х86-64 в рамках исследования предварительная компиляция была реализована с помощью кэширования в отдельный файл одного из оптимизированных внутренних представлений.\nКлючевые слова: оптимизация программ; JavaScript компиляция во время выполнения; предварительная компиляция; Webkit JavaScriptCore; виртуальная машина V8;\n1.\tВведение\nВ данной работе рассматриваются две виртуальных машины для языка JavaScript. Первая виртуальная машина называется JavaScriptCore (JSC) [1] и входит в состав браузерного движка WebKit [2] для отображения веб-страниц. Вторая виртуальная машина называется V8 [3] и используется в браузерах Chromium и Chrome. Обе виртуальных машины являются свободным программным обеспечением с открытым исходным кодом и являются многоуровневыми Just-In-Time (JIT) компиляторами, то есть содержат несколько реализаций компиляции программного кода в машинный код во время выполнения программы.\n67\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nЦелью данной работы является разработка подхода к предварительной компиляции программ на динамических языках [4, 5], а также применение этого подхода для разработки схемы улучшения виртуальной машины JavaScriptCore с использованием предварительной компиляции. При реализации улучшенной версии виртуальной машины JavaScriptCore необходимо учесть специфику использования JavaScript-программ в составе локально хранящихся приложений для платформы ARM. Кроме того, необходимо с использованием подхода разработать и реализовать предварительную компиляцию в рамках виртуальной машины V8 для платформы х86-64.\nДальнейшее изложение построено следующим образом. Сначала будет описана общая схема работы многоуровневых ЛТ-компиляторов, а также особенности реализации этой схемы в виртуальных машинах JavaScriptCore и V8. Потом будут описаны возможные направления улучшения производительности данных виртуальных машин. Далее будет описана общая схема подхода к применению идей предварительной компиляции в рамках многоуровневого ЛТ, и ее реализация в рамках JavaScriptCore и V8.\n2.\tМногоуровневая JIT-компиляция в JavaScriptCore и V8.\nОсновная идея многоуровневой ЛТ-компиляции состоит в том, что время, потраченное на генерацию машинного кода для какого-то участка исходного кода, зависит от горячести этого участка. Для участков кода, которые выполняются один раз, оптимальным вариантом обычно является использование интерпретации. Следующим шагом является базовая ЛТ-компиляция — генерация\tнеоптимизиро ванного\tмашинного кода,\nсоответствующего заданному участку исходного кода. Для еще более горячих участков кода возможно использование спекулятивных оптимизаций с использованием профиля, собранного на предыдущих уровнях выполнения.\nВ JavaScriptCore единицей трансляции является функция на языке JavaScript, первыми этапами работы являются лексический и синтаксический анализ. Общая схема работы JavaScriptCore изображена на рис. 1. Исходный код разбивается на токены, методом рекурсивного спуска строится синтаксическое дерево (abstract syntax tree, AST), из которого в свою очередь строится внутреннее представление, называемое байткод (bytecode). В байткоде инструкции хранятся в виде массива ячеек, разные инструкции могут занимать разное количество ячеек. В первой ячейке хранится тип инструкции, в следующих ячейках хранятся адреса операндов и результата. Адреса операндов могут представлять собой ссылки на константы или номера локальных псевдорегистров. При чтении или записи полей объектов, загрузка адреса поля по имени выглядит как отдельная инструкция, один из операндов которой — константная строка, содержащая имя поля. Для многих инструкций последняя ячейка в байткоде выделена для хранения информации о профиле. Необходимо отметить, что байткод для функции создается\n68\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nнепосредственно во время выполнения программы при первом вызове данной функции.\nВнутреннее представление:\n[ Исходный КОД 1—*\tAST 1\n1: LLINT интерпретатор\nБайткод\n2: Baseline JIT\t\t\tМашинный код [Baseline]\nИнформация о профиле (о ютах\tS\t\tт\nПф«Н4Н1ЫХ) с уровней 1н2\tсг\t’\t} DSREnhy\n3: DFG Speculative JIT\tDFG Граф\t\t, Машинный код (DFG)\nJ\t\tГоЭЙЕпЙу\n4; LLVM JIT\tLLVM\t\t\t> Машинный код\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nбиткод\t\t(LLVM)\nРис. 1. Устройство виртуальной машины JavaScriptCore\nВ ранних версиях JavaScriptCore байткод сразу передавался на выполнение интерпретатору. Интерпретатор последовательно читал инструкции байткода и выполнял необходимые действия, переходы и циклы организовывались за счет условных и безусловных операций перехода. Переход указывает, что вместо чтения следующей инструкции в байткоде, интерпретатор должен перейти в другое место. В современных версиях JavaScriptCore вместо интерпретатора используется низкоуровневый интерпретатор (LLInt). Он фактически выполняет те же самые действия, однако запрограммирован на специальном мультиплатформенном ассемблере (offlineasm). Этот специальный ассемблер может быть скомпилирован на этапе сборки JavaScriptCore в машинный код для х86, ARM или нескольких других платформ, а также может быть преобразован в исходный код на языке С. LLInt, как и обычный интерпретатор, позволяет начать выполнение байткода, не выполняя никаких подготовительных этапов, тем самым обеспечивает быстрое начало выполнения. Все другие уровни оптимизации требуют предварительных затрат по созданию машинного кода, соответствующего заданному участку байткода. LLInt поддерживает на уровне вызова функций взаимодействие со всеми уровнями оптимизации. Если функция уже была скомпилирована в машинный код, то вызов этой функции из низкоуровневого интерпретатора будет выглядеть так же, как и переход на точку входа в общий пролог интерпретатора для любой другой неоптимизированной функции. LLInt использует кэширование на уровне байткода для ускорения доступа к полям объектов по имени.\n69\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nПри работе низкоуровневого интерпретатора так же происходит сбор информации о профиле — сохраняются типы и последние значения полей объектов. Необходимость оптимизации функций определяется с помощью оценки того, сколько раз в ней выполняются те или иные участки кода. Для перехода на первый уровень оптимизации времени выполнения (ЛТ-оптимизация) необходимо, чтобы функция набрала не менее 100 “очков выполнения”, при этом за каждую пройденную итерацию цикла прибавляется одно “очко”, а за вызов функции —15 “очков”. Отметим, что эти числа являются примерными, в реальности дополнительно применяется эвристика, результат работы которой зависит от размера рассматриваемой функции. Таким образом, небольшой функции без циклов достаточно быть вызванной около 7 раз, чтобы для нее была выполнена базовая компиляция времени выполнения (Baseline ЛТ).\nBaseline ЛТ создает для каждой операции байткода соответствующий машинный код. В этом коде реализуются все возможные случаи для данной операции. Например, операция сложения для чисел будет выполнена как сложение, а для операндов-строк — как конкатенация. Генерируемый код будет содержать множество ветвлений для разбора всех таких случаев. После того как для функции будет создан машинный код, нет необходимости дожидаться окончания функции для запуска выполнения нового кода. Например, если функция выполняет цикл с большим числом итераций, то может быть выполнен немедленный переход на новый код (on-stack-replacement, OSR). Низкоуровневый интерпретатор закончит обработку очередной инструкции байткода и сразу перейдет в машинном коде в то место, которое соответствует началу следующей инструкции. Конечно, во всех местах вызова этой функции будет произведено перенаправление на новую версию функции — в машинном коде.\nBaseline ЛТ код используется как базовая версия кода для функций, которые скомпилированы с помощью оптимизирующего ЛТ-компилятора. Если оптимизированный код сталкивается со случаем, который в нем не поддерживается (например, тип или значение переменной не соответствует собранному профилю), то происходит обратная замена на стеке (on stack replacement exit, OSR exit) к коду Baseline ЛТ. На уровне Baseline ЛТ, как и на LLInt сохраняется профиль — информация о типах полей объектов и аргументов функций, и выполняется кэширование для ускорения доступа к полям объектов.\nИнформация о профиле, собранная на уровнях Baseline ЛТ и LLInt используется для организации спекулятивного выполнения на следующем уровне оптимизации — оптимизации с использованием графа потока данных (Data flow graph, DFG ЛТ, Speculative ЛТ). Собранная информация содержит последние значения загруженных аргументов, полей объектов, а также результатов выполнения функций. Кэширование доступа к полям объектов на уровнях LLInt и Baseline ЛТ устроено так, что позволяет DFG быстро получать необходимую информацию. Например, по информации кэширования 70\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nлегко можно узнать, что некоторое обращение к полю объекта иногда, часто или всегда возвращает значение некоторого конкретного типа.\nDFG ЛТ компиляция выполняется для функций, которые набрали не менее 1000 “очков выполнения”. На уровне DFG выполняются разнообразные оптимизации, опирающиеся на информацию о профиле. Из байткода с учетом профиля создается граф потока данных, в котором инструкции описаны в виде SSA-представления. На этом DFG графе выполняются оптимизации, и в конце итоговый набор инструкций преобразуется в машинный код.\nDFG ЛТ распространяет полученную информацию о типах переменных по всему графу, и вставляет в код необходимые проверки типов. Иногда DFG даже выполняет спекулятивную оптимизацию по самому значению переменной. Например, если по результатам профилирования поле объекта является конкретной функцией, ее код может быть встроен в вызывающую функцию, с добавлением необходимой проверки. Как было описано выше, когда одна из проверок не выполняется, происходит деоптимизация, то есть обратная замена на стеке (on stack replacement exit, OSR Exit) на код Baseline ЛТ.\nТаким образом, DFG ЛТ код и Baseline ЛТ код могут сменять друг друга посредством замены на стеке (OSR). Когда код функции становится “горячим” — происходит переход на DFG ЛТ. Когда выполняется деоптимизация — происходит обратный переход. В случае многократного OSR exit, сохраненная информация о том, почему произошла деоптимизация, так же становится своеобразным профилем, который позволяет организовать реоптимизацию DFG, то есть создание нового DFG графа и машинного кода с учетом новой информации о профиле. Эвристика, оценивающая необходимость реоптимизации использует экспоненциальную задержку в зависимости от количества уже выполненных реоптимизаций. Это позволяет исключить возникновение больших временных затрат на постоянную реоптимизацию кода и выполнение множества OSR переходов.\nЧетвертый уровень оптимизации — LLVM ЛТ, вызывается для функций, набравших не менее 10000 “очков выполнения”. В нем выполняется более широкий набор оптимизаций, а качестве внутреннего представления помимо DFG графа используется биткод компилятора LLVM. Перед генерацией машинного кода выполняются оптимизации, уже реализованные в компиляторе LLVM.\nИтак, при выполнении скрипта, в любой момент времени функции, eval-блоки и глобальный код в JSC могут выполняться на любой комбинации LLInt, Baseline ЛТ и DFG ЛТ кода. В особом случае при выполнении рекурсивных функций, код одной и той же функции может существовать на стеке вызовов в разных вариантах: в одном уровне функция выполняется на LLInt, в другом на Baseline ЛТ, в третьем на DFG. Возможен еще более сложный случай — допускается выполнение старого варианта DFG кода на одном уровне стека, в то время как на более вложенном уровне рекурсии произошло много\n71\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nдеоптимизаций, и была выполнена реоптимизация, после которой был запущен новый вариант DFG кода.\nТабл. 1. Сравнение производительности уровней JSC.\nТест\tv8-richards\t\tBrowsermark\nУскорение\tБыстрее интерпретатора, раз\tБыстрее предыдущего уровня, раз\tБыстрее LLInt, раз\tБыстрее предыдущего уровня, раз\nИнтер- претатор\t1.00\t-\tн/д\t-\nLLInt\t2.22\t2.22\t1.00\t-\nBaseline ЛТ\t15.36\t6.90\t2.50\t2.5\nDFG ЛТ\t61.43\t4.00\t4.25\t1.7\nКод на С\t107.50\t1.75\tн/д\nВсе уровни выполнения обеспечивают одинаковую семантику выполнения, и единственный эффект переключения между ними — в производительности работы JavaScriptCore. В табл. 1 приведены примеры сравнения скорости выполнения теста v8-richards, а также набора тестов Browsermark. Для теста v8-richards дополнительно приведена скорость выполнения аналогичных вычислений, запрограммированных на языке С. Для набора тестов Browsermark не проводилось измерения производительности обычного интерпретатора в составе JSC, указанное в табл. 1 ускорение взято по среднему геометрическому, и необходимо отметить, что в одном из тестов наблюдается пятикратное преимущество Baseline ЛТ над LLINT интерпретатором, а также есть пример, где DFG ЛТ оказывается в 6 раз быстрее чем Baseline ЛТ.\n72\nТруды ИСП РАН, том 27, вып. б, 2015 г..\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИсходный\nкод\nВнутреннее\nпредставление:\nFull-Codegen JIT\nИнформация О профиле, о типа» переменных\nCrankshaft\nAST\n-Н ■ S □\n0“\nHydrogen\n1\nLithium\nМашинный код\n(Fuff-CodegenJ\nOSKEntiy\nQSREtlt\nМашинный код (Crankshaft)\nРис. 2. Устройство виртуальной машины V8\nКратко опишем устройство виртуальной машины V8, изображенное на рис. 2. В V8 используется только два уровня выполнения, причем оба эти уровня осуществляют ЛТ-компиляцию, а уровень интерпретации отсутствует. Базовый не оптимизирующий ЛТ-компилятор называется Full-Codegen, а оптимизирующий ЛТ называется Crankshaft. В Crankshaft в качестве промежуточных представлений используется машинно-независимое представление высокого уровня Hydrogen, на котором выполняется большинство оптимизаций, и машинно-зависимое представление низкого уровня Lithium, на котором происходит распределение регистров и из которого генерируется машинный код. В виртуальной машине V8 так же имеется схема On-Stack Replacement, позволяющая переходить на оптимизированный код, не дожидаясь окончания выполнения функции, и позволяющая в случае ошибочных спекулятивных предположений перейти обратно на неоптимизированную версию машинного кода.\n3.\tОптимизация производительности многоуровневого ЛТ\nРассмотрим и проанализируем возможные методы улучшения производительности виртуальных машин. Первым направлением является улучшение имеющихся оптимизаций на спекулятивном уровне ЛТ-компиляции. Как и в случае статической компиляции программ на типизированных языках в данном направлении существует множество возможностей для адаптации оптимизационных преобразований для особенностей той или иной платформы, либо определенного класса программ.\n73\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nОднако, необходимо учитывать, что, несмотря на поддержку выполнения ЛТ-компиляции в отдельном потоке, не прерывая выполнения кода на основном ядре процессора, требования ко времени ЛТ-компиляции предъявляются более жесткие, так как в отличие от статической компиляции возможны сценарии, когда время, затраченное на более сложную оптимизацию, не окупится в терминах времени выполнения кода. Также необходимо отметить, что дополнительный рост сложности оптимизационных преобразований приводит к большим требованиям к размеру оперативной памяти, что может так же оказаться существенным, например, в случае встраиваемых архитектур.\nСледующим направлением оптимизации является создание дополнительных уровней ЛТ-компиляции с использованием спекулятивных оптимизаций, а также тонкая настройка взаимодействия различных уровней выполнения. Дополнительный уровень ЛТ-компиляции позволяет для самых горячих участков кода выполнить максимально сложный набор оптимизаций, в то время как менее горячие участки так же будут оптимизированы, но с меньшими затратами. Задача выбора эвристик и управления их параметрами для того, чтобы определять момент перехода на следующий уровень выполнения так же является достаточно обширной областью для исследований. Одним из аспектов тонкой настройки может являться не только аспект производительности, но и аспект энергопотребления процессора.\nИ наконец третьим направлением улучшения виртуальных машин JavaScript является применение идей предварительной компиляции. Данный подход особенно актуален для использования в сценарии выполнения приложений, локально сохраненных на встраиваемом устройстве. Использование предварительной компиляции позволит в такой ситуации совместить преимущества динамической ЛТ-компиляции и статической компиляции. Основным вариантом реализации идей предварительной оптимизации является использование кэширования на уровне различных внутренних представлений виртуальной машины, возможно даже использование комбинации из нескольких внутренних представлений. Для некоторых представлений потенциально возможна разработка дополнительных статических оптимизаций, выполняемых в оффлайн фазе. На примере JavaScriptCore рассмотрим каким образом сохранение и последующая загрузка внутреннего представления позволяют увеличить производительность многоуровневого ЛТ.\nСначала для интересующих нас наборов тестов v8-v6 и SunSpider составим диаграмму профиля, показывающую какой объем времени затрачивается на выполнение тех или иных этапов работы виртуальной машины JavaScriptCore. Диаграмма изображена на рис. 3.\nПо такой диаграмме можно указать теоретическое максимально возможное увеличение производительности при наличии сохраненных внутренних представлений. Например, сохранение такого внутреннего представления как\n74\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nбайткод позволяет избавиться от двух начальных этапов — построения синтаксического дерева и непосредственно построения байткода. Однако, при этом на саму загрузку внутренних представлений так же необходимо затратить время выполнения, причем важным аспектом является линковка — восстановление ссылок на все внешние для данного представления объекты.\nBuild AST LLINT interpreter\nI AST to Bytecode I Baseline JIT execution DFG IR to native\n<u\n\"D\n'5.\nm\nc\n3\nш 1\nIf'\nI\nDFG JIT execution\nJIT optimizations an< generation (8.3J\nParsing and bytecod^ generation\nMissed samples1\nfimmmi\nNative соф execution (60%)\nGarbage collection (7°'°)\nШШШШ&\n/DFG O^tStbriftl0nS Baseline JIT execution Bytecode to native\t(after deoptimization)\n■ i\nGarbage collection\n0%\n20%\n40%\n60%\n80%\n100%\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 3 Результаты проектирования JavaScriptCore\nПри сохранении оптимизированных внутренних представлений аналогичным образом можно оценить максимально возможное ускорение виртуальной машины для того или иного набора тестов. Для этого, помимо учета той особенности, что можно сэкономить время разбора исходного кода и построения некоторой части промежуточных представлений, необходимо учесть, что успешная загрузка кода позволит выполнять данную единицу трансляции сразу на оптимизированном уровне, не используя более медленные способы выполнения, как это делается в обычном режиме, до тех пор, пока функция не является горячей. Построив для интересующих нас тестов таблицу аналогичную табл. 1, можно получить максимальную оценку дополнительного ускорения, полученного таким образом. Если построить диаграмму как на рис. 3 для тестов из набора Browsermark, по такой диаграмме можно оценить, что потенциально время, обозначенное как “Baseline JIT Execution” может быть уменьшено в 1.7 раза, а время “LLINT interpreter” можно уменьшить в 4.25 раз.\nПомимо максимального теоретически возможного ускорения отметим следующие аспекты, которые необходимо принимать во внимание при выборе комбинации внутренних представлений для сохранения. Во-первых, необходимо рассматривать возможность дополнительной статической оптимизации в оффлайн фазе. Например, для байткода в JavaScriptCore может\n75\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nбыть использовано удаление общих подвыражений. Во-вторых, необходимо оценивать сложность линковки во время выполнения. Например, при загрузке машинного кода большое количество времени будет тратиться на замену глобальных адресов, используемых в коде, на актуальные для текущего запуска программы. Третьим аспектом является вопрос поддержки перехода на менее оптимизированный код в случае невыполнения спекулятивных предположений на более высоких уровнях ЛТ. В обычном режиме работы виртуальной машины все необходимые данные для такого перехода имеются, но при загрузке готового оптимизированного внутреннего представления необходимо так же реализовать создание всей необходимой информации, например, обеспечить готовность создания неоптимизированного варианта ЛТ-кода. И наконец, в-четвертых, необходимо оценить трудоемкость реализации сохранения и загрузки выбранных внутренних представлений, с учетом реализации предыдущих трех аспектов, обозначенных в данном абзаце.\n4.\tРеализация предварительной оптимизации в JavaScriptCore\nВ рамках JavaScriptCore была разработана идея инфраструктуры, в которой исходный код заранее преобразовывался в некоторый набор данных, содержащий байткод и другие внутренние представления. Впоследствии, при выполнении программы загружаются готовые оптимизированные внутренние представления, которые корректируются по мере необходимости. Общая схема работы разрабатываемой системы изображена на рис. 4.\nВыполнение вызовов evat{)\nИсходный | i А__ код \"л\nСохраненный байткод, граф DFG, машинный код\n1: LUNT интерпретатор\nБайткод\n2: Baseline ЛТ\t\t\tМашинный код (Baseline) f”l\nИнформация о Профиле (о Типах переменных) с уровней 1 и 2\t£ Э О*\t\tjOBREnrtry OSftfcxit “ i 1\n3; DFG Speculative ЛТ\tDFG Граф\t\t. машинный код 11 j\nfoSREntry |\n4: LLVM ЛТ\tLLVM биткод\t\tМашинным иод j (ILLVM)\nРис. 4. Устройство системы предварительной компиляции (АОТС).\n76\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nТакой порядок работы JavaScriptCore позволит получить помимо преимуществ, указанных в предыдущей главе, некоторое подобие шифрования исходного кода — ведь байткод и другие бинарные внутренние представления сложнее прочесть и изменить, чем обычный исходный JavaScript код.\n4.1\tСохранение и загрузка байткода\nСначала в рамках работы над предварительной компиляцией (ahead of time compilation, АОТС) был реализован первый этап, который можно назвать АОТВ (ahead of time bytecode) [6]. Он подразумевает сохранение исходного кода в виде байткода, для последующей загрузки при выполнении.\nВ обычном режиме работы JavaScriptCore при выполнении скриптов байткод для каждой функции генерировался только при первом вызове этой функции. Нами была разработана и реализована схема генерации и сохранения байткода без выполнения самого скрипта. К байткоду сохраняется так же вспомогательная информация, такая как таблицы констант, таблицы switch-переходов и исключений, необходимые данные для регулярных выражений. Для сохранения байткода без выполнения потребовалось эмулировать работу стека пространств имен.\nБайткод JavaScriptCore не был задуман как промежуточное внутреннее представление для сохранения, основной его целью является эффективное выполнение и генерация машинного кода на уровне Baseline ЛТ. Байткод, в отличие от исходной программы на JavaScript, отражает семантику программы только в определенном контексте. Например, в зависимости от свойств объектов, созданных к моменту начала выполнения программы, для нее может быть сгенерирован различный байткод. В основном, эта разница в байткоде относится к дополнительным подсказкам, например, позволяющим быстрее организовать обращение к полям объектов. Однако, в некоторых случаях байткод, сохраненный вне того контекста, в котором программа будет исполняться, может приводить к некорректным результатам с точки зрения стандарта JavaScript. Эти особенности были учтены при сохранении байткода без выполнения. Кроме того, обращения к глобальным объектам содержат абсолютные адреса, и необходимо организовать сохранение так, чтобы можно было при загрузке байткода поменять адреса на новые, соответствующие адресам объектов во время выполнения.\nИзначально планировалось хранение всей информации в виде базы данных SQLite, однако такого способа хранения пришлось отказаться из соображений эффективной загрузки. Теперь все данные, относящиеся к одной функции, хранятся в виде последовательного набора байтов внутри файла. В начале файла сохраняется карта адресов (смещений), по которым можно найти информацию для каждой из функций. Соответственно, при выполнении из файла читается эта карта смещений и байткод для глобального JavaScript кода, то есть всего кода, описанного вне функций. В дальнейшей работе, при\n77\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nпервом вызове функции вместо обычного разбора исходного кода байткод и все необходимые данные подгружается из файла по заданному смещению. Необходимо отметить один из моментов, который позволил уменьшить размер сохраняемого файла — отказ от хранения двух вариантов байткода для каждой функции. При обычном выполнении JavaScript программ, для функций, вызываемых как конструктор с помощью вызова new (“var z = new f()”), создается отдельный байткод. В нашей реализации хранится только байткод для случая обычного вызова функции, который при необходимости преобразуется в вариант “для конструктора”.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПри выполнении байткода вместо исходного кода стандарт ЕСМА-262 [7] поддерживается полностью, вызовы eval поддерживаются, для них исходный код компилируется обычным образом в процессе работы JavaScriptCore. Исключением является только работа операций, явным образом требующих наличия исходного кода. Примерами таких операций могут служить вызовы function toStringO, либо использование поля line у объекта исключения. В этом поле должен храниться номер строки в исходном коде, которая создала исключение.\n4.2\tРезультаты АОТВ\nТекущая реализация сохранения и загрузки файла с байткодом успешно проходит регрессионное тестирование на наборах из Webkit JavaScriptCore и V8. За счет уменьшения времени обработки исходного кода, до 2 - 4% ускоряется работа тестов из SunSpider, v8 и kraken на платформе ARM. Крупные data-файлы для тестов из kraken обрабатываются значительно быстрее, время их обработки не учитывается в результатах теста. По результатам профилирования работы JavaScriptCore было выявлено, что на больших исходных текстах время, затрачиваемое на загрузку файла с байткодом, может быть до Зх раз меньше времени, необходимого на обычную обработку исходного кода.\nДля тестов из наборов SunSpider, v8, kraken было измерено соотношение размера бинарного файла с сохраненным байткодом и размера исходного JavaScript-файла. Причем, был взят пример как использования оригинальных файлов, так и упакованных с помощью Google Closure Compiler. Во втором случае оба файла дополнительно архивировались с помощью утилиты gzip с использованием максимального сжатия. Результаты данных измерений изображены в табл. 2.\n78\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nТестовый\tСоотношение размеров файла с байткодом и исходного файла\nнабор\tОригинальный JavaScript\tGoogle Closure Compiler + gzip\nSunSpider\t1.19\t1.25\nv8-v6\t2.3\t4.41\nKraken\t1.97\t1.31\nТабл. 2. Результаты сравнения объема JS-файлов и файлов с байткодом.\nУвеличение размера файла является значительным, но при выполнении файла с байткодом не используется больший объем оперативной памяти, чем при запуске JavaScriptCore в обычном режиме для выполнения аналогичной JavaScript программы. В современных встраиваемых системах объем внешней памяти существенно превышает объем оперативной памяти, и не является критическим параметром при создании программного обеспечения, поэтому инфраструктура АОТВ может иметь достаточно широкое применение.\n4.3\tСохранение машинного кода Baseline JIT\nПосле реализации АОТВ в данную инфраструктуру для платформы х86-64 были добавлены сохранение и загрузка неоптимизированного машинного кода, генерируемого на уровне Baseline ЛТ. Самой сложной задачей в этой работе была линковка адресов. При загрузке, для всех объектов, обращение к которым производится по абсолютным адресам, необходимо было внести актуальные адреса в загружаемый машинный код. На этапе сохранения генерация машинного кода была так же реализована без выполнения скрипта. При генерации машинного кода, все обращения по абсолютным адресам фиксировались в отдельные таблицы, чтобы в дальнейшем была возможность восстановить необходимые адреса при загрузке. Машинный код и все необходимые для линковки данные записывались рядом с байткодом соответствующей функции в тот же бинарный файл. При этом абсолютные адреса в машинном коде, которые будут заново сформированы при загрузке, при сохранении в файл заменялись нулями для более успешной работы алгоритмов сжатия.\n79\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\n100%\n— Дополнительные данные\n(8%)\nДанные линковки (12%)\nМашинный код, не требующий линковки (46%)\nМашинный код, требующий линковки (от объема файла - 7%, 14% всего машинного кода) Байткод (27%)\nРис. 5. Структура бинарного файла\nВ итоге для каждой функции в файле хранились следующие группы данных:\n•\tБайткод и другая информация, необходимая для АОТВ\n•\tМашинный код, создаваемый Baseline JIT\n•\tДанные для линковки\n•\tДополнительные технические данные генерируемые для функции после работы Baseline ЛТ, их необходимо сохранять из-за пропуска генерации Baseline ЛТ в варианте запуска с загружаемым готовым машинным кодом\nРазмер получаемых файлов оказался еще в 2.5-5 раз больше, чем размер файлов, генерируемых при работе АОТВ, то есть содержащих только байткод. На рис. 5 изображена статистика по объему данных, содержащихся в полученных бинарных, для 10 тестов из набора SunSpider.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПоскольку на х86-64 размер указателя составляет 8 байт, получается, что значительная часть машинного кода состоит из абсолютных адресов. В данном случае, под линковку попадает от 10% до 23%, в среднем 14% машинного кода. Возможно, из-за этого оказывается, что сохранение машинного кода не позволяет ускорить производительность JavaScriptCore на тестах SunSpider и V8. Получается, процесс генерации машинного кода из готового байткода оказывается не таким уж медленным, и чтение значительно более объемного файла с последующей линковкой адресов не дает выигрыша в производительности.\n80\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\n5.\tПредварительная оптимизация в виртуальной машине V8\nПоскольку в виртуальной машине V8 отсутствует самое общее внутреннее представление аналогичное байткоду, было выбрано принципиально иное инфраструктурное решение о реализации предварительной компиляции. Файл с сохраняемой информацией должен лишь дополнять исходный файл, а не заменять его.\nОт сохранения машинного кода было решено отказаться из-за сложности реализации и плохих практических результатов такого подхода в JavaScriptCore. Сохранение сложного высокоуровневого представления Hydrogen так же было решено не делать, в силу его сложной структуры, необходимой для\tпроведения\tвсех оптимизационных\tпроходов.\nМашинно-зависимое\tвнутреннее\tпредставление Lithium\tоказалось\nоптимальным для сохранения - в нем достаточно легко собирать необходимый объем информации для генератора машинного кода, и одновременно не стоит так остро вопрос актуализации ссылок на используемые объекты, как это происходит с адресами в машинном коде.\n5.1\tСохранение Lithium\nИтак, для виртуальной машины V8 была разработана система кэширования в файл оптимизированного внутреннего представления Lithium уже после оптимизационного прохода распределения регистров, то есть сохраняется ровно тот вариант внутреннего представления, который передается генератору машинного кода. Один из недостатков этого подхода - зависимость от архитектуры системы, так как представление является машинно-зависимым. В рамках данной работы была выполнена исследовательская реализация для процессоров х86-64.\nСистема встроена в V8 и доступна при запуске через интерфейс командной строки. Если обычный запуск производится командой v8 test.js, то модифицированная нами версия v8 позволяет добавить опцию -save-code=<fflename> или -load-code=<filename> соответственно для сохранения и загрузки Lithium представления. Необходимо отметить, что в данной реализации поддерживается работа только с одним исходным файлом на JavaScript. Предположительно, при реализации аналогичного подхода для реальных крупных приложений на JavaScript следует использовать один общий файл кэширующий все Lithium-представления в рамках запускаемого приложения.\nНекоторая часть инструкций Lithium не является самодостаточными, и содержит ссылку на «родительскую» инструкцию Hydrogen из которой она была сгенерирована. Генератор машинного кода в Crankshaft использует небольшую часть свойств инструкций Hydrogen, доступных по соответствующим ссылкам из Lithium.\n81\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nВоссоздание Hydrogen в полном объеме на этапе загрузки предварительно загруженных инструкций Lithium не является целесообразным, а в некоторых случаях это даже невозможно без значительного вмешательства во внутреннюю структуру Hydrogen для отключения или обхода многочисленных проверок целостности.\nВ ходе данной работы было принято решение о создании дополнительного уровня меноду Hydrogen и Lithium. Данный дополнительный уровень содержит в точности объем информации необходимый для генерации машинного кода, имеет аналогичный Hydrogen интерфейс доступа к свойствам инструкций и содержит лишь нужную часть этих свойств.\nИдентичность интерфейса позволяет минимизировать изменения, вносимые в генератор машинного кода компилятора Crankshaft, требуется лишь заменить обращения к тем же методам другого класса. Классы инструкций дополнительного уровня образуют иерархию, схожую и оригинальной иерархией классов инструкций Hydrogen. Инструкции дополнительного уровня сохраняются вместе с инструкциями Lithium.\n5.2\tРезультаты\nНа искусственных тестовых примерах ускорение работы виртуальной машины составило до 20 раз. Для создания такого примера, необходимо выбирать такое количество итераций цикла внутри функции, которое минимально подходит для запуска Crankshaft-компиляции данной функции. Тогда в режиме запуска с загружаемым готовым представлением Lithium получается, что такая функция все итерации выполняет на оптимизированной версии кода, в то время как исходном режиме работы виртуальной машины V8 такая функция почти все время выполнялась на неоптимизированной версии машинного кода. А соотношение до 20 раз может быть достигнуто при добавлении в цикл нескольких присваиваний в неиспользуемые в дальнейшем переменные, поскольку не оптимизирующий компилятор Full-Codegen не реализует удаления мертвого кода.\nНеобходимо отметить, что реализация сохранения и загрузки Lithium была сделана лишь в рамках исследовательской работы, поэтому не была реализована совместимость механизма сохранения и загрузки внутреннего представления с обычно используемым на современных многоядерных процессорах режимом работы виртуальной машины V8, при котором компиляция оптимизированного кода происходит в фоновом режиме в отдельном потоке параллельно выполнению самого скрипта. В качестве базового времени для сравнения производительности использовались результаты работы оригинальной версии V8 с отключенной компиляцией в фоновом режиме.\nТестирование производительности производилось только при запуске тестов в режиме загрузки с теми же параметрами и входными данными, что и при сохранении. Данное ограничение связано с реализацией сохранения и загрузки\n82\nТруды ИСП РАН, том 27, вып. б, 2015 г..\nтолько для одного исходного файла в рамках одного запуска, а также с отсутствием промышленных тестов для языка JavaScript, позволяющих передавать входные данные посредством командной строки.\nК сожалению, на тестах из наборов SunSpider, Octane и Kraken не было получено ускорения. Возможно, это связано с тем, что в данных тестах незначительное время тратится на работу оптимизирующего компилятора, а также нет функций, выполнение которых существенное время происходит на неоптимизированном машинном коде с последующей оптимизацией. Поскольку в виртуальной машине V8 отсутствует поддержка статической генерации функций, реализованных на языке asm.js [8], являющемся подмножеством языка JavaScript, было решено протестировать сравнительно объемные тесты на asm.js.\nУскорение было получено на трех asm.js приложениях с сайта “Are we fast yet?” [9], занимающегося сравнением производительности различных JavaScript движков. Тесты Box2d и Bullet данного сайта ускоряются до 15%, а тест Zlib — до 33%. Данные тесты можно запускать с указанием выполняемого объема вычислений, передавая в командной строке число от 1 до 5. Важно отметить, что такое ускорение получено при выполнении с параметром 1. Однако, в абсолютном выражении данное ускорение сохраняется и при использовании большего объема вычислений, тесты ускоряются на 0.1-0.2 секунды. Таким образом, можно предположить, что при реализации данной исследовательской работы в виде реально используемого программного продукта в составе веб-движка для отображения веб-страниц, пользовательское JavaScript-приложение, основанное на box2d, будет загружаться на 0.1 секунду быстрее при использовании сохранения и загрузки Lithium.\nДополнительно был создан еще один тест на asrnjs. Для статических компиляторов языка C++ существует тест tramp3d [10], предназначенный для оценок времени работы самих компиляторов. То есть обычно данный достаточно объемный исходный код на C++ используется для сравнения скорости компиляции. В рамках исследования, данный тест был скомпилирован с помощью emscripten в исходный файл на языке asm.js и полученный скрипт был протестирован. Поскольку в V8 компиляция происходит во время выполнения, и подход с загрузкой готового ранее сохраненного Lithium кода позволил уменьшить время компиляции, на таком тесте было получено ускорение в 30%.\n6.\tЗаключение\nВ рамках данной работы разработан общий метод применения предварительной компиляции в виртуальных машинах с использованием многоуровневой JIT-компиляции. С помощью этого метода разработан и реализован для платформы ARM оптимизирующий JavaScript компилятор на базе виртуальной машины JavaScriptCore, позволяющий добиться более\n83\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nвысокой производительности для локально хранимых программ. Данная реализация позволяет избавиться от хранения JavaScript кода в виде открытых исходных файлов, сохраняя код в файл в виде байткода JavaScriptCore, и позволяет сократить до Зх раз время, затрачиваемое во время выполнения для получения байткода, поскольку компилятору не нужно делать лексический и синтаксический анализ. Дополнительно к байткоду в файл может быть также сохранен нсоптимизиро ванный машинный код. На некоторых тестах данная реализация позволяет получить ускорение до 2 - 4%, при этом размер файла с байткодом может быть до 4.5 раз больше исходных файлов на JavaScript, а при сохранении машинного кода объем файла увеличивается еще в 2.5 - 5 раз без существенных улучшений производительности. В дальнейшем планируется продолжать разработку системы, добавив в нее предварительные оптимизации на уровне байткода.\nДля виртуальной машины V8 с помощью применения метода разработан механизм кэширования внутренних представлений и реализована возможность сохранения и последующей загрузки промежуточного оптимизированного машинно-зависимого внутреннего представления, что позволяет ускорить повторный запуск программы. Данная реализация позволяет значительно ускорить специальный образом подобранные искусственные тесты, а также ряд тестов на языке asm.js. В данный момент — это лишь исследовательская разработка и в дальнейшем планируется расширить ее для возможности реального использования в составе систем, аналогичных движкам веб-браузеров.\nСписок литературы\n[1]\t. Веб-страница описания реализации JavaScriptCore на веб-сайте разработчиков\nWebKit. http://trac.webkit.org/wiki/JavaScriptCore\n[2]\t. Веб-сайт Webkit. http://www.webkit.org\n[3]\t. Веб-сайт V8. https://code.google.eom/p/v8/\n[4]\t. S. Hong, J. Kim, J. W. Shin, S. Moon, H. Oh, J. Lee, H. Choi “Java client ahead-of-time\ncompiler for embedded systems”, Proceedings of the 2007 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems, 2007, pp. 63-72\n[5]\t. S. Hong, S. Moon “Client-Ahead-Of-Time Compilation for Digital TV Software\nPlatform” 3rd workshop on Dynamic Compilation Everywhere preprint, 2013. http://sites.google.eom/site/dynamiccompilationeverywhere/home/dce-2014/DCE-2014-Sunghyun-Hong-article.pdf\n[6]\t. P. Жуйков, Д. Мельник, P. Бучацкий, В. Варданян, В. Иванипшн, Е. Шарыгин.\nМетоды динамической и предварительной оптимизации программ на языке JavaScript. // Труды Института системного программирования РАН Том 26. Выпуск 1. 2014 г. Стр. 297-314. DOI: 10.15514ЛSPRA8-2014-26(1)-10\n[7]\t. Описание стандарта ЕСМА-262.\nhttp://www.ecma-intemational.org/publications/standards/Iicma-262.htm\n[8]\t. Веб-сайт языка asm.js. http://asmjs.org/\n[9]\t. Веб-сайт “Are we fast yet?”, https://arewefastyet.com/\n[10]. Веб-страница тестирования tramp3d.\nhttp://gcc.opensuse.org/c-H-bench/tramp3d/\n84\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nAhead of time optimization for JavaScript\nprograms\n1Roman Zhuykov <zhroma@ispras.ru>\n2Eugene Sharygin <eugene.sharygin@gmail.com>\n!ISP RAS, 25 Alexander Solzhenitsyn Str., Moscow, 109004, Russian Federation 2CMCMSU, 1 bldg.52 Leninskie Gory Str., Moscow, 119991, Russian Federation\nAbstract. Modem JavaScript engines use just-in-time (JIT) compilation to produce binary code. JIT compilers are limited in a complexity of optimizations they can perform at a runtime without delaying an execution. Static ahead-of-time (AOT) compilers do not have such limitations, but they are not well suited for compiling dynamic languages such as JavaScript. In the paper, we discuss methods for augmenting multi-tiered JIT compiler with a capability for AOT compilation, and implement some of ahead-of-time compilation ideas in two JavaScript engines — JavaScriptCore and V8. In JavaScriptCore (JSC), which is a part of open-source WebKit library, we have developed and implemented a framework, which allows saving of JavaScript programs as a binary package containing bytecode and a native code. The framework consists of two components: command-line compiler, which compiles source JavaScript program into compressed binary package, consisting of JSC internal representation called bytecode and native code produced by JSC’s non-optimized JIT compiler. The second component is patched JSC engine with a capability for loading and executing binary packages produced by the compiler. In addition, we have implemented saving of optimized internal representation in another JavaScript engine, which is called V8 and is used in Chrome and many other browsers. When running the same JavaScript program, cached internal representation can be loaded to reduce JIT-compilation time and decrease percentage of running unoptimized code before it became hot.\nKeywords: program optimizations; JavaScript; just-in-time optimization (JIT-optimization); ahead of time optimization; Webkit JavaScriptCore; V8.\nReferences\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[1]\t. JavaScriptCore webpage on WebKit website. http://trac.webkit.org/wiki/JavaScrintCore\n[2]\t. WebKit Browser Engine website, http: //www.webkit. ore\n[3]\t. V8 Browser Engine webpage, https://code.google.eom/p/v8/\n[4]\t. S. Hong, J. Kim, J. W. Shin, S. Moon, H. Oh, J. Lee, H. Choi “Java client ahead-of-time\ncompiler for embedded systems”, Proceedings of the 2007 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems, 2007, pp. 63-72\n[5]\t. S. Hong, S. Moon “Client-Ahead-Of-Time Compilation for Digital TV Software\nPlatform” 3rd workshop on Dynamic Compilation Everywhere preprint, 2013. http://sites.google.com/site/dvnamiccompilationevervwhere/home/dce-2014/DCE-2Q14-Sunghvun-Hong-article.pdf\n85\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\n[6]\t. R. Zhuykov, D. Melnik, R. Buchatskiy, V. Vardanyan, V. Ivanishin, E. Sharygin.\nMetody dinamicheskoj i predvaritel'noj optimizacii programm na jazyke JavaScript [Dynamic and ahead of time optimization for JavaScript programs], Trudy ISP RAN [The Proceedings of ISP RAS], 2014, vol. 26, no. 1, pp. 297-314. DOI: 10.15514ЛSPRAS-2014-26( 1)-10 (in Russian)\n[7]\t. ECMA-262 Standard description.\nhttp://www. ecma-intemational. org/publications/ standards/Ecma-262.him\n[8]\t. Asm.js language website, http://asmjs.org/\n[9]\t. “Are we fast yet?” website, https://arewefastyet.com/\n[10]. Tramp3d testing webpage. http://gcc.opensuse.org/c-H-bench/tramp3d/\n86\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-predvaritelnoy-optimizatsii-programm-na-yazyke-javascript/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-optimizatsii-programm-na-yazyke-javascript-osnovannye-na-statistike-vypolneniya-programmy",
    "slug": "metody-optimizatsii-programm-na-yazyke-javascript-osnovannye-na-statistike-vypolneniya-programmy",
    "title": "Методы оптимизации программ на языке JavaScript, основанные на статистике выполнения программы",
    "abstract_description": "Язык JavaScript является одним из самых популярных языков для разработки веб-приложений. В связи с ростом производительности персональных компьютеров, мобильных и встраиваемых систем использование JavaScript стало возможным также и в масштабных приложениях. Более того, в настоящее время язык JavaScript активно используется в операционных системах в качестве одного из основных языков для создания пользовательских приложений. Примерами таких систем являются Tizen OS и Firefox OS. С ростом популярности языка многие крупные компании выпустили свои реализации JavaScript, в которых для генерации машинного кода в основном используется многоуровневая динамическая компиляция. В данной работе описываются разработанные методы оптимизации динамических многоуровневых компиляторов с учетом информации о профиле выполнения программы. Метод был реализован в динамическом компиляторе языка JavaScript V8, разработанном компанией Google. Использование профиля выполнения программы позволяет оптимизировать программу для конкретных входных данных. Это особенно актуально в связи с использованием JavaScript в операционных системах. Сценарий использования оптимизации на основе профиля программы в операционных системах следующий: на этапе тестирования программного обеспечения можно организовать сбор информации о профиле программы и использовать его для оптимизации приложений под конкретные случаи выполнения. Одним из новых применений использования информации о профиле программы может быть обеспечение немедленного переключения выполнения часто исполняющихся участков кода на уровень оптимизирующего компилятора. Другое применение удаление обратных переходов на неоптимизирующие уровни выполнения.",
    "full_text_body": "\n\n\n\n\uFEFFМетоды оптимизации программ на языке JavaScript, основанные на статистике выполнения программы\nВ.Г. Варданян <vahagvardanyan@gmail.com> Ереванский государственный университет, 0025, Армения, г. Ереван, ул. А. Манукяна, дом 1\nАннотация. Язык JavaScript является одним из самых популярных языков для разработки веб-приложений. В связи с ростом производительности персональных компьютеров, мобильных и встраиваемых систем использование JavaScript стало возможным также и в масштабных приложениях. Более того, в настоящее время язык JavaScript активно используется в операционных системах в качестве одного из основных языков для создания пользовательских приложений. Примерами таких систем являются Tizen OS и Firefox OS. С ростом популярности языка многие крупные компании выпустили свои реализации JavaScript, в которых для генерации машинного кода в основном используется многоуровневая динамическая компиляция. В данной работе описываются разработанные методы оптимизации динамических многоуровневых компиляторов с учетом информации о профиле выполнения программы. Метод был реализован в динамическом компиляторе языка JavaScript V8, разработанном компанией Google. Использование профиля выполнения программы позволяет оптимизировать программу для конкретных входных данных. Это особенно актуально в связи с использованием JavaScript в операционных системах. Сценарий использования оптимизации на основе профиля программы в операционных системах следующий: на этапе тестирования программного обеспечения можно организовать сбор информации о профиле программы и использовать его для оптимизации приложений под конкретные случаи выполнения. Одним из новых применений использования информации о профиле программы может быть обеспечение немедленного переключения выполнения часто исполняющихся участков кода на уровень оптимизирующего компилятора. Другое применение - удаление обратных переходов на неоптимизирующие уровни выполнения.\nКлючевые слова: JavaScript, V8, оптимизация программ, динамическая компиляция DOI: 10.15514/ISPRAS-2016-28(1)-1\nДля цитирования: Варданян В.Г. Методы оптимизации программ на языке JavaScript, основанные на статистике выполнения программы. Труды ИСП РАН, том 28, вып. 1, 2016 г., стр. 5-20. DOI: 10.15514/ISPRAS-2016-28(1)-1\n1.\tВведение\nВ настоящее время широкое распространение получили программы на нетипизированных сценарных языках. Одним из повсеместно используемых языков является JavaScript. С использованием JavaScript написаны многие крупные многофункциональные приложения, такие как Gmail, Google docs и другие. JavaScript также используется в платформе Node.js [1] для разработки веб-приложений на стороне сервера. Более того, уже имеются разработки операционных систем для телефонов, планшетов и ноутбуков, которые подразумевают использование JavaScript как одного из основных языков для создания приложений. Примерами таких систем могут быть Tizen [2] и FirefoxOS [3]. Тем самым, все больше возрастают требования к производительности программ на языке JavaScript, а также к паузам при интерактивном взаимодействии. Многие современные реализации JavaScript используют технологию динамической компиляции (JIT-компиляция), что позволяет применять широкий класс оптимизаций и за счет этого достичь лучшей производительности. При динамической компиляции время, затраченное на компиляцию, добавляется к общему времени выполнения. Поэтому важно соблюдать баланс между сложностью выполняемых оптимизаций и временем задержки запуска программы.\nЧтобы достичь такого баланса, используется технология многоуровневой JIT-компиляции. Такое решение обеспечивает быстрый запуск программы, начиная выполнение на неоптимизирующих уровнях компиляции. Далее, наиболее часто исполняющиеся участки кода выполняются на оптимизирующих уровнях компиляции для генерации более качественного машинного кода.\nЦелью данной работы является разработка и реализация методов оптимизации многоуровневых динамических компиляторов, основанных на профиле выполнения.\nДальнейшее изложение построено следующим образом. В разд. 2 приводится описание архитектуры компилятора V8 и примененные технологии (замена на стеке, спекулятивная компиляция и т.д.) для построения оптимизирующих многоуровневых JIT-компиляторов. В разд. 3 дается обзор работ в предметной области. В разд. 4 описывается схема функционирования предлагаемого решения. В разд. 5 приведены основные результаты.\n2.\tАрхитектура V8\nДля генерации машинного кода в V8 [4] используются два разных компилятора (рис. 1). Единицей компиляции является функция (метод). Первыми этапами работы V8 являются лексический и синтаксический анализ.\nИсходный код разбивается на лексемы, методом рекурсивного спуска строится синтаксическое дерево. После этого начинает работать компилятор первого уровня Full-Codegen. На первом уровне функция переводится в машинный код с выполнением минимального набора оптимизаций, что позволяет быстрее приступить к выполнению кода. При генерации машинного кода для каждой инструкции учитываются все возможные случаи выполнения для данной операции. На этом уровне собирается профиль программы -информация о типах полей объектов. Кроме того, базовый компилятор V8 расставляет счетчики для определения часто выполняемых участков кода (функций и циклов). Когда такой участок кода обнаруживается, компиляция переходит на второй, оптимизирующий уровень - Crankshaft. На этом уровне из абстрактного синтаксического дерева строится граф потока управления в SSA-представлении - Hydrogen. Это внутреннее представление позволяет выполнить ряд машинно-независимых оптимизаций, таких как встраивание функций, удаление мертвого кода, удаление общих подвыражений, оптимизации циклов и т.д.\nCrankshaft использует собранную в предыдущем уровне информацию о типах для эффективного хранения целочисленных переменных и операций над ними. На 64-битных архитектурах для целых чисел используется следующее кодирование: старшие 32 бита хранят число, младшие биты нулевые. На 32-битных архитектурах для хранения целых чисел используется 31 бита, младший бит нулевой. Целые числа в таком представлении называются Smi (от английского small integer). В JavaScript отсутствует строгая типизация. Это значит, что в общем случае переменные ссылаются на объекты. Все указатели на объекты в V8 имеют младший бит (определяющий четность числа) установленным в единицу, что позволяет отличить Smi от других объектов. Кодирование использует тот факт, что все адреса выровнены, т.е. объектов с нечетными адресами не существует.\nРис. 1. Многоуровневая архитектура компилятора V8 Fig.1. Multilevel architecture of the V8 compiler\nCrankshaft распространяет полученную из уровня Full-Codegen информацию о профиле по всему графу. Это позволяет генерировать машинный код спекулятивным образом, основываясь на предположении, что определенные свойства переменных (тип, значение и т.д.) останутся неизменными при следующих вызовах функции. В код вставляются необходимые проверки. Когда одна из таких проверок не выполняется, происходит переход на первый, неоптимизированный уровень. Этот процесс называется деоптимизацией. Для переключения между разными уровнями компиляции используется технология замены на стеке (OSR) [5]: выполнение функции приостанавливается и текущий стек функции заменяется новым. После выполнения \"замены на стеке\", во всех местах вызова этой функции производится перенаправление на новую версию функции. При этом, переключение может произойти как с первого уровня на второй (OSR entry), так и наоборот (OSR exit).\nПосле выполнения всех оптимизаций представление Hydrogen переводится в машинно-зависимое представление - Lithium. В отличие от представления Hydrogen, Lithium использует близкое к машинному коду трехадресное представление. Это представление используется для эффективной организации распределения регистров, а также для кодогенерации.\n3. Обзор работ\nСуществуют два подхода для сбора информации о профиле программы -динамический и статический. Статический метод основан на алгоритмическом анализе и часто используется во время компиляции программы для эффективной реализации той или иной оптимизации. Например, оценка приблизительного количества выполнения функций или циклов позволяет более эффективно реализовать распределение регистров.\nПри использовании динамического метода, информация собирается во время выполнения программы. По сравнению с статическом профилированием, динамический метод позволяет собирать более точную информацию. Существует два способа получения статистики во время исполнения программы: инструментировать ее, - то есть вставлять счетчики в код при генерации или еще в промежуточное представление программы, - либо собирать выборочным профилировщиком аппаратных прерываний. В первом случае код увеличивается в размерах и сильно замедляется работа программы [6]. Во-втором же случае влияние на время выполнения гораздо меньше. Профилирование поддерживается во многих индустриальных компиляторах. Например, в компиляторной инфраструктуре LLVM [7] реализованы три метода профилирования: на уровне функций, базовых блоков или ребер в промежуточном представлении. Все методы могут быть использованы независимо друг от друга. Компилятор GCC [8] также поддерживает несколько разных методов профилирования.\nМного новых работ посвящены к улучшению производительности программ, написанных на языках с динамическими типами. В работах [9] [10] [11] описывается методы предварительной оптимизации программ на языке JavaScript. В работе [12] описываются методы компиляции программ с динамическими типами в статическое внутренне представление LLVM. Данный метод позволяет применить реализованные в LLVM оптимизации к программам, написанным на языке JavaScript. В работах [13] [14] [15] [16] [17] приведены разные методы оптимизации динамических многоуровневых компиляторов.\nВ данной работе описываются особенности оптимизации многоуровневых динамических компиляторов с использованием информации о статистке выполнения программы на примере компилятора V8.\n4. Особенности использования профиля выполнения программы в многоуровневых динамических компиляторах\nВ целях улучшения производительности многоуровневых JIT-компиляторов важно обеспечить, чтобы часто выполняемые участки программы как можно больше времени выполнялась на оптимизирующих уровнях компиляции. Для обоснования этого утверждения приведем анализ сравнения времени выполнения разных уровней компилятора V8 на нескольких тестовых наборах языка JavaScript (рис 2а и 2б).\nПроизводительность компилятора V8 на наборе\nv8-v7\n1,2 1 0,8 0,6 0,4 0,2 0\nРис 2а. Сравнение производительности уровней V8 на наборе v8-v7. Единицей времени\nвыступает время выполнения компилятора Full-Codegen Fig 2a. Comparing performance of the V8 levels on the benchmark v8-v7. The unit of time is duration of run-time of the Full-Codegen compiler\nПроизводительность компилятора V8 на наборе SunSpider\nТолько Full-Codegen\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1\n0,8\n0,6\nFull-Codegen + Crankshaft\n0,4\n0,2\n0\nРис 2б. Сравнение производительности уровней V8 на наборе SunSpider. Единицей времени выступает время выполнения компилятора Full-Codegen. Fig 2b. Comparing performance of the V8 levels on the benchmark of SunSpider. The unit of time is duration of run-time of the Full-Codegen compiler\nИз анализа сравнения видно, что производительность оптимизирующих уровней компиляции в среднем 2-2.5 больше, нежели производительность неоптимизирующих уровней. Поэтому, в целях улучшения производительности компилятора важно добиться, чтобы горячие участки кода как можно больше времени выполнялись именно на оптимизирующих уровнях компиляции. Одним способом достижения этой цели является как можно быстрое переключение выполнения таких участков на оптимизирующие уровни компиляции.\nДругим способом является устранение обратных переходов на неоптимизирующие уровни выполнения и последующих перекомпиляций функций.\n4.1 Использование профиля выполнения программы для обеспечения более быстрого перехода на оптимизирующие уровни компиляции\nБолее быстрого перехода на оптимизирующие уровни выполнения можно достичь путем внедрения в компилятор механизмов, позволяющих собирать и сохранять информацию о горячих участках кода. Многоуровневая архитектура компилятора V8 уже содержит механизмы для нахождения часто выполняемых участков кода, следовательно, сбор информации не добавляет никаких дополнительных накладных расходов. В компилятор V8 был добавлен модуль для сохранения этой информации. Далее, при последующих запусках программы сохраненная информация о горячих участках кода\nпозволяет сразу перевести выполнение таких участков на оптимизирующие уровни компиляции. При этом необходимо учитывать тот факт, что на первых уровнях выполнения собирается необходимая для спекулятивной компиляции информация о типах и объектах программы, что ограничивает немедленный переход на оптимизирующие уровни выполнения.\nБыла реализована новая эвристика для переключения выполнения горячих функций на оптимизирующие уровни компиляции с учетом сохраненной информации. Переход осуществляется, как только будет собран необходимый процент информации о типах (25% по умолчанию) для функции. Этот метод особенно эффективен для программ с небольшим временем выполнения. Для таких программ часто характерна следующая ситуация: функция помечается как кандидат для выполнения на оптимизирующем уровне. Компиляция этой функции на оптимизирующем уровне производится параллельно с выполнением программы на нижних уровнях, и программа заканчивается раньше, чем начинается выполнение оптимизированной версии функции. Реализованный метод позволяет переключать выполнение на оптимизирующий уровень намного раньше, что приводит к значительному росту производительности для программ с небольшим временем выполнения.\n4.2\tИспользование профиля программы для устранения обратных переходов на неоптимизирующие уровни выполнения.\nИз-за динамических свойств языка JavaScript в реальных приложениях деоптимизации могут встречается часто. В компиляторе V8 при выполнении деоптимизации для функции собирается новый профиль для организации реоптимизации. Для исключения больших временных затрат на постоянную реоптимизацию кода, при множественных деоптимизаций оптимизация для данной функции запрещается. В компилятор V8 был добавлен модуль для сохранения информации о количестве и причинах деоптимизаций. При последующих запусках программы эта информация используется следующим образом:\n•\tЕсли при первом запуске программы для какой-либо функции оптимизация была запрещена из-за множественных деоптимизаций, при последующих запусках не будут предприниматься попытки для ее оптимизации.\n•\tЕсли при первом запуске программы в какой-либо функции происходит деоптимизация из-за недостаточной информации о типах, переключение выполнения этой функции на оптимизирующие уровни откладывается, что позволяет собрать более полную информацию о типах (50% по умолчанию).\n4.3\tИспользование профиля программы для выбора оптимального набора оптимизаций.\nНа разных приложениях эффект конкретных оптимизаций на сгенерированный машинный код может быть незначительным. При динамической компиляции такие оптимизации могут стать причиной ухудшения производительности для конкретных приложений. Приведем анализ эффективности реализованных в компиляторе V8 оптимизаций на тестовом наборе v8-v7 и на реальном примере использования сайта Gmail. Более подробный анализ и тестирования на других приложениях (Facebook, Wordpress) можно найти в [18]. Для имитации реального использования сайта Gmail была использована платформа Sikuli UI [19], которая позволяет автоматизировать использование графического интерфейса. Сценарий использования сайта Gmail следующий: программа авторизуется в Gmail используя данные тестового пользователя. Затем загружаются все входящие сообщения и производится поиск нескольких сообщений. В конце программа выходит из системы. Запуск тестового набора v8-v7 также был произведен из браузера с помощью Sikuli Ш.Для оценки влияния каждой оптимизации на производительность в целом были проведены тестирования с выключением около одиннадцати оптимизаций: нумерация глобальных значений, вынос инвариантного кода за цикл, анализ диапазонов, удаление лишних Ф-функций, встраивание вызовов функций, встраивание полиморфных вызовов функций и с последовательным включением каждой из этих оптимизаций. Результаты тестирований на наборе v8-v7 и сайте Gmail приведены на Рис. 3а и 3б.\n1,2 1 0,8 0,6 0,4 0,2 0\nПроизводительность компилятора V8 на _наборе v8-v7\n2% 0% 2% 2% 0% -1%\n4 о.\nV\n\\\n\\\n\\ \\\nРис 3а. Относительное время выполнения V8 на наборе v8-v7. Единицей времени\nвыступает время выполнения компилятора с выключенными оптимизациями Fig 3a. Relative duration of the V8 run-time on the benchmark v8-v7. The unit of time is duration of the compiler run-time with turned-off optimizations\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1,2 1 0,8 0,6 0,4 0,2 0\nРис 3б. Относительное время выполнения V8 при использовании сайта gmail. Единицей времени выступает время выполнения компилятора с выключенными оптимизациями Fig 3b. Relative duration of the V8 run-time with the gmail site. The unit of time is duration of the compiler run-time with turned-off optimizations\nКак видно из результатов, на наборе v8-v7 большинство оптимизаций имеет положительный эффект на время выполнения, однако оптимизация \"встраивание полиморфных вызовов\" в целом ухудшает производительность на 1%. На реальном примере использования сайта Gmail, наоборот, большинство протестированных оптимизаций имеет негативный эффект на производительность. Оптимизация глобальной нумерации значений для удаления общих подвыражений ухудшает производительность на 2%, а встраивание полиморфных вызовов на 5%.\nСохраненная информация о эффективности каждой оптимизации позволяет выбрать оптимальный набор оптимизаций для каждого приложения. В компиляторе V8 были добавлены соответствующие счетчики для оценки эффективности каждой оптимизации (вычисляется количество удаленных/измененных оптимизацией инструкций, а также количество итераций циклов функций). Кроме того, был реализован модуль для сохранения собранной информации. Была добавлена поддержка для следующих оптимизаций:\n•\tНумерация глобальных значений, для удаления общих подвыражений\n•\tВынос инвариантного кода за цикл\n•\tУдаление мертвого кода\n•\tАнализ диапазонов\nПроизводительность компилятора V8 во время использования сайта gmail\n-2%\t1%\t1% -2%\t-3% -5%\n•\tУдаление избыточных проверок\n•\tУдаление избыточных Ф-функций\n•\tУдаление избыточных обращений к памяти (load/store elimination)\n•\tEscape анализ, для оптимизации хранения объектов в куче\nДля оценки необходимости использования той или иной оптимизации была реализована метрика, которая зависит от нескольких параметров. Эффективность оптимизации вычисляется следующей формулой:\nE = Ii (FC * LCi), i = 0 , 1, ... n\nГде n количество удаленных (измененных) оптимизацией инструкций, FC — количество выполнения функции, LCi — количество итераций цикла, в котором находилась удаленная (измененная) инструкция. Вычисляется также примерное количество шагов, необходимых для выполнения каждой из этих оптимизаций (OptSteps). Если для данной оптимизации E < OptSteps, она отключается при последующих запусках программы. Например, оптимизация \"удаление мертвого кода\", выполняется за два прохода по всем инструкциям графа управления. При первом проходе отмечаются все живые переменные. При этом для каждой инструкции проверяются несколько условий. При первом проходе выполняются приблизительно 2*m шагов, где m количество инструкций в графе. Во время второго прохода непомеченные инструкции удаляются (не больше чем за m шагов). Сама оптимизация вызывается два раза для каждой функции. Значение OptSteps для этой оптимизации равно m*2*(2+1) = 6*m, где m количество инструкций в графе потока управления. Такая оценка была реализована для каждой из рассматриваемых оптимизаций. Важно также отметить, что выполнение некоторых оптимизаций может повлиять на эффективность других. Например, анализ диапазонов используется при удалении избыточных проверок переполнения. В таких случаях, для оценки эффективности также учитывается возможный эффект на другие оптимизации.\nКоличество выполнений циклов и функций используется также для выбора методов распределения регистров. Так для функций с коротким временем выполнения используется обыкновенный алгоритм линейного сканирования [20], а для больших функций с тяжелыми циклами используется жадный алгоритм линейного сканирования [21].\n5. Результаты\nИспользование информации о часто выполняемых участках кода и количестве деоптимизаций не добавляет дополнительных накладных расходов при сборе информации, так как инструментарии уже были реализованы в компиляторе V8. Внедрение инструментарий для вычисления количества итераций циклов\nи эффективности оптимизаций замедляет набор SunSpider всего на 5%. Набор Octane замедляется на 23%, а Kraken на 25%.\nИспользование собранной информации позволяет достичь существенного роста производительности при последующих запусках программы. Организация более быстрого перехода на оптимизирующие уровни выполнения, а также реализация метода выбора оптимального набора оптимизаций для конкретных приложений позволило ускорить множество тестов из наборов SunSpider и Kraken. В среднем тестовый набор SunSpider стал выполняться на 11% быстрее, ускорение конкретных тестов составляет 50% (Таблица 1). Тестовый набор Kraken в среднем ускорился на 4%. На наборе Octane тесты deltablue и crypto ускорились на 7%, тест richards на 5% а gameboy на 3%. Пример использования сайта gmail ускорился на 1%.\nТаблица 1. Производительности набора SunSpider с использованием оптимизаций на основе профиля программы (меньше - лучше)\nTable 1. Performance of the SunSpider benchmark using optimizations based on the profile of the program (less - better)\nТест\tПроизводительность\tПроизводительность V8 с\tУлучшение,\nV8, мс\tреализованными улучшениями, мс\t%\n3d-cube\t48.8\t46\t5.73\n3d-morph\t51.7\t52.4\t-\n3d-raytrace\t52.4\t53\t-1.1\naccess-binary-tree\t7.1\t7.1\t-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\naccess-fannkuch\t20.7\t20.7\t-\naccess-nbody\t13.5\t13.1\t3\naccess-nsieve\t8.8\t7.2\t18\nbitops-3bit-in-byte\t4.0\t3.6\t10\nbitops-bits-in-byte\t11.8\t11.2\t5\nbitops-bitwise-and\t8.1\t8.1\t-\nbitops-nsieve-bits\t11.9\t12\t-\ncontrol-flow-recursive\t6.0\t6.0\t-\ncrypto-aes\t26.2\t23.6\t9.9\ncrypto-md5\t17.8\t17.5\t1.7\ncrypto-shal\t17.8\t19.0\t-6.7\ndate-format-tofte\t48.7\t49.3\t-1.2\ndate-format-xparb\t70.1\t71.0\t-1.2\nmath-cordic\t13.4\t13.1\t2.2\nmath-partial-sum\t33.0\t32.7\t-\nmath-spectral-norm\t11\t7.2\t34\nregexp-dna\t32.2\t32.2\t-\nstring-base64\t27.0\t26.8\t-\nstring-fasta\t70.7\t35.4\t50\nstring-tagcloud\t101.0\t101.0\t-\nstring-unpack-code\t91.4\t93.1\t-1.8\nstring-validate-input\t40.6\t30.1\t25.8\nСуммарное время\t680.3\t602.2\t11.4\n6. Заключение\nВ рамках данной работы был реализован метод оптимизации многоуровневого JIT-компилятора V8, основанный на статистике выполнения программы. При этом по возможности были использованы реализованные в компиляторе инструментарии, что позволило минимизировать накладные расходы при сборе необходимой информации. Собранная статистика выполнения программы позволяет значительно улучшить производительность компилятора V8.\nСписок литературы\n[1].\tСтраница платфомы Node.js: nodejs.org.\n[2].\tСтраница платформы Tizen: tizen.org.\n[3].\tСтраница платофомы FirefoxOS: www.mozilla.org.\n[4].\tСтраница компилятора V8: https://developers.google.com/v8/.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[5].\tS. J. Fink и F. Qian, «Design, Implementation, and Evaluation of Adaptive Recompilation with on-stack replacement» Proceedings of the IEEE, pp. 241-252, 2003.\n[6].\tT. Ball и J. R. Larus, «Thomas Ball and James R. Larus. Optimally profiling and tracing programs» In POPL '92: Proceedings of the 19th ACM SIGPLAN-SIGACT\nsymposium on Principles, pp. 59-70, 1992.\n[7].\tСтраница инфраструктуры LLVM: LLVM.org.\n[8].\tСтраница компилятора GCC: https://gcc.gnu.org/.\n[9].\tR. Zhuykov, V. Vardanyan, D. Melnik, R. Buchatskiy и E. Sharygin, «Augmenting JavaScript JIT with Ahead-of-Time Compilation,» In Proceedings of IEEE,Computer Science and Information Technologies, pp. 116-120, 2015.\n[10].\tR. Zhuykov, V. Vardanyan, D. Melnik, R. Buchatskiy и E. Sharygin, «Augmenting JavaScript JIT with Ahead-of-Time Compilation,» 10th International Conference on Computer Science and Information Technologies, pp. 236-240, 2015.\n[11].\tS. Jeon и J. Choi, «Reuse of JIT compiled code based on binary code patching in JavaScript engine,» J. Web Eng, pp. 337-349, 2012.\n[12].\tВ. Варданян, В. Иванишин, С. Асрян, А. Хачатрян и Д. Акопян, «Динамическая компиляция программ на языке JavaScript в статически типизированное внутреннее представление LLVM». Труды Института системного программирования РАН, том 27 (выпуск 6), 2015 г., стр. 33-48. DOI: 10.15514/ISPRAS-2015-27(6)-3\n[13].\tV. Vardanyan, «Optimizations of JavaScript programs,» GSPI's scientific journal 2014, pp. 122-128.\n[14].\tР. Жуйков, Д. Мельник, Р. Бучацкий, В. Варданян, В. Иванишин и Е. Шарыгин, «Методы динамической и предварительной оптимизации программ на языке JavaScript,» Труды Института системного программирования РАН, том 26 (выпуск 1), 2014 г., стр. 297-314. DOI: 10.15514/ISPRAS-2014-26(1)-10\n[15].\tS.-W. Lee и S.-M. Moon, «Selective just-in-time compilation for client-side mobile javascript engine,» Proceedings of the 14th international conference on Compilers, architectures and synthesis for embedded systems, pp. 5-14, 2011.\n[16].\tS.-W. Lee, S.-M. Moon, W.-K. Jung, J.-S. Oh и H.-S. Oh, «Code size and performance optimization for mobile JavaScript just-in-time compiler,» Proceedings of the 2010 Workshop on Interaction between Compilers and Computer Architecture, 2010.\n[17].\tV. Vardanyan, S. Asryan и R. Buchatskiy, «Integrated register rematerialization in JavaScript V8 JIT compiler,» 10th International Conference on Computer Science and Information Technologies, pp. 240-244, 2015.\n[18].\tАнализ эффективности оптимизаций в компиляторе V8: http://www.cs.cmu.edu/~ishafer/compilers/.\n[19].\tСтраница платформы Sikuli UI: http://www.sikuli.org/.\n[20].\tM. Poletto и V. Sarkar, «Linear scan register allocaton» ACM Transactions on Programming Languages and Systems, pp. 895-913 , 1999.\n[21].\tОписаные жадного алгоритма линейного сканирования: http://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html.\nProfile-based optimizations for JavaScript programs\nV. Vardanyan <vaag@ispras.ru>, Yerevan State University Alex Manoogian, 1, 0025, Yerevan, Republic of Armenia\nAbstract. In recent years, JavaScript has become one of the most popular programming languages on the web. Many massive applications are written using JavaScript, such as Gmail, Google docs, etc. JavaScript is also used in the Node.js — server-side web application developing platform. Moreover, JavaScript is the main language for developing applications on some operating systems for mobile and media devices. Examples of such systems are Tizen and FirefoxOS. Due to increasing popularity of JavaScript many big companies produced and continue to develop their own dynamic compilers for this language. JIT compilation makes it possible to implement many well-known classic optimizations to improve programs performance. To maintain a trade-off between quick startup and doing sophisticated optimizations, JavaScript engines usually use multiple tiers for compiling hot functions: lower tier JITs generate less efficient code, but can start almost immediately (e.g., even with interpretation), while higher tier JITs aim at generating very effective code for hot places, but at the cost of long compilation time. So even highly optimized JavaScript execution engines require some time to \"warm-up\" before reaching their peak performance. This work is dedicated to the performance improvement of modern dynamic multitier JIT compilers by designing and implementing profile-based optimizations in JavaScript V8 JIT compiler.\nKeywords: JavaScript, V8, program optimization, dynamic compilation. DOI: 10.15514/ISPRAS-2016-28(1)-1\nFor citation: V. Vardanyan. Profile-based optimizations for JavaScript programs. Trudy ISP RAN/Proc. ISP RAS, vol. 28, issue 1, 2016, pp. 5-20 (in Russian). DOI: 10.15514/ISPRAS-2016-28(1)-1\nReferences\n[1].\tNode.js website: nodejs.org.\n[2].\tTizen website: tizen.org.\n[3].\tFirefoxOS website: www.mozilla.org.\n[4].\tV8 compiler website: https://developers.google.com/v8/.\n[5].\tS. J. Fink h F. Qian, «Design, Implementation, and Evaluation of Adaptive Recompilation with on-stack replacement» Proceedings of the IEEE, pp. 241-252, 2003.\n[6].\tT. Ball h J. R. Larus, «Thomas Ball and James R. Larus. Optimally profiling and tracing programs» In POPL '92: Proceedings of the 19th ACM SIGPLAN-SIGACT symposium on Principles, pp. 59-70, 1992.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[7].\tLLVM website: http://LLVM.org.\n[8].\tGCC website: https://gcc.gnu.org/\n[9].\tR. Zhuykov, V. Vardanyan, D. Melnik, R. Buchatskiy h E. Sharygin, «Augmenting JavaScript JIT with Ahead-of-Time Compilation,» In Proceedings of IEEE,Computer Science and Information Technologies, pp. 116-120, 2015.\n[10]. R. Zhuykov, V. Vardanyan, D. Melnik, R. Buchatskiy h E. Sharygin, «Augmenting JavaScript JIT with Ahead-of-Time Compilation,» 10th International Conference on\nComputer Science and Information Technologies, pp. 236-240, 2015.\n[11].\tS. Jeon и J. Choi, «Reuse of JIT compiled code based on binary code patching in JavaScript engine,» J. Web Eng, pp. 337-349, 2012.\n[12].\tV. Vardanyan, V. Ivanishin, S. Asryan, A. Khachatryan, J. Hakobyan, «Dinamicheskaja kompiljacija programm na jazyke JavaScript v staticheski tipizirovannoe vnutrennee predstavlenie LLVM» («Dynamic Compilation of JavaScript Programs to the Statically Typed LLVM Intermediate Representation»). Trudy ISP RАN [Proceedings of ISP RAS], Volume 27 (Issue 6), 2015. pp. 33-48 (in Russian). DOI: 10.15514/ISPRAS-2015-27(6)-3\n[13].\tV. Vardanyan, «Optimizations of JavaScript programs,» GSPI's scientific journal 2014, pp. 122-128.\n[14].\tR. Zhuykov, D. Melnik, R. Buchatskiy, V. Vardanyan, V. Ivanishin и E. Sharygin, «Metody dinamicheskoj i predvaritel\"'noj optimizacii programm na jazyke JavaScript» («Dynamic and ahead of time optimization for JavaScript programs») Trudy ISP RАN [Proceedings of ISP RAS], Volume 26, (Issue 1), 2014. pp. 297-314 (in Russian). DOI: 10.15514/ISPRAS-2014-26(1)-10\n[15].\tS.-W. Lee и S.-M. Moon, «Selective just-in-time compilation for client-side mobile javascript engine,» Proceedings of the 14th international conference on Compilers, architectures and synthesis for embedded systems, pp. 5-14, 2011.\n[16].\tS.-W. Lee, S.-M. Moon, W.-K. Jung, J.-S. Oh и H.-S. Oh, «Code size and performance optimization for mobile JavaScript just-in-time compiler,» Proceedings of the 2010 Workshop on Interaction between Compilers and Computer Architecture, 2010.\n[17].\tV. Vardanyan, S. Asryan и R. Buchatskiy, «Integrated register rematerialization in JavaScript V8 JIT compiler,» 10th International Conference on Computer Science and Information Technologies, pp. 240-244, 2015.\n[18].\tQuantifying Optimization Efficacy in V8 JIT compiler: http : //www.cs.cmu.edu/~ishafer/compilers/\n[19].\tSikuli UI website: http://www.sikuli.org/.\n[20].\tM. Poletto и V. Sarkar, «Linear scan register allocaton» ACM Transactions on Programming Languages and Systems, pp. 895-913 , 1999.\n[21].\tDescription of greedy linear scan algorithm: http://blog.llvm.org/2011/09/greedy-register-allocation-in-llvm-30.html\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-optimizatsii-programm-na-yazyke-javascript-osnovannye-na-statistike-vypolneniya-programmy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/approaches-to-optimizing-v8-javascript-engine",
    "slug": "approaches-to-optimizing-v8-javascript-engine",
    "title": "Approaches to optimizing v8 JavaScript engine",
    "abstract_description": "JavaScript является одним из наиболее распространенных языков программирования. Однако производительность движков JavaScript не всегда удовлетворительна. Автором разработаны подходы, позволяющие повысить производительность движка V8 на 10% на основных тестовых наборах",
    "full_text_body": "\n\n\n\n\uFEFFТруды ИСП РАН, том 27, вып. б, 2015 г..\nApproaches to optimizing V8 JavaScript\nengine\nDmitry Botcharnikov <dmitry.b@samsung.com>\nLLC Samsung R&D Institute Rus, 12, ul. Dvintsev, housing 1, office #1500, Moscow, 127018, Russian Federation\nAbstract. JavaScript is one of the most ubiquitous programming languages. Performance of JavaScript engines however is not always satisfactory. We developed approaches that increase performance of V8 engine up to 10% on major benchmark suites.\nКлючевые слова: JavaScript; optimizations; V8; common subexpression eimination\n1.\tIntroduction\nJavaScript is one of the most popular programming languages in the world [1]. Started as a simple scripting language for web browsers it now becomes language of choice for millions of engineers in the web, mobile and server-side development. However its interpretational nature doesn’t always provide adequate performance.\nTo speed up execution of JavaScript programs there were developed several optimization techniques in recent years. One example of modem high-performing JavaScript engine is a V8 engine [2] used in Google Chrome browser and node.js web server among others. This is an open source project which implemented some advanced optimization methods including Just-in-Time compilation [3], Polymorphic Inline Caches [4], optimized recompilation of hot code regions, On Stack Replacement [5] &c.\nIn previous year we were involved in project of optimizing performance of V8 JavaScript engine on major benchmark suites including Octane [6], SunSpider [7] and Kraken [8]. The project was quite time limited, however we achieved about 10% total performance improvement compared to open source version.\nThe rest of paper is organized as follow: in Section 2 there is an architectural overview of V8, in Section 3 we enumerate and reason our approaches with more detailed discussion in Sections 4, 5, and 6. We conclude in Section 7.\n2.\tV8 engine architecture\nIn contrast to other JavaScript engines V8 implements compilation to native code from the beginning. It consists of two JIT compilers: the first (called Full code generator) performs fast non-optimized compilation for every encountered\n21\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nJavaScript function, while the second one (called Crankshaft) compiles and optimizes only those functions (and loops) which already ran some amount of time and are likely to run further. •\nFig. 1 V8 Engine Architecture The overall work of V8 engine is as follows (Fig. 1):\n•\tEvery new script is preliminary scanned to separate each individual function.\n•\tThe function that should run is compiled into Abstract Syntax Tree (AST) form.\n•\tAST is compiled into native machine code instrumented with counters for function calls and loop back edges.\n•\tAlso on method call sites V8 inserts special dispatch structure called Polymorphic Inline Cache (PIC). This cache is initialized with call to generic dispatch routine. After each invocation PIC is populated with direct call to type specific receiver up to some predefined limit. In such way PICs collect runtime type information of objects.\n•\tThe result code then runs.\n•\tWhen instrumentation counters reach some predefined threshold, “hot” function or loop is selected for optimized recompilation.\n•\tFor this purpose V8 one more time recompiles selected function in AST form. But in this case it also performs optimizations.\n•\tIt compiles AST into Static Single Assignment (SSA) form (called Hydrogen) and propagates type information collected by PICs along SSA edges.\n•\tThen it performs several optimizations on this SSA form using type information.\n•\tAfter that it generates low level representation (called Lithium), does\n22\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nRegister Allocation and generates optimized native code which then runs.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nNote that V8 optimizing compiler performs much less transformational passes than common ahead-of-time compilers (e g. gee, clang/llvm). The reasons behind this we further discuss in Section 6.\n3.\tApproaches to speed up V8 engine\nTo investigate possible areas of V8 optimization we have performed V8 engine profiling on ARM platform with three different profiling tools: Perf [9], ARM Streamline [10] and Gprof [11]. Each of those has advantages and disadvantages over others but results are very close: V8 JavaScript engine has no ‘hot’ functions in itself that need to be optimized. Different methods show different functions in order of share to total execution time. This is clear evidence that individual function’s contribution is very small compared to precision of measurement. Thus optimization of individual functions can’t achieve much increase in performance.\nIn following table object identified as perf-2549.map is a code generated by V8 engine.\nOverhe ad\tShared Object\tSymbol\n65.11%\tperf-2549.map\t0x5aba4000\n0.76%\td8\tv8: internal:: Scanner:: ScanldentifierOrKeywordO\n0.75%\td8\tv8: internal:: IncrementalMarking:: Step (int,v8: internal:: IncrementalMarking: :CompletionA ction)\n0.66%\t[kemel.kallsymsl\traw spin unlock irqrestore\n0.65%\tlibc-2.17.so\tmemchr\n0.52%\td8\tv8: internal: :Heap: :DoScavenge(v8: internal: :Object Visitor*, unsigned char*)\n0.51%\tlibc-2.17.so\t0x0004f3ac\n0.50%\td8\tint v8: internal: :FlexibleBodyVisitor<v8: internal: :New Space Scavenger, v8 \"internal:: JSObject: :BodyDescriptor, int>:: VisitSpecialized<20> (v8: internal: :Map*, v8::intemal: :HeapObiect*)\n0.44%\td8\tvoid v8: internal: :ScavengingVisitor<(v8: :intemal: :Mark sHandling)l, (v8: :intemal: :LoggingAndProfiling)0>: :EvacuateOb ject <(v8: internal: :ScavengingVisitor<(v8::intemal: :Ma rksHandling)l, (v8::intemal::LoggingAndProfiling)0>::ObjectConte\n23\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nnts)l, 4>(v8::intemal::Map*, v8: internal: :HeapObject**, v8::intemal::HeapOb)ect*, int)\n0.43%\td8\tv8: :intemal:: ScavengeWeakObjectRetainer: :Retain As(v8: internal: :Object*)\n0.43%\td8\tv8: :intemal:: Scanner:: Scan()\n0.37%\t|kcrncl.kallsyrns|\tmemzero\nFig. 2 Several top entries from detailed profile of Octane benchmark by VS on Linux.\nWe have decided to focus on following approaches to achieve the project’s goal:\n•\tOptimized build of V8 itself, because total running time is shared between compilation and execution.\n•\tTuning of V8 runtime options which default values may not be always optimal.\n•\tImplementation of additional scalar optimizations.\nAll of these approaches have made contribution to final result.\n4.\tOptimized build\nWe have decided to investigate Link Time Optimization [12] and platform options tuning [13]. The latter gave us small outcome (-0.5%) while former have decreased performance.\nWe have made investigation on Amdale ARM (Samsung Exynos 5250 CPU) development board running Linux with Linaro gcc 4.7 toolchain for the first investigation and the same board running Android 4.4 with Android NDK 9 Linaro toolchain for the second one.\nWe have specified the following platform options:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\t-03 for highest optimization level\n•\t-mcpu=cortex-al5 for target CPU.\n24\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nOctane\n6000 5000 4000 3000 2000 1000 0\nFig. 3 Effect of LTO\nOctane\n5990 5985\n5980 5975 5970 5965 5960 5955 5950\nFig. 4 Effect of platform options tuning\n5.\tRuntime parameters tuning\nV8 engine has quite large set of parameters which guides JIT compilation and execution of JavaScript programs. We have found that their default values are not adequate in all cases, e g. we have found that disabling lazy compilation can substantially improve performance.\ndefault\tLTO\n25\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nAs noted in Section 2 V8 performs preliminary parsing of each new script source to separate each individual function. However when we specify parameter ‘-no-lazy’, it instead compiles all functions at once in given script.\nEnabling this mode has various impacts on different benchmark. We can see big degradation of CodeLoad test score by about 40% while in the same time huge increase 2.5 times of MandreelLatency test score. The overall increase about 5% was also reproduced on Galaxy Note 3 devices running Android 4.4.\n16000\n14000 -12000 -10000 -8000 -6000 -4000 -2000 -\ntT\nП 11111 11111\n11 I 11 Ш1 I П M II I I I 11 I 11 П I I 11 I I 11 I I I\n.1\nЛ\nu\tJU\tX\tW\tW\nro\t>-\tLU\tE\n=■-\tО\ttL&\t—\tQJ\n1c\nfo- 57 *\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nCC T-\nVI <s> £ В £\ni—i\tfc\nu\tZ\t£\t^\ta\t—\nZ.\tC\t-£\tО\tЖ\t«\n-c\tW\tQJ\t_|\tо\nс\t1с\t£\tV\tСО\nJ2\t^\tда\tл\n£\t«и\tО\tS\n'Ll\n■\tLazy\n■\tEage г\nFig. 5 Effect of eager compilation on Octane benchmarks.\n6.\tScalar optimizations\nWe have tried to implement several well-known scalar optimizations in V8 however with varying success. In contrast to ahead of time compilers for classic imperative languages such as C/C++, Pascal, Ada &c., just-in-time compiler has to share time among analysis, optimization and execution. That’s why sophisticated optimizations which require thorough analysis don’t necessarily lead to increasing performance in such case.\nAs noted in Section 2 the V8 engine performs optimized compilation of ‘hot’ regions similar to off-line compiles did. At this stage PICs already collected type information so we can apply well-known scalar optimization techniques in AST and SSA representations.\nThe platform used in benchmark was Samsung Galaxy Note 3 with Qualcomm Snapdragon (N9005) CPU. Devices run Android 4.4.2 (KitKat). Octane benchmark suite used in tests was Version 9 download from corresponding repository. For development we use Android NDK r9c on Linux x86_64 Ububtu 12.04 TLS\n26\nТруды ИСП РАН, том 27, вып. б, 2015 г..\n6.1\tAlgebraic Simplification\nThe Algebraic Simplification uses algebraic identities like a - 0 = a to simplify expressions. This transformation was implemented in V8 parser when it builds AST representation for Crankshaft.\nAs was noted above at this point we have collected type information so we can safely optimize algebraic expression given that operands are numeric.\nDespite the large amount of optimized expressions in Octane benchmark suite the final result was very small.\nFig. 6 Effect of Algebraic Expression Simplification\n6.2\tCommon Subexpression Elimination\nV8 engine already has implemented Global Value Numbering optimization which eliminates redundant code. However there are related but not identical optimizations such as Constant Propagation and Common Subexpression Elimination. For their differences see [14].\nBecause V8 already has some kind of Constant Propagation we decided to implement Global Common Subexpression Elimination in SSA form.\nWe have found that running this optimization before and after Global Value Numbering gives net effect about 2% performance improvement.\n27\nTrudy ISP RAN [The Proceedings of ISP RAS],vol. 27, issue 6, 2015.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n14000 -12000 -10000 -8000 -6000 -4000 -2000 -\nlit\nf\ninn\n11111 hi 11 ■ m 11\niiiiiniiiiiiiiiii\nI original I gcse\nCD\nВ ij\n>- й Q — О ro <M —\nя * 141\n16\ni—■\tfi5\n(C _l > OJ\n£ —\na\nо\nCD\nFzg. 7 Effect of Global Common Subexpression Elimination\n6.3\tFast call frame for ARM\nIn our investigations we also have found interesting instruction sequence that speeds up call frame management on original ARMv7 CPUs.\nTo support EABI [15] compiler typically generate the following prologue and epilogue in each function.\nPrologue:\nfunc:\nstmdb sp!, {r4-r5, fp, lr} add\tfp, sp, #N\nEpilogue:\nmov sp, fp\nIdmia sp!, {r4-r5, fp, lr}\nbx\tlr\nWe have found however that the following sequences of instruction while provide the same functionality are executed faster on ARMv7 CPUs:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nPrologue:\nfunc:\nsub sp, sp, #16 stm sp, {r4,r5,fp, lr} add\tfp, sp, #N\nEpilogue:\nmov\tsp, fp\n28\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nIdm sp, {r4, r5, fp, Ir} add sp, sp, #16 bx Ir\nThe results on synthetic benchmark (~2 million calls, sec):\nIt is interesting however, that such results are not reproduced on Qualcomm Snapdragon 800 CPU.\n7.\tConclusion\nWe have found that even in the presence of type information in V8 optimizing compiler application of traditional scalar optimizations in JavaScript gives diminishing returns.\nOn the other hand successful application of optimized build gives us evidence that there is a space for optimizations in JavaScript engines.\nReferences\n[ 1 ]. TIOBE Index for October 2015\n(http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html).\n[2]\t. Chrome V8, September 10, 2015 (https://developers.google.com/v8/7hUen)\n[3]\t. Just-in-time compilation, Wikipedia, October 17,2015\n(https://en.wikipedia.org/wiki/Just-in-time_compilation)\n[4]\t. Holzle U., Chambers C., Ungar D. Optimizing Dynamically-Typed Object-Oriented\nLanguages With Polymorphic Inline Caches, ECOOP ‘91 proceedings, Springer Verlag Lecture Notes in Computer Science 512, July, 1991\n[5]\t. Wingo A., On-stack replacement in V8, June 20,2011\n(https://wingolog.org/archives/2011/06/20/on-stack-replacement-in-v8)\n[6]\t. Octane 2.0 (https://chromium.github.io/octane)\n29\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\n[7]\t. SunSpider 1.0.2 JavaScript Benchmark\n(https: //www. webkit.org/perf/ sunspider/ sunspider. html)\n[8]\t. Kraken JavaScript Benchmark (version 1.1) (http://krakenbenchmark.mozilla.org)\n[9]\t. perf (Linux), Wikipedia, (https://en.wikipedia.org/wiki/Perf_%28Linux%29)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[10]\t. Streamline Performance Analyzer, (http://ds.arm.com/ds-5/optimize)\n[11]\t. Gprof, Wikipedia, (http://en.wikipedia.org/wiki/Gprol)\n[12]\t. Interprocedural optimization, Wikipedia\n(https://en.wikipedia.org/wiki/Interprocedural_optimization)\n[13]\t. GCC ARM options (https://gcc.gnu.org/onlinedocs/gcc-4.8.5/gcc/ARM-\nOptions.html#ARM-Options)\n[14]\t. Muchnik S., Advanced Compiler Design and Implementation, Morgan Kauffmann\nPublishers, San Francisco, USA, 1997, 856p\n[15]\t. Application Binary Interface for the ARM Architecture v2.09\n(http://infocenter.arm.com/help/index.jsp7topicWcom.arm.doc.ihi0036b/index.html)\n30\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nПодходы к оптимизации движка JavaScript V8\nДмитрий Бочарников <dmitrv.b(a)samsuns.com>\nМосковский исследовательский центр Самсунг,\nМосква, ул. Двинцев, 12, корп. 1\nАннотация. JavaScript является одним из наиболее распространенных языков программирования. Однако производительность движков JavaScript не всегда удовлетворительна. Автором разработаны подходы, позволяющие повысить производительность движка V8 на 10% на основных тестовых наборах\nКлючевые слова: JavaScript, оптимизации, V8, исключение общих подвыражений\nЛитература\n[ 1 ]. ТЮВЕ Index for October 2015\n(http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html).\n[2]\t. Chrome V8, September 10,2015 (https://developers.google.com/v8/?hl=en)\n[3]\t. Just-in-time compilation, Wikipedia, October 17,2015\n(https://en.wikipedia.org/wiki/Just-in-time_compilation)\n[4]\t. Holzle U., Chambers C., Ungar D. Optimizing Dynamically-Typed Object-Oriented\nLanguages With Polymorphic Inline Caches, ECOOP ‘91 proceedings, Springer Verlag Lecture Notes in Computer Science 512, July, 1991\n[5]\t. Wingo A., On-stack replacement in V8, June 20,2011\n(https://wingolog.org/archives/201 l/06/20/on-stack-replacement-in-v8)\n[6]\t. Octane 2.0 (https://chromium.github.io/octane)\n[7]\t. SunSpider 1.0.2 JavaScript Benchmark\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n(https://www.webkit.org/perf/sunspider/sunspider.html)\n[8]\t. Kraken JavaScript Benchmark (version 1.1) (http://krakenbenchmark.mozilla.org)\n[9]\t. perf(Linux), Wikipedia, (https://en.wikipedia.org/wiki/Perf_%28Linux%29)\n[10]\t. Streamline Performance Analyzer, (http://ds.arm.com/ds-5/opthnize)\n[11]\t. Gprof, Wikipedia, (http://en.wikipedia.org/wiki/Gprof)\n[12]\t. Interprocedural optimization, Wikipedia\n(https://en.wikii3edia.org/wiki/Inteq3rocedural_optimization)\n[13]\t. GCC ARM options (https://gcc.gnu.Org/onlinedocs/gcc-4.8.5/gcc/ARM-\nOptions.html#ARM-Options)\n[14]\t. Muchnik S., Advanced Compiler Design and Implementation, Morgan Kaulfmann\nPublishers, San Francisco, USA, 1997, 856p\n[15]\t. Application Binary Interface for the ARM Architecture v2.09\n(http://infocenter.ami.com/help/index.jsp?topic=/com.ami.doc.ihi0036b/index.html)\n31\n",
    "download_url": "https://cyberleninka.ru/article/n/approaches-to-optimizing-v8-javascript-engine/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/dinamicheskaya-kompilyatsiya-programm-na-yazyke-javascript-v-staticheski-tipizirovannoe-vnutrennee-predstavlenie-llvm",
    "slug": "dinamicheskaya-kompilyatsiya-programm-na-yazyke-javascript-v-staticheski-tipizirovannoe-vnutrennee-predstavlenie-llvm",
    "title": "Динамическая компиляция программ на языке JavaScript в статически типизированное внутреннее представление llvm",
    "abstract_description": "В статье предлагаются методы, делающие возможной компиляцию программ на языке JavaScript в статически типизированное представление LLVM. В работе рассматривается многоуровневый динамический компилятор языка JavaScript V8, разработанный компанией Google. Основная цель работы улучшение производительности программ на языке JavaScript. Для этого предлагается способ добавления в компилятор V8 нового уровня оптимизации, который использует инфраструктуру LLVM для генерации машинного кода. Это позволяет применять имеющиеся в LLVM оптимизации и технологии генерации машинного кода для разных архитектур к программам, написанным на JavaScript.",
    "full_text_body": "\n\n\n\n\uFEFFТруды ИСП РАН, том 27, вып. 6, 2015 г..\nДинамическая компиляция программ на языке JavaScript в статически типизированное внутреннее представление LLVM\n1 В. Г. Варданян <vaas(a).ispras. ги >\n1 В.А. Иеанишин <vlad(a)ispras.т>\n2С.А. Асрян <servozha. asrvan&vsumail.am>\n2А.А. Хачатрян <aramavis.khachatrvan(a)vsumail.am>\n2Дж.А. Акопян <dzhivan.hakobvanl(d)vsumail.am>\n'ИСП РАН, 109004, Россия, г. Москва, ул. А. Солженицына,дом 25 2ЕРУ, 0025, Армения, г. Ереван, ул. А. Манукяна, дом 1\nАннотация. В статье предлагаются методы, делающие возможной компиляцию программ на языке JavaScript в статически типизированное представление LLVM. В работе рассматривается многоуровневый динамический компилятор языка JavaScript V8, разработанный компанией Google. Основная цель работы — улучшение производительности программ на языке JavaScript. Для этого предлагается способ добавления в компилятор V8 нового уровня оптимизации, который использует инфраструктуру LLVM для генерации машинного кода. Это позволяет применять имеющиеся в LLVM оптимизации и технологии генерации машинного кода для разных архитектур к программам, написанным на JavaScript.\nКлючевые слова: JavaScript, V8, LLVM, оптимизация программ, динамическая компиляция.\n1.\tВведение\nВ настоящее время широкое распространение получили программы на нетипизированных сценарных языках. Одним из повсеместно используемых языков является JavaScript. С использованием JavaScript написаны многие крупные многофункциональные приложения, такие как Gmail, Google docs и другие. JavaScript также используется в платформе Node.js [1] для разработки веб-приложений на стороне сервера. Более того, уже имеются разработки операционных систем для телефонов, планшетов и ноутбуков, которые подразумевают использование JavaScript как одного из основных языков для создания приложений. Примерами таких систем могут быть Tizen [2] и FirefoxOS [3]. Тем самым все больше возрастают требования к\n33\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nпроизводительности программ на языке JavaScript, а также к паузам при интерактивном взаимодействии. Для обеспечения быстрого выполнения скриптов необходимо создание максимально качественного машинного кода, а также снижение затрат на все этапы оптимизации, выполняемые при компиляции программ. Для достижения этой цели многие современные ЛТ-компиляторы поддерживают разные уровни компиляции горячих участков кода. Целью данной работы является улучшение производительности программ на языке JavaScript методом добавления нового уровня оптимизации с использованием инфраструктуры LLVM [4] в компиляторе V8.\nДальнейшее изложение построено следующим образом. В главе 2 описана архитектура компилятора V8 и примененные технологии (замена на стеке, параллельное выполнение и т.д.) для построения многоуровневых ЛТ-компиляторов. В главе 3 дается обзор работ в предметной области. В главе 4 описывается схема функционирования предлагаемого решения, обеспечивающего использование биткода LLVM в качестве новой платформы для ЛТ-компиляции. В главе 5 приведены основные результаты.\n2.\tАрхитектура V8\nДля генерации машинного кода V8 использует два разных компилятора1 (Рис.\n1). Единицей компиляции является функция (метод). Первыми этапами работы V8 являются лексический и синтаксический анализ. Исходный код разбивается на лексемы, методом рекурсивного спуска строится синтаксическое дерево. После этого начинает работать компилятор первого уровня Full-Codegen. На первом уровне функция переводится в машинный код с выполнением минимального набора оптимизаций, что позволяет быстрее приступить к выполнению кода. При генерации машинного кода для каждой инструкции учитываются все возможные случаи выполнения для данной операции. На этом уровне собирается профиль программы - информация о типах полей объектов. Кроме того, базовый компилятор V8 расставляет счетчики для определения горячих участков кода (функций и циклов). Когда такой участок кода обнаруживается, компиляция переходит на второй, оптимизирующий уровень - Crankshaft. На этом уровне из абстрактного синтаксического дерева строится граф потока управления в SSA-представлении - Hydrogen. Эго внутреннее представление позволяет выполнить ряд машинно-независимых оптимизаций, таких как встраивание функций, удаление мертвого кода, удаление общих подвыражений, оптимизации циклов и т.д.\n1 На самом деле, разработчиками компилятора V8 активно разрабатывается и другой уровень оптимизации, который использует промежуточное представление “sea of nodes”, но в данной работе этот уровень не представляет интереса.\n34\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nВнутреннее\nпредставление:\n1: Full-Codegen\nнеоптимизирующий компилятор\nИнформация о профиле суровня 1\nИсходный\nкод\nф\nAST\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[ HYDROGEN |\n2: Crankshaft\tI\nоптимизирующий компилятор\tФ\nLITHIUM\nNative Code (Full-Codegen)\nt\n! о\t1 1 1\tО\n1 in\t1\t1Л\n1 я 1 171\t1 1\t7D m\n| 3 ■\tГ+ ■\t1 1 Ч<\t1 1 1 1\t><\nNative Code (Crankshaft)\nРис. 1. Многоуровневая архитектура компилятора V8\nСогласно спецификации EcmaScript [5], все числа в JavaScript являются вещественными числами двойной точности, удовлетворяющими стандарту IEEE 754. Однако Crankshaft может оптимизировать генерируемый машинный код (используя целочисленность переменных для более оптимального хранения и операций над ними) при помощи собранной на нижнем уровне информации о типах. На 64-битных архитектурах для целых чисел используется следующее кодирование: старшие 32 бита хранят число, младшие биты нулевые. Целые числа в таком представлении называются Smi (от английского small integer). В JavaScript отсутствует строгая типизация. Это значит, что в общем случае переменные ссылаются на объекты. Все указатели на объекты в V8 имеют младший бит (определяющий четность числа) установленным в единицу, что позволяет отличить Smi от других объектов. Кодирование использует тот факт, что все адреса выровнены, т.е. объектов с нечетными адресами не существует.\nCrankshaft распространяет полученную из уровня Full-Codegen информацию о профиле по всему графу. Эго позволяет генерировать машинный код спекулятивным образом, основываясь на предположении, что определенные свойства переменных (тип, значение и т.д.) останутся неизменными при следующих вызовах функции. Для этого в код вставляются необходимые проверки. Когда одна из таких проверок не выполняется, происходит переход на первый, нсоптимизированный уровень. Для переключения между разными\n35\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nуровнями компиляции используется технология замены на стеке. При этом, как описано выше, переключение может произойти как с первого уровня на второй (OSR entry), так и наоборот (OSR exit, deoptimization).\nПомимо технологии замены на стеке (OSR), для некоторых виртуальных машин [6], предусматривающих ЛТ-компиляцию, характерна еще одна особенность. В ряде случаев возникает необходимость как можно скорее остановить потоки выполнения скомпилированного кода2. Наиболее ярким и общим из таких случаев является остановка по причине начала работы сборщика мусора. Многие сборщики мусора не предусматривают параллельной работы вместе с выполнением программы, т.к. это приводило бы к конкуренции потоков за доступ к одним и тем же объектам и порождало бы недетерминированные паузы, кроме того, сборщик мусора может переносить объекты, что приводит к тому, что сам код, ссылающийся на них, должен быть изменен. Помимо приостановки выполнения, необходимо также гарантировать, что все объекты во время паузы будут находиться в целостном, согласованном состоянии.\nДля достижения этой цели компилятор V8 использует технологию safepoints. Термин safepoint означает согласованное (и известное) состояние программы, а также точку в программе, в которой такое состояние достигается. Для того, чтобы исполняемый код мог быстро достичь safepoint, они, как правило, расставляются на обратных ребрах циклов и местах вызовов функций. В этих точках выставляются проверки, в случае срабатывания которых выполнение остановится в текущем состоянии.\nПосле выполнения всех оптимизаций представление Hydrogen переводится в машинно-зависимое представление - Lithium. В отличие от представления Hydrogen, Lithium использует близкое к машинному коду трехадресное представление. Это представление используется для эффективной организации распределения регистров, а также для кодогенерации.\n3.\tОбзор работ\nС ростом популярности языка JavaScript, в течение последних лет несколько крупных корпораций, таких как Google, Mozilla и Apple, выпустили свои ЛТ-компиляторы для языка JavaScript. Разработанный компанией Apple компилятор под названием JavaScriptCore [7] также имеет многоуровневую структуру (Рис. 2.). В отличие от V8, в JavaScriptCore реализованы четыре уровня компиляции. На первом уровне работает интерпретатор LLINT. Второй уровень представляет из себя простой ЛТ-компилятор Baseline ЛТ. На этом уровне для функций генерируется машинный код с минимальными оптимизациями аналогично уровню Full-Codegen в компиляторе V8. Baseline ЛТ создает для каждой операции байткода соответствующий машинный код. В этом коде реализуются все возможные случаи для данной операции.\n2 Для JavaScript, согласно стандарту языка, может быть только один такой поток. 36\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nBaseline ЛТ, как и Full-Codegen, используется в качестве базовой версии кода для функций, которые скомпилированы с помощью оптимизирующего ЛТ-компилятора. Если оптимизированный код сталкивается со случаем, который в нем не поддерживается (например, тип или значение переменной не соответствует собранному профилю), то происходит обратная замена на стеке (OSR exit) и переход к коду Baseline ЛТ. Следующий уровень компилятора JSC представляет собой спекулятивный компилятор DFG.\nт—*г\n1: LLINT интерпретатор\nИсходный\nкод\n2: Baseline ЛТ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИнформация о профиле суровня 1-2\n3: DFG Speculative ЛТ\nВнутреннее\nпредставление:\nAST\n+\nBytecode\nч\n_ -с.\n■О\nm\n-^0-DFG Nodes\nNative Code (Baseline)\nOSREntry\nNative Code (DFG)\nOSREntry\n4: Fourth Tier LLVM JIT\nLLVM\nbitcode\nNative Code (LLVM)\n’ГЧ\nI\nI\nI\nI\nI\nPuc. 2. Многоуровневая архитектура компилятора JavaScriptCore\nНа этом уровне из промежуточного представления байт-кода строится граф потока управления программы в виде SSA-формы. Эго представление, аналогично уровню Crankshaft, делает возможным реализацию нескольких стандартных машинно-независимых оптимизаций, например, удаление общих подвыражений, удаление мертвого кода и т.д. DFG ЛТ код и Baseline ЛТ код могут сменять друг друга посредством замены на стеке (OSR). Когда код функции становится “горячим”, происходит переход на DFG ЛТ. Когда выполняется деоптимизация, происходит обратный переход [8]. В мае 2014 года был добавлен новый, четвертый уровень компиляции - FTL ЛТ, который использует инфраструктуру LLVM для генерации машинного кода. На момент начала данной работы FTL ЛТ поддерживался только для платформ Mac OS X и iOS, в данной же работе реализация выполняется в первую очередь для операционной системы GNU/Linux и процессоров х86-64. Стоит также отметить, что, несмотря на внешние сходства общей архитектуры, эти два\n37\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nкомпилятора отличаются по внутренним структурам и реализациям. В данной работе рассматриваются основные подходы, примененные нами при реализации нового уровня оптимизации с использованием инфраструктуры LLVM в динамическом компиляторе V8 языка JavaScript. Освещаются особенности архитектуры V8, существенные с точки зрения реализации нового уровня. Отметим также, что V8 существенно более популярен: JavaScriptCore используется только в веб браузере Safari, тогда как V8 встроен в браузеры Chrome, Opera, Android-браузер, Node.js и в операционную систему ChromeOS.\n4.\tКомпиляция программ на языке JavaScript в статически типизированное внутреннее представление LLVM\nПромежуточное представление оптимизирующего уровня Hydrogen содержит всю необходимую информацию для построения статически типизированного представления LLVM. Данный метод позволяет применять оптимизации, имеющиеся в статическом компиляторе LLVM, к программам, написанным на языке JavaScript. Инфраструктура LLVM предоставляет средства для динамической компиляции в виде модуля МСЛТ. В этом модуле уже задействованы все имеющиеся механизмы LLVM для кодогенерации и машинно-зависимых оптимизаций под различные платформы. Компиляция языка JavaScript в промежуточное представление LLVM была реализована путем добавления дополнительного уровня в компилятор V8 (Рис. 3.). Несмотря на то, что и Hydrogen, и LLVM-биткод используют форму SSA, есть определенные различия в интерпретации определения SSA-формы. Отличие состоит в том, что LLVM требует, чтобы базовые блоки входов Ф-функций являлись непосредственными предшественниками данного базового блока. На Рис. 4.а изображен граф потока управления, корректный с точки зрения Hydrogen и некорректный с точки зрения LLVM. На Рис. 4.6 приведен тот же граф, скорректированный под требования LLVM. Первым этапом при добавлении нового уровня в V8 была разработка и реализация алгоритма для преобразования п р о м с жу то ч н о го представления Hydrogen в корректную с точки зрения LLVM SSA-форму. При этом, чтобы использовать код, сгенерированный LLVM, в той же манере, что и код, сгенерированный самим компилятором V8, необходимо, чтобы они были совместимы на бинарном уровне. В первую очередь, это означает, что в LLVM должна быть реализована генерация кода в соответствии с соглашением о вызовах, принятом в V8 (V8 использует собственное соглашение о вызовах). Кроме того, стоит отметить, что для генерации машинного кода для некоторых инструкций необходимо вызывать вспомогательные функции. Эти вызовы, в свою очередь, реализуют собственные соглашения о вызовах. Для достижения совместимости сгенерированных кодов в компиляторе LLVM были реализованы все необходимые соглашения о вызовах.\n38\nТруды ИСП РАН, том 27, вып. б, 2015 г..\nОдним из важных компонентов для обеспечения быстродействия современных динамических компиляторов является поддержка спекулятивной компиляции.\nВнутреннее\nпредставление:\nИсходный\nкод\n1: Full-Codegen\nнеоптимизирующий компилятор\nAST\nИнформация о профиле суровня 1\nУ\nLITHIUM\n2: Crankshaft\n* HYDROGEN\nl\nLLVM\nBITCODE\nTYPES\nV.\nNative Code (Crankshaft)\n>\nOSREntry\nOSRExIt\n3: LLVM JIT\n___*_______\nNative Code (LLVM)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nt\nOSREntry ” OSRExit'\ni'\nn\ne\na\nA\nП\nО\nCL\nA\nIfi\nA\nPuc. 3. Архитектура многоуровневого компилятора V8 с добавленным модулем LLVM\nЭта технология используется, например, для частичной компиляции кода, что позволяет экономить используемую память, а также уменьшить общее время выполнения программы. Помимо этого, к спекулятивной компиляции можно отнести предсказание типов и технологию “полиморфный встроенный кэш вызовов” (англ, polymorphic inline cache) [9], применяемую для повышения производительности кода. Сложность реализации такой поддержки на уровне LLVM состоит в том, что, перекладывая генерацию кода на сторонний компилятор, мы теряем над ней контроль, что приводит к трудностям при реализации спекулятивной компиляции, а также при поддержке автоматической сборки мусора. Между тем, инфраструктура LLVM предоставляет инструменты для контроля и модификации сгенерированного компонентом МСЛТ кода. Эти инструменты были добавлены в LLVM в рамках реализации уровня FTL в компиляторе JSC. В итоге поддержка деоптимизаций (OSR exit) в новом уровне компилятора V8 была реализована с помощью встроенных в LLVM функций llvm.experimental.stackmap и llvm.experimental.patchpoint, которые позволяют модифицировать сгенерированный LLVM код на лету.\n39\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nГввк\tI\n| >Г\n___________ 1\n№1: ! ™ - P*U 1Ы [ 1. 45 ], | U, W 1 '\n'll ■ ■ i .\nW * -,.\nfar lAbel Ut?\nPuc 4. а Граф потока управления,\tРис 4. b Граф потока управления,\nнекорректный с точки зрения LLVM\tкорректный с точки зрения LLVM\nОбе эти функции во время компиляции представления LLVM в машинный код инициируют создание специальной секции данных, содержащей структуру Stack Мар [10]. В этой структуре сохраняется относительное смещение от начала функции в машинном коде, куда попадает вызов stackmap/patchpoint, а также местонахождение (слот стека, имя регистра, константа и т.п.) всех значений, переданных этим функциям в качестве параметров. Для поддержки деоптимизаций в месте, где происходит передача управления виртуальной машине, вставляется вызов stackmap. В качестве аргументов передаются значения, необходимые для продолжения выполнения на уровне Full-Codegen. Вычисление этих значений происходит с помощью уже имеющегося в Crankshaft механизма симуляции состояния стековой машины (которую реализует Full-Codegen).\nОтдельное внимание следует уделить реализации механизма safepoint (см. главу 2). По сути, реализация safepoint во многом аналогична реализации деоптимизации с помощью llvm.experimental.stackmap. Однако определение значений, информация о местоположении которых после генерации кода для нас важна, отличается. Для точки safepoint это все живые в этой точке значения, являющиеся указателями на объекты в динамической памяти. Когда сборщик мусора V8 совершает обход указателей, он учитывает объекты, ассоциированные с safepoint, на котором приостановлено выполнение, как живые. Без правильно сформированных сущностей safepoint, занимаемая\n40\nТруды ИСП РАН, том 27, вып. 6, 2015 г.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nэтими объектами память могла бы быть освобождена, что привело бы к некорректному поведению. Для получения информации об интервалах жизни переменных (LLVM-значений), накрывающих определенную точку, были задействованы анализирующие проходы, уже реализованные в LLVM [11]. Кроме того, соответствующие преобразующие проходы LLVM были использованы для автоматической расстановки safepoints. А для генерации Stack Мар для точек safepoint применена функция llvm experimental.gc.statepomt [12].\nФункции llvm.experimental.stackmap/patchpoint также используются для поддержки возможности перемещения объектов сборщиком мусора V8. Сгенерированный код может содержать абсолютные адреса объектов. При перемещении объектов необходимо заменить их старые адреса на новые. Кроме того, сгенерированный машинный код находится в куче и интерпретируется компилятором V8 как обыкновенный объект. Следовательно, сборщик мусора может передвигать сгенерированный код в процессе своей работы. Этот перемещаемый код вызывается по смещению из генерируемого LLVM кода. Для реализации такой поддержки используется функция llvm.experimental.patchpoint, которая помимо тех же параметров, что и 11 v m. cxpcri me ntal. stack map, принимает также вызываемую функцию. Помимо создания Stack Мар, при компиляции llvm.experimental.patchpoint в генерируемый код вставляется вызов этой функции в соответствии с заданным соглашением о вызовах. Благодаря Stack Мар, позже сам вызываемый объект можно будет подменить.\nДругим важным аспектом при проектировании многоуровневых ЛТ-компиляторов является поддержка замены исполняемого кода на оптимизированный код для горячих функций. В простом случае, когда функция имеет короткое время выполнения, переход осуществляется путем замены ее адреса на адрес оптимизированного кода во время следующих вызовов функции. (Это возможно, так как сгенерированные коды реализуют одинаковый бинарный интерфейс.) Однако в случае, если функция содержит цикл или несколько циклов с большим количеством итераций, появляется необходимость в организации перехода на оптимизирующий уровень во время выполнения функции. Такой переход между уровнями Full-Codegen и Crankshaft осуществляется путем простого безусловного перехода на начало соответствующего цикла в оптимизированном коде (Рис. 5). Так как управление передается не на начало функции, при переходе на новый код также выполняются определенные действия для приспособления стека. Например, необходимо уменьшить значение указателя стека на количество локальных переменных, которые будут храниться в стеке в оптимизированном коде. При этом необходимо учитывать, что прежний уровень, в свою очередь, уже уменьшил это значение на количество своих локальных переменных. Основная проблема такого подхода при переходе на LLVM код заключается в том, что LLVM подразумевает, что каждая функция может иметь только одну точку входа.\n41\nTrudy ISP RAN [The Proceedings of ISP RAS],vol. 27, issue 6, 2015.\nPuc. 5. Схема перехода между компиляторами Full-Codegen и Crankshaft\nНарушение этого инварианта может привести к сильному ограничению выполняемых в LLVM оптимизаций или даже к неправильной работе программы. Одно решение этой проблемы, использующееся в компиляторе JSC - это создание копий функции для каждого возможного входа. При этом все аргументы и локальные переменные сохраняются в глобальном буфере, а переход на уровень LLVM осуществляется путем вызова соответствующей функции. Явным недостатком такого подхода является более длительное время компиляции из-за создания копий функции. Нами был разработан и реализован другой метод, который позволяет осуществить переход во время выполнения на LLVM-код без создания дополнительных копий функции. При реализации такого подхода основная проблема состоит в приспособлении стека, так как при использовании стороннего компилятора LLVM нет возможности выяснить, какое количество локальных переменных будет храниться на стеке (эта информация становится доступна гораздо позже, при распределении регистров LLVM). Для решения проблемы при переходе на оптимизирующий код во время выполнения цикла точка входа была перемещена в пролог кода функции, где значение указателя стека уменьшается на количество локальных переменных, хранящихся в стеке. После этого с помощью дополнительного аргумента решается, откуда именно будет выполняться функция.\n42\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nРис. 6. Схема перехода между компиляторами Full-Codegen и LL VM\nЕсли управление перешло на LLVM код из цикла, то необходимо выполнить дополнительное приспособление стека. В частности, надо учитывать тот факт, что прежний уровень мог, в свою очередь, уменьшить значение указателя стека (Рис. 6.). При таком подходе LLVM функция также может содержать две точки входа, но, в отличие от уровня Crankshaft, эти точки находятся в прологе функции и не являются препятствием для реализации оптимизаций в LLVM. Однако при реализации такого подхода появляются определенные проблемы при передаче локальных значений из уровня Full-Codegen уровню LLVM. Эти значения хранятся в начале стека, начиная с адреса, записанного в специальный регистр rbp (stack base pointer), и загружаются в регистры после соответствующей проверки для нахождения точки входа функции (Рис. 6.). Однако модуль распределения регистров LLVM не подразумевает наличия зарезервированных слотов стека. Таким образом, LLVM, в свою очередь, может использовать адреса начиная с регистра rbp для распределения своих локальных переменных. В итоге может получиться, что локальные переменные Full-Codegen могут быть переписаны компилятором LLVM. Одним решением этой проблемы может быть внесение изменений в модуль распределения регистров LLVM для резервирования адресов в стеке. Однако подобные глобальные изменения в коде LLVM не универсальны и осложняют применение обновлений к кодовой базе из основного репозитория. По этой причине был избран другой подход. Желаемый эффект был достигнут посредством добавления фиктивных volatile значений. Так, при генерации биткода LLVM с помощью volatile значений были зарезервированы соответствующие слоты стека для локальных значений Full-Codegen.\n43\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nЕще одним важным аспектом при компиляции программ на языке JavaScript является снижение пауз при интерактивном взаимодействии. Для достижения этой цели в многоуровневых компиляторах реализована поддержка параллельного выполнения функций. Так, например, код, сгенерированный уровнем Full-Codegen, будет выполняться параллельно, пока на уровне Crankshaft выполняются оптимизации и кодогенерация. Поддержка параллелизма на уровне LLVM полностью осуществлена и в нашем решении. После осуществления поддержки всех технологий, обеспечивающих быстродействие современных многоуровневых ЛТ-компиляторов (спекулятивная компиляция, технология “замена на стеке”, параллельное выполнение и т. д.) следующим шагом была трансляция представления Hydrogen в промежуточное представление LLVM. При реализации преобразования Hydrogen в биткод LLVM был применен инкрементальный подход: количество доступных операций наращивалось постепенно, делая возможным компиляцию все более широких подмножеств языка JavaScript. В представлении Hydrogen насчитывается около 120 различных операций, на данный момент реализована трансляция более 70 вершин в промежуточное представление LLVM.\n5.\tРезультаты\nНа данный момент компиляция в LLVM биткод поддерживается не для всех структур языка JavaScript. Это накладывает ограничение на полное тестирование бенчмарков языка JavaScript. По этой причине в данном разделе приведены результаты тестирования на нескольких тестах из набора SunSpider. Оценка производительности для этих тестов была проведена для разного количества итераций, что позволяет оценивать реальную пользу компиляции “очень горячих” участков кода с помощью инфраструктуры LLVM.\nТабл. 1. Сравнение производительности на тесте access-nsieve\naccess-n sieve\nЧисло итераций\tориг. кол-во итераций\t*10\t*100\nВремя выполнения с исл. Crankshaft, мс\t59\t590\t2980\nВремя выполнения с исп. LLVM, мс\t63\t5S0\t2465\nУскорение, число раз\t0.94\t1.02\t1.21\nТабл. 2. Сравнение производительности на тесте bitops-bits-in-byte\nbitops-bits-in-byte\nЧисло итераций\tориг. кол-во итераций\t*10\t*100\nВремя выполнения с исл. Crankshaft, мс\t37\t216\t2050\nВремя выполнения с исп. LLVM, мс\t27\t74\t538\nУскорение, число раз\t1.37\t2.92\t3.81 \td\n44\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТабл. 3. Сравнение производительности на тесте 3d-cube\n3d-cube\nЧисло итераций\tориг. кол-во итераций\t*5\t*10\nВремя выполнения с исп. Crankshaft, мс\t100\t391\t842\nВремя выполнения с исп. LLVM, мс\t85\t177\t325\nУскорение, число раз\t1.18\t2.21\t2.59\nКак видно из представленных выше таблиц, при увеличении числа итераций (времени выполнения машинного кода) увеличивается и выигрыш в производительности, обеспечиваемый более оптимальным машинным кодом уровня LLV8 в сравнении с Crankshaft. Для ответа на вопрос, чем обоснована более высокая производительность уровня LLV8, нами был проведен сравнительный анализ машинных кодов. Анализ теста bitops-bits-in-byte, например, показывает, что ускорение достигается в первую очередь благодаря наличию оптимизации “разворачивание цикла” (англ, loop unrolling) в списке оптимизационных проходов, выполняемых над внутренним представлением LLVM (в Crankshaft такая оптимизация отсутствует). Код, сгенерированный LLV8 для данного теста, не содержит цикла, тогда как код, сгенерированный Crankshaft, имеет цикл. Отметим также, что, время компиляции на уровне LLVM почти всегда больше чем на уровне Crankshaft. Например, для теста bitop-bits-in-byte, время, затраченное на компиляцию, составило примерно 0,2 мс в случае Crankshaft и 6,5 мс в случае LLVM. Однако даже такое увеличение времени компиляции приемлемо для функций, время выполнения которых существенно превосходит время компиляции. (Кроме того, при компиляции в параллельном потоке это имеет еще меньшее значение.) Именно для оптимизации таких функций изначально было принято решение реализации уровня LLVM в компиляторе V8.\n6.\tЗаключение и будущая работа\nВ рамках данной работы был разработан метод динамической компиляции программ на языке JavaScript в статически типизированное представление LLVM. Предложенный метод был реализован путем добавления дополнительного уровня оптимизации в компиляторе с открытым исходным кодом V8. При этом была реализована поддержка всех технологий, обеспечивающих быстродействие современных многоуровневых ЛТ-компиляторов (спекулятивная компиляция, технология “замена на стеке”, параллельное выполнение и т. д.). В дальнейшем планируется добавление поддержки компиляции в LLVM биткод для всех конструкций языка JavaScript и тестирование системы на популярных тестовых наборах.\n45\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\nСписок литературы\n[1]\t. Страница платформы Node.js — https://nodejs.org\n[2]\t. Страница платформы Tizen — http://www.tizen.org\n[3]\t. Веб-сайт Mozilla — https://www.mozilla.org\n[4]\t. Страница платформы LLVM - http://www.llvm.org/\n[5]\t. Описание стандарта ЕСМА-262\nhttp://www.ecma-intemational.org/pubhcations/standards/Ecma-262.html\n[6]\t. Страница документации динамическою компилятора HotSpot для языка Java -\nhttp://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html\n[7]\t. Веб-сайт Webkit - http://www.webkit.org\n[8]\t. Р. Жуйков, Д. Мельник, Р. Бучацкий, В. Варданян, В. Иванишин, Е. Щарыгин\nМетоды динамической и предварительной оптимизации программ на языке JavaScript. Труды Института системного программирования РАН, Том 26. Выпуск 1. 2014г. Стр. 297- 314. DOI: 10.15514dSPRAS-2014-26(l)-10\n[9]\t. U. Holzle, С. Chambers, D. Ungar “Optimizing Dynamically-Typed Object-Oriented\nLanguages With Polymorphic Inline Caches” ECOOP '91 Proceedings of the European Conference on Object-Oriented Programming, 21-38,1991\n[10]\t. Страница документации структуры StackMaps - http://llvm.org/docs/StackMaps.html\n[11] . Страница\tобзора изменений LLVM в ревизии rL229945-\nhttp://reviews.llvm.org/rL229945\n[12]\t. Страница документации структуры StatePoints - http://llvm.org/docs/Statepoints.html\n46\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТруды ИСП РАН, том 27, вып. 6, 2015 г..\nDynamic compilation of JavaScript programs to the statically typed LLVM intermediate representation\nIV. Vardanyan \\maFd).isnras.ru !V Ivanishin <vlad(a),ispras. ru >\n2S. Asryan <servozha. asrvan&vsumail. am>\n2A. Khachatryan <aramavis.khachatrvan&vsumail.am>\n2J. Hakobyan <dzhivan.hakobvanl(d).vsumail.am>\n7SPRAS, 25 Alexander Solzhenitsyn Str., Moscow, 109004, Russian Federation 2YSU, 1 Alex Manoogian Str., Yerevan, 0025, Republic of Armenia\nAbstract. Since its inception in the middle of the 90’s, JavaScript has become one of the most popular web development languages. Although initially developed as a browser-agnostic scripting language, in recent years JavaScript continues its evolution beyond the desktop to areas such as mobile and server-side web applications. Many massive applications are written using JavaScript, such as gmail, google docs, etc. JavaScript is also used in the Node.js — server-side web application developing platform. Moreover, JavaScript is the main language for developing applications on some operating systems for mobile and media devices. Examples of such systems are Tizen and FirefoxOS. Modem JavaScript engines use just-in-time (ЛТ) compilation to produce binary code. JIT compilers are limited in complexity of optimizations they can perform at runtime without delaying the execution. To maintain a trade-off between quick startup and doing sophisticated optimizations, JavaScript engines usually use multiple tiers for compiling hot functions. Our work is dedicated to performance improvement of JavaScript programs by adding a new optimizing level to the JavaScript V8 compiler. This level uses the LLVM infrastructure to optimize JavaScript functions and generate machine code. The main challenge of adding a new optimizing level is to support all the technologies (speculative compilation, on-stack replacement, concurrent compilation etc.) that are used in the modem multi-tier JIT compilers for increasing the performance and minimizing pauses during the interactive communication. All these technologies are fully supported in our solution. This has resulted in significant performance gains on the JavaScript benchmark suites when compiling hot functions.\nKeywords: JavaScript, V8, LLVM, program optimization, dynamic compilation.\nReferences\n[ 1 ]. Node.j s website - https: //nodej s. org\n[2]\t. Tizen platform website - http://www.tizen.org\n[3]\t. Mozilla website - https://www.mozilla.org\n47\nTrudy ISP RAN [The Proceedings of ISP RAS], vol. 27, issue 6, 2015.\n[4]\t. LLVM website - http://www.llvm.org/\n[5]\t. ECMA-262 Standard\nhttp://www.ecma-intemational.org/publications/standards/Ecma-262.htm\n[6]\t. HotSpot dynamic compiler documentation website -\nhttp://openjdk.java.net/groups/hotspot/docs/RuntimeOverview.html\n[7]\t. Webkit website - http://www.webkit.org\n[8]\t. R. Zhuykov, D. Melnik, R. Buchatskiy, V. Vardanyan, V. Ivanishin, E. Sharygin.\nMetody dinamicheskoj i predvaritel'noj optimizacii programm na jazyke JavaScript. [Dynamic and ahead of time optimization for JavaScript programs] Tmdy ISP RAN [The Proceedings of ISP RAS], Volume 26 (Issue 1). 2014, pp. 297-314. DOI: 10.15514ЛSPRAS-2014-26( 1)-10 (in Russian)\n[9]\t. U. Holzle, C. Chambers, D. Ungar “Optimizing Dynamically-Typed Object-Oriented\nLanguages With Polymorphic Inline Caches” ECOOP '91 Proceedings of the European Conference on Object-Oriented Programming, 21-38, 1991\n[10]\t. StackMaps structure documentation webpage — http://llvm.org/docs/StackMaps.html\n[11]\t. LLVMrL229945 revision review page— http://reviews.llvm.org/rL229945\n[12]\t. StatePoints structure documentation webpage — http://llvm.org/docs/Statepoints.html\n48\n",
    "download_url": "https://cyberleninka.ru/article/n/dinamicheskaya-kompilyatsiya-programm-na-yazyke-javascript-v-staticheski-tipizirovannoe-vnutrennee-predstavlenie-llvm/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-dinamicheskoy-i-predvaritelnoy-optimizatsii-programm-na-yazyke-javassrirt",
    "slug": "metody-dinamicheskoy-i-predvaritelnoy-optimizatsii-programm-na-yazyke-javassrirt",
    "title": "Методы динамической и предварительной оптимизации программ на языке jаvаsсriрt",
    "abstract_description": "Работа посвящена улучшению производительности программ на языке JavaScript. В работе рассматриваются особенности динамических оптимизаций в JIT-компиляторе для языка JavaScript, а также основные способы улучшения производительности для таких оптимизаций. Кроме того, предлагается способ организации предварительной компиляции программ на языке JavaScript с их сохранением в виде байткода, что позволяет сократить время запуска приложений за счет выполнения оптимизаций на этапе предварительной компиляции. Предложенные методы были реализованы в библиотеке с открытым исходным кодом для отображения веб-страниц WebKit. В результате удалось добиться значительного увеличения производительности выбранных тестовых JavaScript-приложений на платформе ARM.",
    "full_text_body": "\n\n\n\n\uFEFFМетоды динамической и предварительной оптимизации программ на языке JavaScript\nРоман Жуйков <zhroma(a)isvras.ги>, Дмитрий Мельник <dm(cùisvras.ru>, Рубен Бучацкий <ruben(a)isvras.ru>, Ваагн Варданян <vaaz(a)isvras.ги>, Владислав Иванишин <vladislav. ivanishin(a)gmail. сот>, Евгений Шарыгин <еияепе. sharvsindp.gmail. сот >\nАннотация. Работа посвящена улучшению производительности программ на языке JavaScript. В работе рассматриваются особенности динамических оптимизаций в JIT-компиляторе для языка JavaScript, а также основные способы улучшения производительности для таких оптимизаций. Кроме того, предлагается способ организации предварительной компиляции программ на языке JavaScript с их сохранением в виде байткода, что позволяет сократить время запуска приложений за счет выполнения оптимизаций на этапе предварительной компиляции. Предложенные методы были реализованы в библиотеке с открытым исходным кодом для отображения веб-страниц WebKit. В результате удалось добиться значительного увеличения производительности выбранных тестовых JavaScript-приложений на платформе ARM.\nКлючевые слова: оптимизация программ; компиляция во время выполнения; предварительная компиляция; граф потока данных; архитектура ARM.\n1.\tВведение\nВ настоящее время широкое распространение получили программы на нетипизированных скриптовых языках, одним из повсеместно используемых языков является JavaScript. С ростом производительности персональных компьютеров и встраиваемых систем использование языка JavaScript стало возможно не только для выполнения небольших скриптов на веб-страницах, но и целых веб-приложений. Более того, уже имеются разработки операционных систем для телефонов, планшетов и ноутбуков, которые подразумевают использование JavaScript как одного из главных языков для создания приложений. Примерами таких систем могут быть Tizen[l] и FirefoxOS. Некоторая часть пользовательских приложений на этих системах будет представлять собой набор хранящихся на устройстве веб-страниц со скриптами на языке JavaScript. В связи с этим все больше возрастают требования к производительности программ-скриптов.\nМногие современные интерпретаторы поддерживают разнообразные режимы компиляции горячих участков кода во время выполнения скриптов. Для обеспечения быстрого выполнения скриптов необходимо создание максимально качественного машинного кода, а также снижение затрат на все этапы оптимизации, выполняемые при компиляции во время выполнения. В данной работе будет рассматриваться интерпретатор JavaScript, называемый JavaScriptCore (JSC)[2] и входящий в состав браузерного движка WebKit[3] для отображения веб-страниц.\nЦель данной работы - адаптировать имеющиеся в JavaScriptCore оптимизации для работы на встраиваемых системах. Также необходимо учесть специфику использования JavaScript-программ в составе локально хранящихся приложений. Планируется добиться генерации более качественного кода при компиляции во время выполнения, а также реализовать систему хранения и предварительной компиляции скриптов для приложений.\nДальнейшее изложение построено следующим образом. Сначала будет описана имеющаяся схема работы JavaScriptCore и перечислены предлагаемые методы оптимизации, а потом каждый из них будет рассмотрен более подробно.\n2.\tУстройство JavaScriptCore\nПервыми этапами работы JavaScriptCore являются лексический и синтаксический анализ. Исходный код разбивается на токены, методом рекурсивного спуска строится синтаксическое дерево, из которого в свою очередь строится внутреннее представление, называемое байткод (bytecode). В байткоде инструкции хранятся в виде массива ячеек, разные инструкции могут занимать разное количество ячеек. В первой ячейке хранится тип инструкции, в следующих ячейках хранятся адреса операндов и результата. Адреса операндов могут представлять собой ссылки на константы или номера локальных псевдорегистров. При чтении или записи полей объектов, загрузка адреса поля по имени выглядит как отдельная инструкция, один из операндов которой - константная строка, содержащая имя поля. Для многих инструкций последняя ячейка в байткоде выделена для хранения информации о профиле.\nВ ранних версиях JavaScriptCore байткод сразу передавался на выполнение интерпретатору. Интерпретатор последовательно читал инструкции байткода и выполнял необходимые действия, переходы и циклы организовывались за счет условных и безусловных операций перехода. Переход указывает, что вместо чтения следующей инструкции в байткоде интерпретатор должен перейти в другое место. В современных версиях JavaScriptCore вместо интерпретатора используется низкоуровневый интерпретатор (LLInt). Он фактически выполняет те же самые действия, однако запрограммирован на специальном мультиплатформенном ассемблере (offlineasm). Этот специальный ассемблер может быть скомпилирован на этапе сборки JavaScriptCore в машинный код для х86, ARM или нескольких других 298\nплатформ, а также может быть преобразован в исходный код на языке С. LLInt, как и обычный интерпретатор, позволяет начать выполнение байткода, не выполняя никаких подготовительных этапов, тем самым обеспечивает быстрое начало выполнения. Все другие уровни оптимизации требуют предварительных затрат по созданию машинного кода, соответствующего заданному участку байткода. LLInt поддерживает на уровне вызова функций взаимодействие со всеми уровнями оптимизации. Если какая-то функция уже была скомпилирована в машинный код, то вызов этой функции из низкоуровневого интерпретатора будет выглядеть так же, как и переход на точку входа в общий пролог интерпретатора для любой другой неоптимизированной функции. LLInt использует кэширование на уровне байткода для ускорения доступа к полям объектов по имени.\nПри работе низкоуровневого интерпретатора также происходит сбор информации о профиле - сохраняются типы и последние значения полей объектов. Необходимость оптимизации функций определяется с помощью оценки того, сколько раз в ней выполняются те или иные участки кода. Для перехода на первый уровень оптимизации времени выполнения (JIT-оптимизация) необходимо, чтобы функция набрала не менее 100 “очков выполнения”, при этом за каждую пройденную итерацию цикла прибавляется одно “очко”, а за вызов функции - 15 “очков”. Отметим, что эти числа являются примерными, в реальности дополнительно применяется эвристика, результат работы которой зависит от размера рассматриваемой функции. Таким образом, небольшой функции без циклов достаточно быть вызванной около 7 раз, чтобы для нее была выполнена базовая компиляция времени выполнения (Baseline JIT).\nBaseline JIT создает для каяедой операции байткода соответствующий машинный код. В этом коде реализуются все возможные случаи для данной операции. Например, операция сложения для чисел будет выполнена как сложение, а для операндов-строк - как конкатенация. Генерируемый код будет содержать множество ветвлений для разбора всех таких случаев. После того> как для функции будет создан машинный код, нет необходимости дожидаться окончания функции для запуска выполнения нового кода. Например, если функция выполняет цикл с большим числом итераций, то может быть выполнен немедленный переход на новый код (on-stack-replacement, OSR). Низкоуровневый интерпретатор закончит обработку очередной инструкции байткода и сразу перейдет в машинном коде в то место, которое соответствует началу следующей инструкции. Конечно, во всех местах вызова этой функции будет произведено перенаправление на новую версию функции - в машинном коде.\nBaseline JIT код используется, как базовая версия кода для функций, которые скомпилированы с помощью оптимизирующего JIT-компилятора. Если оптимизированный код сталкивается со случаем, который в нем не поддерживается (например, тип или значение переменной не соответствует\nсобранному профилю), то происходит обратная замена на стеке (on stack replacement exit, OSR exit) к коду Baseline JIT. На уровне Baseline JIT так же, как и на LLInt, сохраняется профиль - информация о типах полей объектов и аргументов функций, и выполняется кэширование для ускорения доступа к полям объектов.\nИнформация о профиле, собранная на уровнях Baseline JIT и LLInt, используется для организации спекулятивного выполнения на следующем уровне оптимизации - оптимизации с использованием графа потока данных (Data flow graph, DFG JIT, Spéculative JIT). Собранная информация содержит последние значения загруженных аргументов, полей объектов, а также результатов выполнения функций. Кэширование доступа к полям объектов на уровнях LLInt и Baseline JIT устроено так, что позволяет DFG быстро получать необходимую информацию. Например, по информации кэширования легко можно узнать, что некоторое обращение к полю объекта иногда, часто или всегда возвращает значение некоторого конкретного типа.\nDFG JIT компиляция выполняется для функций, которые набрали не менее 1000 “очков выполнения”. На уровне DFG выполняются разнообразные оптимизации, опирающиеся на информацию о профиле. Из байткода с учетом профиля создается граф потока данных, в котором инструкции описаны в виде SSA-представления. На этом DFG графе выполняются оптимизации, и в конце итоговый набор инструкций преобразуется в машинный код.\nDFG JIT распространяет полученную информацию о типах переменных по всему графу и вставляет в код необходимые проверки типов. Иногда DFG даже выполняет спекулятивную\tоптимизацию по самому значению\nпеременной. Например, если по результатам профилирования поле объекта является конкретной функцией, ее код может быть встроен в вызывающую функцию, с добавлением необходимой проверки. Как было описано выше, когда одна из проверок не выполняется, происходит деоптимизация, то есть обратная замена на стеке (on stack replacement exit, OSR Exit) на код Baseline JIT.\nТаким образом, DFG JIT код и Baseline JIT код могут сменять друг друга посредством замены на стеке (OSR). Когда код функции становится “горячим”, происходит переход\tна DFG JIT. Когда выполняется\nдеоптимизация, происходит обратный переход. В случае многократного OSR exit сохраненная информация о том, почему произошла деоптимизация, также становится своеобразным профилем, который позволяет организовать реоптимизацию DFG, то есть создание нового DFG графа и машинного кода с учетом новой информации о\tпрофиле. Эвристика, оценивающая\nнеобходимость реоптимизации, использует экспоненциальную задержку в зависимости от количества уже выполненных реоптимизаций. Эго позволяет исключить возникновение больших временных затрат на постоянную реоптимизацию кода и выполнение множества OSR переходов.\nЧетвертый уровень оптимизации - LLVM JIT, вызывается для функций, набравших не менее 10000 “очков выполнения”. В нем выполняется более широкий набор оптимизаций, а в качестве внутреннего представления помимо DFG графа используется биткод компилятора LLVM. Перед генерацией машинного кода выполняются оптимизации, уже реализованные в LLVM. Данный уровень JIT-оптимизации находится в состоянии разработки и пока не включается по умолчанию.\nИсходный\nы\n1: LLINT интерпретато\n2: Baseline JIT\nИнформация о профиле (о типах переменных) с уровней 1-2\n3: DFG Speculative JIT\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n4: FTLJIT (LLVM JIT)\nВнутраинм\nпредставление:\n■\nAST\nI\nBytecode\n-<\nтз\nCD\nNative Code (Baseline)\nDFG Nodes\t\tNative Code (DFG)\n1\nOSREntry\nLLVM bitcode\t\tNative Code (LLVM)\nРис. 1. Устройство JavaScriptCore\nИтак, при выполнении скрипта в любой момент времени функции eval-блоки и глобальный код в JSC могут выполняться на любой комбинации LLInt, Baseline JIT и DFG JIT кода. В особом случае при выполнении рекурсивных функций код одной и той же функции может существовать на стеке вызовов в разных вариантах: в одном уровне функция выполняется на LLInt, в другом на Baseline JIT, в третьем на DFG. Возможен еще более сложный случай -допускается выполнение старого варианта DFG кода на одном уровне стека, в то время как на более вложенном уровне рекурсии произошло много деоптимизаций, и была выполнена реоптимизация, после которой был запущен новый вариант DFG кода.\nВсе уровни выполнения обеспечивают одинаковую семантику выполнения, и единственный эффект переключения между ними - производительность работы JavaScriptCore.\n3.\tОптимизация производительности\nДля обоснования необходимости переключения на более быстрые уровни выполнения приведем два примера: первый - сравнение времени выполнения набора тестов PL benchmark от автора Martin Richard. Этот набор тестов запрограммирован на нескольких языках, поэтому есть возможность взять время выполнения программы на языке С как ориентир.\nТаблица 1. Сравнение производительности уровней JSC.\nСпособ выполнения\tВремя выполнения, MC\nРеализация на языке С\t1.2\nJavaScript интерпретатор\t129\nLLInt интерпретатор\t58\nBaseline JIT\t8.4\nDFG JIT\t2.1\nДругой набор тестов - Browsermark. На этом наборе Baseline JIT оказывается в среднем в 2.5 раза быстрее, чем LLInt, причем на некоторых тестах наблюдается различие производительности в 5 раз. Однако оптимизирующий DFG JIT еще в 1.7 раза в среднем быстрее Baseline JIT и позволяет ускорить некоторые тесты до 6 раз.\nКак видно из результатов сравнения производительности, в JSC важно добиться, чтобы максимальное количество горячих участков кода выполнялось на уровне DFG JIT. На этом уровне не поддерживается часть операций байткода, поэтому для увеличения эффективности можно рассмотреть возможность реализации поддержки новых операций. Другим направлением может быть изучение причин деоптимизации, то есть обратных переходов на Baseline JIT, и исследование возможности их устранения. Это позволит избежать выполнения более медленной версии кода и последующей перекомпиляции.\nТакже необходимо улучшать качество генерируемого DFG JIT машинного кода. Здесь важным направлением для исследований является замена в машинном коде реализации некоторых сложных операций, выполняемых с помощью вызова функции. Можно иногда вместо вызова JavaScript-API функции, который требует достаточно больших затрат на подготовку аргументов и стека, выполнять так называемый intrinsic, то есть машинный код, выполняющий необходимые действия. Этот код может также вызывать соответствующую С-функцию, однако временные затраты на такой вызов будут значительно меньше.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЕще одним направлением для рассмотрения является идея предварительной оптимизации. В случае, если программа на языке JavaScript хранится локально, то перед ее выполнением может быть сделана оптимизационная предварительная подготовка, позволяющая ускорить процесс выполнения.\n4.\tДинамические оптимизации\nОпишем алгоритм работы с предсказаниями типов на уровне DFG JIT. Определение типов [4] достигается с помощью профилирования и последующего предположения о результатах операций, базирующегося на информации о профиле.\nВ код вставляются необходимые проверки типов, а далее производится попытка продвижения информации о типах результатов операций. Рассмотрим следующий пример выражения на языке JavaScript: р.х * р.х + р.у\n*р.у\nДопустим, что в контексте нашего кода, объект р описывает точку на плоскости в декартовой системе координат, соответственно у него два поля х и у, которые хранят значение типа double. Эти значения иногда могут быть целыми, и, несмотря на то, что стандарт языка JavaScript не подразумевает хранения целых чисел, в целях эффективности выполнения следует по возможности хранить целые числа в виде in/32. а не в виде double. Чтобы оценить проблему определения типов и способы ее решения в JavaScriptCore, необходимо в первую очередь оценить, какой объем работы должен выполнить\tинтерпретатор языка JavaScript для вычисления выражения,\nприведенного выше, если он не имеет никакой информации об объекте р и его полях.\n•\tВ выражении р.х в первую очередь необходимо понять, не имеет ли объект р какой-то специальной обработки обращения к полю х. р может быть, например, DOM-объектом, который нетривиальным образом перехватывает обращения к своим полям. Если нет никакой специальной обработки, нужно проверить для заданного объекта р существование поля х, где “х” - строка из одного символа. Объекты хранятся в виде таблиц, где символьным строкам соответствует значение поля или метод доступа. Если это метод доступа, он должен быть вызван. Если в таблице конкретное значение - оно и должно быть возвращено. Если в объекте р нет поля х, то необходимо повторить весь процесс поиска в прототипе объекта. Ускорение доступа к полям объектов с помощью профилирования или кэширования не рассматривается более подробно в данной работе.\n•\tБинарная операция умножения должна в первую очередь проверить типы операндов. Если операнд является объектом — то необходимо вызвать метод valueOf для данного объекта. Если\n303\nоперанд является строкой — должна быть сделана попытка преобразовать строку в число. Когда получены операнды-числа, необходимо проверить, являются ли они целыми. Если да, то выполняется умножение целых чисел. Оно может вызвать переполнение, и тогда будет выполнено преобразование и умножение в типе double. Также оно будет выполнено сразу, если один из операндов-чисел не был целым числом. Получается, что результатом выполнения умножения может быть как целое число (int32), так и вещественное (double). И нет никакого способа в общем случае определить, какое это будет число и как оно будет представлено по результатам умножения.\n•\tБинарная операция сложения в выражении р.х * р.х + р.у * р.у сталкивается почти с теми же сложностями, что и операция умножения. Помимо перечисленных случаев для умножения, при операции сложения дополнительно должен быть рассмотрен вариант, когда оба операнда являются строками — для сложения строк должна быть выполнена их конкатенация. В нашем примере можно доказать, что такой вариант невозможен, поскольку результатом умножения строка быть не может, как и не может быть другой сложный объект. Однако по-прежнему необходимы проверки для int32 или double, поскольку неизвестно, каков будет результат умножения. В итоге, результатом сложения также может быть как целое, так и вещественное число.\nИдея определения типов в JSC основана на том, что мы с большой вероятностью можем предсказать типы, которые возвращают арифметические операции, если у нас есть предположение о типах операндов. Таким образом, возникает что-то вроде шага математической индукции — для операций, у которых мы можем предсказать типы операндов, мы можем предсказать и результат. Но для индукции нужна база, и базой становятся все операции, которые загружают внешние для заданной функции значения: например, загрузка полей объектов, использование аргумента функции, или использование возвращаемого значения. Типы значений для этих операций берутся из результатов профилирования значений на уровне LLInt и Baseline JIT. Каждой операции загрузки нелокального значения соответствует ровно одна ячейка информации о профиле, и там хранится последнее значение.\nВ самом простом виде алгоритм определения типов можно описать так: для каждого из хранящихся последних значений можно узнать тип, а дальше применить индукцию для распространения информации о типах на все операции внутри функции. Это дает нам предсказания типов для всех операций и переменных внутри функции.\nВ реальности, JavaScriptCore помимо последнего значения, хранит еще одно поле, которое описывает спекулятивный тип SpecType, в который вмещается\nслучайное подмножество значений, виденных ранее. Сначала этот тип заполняется как SpecNone — тип, которому не соответствует ни одно значение, аналог пустого множества. Когда выполнение программы проходит через эту точку, иногда включается логика профилирования, и поле типа заполняется новым значением. Новый тип должен включать в себя старый и одновременно допускать хранение записанного последнего значения. Продвижение информации о типах SpecType по всем операциям выполняется с помощью стандартного итеративного алгоритма анализа потоков данных, реализованного как поиск неподвижной точки. На этапе DFG-компиляции этот алгоритм выполняется в одном из первых проходов, который обрабатывает построенный DFG граф.\nПосле того, как для каяедой операция в заданной функции был вычислен предсказанный тип значения, вставляются спекулятивные проверки типов. Например, для умножения делается проверка, что операнды являются числами. Если во время выполнения проверка получит отрицательный результат — будет выполнена деоптимизация, и выполнение перейдет на неоптимизированный код Baseline JIT. Это позволяет при выполнении DFG JIT кода использовать информацию о типах в последующих операциях. Например, пусть выполняется сложение а+Ь, и предсказаны целые типы операндов Speclnt32. До сложения будет вставлена проверка что а и h целые, иначе запускается механизм деоптимизации. После сложения будет вставлена проверка на переполнение, при переполнении также будет выполнен OSR exit. После завершения операции сложения можно считать известным, что операнды а и b и результат их сложения являются целыми числами, помещающимися в int32. Это позволяет при выполнении последующих операций не вставлять проверки для этих переменных. Удаление избыточных проверок реализовано с помощью второго алгоритма анализа потоков данных, использующего анализ потока управления на графе DFG. Анализ потока управления также выполняет условное продвижение констант, которое иногда позволяет аналогично информации о типах получить информацию о том, что какое-то значение является постоянным.\nВернемся к рассмотрению нашего примера, выражения р.х * р.х + р.у * р.у. Здесь потребуются только проверки загружаемых значений р.х и р.у. После проверки, что р.х и р.у являются числами, мы можем для хранения всех промежуточных результатов использовать тип double, и остается только выполнить два умножения и одно сложение чисел с плавающей точкой. Можно сказать, что почти всегда после удаления избыточных проверок DFG JIT код будет выполнять проверку типа не более одного раза для каяедой загрузки внешнего значения.\n4.1.\tПроверки на отрицательный ноль\nОдним из аспектов, который необходимо учитывать при оптимизации арифметических операций, является отрицательный ноль. В стандарте языка\nJavaScript числа не делятся на целые и вещественные, и подразумевается поведение всех чисел как вещественных, поэтому следует различать положительный и отрицательный ноль. Например, значениями следующих операций с целыми числами является минус бесконечность (-Infinity). 1 / (-0) ; 1 / (0 / -3) ; 1 / (-4 % 4). В случае, если для оптимизации выполнения мы заменяем выполнение операций с числами double операциями с целыми числами int32, необходимо, помимо проверок переполнения, учитывать также различие положительного и отрицательного нуля, чтобы не получить неверный с точки зрения стандарта результат. Необходимо отметить, что в некоторых ситуациях такие проверки можно опустить без ущерба для корректности выполнения. Например, при вычислении выражения 5/(а%Ь+3), если результатом выражения а%Ь является ноль, нет необходимости различать положительный ноль и отрицательный ноль.\nВ JavaScriptCore имеется реализация проверок арифметических операций на отрицательный ноль, однако она содержит несколько ошибок и другие недочеты. Исправление всех проблем, связанных с обработкой случая отрицательного ноля, значительно ускорило выполнение тестов.\nИтак, первое исправление в логику было внесено как раз в части алгоритма, отвечающей за необходимость проверок. Для каждой операции в графе DFG выставляется флаг NodeNeedsNegZero, который установлен, когда для результата данной операции необходимо различать положительный и отрицательный ноль. Флаг в некоторых случаях расставлялся неправильно, правильный алгоритм таков: если результат вычисления выражения х в дальнейшем участвует в вычислении суммы х+С, С+х или разности С—х, где С—константа, не являющаяся отрицательным нолем (С!=-0), то для вычисления х не нужны проверки на отрицательный ноль. Аналогично для разности х—С, где С!=+0. Для всех других операций с числами флаг необходимо копировать. То есть операндам, если они сами получены как результат другой операции, он нужен тогда и только тогда, когда нужен для результата данной операции. Для операции унарного минуса флаг ошибочно стирался, это было исправлено.\nНеобходимо понять, в каких случаях целочисленные операции деления дают в результате отрицательный ноль, не представимый в виде int32 значения. Операция деления х/у дает в результате -0, тогда и только тогда, когда х равен нолю и у меньше 0. Одна из ошибок реализации была в том, что на платформе ARM при равенстве делимого нулю сразу происходил OSR exit, без проведения проверки, что делитель отрицателен. Это вызывало множество ненужных возвратов на более медленный машинный код Baseline JIT. Операция взятия остатка х%у дает в результате отрицательный ноль тогда и только тогда, когда х делится на у нацело, их — отрицателен. Здесь также была реализована правильная проверка, а в имеющейся реализации после проверки результата на равенство нолю сразу выполнялся OSR Exit. Теперь он\nвыполняется только после дополнительной проверки, что делимое является отрицательным числом.\nДля операции взятия остатка в DFG рассмотрен отдельно случай, когда делитель является константой и степенью двойки. В этом случае операция взятия остатка для оптимизации может быть заменена на операцию побитовой конъюнкции с числом на единицу меньшим. В случае отрицательного делимого также возможна такая реализация - необходимо предварительно поменять знак операнда, а в конце поменять знак результата. Однако в имеющейся реализации в этом случае пропускалась проверка на отрицательный ноль. Но при выставленном флаге NodeNeedsNegZero ее необходимо выполнять, чтобы не потерять знак в выражениях, таких как z%4, при значении z равном -4.\n4.2. Поддержка новых операций байткода и внедренного машинного кода\nОдной из неподдерживаемых операций на уровне DFG JIT является встроенная в JavaScript функция определения типа переменной - typeof. Поддерживался только часто используемый вариант, когда результат вызова typeof сравнивался со строковой константой, равной “numbef’, “string”, “object”, “fonction” или “undefined”. Причем, поддерживалось только сравнение на равенство, например, для конструкции отрицания сравнения ¡(typeof (х) == “string”) выполнялась DFG JIT компиляция. Для сравнения на неравенство (typeof (у) != “object”) компиляция не происходила, и функция, содержащая такую конструкцию, всегда работала на уровнях оптимизации не выше Baseline JIT. Нами было реализована полная поддержка операции typeof на уровне DFG JIT. Теперь поддерживается любой вариант использования, даже без последующего сравнения со строковой константой.\nДругим примером неподдерживаемой операции являются циклы, организованные как перечисление всех полей объекта (for-in циклы). Для обработки таких циклов в граф DFG были добавлены все необходимые типы операций, и теперь функции, содержащие такой цикл, также могут эффективно выполняться на DFG JIT.\nПосредством внедрения машинного кода вместо вызова с использованием JavaScript-API было реализовано ускоренное выполнение таких функций JavaScript, как Math.power, Math.floor и String.fromCharCode. Вместо того, чтобы организовывать сложный вызов функции на уровне DFG с большими затратами на создание пролога и эпилога для корректной работы со стеком обращения к таким функциям заменялись на более легковесные обращения к функциям в машинном коде, скомпилированном из языка C++ на этапе сборки JavaScriptCore. Для функции Math.power упрощенный вызов создавался только для случая, когда степень является целым числом.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБыла также сделана попытка реализации Math.floor для платформы ARM вообще без вызова функции, с помощью использования операций с\nплавающей точкой ARM NEON. Однако тестирование показало, что вариант с вызовом обычной С-функции floor показывает такую же производительность и создает меньший объем машинного кода.\n5.\tПредварительные оптимизации\nОдной из идей оптимизации JavaScriptCore является использование компиляции до выполнения (ahead of time compilation, AOTC)[5, 6], то есть добавление в систему предварительных оптимизаций. Изначально JavaScript используется для скриптов на веб-страницах, при загрузке страницы необходимо выполнить весь возникающий на ней код, и заранее про этот код ничего не известно. Однако теперь на языке JavaScript будут разрабатываться и более статичные приложения, хранящиеся на самом устройстве. Получается, что не обязательно использовать только подход интерпретатора, допускается выполнение некоторой подготовки кода. В данной работе разрабатывается идея, что исходный код заранее преобразуется в некоторый набор данных, содержащий байткод и другие внутренние представления, на которых можно провести какие-то предварительные оптимизации. Возможно также добавление сохранения машинного кода. Впоследствии, при выполнении программы загружаются готовые оптимизированные внутренние представления, которые корректируются по мере необходимости.\nВыполнение выювое evelO\nИсходный код\nAST\nСохраненные Bytecode, DFG, native code\n1: LLINT интерпретатор\n2: Baseline JIT\nBytecode\nИнформация о профиле (о типах тз переменных) с уровней 1-2\t$\n3: DFG Speculative JIT\n4: FTL JIT (LLVM JIT)\nOSÄEntry\nDFG Nodes\nNative Code (Baseline)\n\" Г\"1\nNative Code (DFG)\nOSREnby\nLLVM\tШ\tNative Code\nbitcode\tЯ\t(LLVM)\nPuc. 2. Устройство системы предварительной компиляции (АОТС).\nТакой порядок работы JavaScriptCore позволит получить следующие преимущества.\n•\tВ предварительной фазе могут быть выполнены значительно более сложные оптимизации, так как нет жестких ограничений по времени выполнения, имеющихся в ЛТ-компиляции. Однако в то же время необходимо отметить, что до выполнения программ-скриптов, нет никакой информации о профиле и значениях переменных.\n• На этапе работы программы не тратится время на разбор и построение синтаксического дерева, кроме того, возможна экономия времени на генерацию машинного кода.\n•\tПоявляется шифрование исходного кода — байткод, другие внутренние представления и машинный код сложнее прочесть, чем исходный кода скрипта.\n5.1.\tСохранение и загрузка байткода\nВ данный момент в рамках работы над АОТС был реализован первый этап, который можно назвать АОТВ (ahead of time bytecode). Он подразумевает сохранение исходного кода в виде байткода, для последующей загрузки при выполнении.\nВ обычном режиме работы JavaScriptCore при выполнении скрипта байткод генерировался только при первом вызове каждой функции. Нами была разработана и реализована схема генерации и сохранения байткода без выполнения самого скрипта. Вместе с байткодом сохраняется также вспомогательная информация, такая как таблицы констант, таблицы switch-переходов и исключений, необходимые данные для регулярных выражений. Для сохранения байткода без выполнения потребовалось сэмулировать работу стека пространств имен.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБайткод JavaScriptCore не был задуман как промежуточное внутреннее представление для сохранения, основной его целью является эффективное выполнение и генерация машинного кода на уровне Baseline JIT. Байткод, в отличие от исходной программы на JavaScript, отражает семантику программы только в определенном контексте. Например, в зависимости от свойств объектов, созданных к моменту начала выполнения программы, для нее может быть сгенерирован различный байткод. В основном, эта разница в байткоде относится к дополнительным подсказкам, например, позволяющим быстрее организовать обращение к полям объектов. Однако в некоторых случаях байткод, сохраненный вне того контекста, в котором программа будет исполняться, может приводить к некорректным результатам с точки зрения стандарта JavaScript. Эти особенности были учтены при сохранении байткода без выполнения. Кроме того, обращения к глобальным объектам содержат абсолютные адреса, и необходимо организовать сохранение так, чтобы можно было при загрузке байткода поменять адреса на новые, соответствующие адресам объектов во время выполнения.\nИзначально планировалось хранение всей информации в виде базы данных SQLite [7], однако от такого способа хранения пришлось отказаться из соображений эффективной загрузки. Теперь все данные, относящиеся к одной функции, хранятся в виде последовательного набора байтов внутри файла. В начале файла сохраняется карта адресов (смещений), по которым можно найти информацию для каждой из функций. Соответственно, при выполнении из файла читается эта карта смещений и байткод для глобального JavaScript кода, то есть всего кода, описанного вне функций. В дальнейшей работе, при первом вызове функции вместо обычного разбора исходного кода байткод и все необходимые данные подгружается из файла по заданному смещению.\nНеобходимо отметить один из моментов, который позволил уменьшить размер сохраняемого файла — отказ от хранения двух вариантов байткода для каждой функции. При обычном выполнении JavaScript программ для функций, вызываемых как конструктор с помощью вызова new (“var z = new Г()\"). создается отдельный байткод. В нашей реализации хранится только байткод для случая обычного вызова функции, который при необходимости преобразуется в вариант “для конструктора”.\nТаким образом, первый этап по решению задачи предварительной компиляции javascript программ выполнен. Реализовано сохранение и загрузка байткода. Выполняется статическая компиляция исходного кода в байткод без выполнения скрипта. При выполнении байткода вместо исходного кода стандарт ЕСМА-262[8] поддерживается полностью, вызовы eval поддерживаются, для них исходный код компилируется обычным образом в процессе работы JavaScriptCore. Исключением является только работа операций, явным образом требующих наличия исходного кода. Примерами таких операций могут служить вызовы function.toString(), либо использование поля line у объекта исключения. В этом поле должен храниться номер строки в исходном коде, которая создала исключение.\n6.\tРезультаты тестирования\nВсе найденные недостатки, связанные с реализацией проверок на отрицательный ноль в DFG коде, были устранены, что позволило исключить генерацию некорректного с точки зрения стандарта машинного кода. Исправление процесса удаления избыточных проверок позволило ускорить на платформе ARM несколько тестов из набора SunSpider. В среднем тестовый набор стал выполняться на 7% быстрее, ускорение конкретных тестов составляет до 35%.\nДобавление ускоренного выполнения Math.power для случая целой степени ускоряет на 5% тест math-partial-sums из набора sunspider. Реализация for-in циклов ускоряет тест string-fasta на 2.5%.\nПоддержка функции определения типа (typeof) ускоряет на 15% тест ArrayBlur из набора Browsermark. Что касается реализации fromCharCode и Math.floor,\nони не дают видимого прироста производительности на исследуемых наборах тестов, однако увеличивают производительность искусственных тестов, проверяющих соответствующую функциональность.\nТекущая реализация сохранения и загрузки файла с байткодом (АОТВ) успешно проходит регрессионное тестирование на наборах из Webkit JavaScriptCore и V8. За счет уменьшения времени обработки исходного кода на 2-4% ускоряется работа тестов из SunSpider, v8 и kraken. Крупные data-файлы для тестов из kraken обрабатываются значительно быстрее, время их обработки не учитывается в результатах теста. По результатам профилирования работы JavaScriptCore было выявлено, что на больших исходных текстах время, затрачиваемое на загрузку файла с байткодом, может быть до 3-х раз меньше времени, необходимого на обычную обработку исходного кода.\nДля тестов из наборов SunSpider, v8, kraken было измерено соотношение размера бинарного файла с сохраненным байткодом и размера исходного JavaScript-файла. Причем был взят пример как использования оригинальных файлов, так и файлов, упакованных с помощью Google Closure Compiler. Во втором случае оба файла дополнительно архивировались с помощью утилиты gzip с использованием максимального сжатия.\nТаблица 2. Результаты сравнения объема JS-файлов и файлов с байткодом.\nТестовый набор\tСоотношение размеров файла с байткодом и исходного файла\nОригинальный JavaScript\tGoogle Closure Compiler + gzip\nSunSpider\t1.19\t1.25\nV8-v6\t2.3\t4.41\nКгакеп\t1.97\t1.31\n7.\tЗаключение\nВ рамках данной работы проведен анализ имеющихся в JavaScriptCore оптимизаций. По итогам исследования производительности на наборах тестов были выявлены недостатки в оптимизационных алгоритмах компиляции во время выполнения. Была добавлена поддержка компиляции новых операций, благодаря чему расширен класс функций, которые могут быть скомпилированы в более эффективный машинный код. Также были устранены недочеты, выявленные в системе предсказания типов переменных.\nИзменения, внесенные в динамические оптимизации JavaScriptCore, позволили значительно ускорить выполнение тестовых наборов SunSpider, \\ 8. кгакеп и Вкжвегтагк.\nДля приложений на языке JavaScript, хранящихся локально на устройстве, была разработана система, позволяющая производить предварительную оптимизацию программ с последующей загрузкой и выполнением оптимизированного кода. Была реализована часть системы, позволяющая сохранять и загружать внутреннее представление - байткод. Она позволяет сократить до Зх раз время, затрачиваемое во время выполнения для получения готового байткода, поскольку компилятору не нужно делать лексический и синтаксический анализ.\nВ дальнейшем планируется продолжать разработку системы, добавив в нее предварительные оптимизации на уровне байткода. Необходимо также рассмотреть возможность сохранения других промежуточных представлений и оптимизированного машинного кода для последующей загрузки при выполнении.\nСписок литературы\n[1]\tВеб-сайт платформы Tizen. http://www.tizen.org\n[2]\tОписание реализации JavaScriptCore на веб-сайте разработчиков WebKit http: //trac. webkit.org/wiki/ JavaScriptCore\n[3]\tВеб-сайт Webkit. http://www.webkit.org\n[4]\tS. Li, B. Cheng, X. Li “TypeCastor: demystify dynamic typing of JavaScript applications”, Proceedings of the 6th International Conference on High Performance and Embedded Architectures and Compilers, 2011, pp. 55-65\n[5]\tS. Hong, J. Kim, J. W. Shin, S. Moon, H. Oh, J. Lee, H. Choi “Java client ahead-of-time compiler for embedded systems”, Proceedings of the 2007 ACM SIGPLAN/SIGBED conference on Languages, compilers, and tools for embedded systems, 2007, pp. 63-72\n[6]\tS. Hong, S. Moon “Client-Ahead-Of-Time Compilation for Digital TV Software Platform” 3rd workshop on Dynamic Compilation Everywhere preprint, 2013. http://sites.google.com/site/dynamiccompilationeverywhere/home/dce-2014/DCE-2014-Sunghyun-Hong-article.pdf\n[7]\tВеб-сайт SQLite. http://www.sqlite.org/about.html\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[8]\tОписание стандарта ECMA-262 http://www.ecma-intemational.org/publications/standards/Ecma-262.htm\nDynamic and ahead of time optimization for JavaScript programs\nRoman Zhuykov <zhroma(a),isvras. ru >\nDmitry Melnik <dm(xpisvras. ru>,\nRuben Buchatskiy <ruben@ispras.ru>\nVahagn Vardanyan <vaaz(a)isvras. ru >,\nVladislav Ivanishin <vladislav. ivanishin&smail. com>.\nEugene Sharygin <eusene.sharvsin(a)smail. com>\nAbstract. The paper is dedicated to performance improvement of JavaScript programs. In this work we examine the specifics of dynamic optimizations in JIT-compiler for JavaScript, and how the performance of such optimizations can be improved. Also we propose a method for ahead-of-time (AOT) compilation of JavaScript programs, and for saving them as a bytecode. This method allows reducing startup time of applications by moving the optimizations to AOT phase. The proposed methods were implemented in open-source WebKit library, and resulted in significant performance gain for popular JavaScript benchmarks on ARM platform.\nKeywords: program optimizations; JIT optimization; ahead of time optimization; data flow graph; ARM.\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-dinamicheskoy-i-predvaritelnoy-optimizatsii-programm-na-yazyke-javassrirt/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/tehnologii-optimizatsii-raboty-sayta-na-primere-analiticheskoy-sistemy-publikatsionnoy-aktivnosti-penzenskogo-gosudarstvennogo",
    "slug": "tehnologii-optimizatsii-raboty-sayta-na-primere-analiticheskoy-sistemy-publikatsionnoy-aktivnosti-penzenskogo-gosudarstvennogo",
    "title": "ТЕХНОЛОГИИ ОПТИМИЗАЦИИ РАБОТЫ САЙТА НА ПРИМЕРЕ АНАЛИТИЧЕСКОЙ СИСТЕМЫ ПУБЛИКАЦИОННОЙ АКТИВНОСТИ ПЕНЗЕНСКОГО ГОСУДАРСТВЕННОГО УНИВЕРСИТЕТА",
    "abstract_description": "Предмет и цель работы . Рассматриваются существующие методы оптимизации пользовательского интерфейса в web-приложениях, способствующие минимизации времени, затраченного на отображение страниц. Методы . Акцентируется внимание на сравнении MPA и SPA технологий и обосновывается целесообразность применения инструментов для сборки и компоновки проекта. Описываются возможности оптимизации загрузки медиафайлов и компонентов с помощью серверного рендеринга и отложенной загрузки. Предлагаются способы повышения эффективности загрузки медиаконтента. Результаты и выводы. В результате исследования было установлено, что существующие технологии оптимизации загрузки сайтов направлены в основном на работу с мультимедийным контентом. Практическое применение описанных методов и технологий в ходе разработки системы аналитической публикационной активности Пензенского государственного университета показало, что в общем случае время загрузки страниц сокращается на 40 % по сравнению с неоптимизированным вариантом.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 519.688\nDOI 10.21685/2227-8486-2020-4-7\nТЕХНОЛОГИИ ОПТИМИЗАЦИИ РАБОТЫ САЙТА НА ПРИМЕРЕ АНАЛИТИЧЕСКОЙ СИСТЕМЫ ПУБЛИКАЦИОННОЙ АКТИВНОСТИ ПЕНЗЕНСКОГО ГОСУДАРСТВЕННОГО УНИВЕРСИТЕТА\nР. А. Торопкин, Я. В. Зиновьев, Н. С. Рассказов, М. А. Митрохин\nSITE OPTIMIZATION TECHNOLOGIES ON THE EXAMPLE OF THE ANALYTICAL SYSTEM OF PUBLISHING ACTIVITY OF PENZA STATE UNIVERSITY\nR. A. Toropkin, Ya. V. Zinov'ev, N. S. Rasskazov, M. A. Mitrokhin\nАннотация. Предмет и цель работы. Рассматриваются существующие методы оптимизации пользовательского интерфейса в web-приложениях, способствующие минимизации времени, затраченного на отображение страниц. Методы. Акцентируется внимание на сравнении MPA и SPA технологий и обосновывается целесообразность применения инструментов для сборки и компоновки проекта. Описываются возможности оптимизации загрузки медиафайлов и компонентов с помощью серверного рендеринга и отложенной загрузки. Предлагаются способы повышения эффективности загрузки медиаконтента. Результаты и выводы. В результате исследования было установлено, что существующие технологии оптимизации загрузки сайтов направлены в основном на работу с мультимедийным контентом. Практическое применение описанных методов и технологий в ходе разработки системы аналитической публикационной активности Пензенского государственного университета показало, что в общем случае время загрузки страниц сокращается на 40 % по сравнению с неоптимизированным вариантом.\nКлючевые слова: web-приложение, оптимизация, отложенная загрузка, JavaScript, Single Page Applications, фреймворк, рендеринг, Chart.js, кэширование, Webpack.\nAbstract. Subject and goals. This article discusses existing methods for optimizing the user interface in web applications that help minimize the time spent on displaying pages. Methods. The article focuses on the comparison of MPA and SPA technologies and justifies the feasibility of using tools for project Assembly and layout. It describes how to optimize the loading of media files and components using server rendering and deferred loading. Ways to optimize the loading of media content are suggested. Results and conclusions. As a result of the research, it was found that the existing technologies for optimizing site loading are mainly aimed at working with media content. The practical application of the described methods and technologies during the development of the PSU analytical publication activity system has shown that page loading time is reduced by about 40 % compared to the non-optimized version.\nKeywords: web application, optimization, deferred loading, JavaScript, Single Page Applications, framework, rendering, Chartjs, caching, Webpack.\nВведение\nОптимизация производительности web-сайтов является приоритетом при их администрировании в современных условиях борьбы за трафик. Согласно отчету о цифровой сфере Digital 2020 число активных пользователей\n© Торопкин Р. А., Зиновьев Я. В., Рассказов Н. С., Митрохин М. А., 2020\nинтернета достигло отметки 4,5 млрд человек [1]. Растет и количество web-сайтов, а вместе с тем развивается и их структура. Из простых ресурсов, содержащих статический контент, web-приложения эволюционировали до сложно сконструированных платформ, решающих большой спектр задач в области визуализации данных сети Internet.\nИзбыток информации приводит к тому, что пользователь становится более прихотливым в процессе поиска информации и к современным сайтам предъявляются все более высокие требования, в том числе и по скорости загрузки. Исследование компании Radware показало, что 47 % пользователей ожидают, что страница загрузится не более чем за 2 с, а если время загрузки составляет более 3 с, то 40 % клиентов сразу покинут сайт [2]. Поэтому задача оптимизации скорости загрузки сайта является одной из наиболее приоритетных.\nНа рынке существует множество способов, позволяющих уменьшить время загрузки страниц, но все они решают задачи:\n—\tуменьшения объема загружаемых данных;\n—\tсохранения части информации на устройстве пользователя или кэширования;\n—\t«визуальной» оптимизации web-страницы.\nВ ходе решения данных задач рассмотрим наиболее эффективные варианты клиентской оптимизации и их применение на примере аналитической системы публикационной активности ПГУ.\nМатериалы и методы\nСовременные web-приложения используют все больше вычислений на стороне клиента, что вместе со сторонними библиотеками значительно увеличивает объем передаваемой на пользовательское устройство информации. Данную проблему помогают решить минификация кода и применение различных инструментов для сборки, таких как gulp, Webpack. Так называемые «сборщики» обладают огромным функционалом по оптимизации web-приложения, который позволяет:\n—\tуказывать среду, это означает, что при компиляции в финальную сборку не будут включаться различные артефакты тестирования и разработки;\n—\tминимизировать исходные JavaScript-файлы, а также различные версии исходной карты (source map), размер которой также возможно уменьшить до двух раз;\n—\tиспользовать различные плагины для оптимизации сборки, дающие возможность формировать .gz файлы, импортировать только отдельные модули из библиотек или дедуплицировать похожие файлы. Наиболее популярные из них: compression-webpack-plugin, dedupe-plugin, uglifyjs-plugin, ignore-plugin;\n—\tанализировать размеры используемых зависимостей;\n—\tсоздавать дерево зависимостей и определять необходимые ресурсы для каждой страницы. Данный подход к оптимизации доступен для React и Vue и позволяет значительно ускорить загрузку каждой страницы.\nСерьезным шагом в развитии web-технологий стало использование Single Page Applications (SPA), т.е. разработка таких сайтов, в ходе взаимодействия с которыми происходит загрузка только необходимой информации, а не всей страницы целиком. Классические многостраничные web-ресурсы (Multi Page Application (MP A)) отправляют запрос при каждом незначительном изменении на странице, что приводит к ее принудительному обновлению. Single Page Applications устроены немного иначе, они используют динамическое обновление DOM-дерева, что позволяет исключить перезагрузку web-страницы.\nСравнение технологий многостраничных и одностраничных web-приложений приведено на рис. 1.\nРис. 1. Сравнение Multi Page Application и Single Page Applications\nНаиболее популярны SPA-решения с использованием таких JavaScript библиотек и фреймворков, как React.js, Vue.js, Angular.js. Например, во Vue.js и React технология SPA организована следующим образом: происходит копирование DOM-дерева, его обработка и сравнение с исходным вариантом, далее фреймворк заменяет части только тех элементов, которые отличаются от первоначальной структуры DOM-дерева.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ последнее время набирает популярность «отложенная загрузка» — оптимизация загрузки медиафайлов и компонентов, не критичных для отображения web-страницы и взаимодействия с интерфейсом. Чаще всего «ленивая загрузка» применяется для элементов, расположенных за линией видимости пользователя и отображаемых только после прокрутки. Отложенная загрузка реализована во многих современных JavaScript фрейморках, таких как Vue.js, Angular и React, где возможна настройка динамической загрузки маршрутов и компонентов. Оценить, насколько эффективным окажется применение отложенной загрузки изображений возможно для конкретного сайта, проверив его на ресурсе Google PageSpeed Insights (рис. 2).\nРис. 2. Рекомендации Google PageSpeed Insights\nТакже рекомендуется использование экономичных форматов файлов, позволяющих сократить объем передаваемого трафика. Например, формат WebP дает возможность экономить до 34 % при конвертировании картинки из JPG и 45 % для PNG [3]. Поддержка данного формата уже присутствует у 79,2 % пользователей интернета. Результаты анализа представлены на рис. 3.\nWebP image format i-unoff\t^\t% of a« use« = ?\nGlobal\t79.2% + 0.21% = 79.4%\nImage format (based on the VP8 video format) that supports lossy and lossless compression, as well as animation and alpha transparency. WebP generally has better compression than JPEG, PNG and GIF and is designed to supersede them. AVIF is designed to supersede WebP.\ni\"\tUsage relative Date relative Apply filters\nРис. 3. Результат анализа наличия поддержки браузерами формата WebP\nЕще одним способом, позволяющим уменьшить объем загружаемых файлов, а также снизить нагрузку на устройство при рендеринге страницы, является использование серверного рендеринга, при этом вся нагрузка по отображению страницы ложится на сервер, а ресурсы клиентского устройства освобождаются для других процессов [4]. Скорость загрузки при серверном рендеринге увеличивается до двух раз, так как отсутствует обработка кода JavaScript процессором, а загружаются только текст и ссылки. Схема отображений страниц представлена на рис. 4.\nОдним из прогрессивных способов кэширования является использование «сервис-воркеров». В данном случае сайт разделяется на две части: со статическим и динамическим контентом, при этом при повторной загрузке, скачивается только часть с уникальным контентом и объединяется со статическим [5]. Сравнение скорости загрузки по метрике First Contentful Paint, характеризующей скорость загрузки на сайте первых элементов, показало снижение нагрузки на сетевой трафик на 47,6 % и повышение скорости отображения первых элементов на 40 % (рис. 5).\nРис. 4. Загрузка страницы при серверном рендеринге\nс\n3 \"\n■Élkbü.\nü Hü 30 I2Û LEO 200 240 2ED 320 300 *0П 440 4S0 5 2D SED EOO 040 OED 220 7E0 BOO Й40 SSO 9J0 Ï6Û\nTime (mi)\nФ Servie« Worker # No Servies Worker\nРис. 5. Сравнение скорости рендера элементов на сайте\nРезультаты\nОписанные технологии были применены в аналитической системе публикационной активности ПГУ. Современные аналитические системы содержат множество числовых данных, оптимальным представлением для которых является использование графиков и диаграмм. С технической точки зрения визуализация информации посредством диаграмм довольно трудозатратна и требует большого количества вычислительных ресурсов. Данную проблему решает JavaScript библиотека - Chart.js. Использование формата svg в совокупности с частичным аппаратным ускорением позволяет добиться значительного прироста производительности. В библиотеке Chart.js применена технология асинхронного рендеринга, что позволяет не загружать ядро JavaScript продолжительное время. Таким образом, данный модуль позволил внедрить «живые» графики на сайт анализа публикационной активности ПГУ1 без сильного ущерба производительности. Более того, это дало воз-\n1 При поддержке конкурса «Ректорские гранты - 2020». Номер договора: ХП-107/20.\nможность сократить срок разработки, так на реализацию собственного решения с помощью встроенной библиотеки canvas ушло бы много ресурсов, что является критическим фактором при создании web-приложений.\nПри разработке высоконагруженных систем немаловажным параметром остается качество сборки web-приложения. Проектируя web-ресурс, разработчик взаимодействует с множеством различных библиотек и модулей, с десятками, а порой и сотнями файлов .js и .css. Появляется очевидная проблема, состоящая в сложности управления порядком загрузки различных файлов и модулей для поддержания работоспособности приложения. Для решения данной проблемы в системе анализа публикационной активности ПГУ был применен статический модульный сборщик для приложений «Webpack». Данный инструмент позволяет выполнять сборку js-файлов в оптимальном, правильном порядке. Стоит отметить, что Webpack v4+ по умолчанию поддерживает минимизацию кода, что в общем случае дало возможность сократить размер файлов сайта от 30 до 40 %, исходя из анализа, представленного на рис. 3. В итоге удалось увеличить время загрузки web-сайта на 40 %.\nЗа счет использования технологии SPA, применяемой в системе публикационной активности ПГУ, удалось значительно повысить производительность конечного web-сайта. По статистике среднее значение глубины просмотра для информационного портала составляет 3-4 страницы [6]. В результате применения Single Page Applications пользователь в среднем получает доступ к информации на 9-12 с раньше по сравнению с Multi Page Application (при средней скорости загрузки страницы в 2 с [7] при использовании MPA). Данная технология позволила в кратчайшие сроки добавить новый модуль выгрузки данных. Данный подход дал возможность:\n—\tизбавиться от создания новых страниц;\n—\tне дублировать html/css код;\n—\tсохранить единообразие контента;\n—\tиспользовать существующий API.\nЗаключение\nТаким образом, построение эффективных высоконагруженных систем требует комплекса мероприятий, направленных на повышение отклика, а также скорости загрузки и отображения конечного web-ресурса. Применение рассмотренных методов оптимизации web-интерфейса позволяет сократить время загрузки страницы на 40 % по сравнению с неоптимизированным вариантом. Минимизация времени отклика способствует более комфортной работе с web-приложением, что наряду с оптимизацией web-интерфейса позволяет сформировать положительный опыт эксплуатации пользователям.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБиблиографический список\n1.\tГлобальная статистика интернета на 2020 год: отчет Digital о состоянии цифровых технологий в мире и в России. - URL: https://www.web-canape.ru/business/ internet-2020-globalnaya-statistika-i-trendy (дата обращения: 24.08.2020).\n2.\tТамми, Э. Скорость как конкурентное преимущество / Э. Тамми. - URL: https://www.methodlab.ru/articles/time_is_money2 (дата обращения: 24.08.2020).\n3.\tHow to Make Your Website Load Faster With WebP Images. - URL: https://techstacker.com/load-website-faster-with-webp-images/mhzdwjfko9eb4fbep/ (дата обращения: 22.08.2020).\n4.\tStart Performance Budgeting. - URL: https://medium.com/@addyosmani/start-performance-budgeting-dabde04cf6a3 (дата обращения: 22.08.2020).\n5.\tКак ускорить загрузку сайта и улучшить поведенческие факторы. - URL: https://ru.megaindex.com/blog/service-workers-site-speed (дата обращения: 24.08.2020).\n6.\tГлубина просмотра сайта и методы оптимизации. - URL: http://blog.getgoodrank.ru/ glubina-prosmotra-sajta-i-metody-optimizacii/ (дата обращения: 26.08.2020).\n7.\tОптимальная скорость загрузки сайта. - URL: https://steptosleep.ru/ %D0 %BE\n%D0 %BF %D1 %82 %D0 %B8 %D0 %BC %D0 %B0 %D0 %BB %D1 %8C %D0 %BD %D0 %B0 %D1 %8F- %D1 %81 %D0 %BA %D0 %BE %D1 %80 %D0 %BE %D1 %81 %D1 %82 %D1 %8C- %D0 %B7 %D0 %B0 %D0 %B3 %D1 %80 %D1 %83 %D0 %B7 %D0 %BA %D0 %B8- %D1 %81 %D0 %B0 %D0 %B9 %D1 %82 %D0 %B0/ (дата обращения: 27.08.2020).\n1.\tGlobal'naya statistika interneta na 2020 god: otchet Digital o sostoyanii tsifrovykh tekhnologiy v mire i v Rossii [Global Internet Statistics for 2020: Digital report on the state of digital technologies in the world and in Russia]. Available at: https://www.web-canape.ru/business/internet-2020-globalnaya-statistika-i-trendy (accessed 24.08.2020). [In Russian]\n2.\tTammi E. Skorost' kak konkurentnoe preimushchestvo [Speed as a competitive advantage]. Available at: https://www.methodlab.ru/articles/time_is_money2 (accessed 24.08.2020). [In Russian]\n3.\tHow to Make Your Website Load Faster With WebP Images. Available at: https://techstacker.com/load-website-faster-with-webp-images/mhzdwjfko9eb4fbep/ (accessed 22.08.2020).\n4.\tStart Performance Budgeting. Available at: https://medium.com/@addyosmani/start-performance-budgeting-dabde04cf6a3 (accessed 22.08.2020).\n5.\tKak uskorit' zagruzku sayta i uluchshit' povedencheskie factory [How to speed up site loading and improve behavioral factors]. Available at: https://ru.megaindex.com/blog/ service-workers-site-speed (accessed 24.08.2020). [In Russian]\n6.\tGlubina prosmotra sayta i metody optimizatsii [Depth of view of the site and methods of optimization]. Available at: http://blog.getgoodrank.ru/glubina-prosmotra-sajta-i-metody-optimizacii/ (accessed 26.08.2020). [In Russian]\n7. Optimal'naya skorost' zagruzki sayta [Optimal site loading speed]. Available at: https://steptosleep.ru/ %D0 %BE %D0 %BF %D1 %82 %D0 %B8 %D0 %BC %D0 %B0 %D0 %BB %D1 %8C %D0 %BD %D0 %B0 %D1 %8F- %D1 %81 %D0 %BA %D0 %BE %D1 %80 %D0 %BE %D1 %81 %D1 %82 %D1 %8C- %D0 %B7 %D0 %B0 %D0 %B3 %D1 %80 %D1 %83 %D0 %B7 %D0 %BA %D0 %B8- %D1 %81 %D0 %B0 %D0 %B9 %D1 %82 %D0 %B0/ (accessed 27.08.2020). [In Russian]\nReferences\nТоропкин Роман Александрович\nстудент,\nПензенский государственный университет\n(Россия, г. Пенза, ул. Красная, 40) E-mail: good.romka@yandex.ru\nToropkin Roman Aleksandrovich student,\nPenza State University\n(40 Krasnaya street, Penza, Russia)\nЗиновьев Ярослав Вячеславович\nстудент,\nПензенский государственный университет\n(Россия, г. Пенза, ул. Красная, 40) E-mail: yaroslav005@bk.ru\nZinov'yev Yaroslav Vyacheslavovich\nstudent,\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nPenza State University\n(40 Krasnaya street, Penza, Russia)\nРассказов Никита Сергеевич студент,\nПензенский государственный университет\n(Россия, г. Пенза, ул. Красная, 40) E-mail: nikita_serdobsk12@mail.ru\nМитрохин Максим Александрович доктор технических наук, профессор, заведующий кафедрой вычислительной техники,\nПензенский государственный университет\n(Россия, г. Пенза, ул. Красная, 40) E-mail: vt@pnzgu.ru\nRasskazov Nikita Sergeyevich student,\nPenza State University\n(40 Krasnaya street, Penza, Russia)\nMitrokhin Maksim Aleksandrovich doctor of technical sciences, professor, head of sub-department of computer science,\nPenza State University\n(40 Krasnaya street, Penza, Russia)\nОбразец цитирования:\nТоропкин, Р. А. Технологии оптимизации работы сайта на примере аналитической системы публикационной активности Пензенского государственного университета / Р. А. Торопкин, Я. В. Зиновьев, Н. С. Рассказов, М. А. Митрохин // Модели, системы, сети в экономике, технике, природе и обществе. - 2020. - № 4 (36). - С. 71-78. -БО! 10.21685/2227-8486-2020-4-7.\n",
    "download_url": "https://cyberleninka.ru/article/n/tehnologii-optimizatsii-raboty-sayta-na-primere-analiticheskoy-sistemy-publikatsionnoy-aktivnosti-penzenskogo-gosudarstvennogo/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sistema-semanticheskoy-optimizatsii-soderzhimogo-veb-saytov-na-osnove-polzovatelskih-predpochteniy",
    "slug": "sistema-semanticheskoy-optimizatsii-soderzhimogo-veb-saytov-na-osnove-polzovatelskih-predpochteniy",
    "title": "Система семантической оптимизации содержимого веб-сайтов на основе пользовательских предпочтений",
    "abstract_description": "Выявлена потребность в оптимизации содержимого веб-сайтов в соответствии с индивидуальными предпочтениями пользователей. Предложены способы оптимизации содержимого веб-страниц для различных сценариев использования приложения и способы хранения семантического профиля пользователя. Представлена реализация программной системы в виде набора JavaScript-компонентов и методика интеграции данной системы с существующими веб-приложениями.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.55\nСИСТЕМА СЕМАНТИЧЕСКОЙ ОПТИМИЗАЦИИ СОДЕРЖИМОГО ВЕБ-САЙТОВ НА ОСНОВЕ ПОЛЬЗОВАТЕЛЬСКИХ ПРЕДПОЧТЕНИЙ\nП.И. Банокин, В.Н. Вичугов\nТомский политехнический университет E-mail: pavel805@gmail.com\nВыявлена потребность в оптимизации содержимого веб-сайтов в соответствии с индивидуальными предпочтениями пользователей. Предложены способы оптимизации содержимого веб-страниц для различных сценариев использования приложения и способы хранения семантического профиля пользователя. Представлена реализация программной системы в виде набора JavaScript-компонентов и методика интеграции данной системы с существующими веб-приложениями.\nКлючевые слова:\nСемантическое веб-приложение, оптимизация содержимого веб-страниц, семантический профиль пользователя.\nKey words:\nSemantic web-application, web-page content optimization, semantic user profile.\nСовременные интернет-приложения содержат обновляющийся и разнообразный контент в неструктурированном виде. К таким сайтам относятся блоги, социальные сети, интернет-аукционы, фото- и видео-хостинги. В такой ситуации пользователям становится сложно ориентироваться в многообразии информации, представленной как на одной веб-странице, так и на целом веб-сайте.\nНесмотря на популярность социальных сетей, поисковые системы являются основным источником новых посетителей для веб-сайтов. Существующие методы продвижения интернет-приложений в большей степени ориентированы на оптимизацию веб-страниц для поисковых систем. Довольно часто такие методы противоречат принципам удобства использования приложения. В результате создаются неестественные и сложные для понимания обычного пользователя заголовки страниц и названия ссылок, а качество интерфейса приложения и релевантность контента поисковому запросу снижаются.\nВ последнее время алгоритмы работы ведущих поисковых систем интернета изменились: поведение и предпочтения пользователя стали иметь большее значение при поисковом анализе вебприложения [1]. Алгоритмы ранжирования вебсайтов стали способны учитывать поведение пользователя на отдельной веб-странице [2]. Обычно выделяют следующие метрики для анализа поведения пользователей на веб-сайте: глубина просмотра, продолжительность визита, источник перехода, тип устройства, географическое положение пользователя. Поэтому возникла необходимость предоставления более качественного и релевантного предпочтениям пользователя контента, а также общее повышение уровня удовлетворенности от пользования приложением.\nЗадачей разработчиков веб-приложения становится предоставление максимально релевантной предпочтениям пользователя информации, тем самым улучшая метрики его поведения. Индивидуальная настройка внешнего вида и содержимого\nотдельной страницы в соответствии с интересами пользователя является одним из эффективных решений для достижения этой цели. Семантический анализатор, исполняемый на стороне клиента, и генератор семантических атрибутов, исполняемый на стороне сервера, могут производить семантический анализ информации и динамически настраивать расположение и оформление контента в соответствии с нуждами конкретного пользователя.\nПредполагаемыми сферами применения подобной архитектуры могут быть приложения, работающие по принципу социальных сетей и отличающиеся большой разнородностью интересов пользователей [3].\nДля создаваемой архитектуры были определены необходимые качества:\n•\tГибкость. Процесс интеграции должен требовать минимальной модификации логики приложения. Разработчик должен иметь возможность добавлять новые методы перестроения содержимого веб-страницы и новые алгоритмы ранжирования частей контента.\n•\tМасштабируемость. Количество пользователей веб-приложения должно оказывать минимальное влияние на время выполнения операции семантического анализа и перестроения пользовательского интерфейса.\n•\tБезопасность. Предпочтения пользователя должны храниться в не персонализированной форме.\nВсе перечисленные выше качества достигаются архитектурой семантического приложения (рис. 1). Все процессы, за исключением процесса генерации семантического HTML-кода, исполняются на стороне клиента.\nВ соответствии с основными процессами, представленными выше на диаграмме потоков данных (рис. 1), можно выделить четыре основных компонента создаваемой системы семантического анализа:\n1)\tгенератор семантического HTML-кода;\nРис. 1. Диаграмма потоков данных системы семантической оптимизации веб-сайтов\nРис. 2. Диаграмма клиентских компонентов\n2)\tхранилище семантических профилей пользователя;\n3)\tсемантический анализатор;\n4)\tбиблиотека сервисных функций.\nАрхитектура рассматриваемой системы является распределенной и состоит из двух физических узлов - веб-сервера (среды исполнения веб-приложения) и клиента. Компоненты программной системы, за исключением генератора семантического HTML-кода, исполняются интернет-браузером пользователя (рис. 2).\nГенератор семантического HTML-кода - компонент архитектуры, создающий входные данные для семантического анализатора. Генератор семантического HTML-кода добавляет семантическую\nинформацию к элементам контента, которые будут в дальнейшем проанализированы семантическим анализатором.\nДобавление семантической информации к HTML-содержимому реализуется путем использования специальных атрибутов. При данном способе каждому семантически значимому HTML-тегу присваиваются специальные атрибуты, описывающие контент (рис. 3). Значение атрибута представляет собой строку, состоящую из набора слов (тегов), разделенных пробелом: «тег1 тег2 тег3 тег4». При данном способе форматирования можно задавать произвольное число тегов (строковых констант), характеризующих предпочтения пользователя. Данный подход может использоваться в соче-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n<div semantic=\"moscow economics foodmanket\">...</div>\nРис. 3. Пример семантического атрибута\nтании с обычным разделением веб-страницы на семантические области, такие как область навигации и основная функциональность область [4].\nВ настоящее время большинство веб-приложений используют различные вариации МУС-архи-тектуры. Логика по форматированию и формированию значений семантических атрибутов должна реализовываться в слое представления веб-приложения.\nПри анализе HTML-документа компонент «Семантический анализатор» использует данные, созданные генератором семантического HTML-кода. Поэтому генератор семантического HTML-кода не имеет прямых отношений использования или ассоциации с другими компонентами архитектуры.\nСемантический профиль пользователя - объект для хранения информации о предпочтениях пользователя приложения. Семантический профиль состоит из набора полей с уникальными названиями. Каждое поле имеет количественное значение, именуемое в дальнейшем оценкой поля, определяющее его релевантность к предпочтениям пользователя. В хранилище семантический профиль представляется в виде строки, состоящей из пар «поле: значение», разделенных пробелами. Примером такой строки может быть строка «moscow:16 /ооётаг-кв1:7 ажгаАхЛО russia^Лh>.\nОперации, которые могут выполняться над семантическим профилем:\nа)\tДополнение. К семантическому профилю пользователя добавляются новые поля (предпочтения). Если поле уже присутствует в профиле пользователя, то происходит увеличение оценки поля на требуемое значение.\nб)\tВычитание. Оценка полей профиля, перечисленных во входной строке, уменьшается на требуемое значение. В случае, если оценка поля стала отрицательной или равной нулю, такое поле исключается из профиля пользователя.\nв)\tУдаление. Из профиля удаляются теги (предпочтения), перечисленные во входной строке. Поставщик семантических профилей ответственен за формирование набора характеристик предпочтений пользователя. Хранилище семантического профиля является децентрализованным. Профиль пользователя хранится в объекте ИТИЬ5 LocalStoragв [5]. Данный подход делает архитектуру приложения менее зависимой от конкретной исполняющей среды и СУБД.\nСценарии, при которых целесообразно использовать клиентское распределенное хранилище:\n•\tБольшинство пользователей используют персональные устройства для доступа к веб-приложению, такими как интернет-планшеты или коммуникаторы.\n•\tСтраницы веб-приложения просматриваются анонимно без использования регистрационных учетных записей.\n•\tПосетители совершают множество действий во время посещения веб приложения. В результате семантический профиль, если он был утрачен в процессе очистки временных файлов или смены веб-браузера, быстро восстанавливается в процессе самообучения.\nСледующие источники могут быть использованы для получения данных о пользователе: социальные сети, опросы (анкетирование) на веб-сайте, статистика поведения пользователя, данные о географическом положении пользователя.\nТребования к хранилищу семантических данных:\nа)\tПроизводительность. Время, затраченное на процесс получения семантического профиля пользователя из хранилища, может существенно увеличить время выполнения индивидуальной настройки веб-страниц.\nб)\tНаличие механизмов разграничения доступа между несколькими веб-приложениями. Созданное решение для хранения семантических профилей состоит из двух составных частей (рис. 4):\n1.\tВеб-страница на удаленном сервере (серверная страница). Основное назначение этой страницы перенаправлять запросы к объекту LocalSto-mge после проверки прав доступа клиента на осуществление операции.\n2.\tJavaScript-библиотека (клиент), представляющая из себя скрипт с программным интерфейсом для доступа хранилищу. Данная библиотека должна быть включена во все веб-страницы, которые подлежат семантической оптимизации. При первом обращении к программному интерфейсу на странице создается объект ifra-me, который ссылается на серверную веб-страницу. В дальнейшем запросы на получение или запись данных в объект LocalStorage направляются через объект iframe. В объект iframe загружается страница с главного домена. Объект ifra-me выступает в роли сервера. На странице, загруженной в объект iframe, содержится набор функций для записи и чтения данных из объекта LocalStorage.\nПеред выполнением любого запроса происходит сопоставление URL-адреса веб-приложения со списком разрешенных доменов. Список разрешенных доменов хранится в JavaScript-библиотеке, размещенной на серверной странице. Список разрешенных доменов представляет собой строковую константу, содержащую список доменов любого уровня, разделенных символом пробела. В случае несоответствия домена клиента выполнение\nОбработать запрос\nРис. 4. Процесс обращения к семантическому хранилищу.\nскрипта приостанавливается. Данный процесс выполняется на стороне клиента, но оригинальный JavaScript-код, загруженный вместе с серверной страницей, не может быть изменен сторонними объектами. Следовательно, исполнение данного процесса на стороне клиента не может негативно повлиять на безопасность приложения.\nРазработанная архитектура предполагает, что группа веб-приложений, имеющих достаточно количество общих посетителей, может использовать общий семантический профиль. Данные о поведении пользователя и его предпочтениях могут стать доступными заранее определенному списку вебприложений. Идентификатором приложения в таком списке является его доменное имя. Подобный подход позволяет получить более обширный набор данных о предпочтениях пользователя для более точного перестроения содержания страницы.\nКомпонент «Семантический анализатор» ответственен за процесс выборки всех элементов HTML-контента и дальнейшее выявление частичных или полных совпадений значений их семантических атрибутов с набором атрибутов семантического профиля пользователя. Процесс семантического анализа состоит из следующих процессов: получение набора элементов для анализа, установление рейтинга для каждого элемента и выполнение callback-функции для каждого из семантических элементов.\nРелевантность того или иного элемента содержимого веб-страницы рассчитывается следующим образом:\n•\tПоля семантического профиля располагаются по убыванию их оценки.\n•\tКаждый тег семантического элемента сопоставляется полям профиля. В случае, если тег соответствует полю семантического профиля, происходит начисление рейтинга в зависимости от расположения поля в отсортированном семантическом профиле пользователя. При настройке семантического анализатора указывается шаг уменьшения рейтинга в зависимости от позиции поля семантического профиля.\nОценки за каждое совпадение суммируются. В случае совпадения оценка начисляется по следующей формуле:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nratioi = ratio 0 х incr',\nгде ratioi - рейтинг, начисляемый за совпадение поля; i - позиция поля в отсортированном профиле пользователя; incr - коэффициент убывания значимости.\nПо завершении работы семантического анализатора происходит настройка блоков контента в соответствии с предпочтениями пользователя следующими образами:\nа)\tИзменение уровня прозрачности блоков контента, которые по результатам семантического анализа могут быть нерелевантными профилю пользователя.\nб)\tИзменение порядка следования HTML-блоков, находящихся на одном уровне иерархии в DOM. Применение данного подхода более целесообразно для пользователей мобильной версии веб-сайта. Мобильные устройства имеют небольшой размер экрана, содержимое страницы мобильной версии интернет-приложения располагается в одной колонке, и пользователь уделяет большее внимание контенту, находящемуся в начале страницы [6].\nв)\tИзменение оформления. При данном типе перестроения страницы возможно изменения размера, типа и цвета шрифта, добавление специальных графических символов или изменение цвета блока, содержащего семантические атрибуты.\nг)\tПолное сокрытие нерелевантных блоков. Данный метод применим к узкому кругу веб-приложений. Наиболее целесообразно применять данный способ перестроения страницы, если пользователь явно отмечает свои предпочтения, а возможности самообучения отключены. Способы изменения внешнего вида страницы,\nне меняющие порядок следования частей контента, удобны тем, что они не требует блокировки интерфейса в процессе анализа. Пользователь может\nпродолжать работать с содержимым страницы и по прошествии нескольких секунд наблюдать результаты анализа.\nСозданное решение предлагает разработчику определять собственные callback-функции, выполняющие настройку контента путем изменения CSS-атрибутов HTML-элементов или иным способом. Входными параметрами для этой функции являются отсортированный по убыванию значения атрибута rating массив DOM-элементов, находящихся на одном уровне иерархии.\nПользователь веб-сайта с регулярно обновляющимся контентом посещает ресурс с некоторой периодичностью. Пользователь открывает для себя новые области знаний или сферы общественной жизни, что может означать изменение или коррекцию его предпочтений. При обычном сценарии использования веб-приложения пользователь не будет каждый раз редактировать свой профиль вручную в соответствии изменившимися настройками. Оптимальным поведением семантического анализатора является наблюдение за поведением пользователя и внесение изменений в его профиль, основанных на анализе поведения. Семантический анализатор отслеживает переходы пользователя по ссылкам, которые находятся внутри HTML-элементов с семантическими атрибутами.\nРазработанная программная система может быть интегрирована с существующими веб-приложениями согласно следующей последовательности действий:\n1.\tОпределение сущностей, подлежащих семантическому анализу, и их семантических атрибутов. Примерами таких сущностей является статья, новость. Как правило, для семантического анализа выбираются сущности, которые отображаются на веб-странице в виде списка.\n2.\tСоздание логики для вывода семантических атрибутов. Данный этап может в себя включать изменение схемы базы данных. Изменение схемы базы данных не потребуется, если анализируемые сущности имеют иерархические отношения с другими сущностями, которые способны поставлять семантические атрибуты.\n3.\tПодключение JavaScript-библиотек. Указание списка доверенных доменов. Задание начальной конфигурации анализатора и хранилища семантических профилей.\nПроцесс интеграции был подтвержден на примере фотоблога и агрегатора новостей.\nВыводы\nРазработанная архитектура семантического интернет-приложения может быть применена к широкому кругу существующих веб-приложений. Решение позволит разработчикам одновременно улучшить ранжирование интернет-приложения поисковыми системами и повысить удобство использования для посетителей. Произведенные работы по интеграции на примере двух веб-приложений подтвердили, что процесс интеграции не является трудоемким и не требует глубокой модификации уже существующих приложений.\nСозданное решение отличается от существующих использованием интернет-браузера в качестве среды исполнения семантического анализатора и распределенным по конечным пользовательским устройствам хранилищем данных. Помимо этого, решение предлагает разделяемые наборы пользовательских профилей между несколькими веб-приложениями.\nСозданный набор JavaScript-библиотек был опубликован на хостинге проектов с открытым исходным кодом github.com в репозитории sвmanticOpt и доступен широкому кругу разработчиков.\nСПИСОК ЛИТЕРАТУРЫ\n1.\tEnge E., Spencer S., Stricchiola J., Fishkin R. The art of SEO. Second edition. - Sebastopol, CA: O’Reily, 2012. - 714 p.\n2.\tAgichtein E., Brill E., Dumais S. Improving Web Search Ranking by Incorporating User Behavior Information // SIGIR ‘06. The 29th Annual International SIGIR Conference Seattle. - WA, USA, 2006. - P. 19-26.\n3. Porter J. Designing for the social web. - Berkeley, CA: New Riders, 2008. - 201 p.\n4.\tSemantic HTML // MSDN. 2012. URL: http://msdn.micro-soft.com/en-us/library/windows/desktop/gg671917.aspx (дата обращения: 10.03.2011).\n5.\tWeb Storage W3C Candidate Recommendation 08 December 2011\n- W3C. Дата обновления:\t08.12.2011.\tURL:\nhttp://www.w3.org/TR/webstorage/\t(дата обращения:\n11.05.2011).\n6.\tLubbers P., Albers B., Salim F. Pro HTML5 Programming: Powerful APIs for Richer Internet Application Development. - Berkeley, CA: Apress, 2010. - 304 p.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПоступила 13.07.2012 г.\n",
    "download_url": "https://cyberleninka.ru/article/n/sistema-semanticheskoy-optimizatsii-soderzhimogo-veb-saytov-na-osnove-polzovatelskih-predpochteniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-vnutrennego-predstavleniya-kompilyatora-kotlin-native-i-optimizatsiy-na-ego-osnove",
    "slug": "razrabotka-vnutrennego-predstavleniya-kompilyatora-kotlin-native-i-optimizatsiy-na-ego-osnove",
    "title": "РАЗРАБОТКА ВНУТРЕННЕГО ПРЕДСТАВЛЕНИЯ КОМПИЛЯТОРА KOTLIN / NATIVE И ОПТИМИЗАЦИЙ НА ЕГО ОСНОВЕ",
    "abstract_description": "Котлин - это статически типизированный язык программирования, который поддерживает объекно-ориентированную и функциональную парадигмы программирования. Изначальной целевой платформой была выбрана JVM, однако затем была добавлена возможность транспиляции в JavaScript и компиляции под нативные платформы с помощью LLVM (Kotlin / Native). Первые две платформы представляют собой хорошо развитые виртуальные машины, способные выполнять продвинутую оптимизацию программ во время исполнения. Однако в случае нативных платформ оптимизацию необходимо выполнять во время компиляции. На данный момент в Kotlin / Native отсутствуют многие оптимизации, из-за чего производительность порождаемого кода во многих случаях получается низкой. В этой работе описан способ решения данной проблемы с помощью введения дополнительного внутреннего представления, основанного на SSA-форме, и реализации escape-анализа на его основе. Результаты экспериментов показали, что этот подход способен значительно улучшить производительность.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.4'422\nDOI 10.25205/1818-7900-2020-18-2-15-30\nРазработка внутреннего представления компилятора Kotlin / Native\nи оптимизаций на его основе\nС. С. Боголепов\nНовосибирский государственный университет Новосибирск, Россия\nАннотация\nКотлин - это статически типизированный язык программирования, который поддерживает объекно-ориенти-рованную и функциональную парадигмы программирования. Изначальной целевой платформой была выбрана JVM, однако затем была добавлена возможность транспиляции в JavaScript и компиляции под нативные платформы с помощью LLVM (Kotlin / Native). Первые две платформы представляют собой хорошо развитые виртуальные машины, способные выполнять продвинутую оптимизацию программ во время исполнения. Однако в случае нативных платформ оптимизацию необходимо выполнять во время компиляции. На данный момент в Kotlin / Native отсутствуют многие оптимизации, из-за чего производительность порождаемого кода во многих случаях получается низкой. В этой работе описан способ решения данной проблемы с помощью введения дополнительного внутреннего представления, основанного на SSA-форме, и реализации escape-анализа на его основе. Результаты экспериментов показали, что этот подход способен значительно улучшить производительность. Ключевые слова\nKotlin, static single assignment, escape-анализ, оптимизация, LLVM Для цитирования\nБоголепов С. С. Разработка внутреннего представления компилятора Kotlin / Native и оптимизаций на его основе // Вестник НГУ. Серия: Информационные технологии. 2020. Т. 18, № 2. С. 15-30. DOI 10.25205/18187900-2020-18-2-15-30\nDevelopment of Kotlin / Native Intermediate Representation\nand Optimizations\nS. S. Bogolepov\nNovosibirsk State University Novosibirsk, Russian Federation\nAbstract\nKotlin is a statically typed programming language that supports object-oriented and functional programming. It supports JVM, JS and native platforms via LLVM (Kotlin / Native). The first two targets are backed with well-developed virtual machines that can perform advanced program optimizations at runtime. However, for native platforms, all optimizations must be performed at compile time.\nCurrently Kotlin / Native lacks many optimizations, which is why the performance of the generated code is poor in many cases. This paper describes a way to solve this problem by introducing an additional SSA-based intermediate representation and implementing escape analysis using it. Experimental results have shown that this approach can significantly improve performance. Keywords\nKotlin, static single assignment, escape analysis, optimization, LLVM\n© С. С. Боголепов, 2020\nFor citation\nBogolepov S. S. Development of Kotlin / Native Intermediate Representation and Optimizations. VestnikNSU. Series: Information Technologies, 2020, vol. 18, no. 2, p. 15-30. (in Russ.) DOI 10.25205/1818-7900-2020-18-2-15-30\nВведение\nKotlin / Native - это AOT (Ahead-of-Time) компилятор языка программирования Котлин. Для компиляции в машинный код используется LLVM. Поддерживается большое количество целевых платформ, таких как iOS, macOS, Linux (arm64, x64, mips32) и многие другие.\nПримечательной особенностью Kotlin / Native является то, что он компилируется в режиме «закрытого мира», что отличает его от большинства других промышленных компиляторов. Режим «закрытого мира» означает, что во время компиляции доступен весь граф зависимостей текущей единицы трансляции, что позволяет делать глобальные анализ и оптимизацию программы. Например, известна вся иерархия классов, что упрощает оптимизацию виртуальных вызовов.\nНедостатком по сравнению с «открытым миром» является усложнение раздельной компиляции, а также трудности с одновременным использованием нескольких динамических библиотек, написанных на Kotlin / Native. Например, это приводит к тому, что стандартная библиотека и другие зависимости включены в каждый бинарный файл. Если одна зависимость используется в двух разных бинарных файлах, то это разные с точки зрения идентичности декларации, так как они принадлежат к разным «мирам».\nВнутреннее представление компилятора Kotlin / Native\nВнутреннее (или промежуточное) представление (Intermediate Representation, IR) компилятора - структура данных, используемая компилятором для представления исходного кода входной программы. Многие компиляторы используют несколько внутренних представлений на разных этапах компиляции, так как некоторые алгоритмы трансляции и оптимизации удобнее реализовывать с помощью одного представления, а другие - с помощью другого.\nРассмотрим, как эволюционировал компилятор Котлина с точки зрения используемых внутренних представлений.\nProgram Structure Interface. Изначально в компиляторе Котлина не было продвинутого внутреннего представления, пригодного для оптимизаций. PSI (Program Structure Interface, представление кода, использующееся в Intellij Platform) напрямую транслировался в байткод виртуальной машины Java. Такое же решение использовалось и при трансляции в JavaScript. Данный подход был приемлем, так как в обоих случаях задача оптимизации кода программы целиком ложилась на плечи виртуальной машины. Тем не менее даже для таких примитивных целей (с точки зрения продвинутых компиляторов) это не самый удачный выбор, так как, например, подстановку инлайн-функций приходится выполнять на байткоде JVM, что является крайне нетривиальной задачей. Поэтому вместе с разработкой Kotlin / Native началась разработка полноценного нового внутреннего представления, общего для всех компиляторов.\nДревовидное представление. Выбор пал на древовидное представление программ. Оно низкоуровневое, по сравнению с PSI, изменяемое и сериализуемое, что позволяет использовать его для реализации оптимизаций и в качестве формата для дистрибуции библиотек. В отличие от многих других компиляторов, линковка в компиляторе Kotlin / Native происходит на уровне промежуточного представления (а не бинарного кода), поэтому на вход оптимизирующим фазам компилятора подается вся программа с ее зависимостями. Разумеется, это дорогой с точки зрения времени компиляции подход, поэтому для тех режимов компиля-\nции, в которых не важна производительность порождаемого кода, существует кэширование зависимостей в виде бинарного кода.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНад древовидным представлением можно производить понижающие преобразования, что позволяет оптимизировать программный код и упрощает дальнейшую трансляцию. Но так как отсутствует явный граф потока управления, реализация многих оптимизаций, основанных на нем, затруднена. Поэтому, например, оптимизация циклов выполнена ad hoc для известных коллекций из стандартной библиотеки, что существенно ограничивает область ее применения.\nРассмотрим пример. Пусть на вход компилятору дана следующая функция f:\nfun f(х: Boolean): Int {\nТогда текстовое описание ее древовидного представления выглядит так: FUN name:f visibility:public modality:FINAL <>\nVALUE_PARAMETER name:x index:0 type:kotlin.Boolean\nCONSTRUCTORCALL 'public constructor <init>\nif: CONST Boolean type=kotlin.Boolean value=true CONSTRUCTOR_CALL 'public constructor <init>\n$this: GETVAR 'val a: <root>.A [val]' type=<root>.A\nLLVM\nLLVM (Low-Level Virtual Machine) - это инфраструктура разработки компиляторов [1]. В ее основе лежит низкоуровневое внутреннее представление, основанное на графе потока управления в SSA-форме - LLVM IR (сериализованная форма которого называется «бит-код»). Фронтенду компилятора достаточно транслировать свое представление (например, древовидное) в LLVM IR, после чего LLVM выполнит его оптимизацию и компиляцию под целевую платформу. Оптимизации LLVM не привязаны к какому-то конкретному языку и поэтому достаточно низкоуровневые. Пример оптимизаций, которые поддерживает LLVM:\n•\tmem2reg - замена операций работы с памятью на операции работы с виртуальными регистрами;\n•\tGlobal Value Numbering - поиск общих подвыражений;\n•\tудаление мертвого кода (как целых функций, так и инструкций и базовых блоков).\nLLVM лег в основу большого количества современных компиляторов: Clang, Rust, Swift,\nJulia, Crystal, Scala Native и многих других.\nStatic Single Assignment (SSA) форма\nПромежуточное представление программы, в котором каждое значение присваивается ровно один раз. Данное представление значительно упрощает написание многих видов оптимизаций, так как отсутствуют изменяемые переменные. Важной особенностью данного представления является ф-функция, которая служит для слияния нескольких значений в одно в случае нескольких предшествующих ветвей управления (рис. 1, 2).\nРис. 1. Пример графа потока управления не в SSA-форме Fig. 1. Non-SSA Control Flow Graph\nРис. 2. Пример того же графа управления в SSA-форме Fig. 2. The same Control Flow Graph in SSA form\nУправление памятью\nВ отличие от большинства реализаций JVM и виртуальных машин JS, в которых для сборки мусора применяется трассирующий коллектор, в Kotlin / Native используется автоматический подсчет ссылок (рис. 3). Наивный алгоритм подсчета ссылок плохо применим к языку Котлин, так как он приводит к утечкам памяти, поэтому используется модификация алгоритма, описанного в работе [2].\nРис. 3. Текущий пайплайн компилятора Kotlin / Native Fig. 3. Current Kotlin / Native compiler pipeline\nОдной из основных причин для выбора данного алгоритма была необходимость взаимодействия со средой исполнения Objective-C, где также используется подсчет ссылок.\nЗамеры текущей производительности\nРассмотрим сравнение производительности разных языков 1. Оно нас интересует из-за того, что в тестовой программе много аллокаций объектов и мало виртуальных вызовов, что позволяет оценить влияние управления памятью на общую производительность кода. Рассмотрим результаты измерения профиля программы с помощью утилиты perf, приведенные в (табл. 1). Как видно из таблицы, все указанные функции (за исключением splitBinary и merge) относятся к управлению памятью.\nДанная компонента среды исполнения является бутылочным горлышком Kotlin / Native в плане производительности, так как стиль программирования на языке Котлин предполагает большое количество объектов и присвоения ссылок, что приводит к большому количеству вызовов функций управления памятью. В отличие от трассирующего коллектора, который используется в подавляющем большинстве сред исполнения с автоматической сборкой мусора, в средах исполнения с подсчетом ссылок каждое создание объекта и изменение ссылки приводит к замедлению программы.\n1 https://github.com/frol/completely-unscientific-benchmarks\nТаблица 1\nПрофиль в Unscientific Benchmark\nTable 1\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nUnscientific Benchmark profile\nФункция и ее происхождение\tДоля процессорного времени\ngarbageCoПect (управление памятью)\t19,7\nallocInstance (управление памятью)\t16\nкШп^рШВтагу (пользовательский код)\t10,1\nfreeContainer (управление памятью)\t10\nupdateHeapRef (управление памятью)\t6,3\nк&п:те^е (пользовательский код)\t5,5\nReleaseHeapRefStrict (управление памятью)\t5,3\nОстальные функции\t27,1\nКроме того, ошибочно воспринимать LLVM как JVM, CLR и другие виртуальные машины. Несмотря на то, что фундаментально данные технологии похожи (трансляция и оптимизация некоторого низкоуровневого входного языка в бинарный код), концептуально они совершенно разные: оптимизирующий пайплайн LLVM ожидает на вход достаточно примитивный язык и не умеет оптимизировать паттерны, соответствующие коду, написанному на объектно-ориентированном (ОО) языке, в то время как, например, JVM изначально создавалась с расчетом, что ей на вход подается байткод, который получен трансляцией программы на языке Java практически без оптимизаций.\nВозможные решения\nТак как нас интересует уменьшение доли вышеперечисленных функций в профиле программы, то возможны два ортогональных подхода:\n•\tдинамический - ускорение исполнения путем ручной оптимизации данных функций;\n•\tстатический - уменьшение количества вызовов к ним путем компиляторных оптимизаций.\nПервый подход более простой, так как не требует внесения изменений в код компилятора, но является ограниченным, поскольку вызовы функций среды исполнения все равно остаются. Кроме того, он никак не улучшает код, порождаемый компилятором. Второй подход потенциально позволяет избавиться вообще от всех операций инкремента / декремента счетчика ссылок в некоторых случаях, но при этом сложнее в реализации.\nДля реализации второго подхода часто (в частности, в JVM) используется алгоритм escape-анализа. Цель данного анализа - определить область видимости объекта. Например, если он виден только внутри функции, то его можно аллоцировать на стеке, а если он присваивается в глобальную переменную, то это будет некорректно, и его нужно аллоцировать на куче.\nКак и с любым алгоритмом, для реализации escape-анализа очень важно правильное представление входных данных. В данном случае таковым является внутреннее представление компилируемой программы. Рассмотрим, почему ни одно из двух существующих представлений компилятора Kotlin / Native (древовидное и LLVM IR) не являются оптимальными для реализации escape-анализа.\nНа древовидном IR такую оптимизацию полноценно реализовать оказывается затруднительно, так как отсутствуют явное представление потока управления и операции подсчета\nссылок. В Kotlin / Native на данном представлении реализован алгоритм локального escape-анализа, который крайне консервативен (поддерживает только локальные массивы примитивных типов фиксированной длины).\nВ LLVM существует развитая инфраструктура для написания анализов и трансформаций, поэтому возникает идея переиспользовать ее для написания собственных. Однако это довольно нетривиально, так как в LLVM отсутствует любая информация о статических типах объектов (например, информация о наследовании), которая необходима для написания высокоуровневых оптимизаций. Ее можно передать в виде метаинформации, но работать с ней в таком случае крайне затруднительно.\nТаким образом, возникает идея для добавления еще одного внутреннего представления, которое, с одной стороны, будет знать об особенностях входного языка, а с другой - отражать поток управления и операции подсчета ссылок. Похожие решения применяются во многих других компиляторах, которые используют LLVM (например, Swift, Rust и Scala Native).\nВ дальнейшем новое внутреннее представление будет именоваться SSA IR (Static-Single Assignment Intermediate Representation).\nОписание реализации\nSSA IR - это внутреннее представление, основанное на графе потока управления, находящегося в SSA-форме. Рассмотрим основные составляющие данного представления.\nМодуль. Это коллекция определений функций и глобальных переменных. На данный момент модуль выполняет единственную роль: это удобный способ запустить какую-то трансформацию или анализ над всеми элементами SSA IR.\nФункция. Это именованный направленный граф базовых блоков, соединенных между собой параметризованными ребрами. Параметры функции совпадают с параметрами входного базового блока. У методов классов и интерфейсов нет неявного параметра this, он указывается явно первым параметром.\nДля каждой функции хранится ссылка на соответствующую декларацию древовидного представления, из которой можно получить дополнительную информацию (например, область видимости функции).\nБазовый блок. Это последовательность инструкций, у которой одна точка входа (первая инструкция) и одна точка выхода (терминальная инструкция). Одной из особенностей реализации является то, что вместо классических ф-функций используются параметры у базовых блоков. Данный подход, во-первых, делает взаимосвязи между базовыми блоками более очевидными, а во-вторых, решает ряд проблем классического подхода. Например:\n•\tф-функции всегда должны быть в начале базового блока, что усложняет оптимизации;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tневозможность провести два ребра от одного блока к другому.\nКроме того, базовые блоки с параметрами фактически стирают границу между SSA-пред-ставлением и Continuation Passing Style [3], что упрощает процесс решения проблем при использовании подобного представления.\nИнструкция. Аналогично LLVM IR инструкции представлены в виде трехадресного кода (т. е. имеют явно указанное возвращаемое значение и параметры).\nВ отличие от LLVM IR, набор инструкций SSA IR позволяет описывать более высокоуровневые операции. Рассмотрим несколько примеров.\n•\tSSAInterfaceCall. Вызов интерфейсного метода.\n•\tSSAVirtualCall. Вызов виртуального метода.\n•\tSSAIncRef/SSADecRef. Инкремент / декремент счетчика ссылок у переданного объекта.\n•\tSSAAlloc. Абстрактная аллокация (на куче или на стеке).\nДля того чтобы упростить работу, была добавлена аннотация @SSA, которая означает, что над аннотированной функцией необходимо проводить нижеописанные операции. Таким образом, стало возможным разрабатывать SSA Ж постепенно, аннотируя только те функции, конструкции которых поддержаны в представлении (рис. 4).\nРис. 4. Новый пайплайн компилятора Fig. 4. New compiler pipeline\nТрансляция в SSA IR\nАлгоритм трансляции древовидного представления в SSA IR основан на методе, описанном в работе [4]. В отличие от классического алгоритма, описанного в [5], в данном алгоритме не требуется предварительно строить граф потока управления и фронт доминаторов, что значительно упрощает трансляцию напрямую из древовидного представления.\nАлгоритм трансляции\nИнструкции древовидного представления, которые выполняются последовательно, оказываются в одном базовом блоке. Когда встречается запись в переменную, мы записываем промежуточное представление, являющееся значением переменной, как текущее значение пере-\nменной. Соответственно, когда происходит чтение значения переменной, мы его используем. Данный процесс называется local value numbering. Целиком заполненный базовый блок помечается как заполненный.\nЕсли базовый блок не содержит определения переменной, то мы рекурсивно ищем его среди предков блока. Если предков несколько, то на ребра каждого из них добавляется значение переменной, а базовому блоку добавляется параметр, формальное значение которого указывается в качестве значения переменной. Как можно заметить, при использовании такой нотации (вместо ф-функции) возникает ассоциация с вызовом функции, что значительно упрощает ментальную модель данного представления.\nВ случае циклов внутри функции может возникнуть рекурсивное определение значения переменной. Поэтому сначала добавляется формальный параметр базового блока, и если при поиске значения переменной мы встречаем формальный параметр, то это означает конец рекурсии.\nПоиск значения осуществляется только внутри заполненных блоков, так как в незаполненный блок может добавиться новое значение, которое перезапишет предшествующее.\nНазовем базовый блок запечатанным, если известны все его предки. Стоит отметить, что свойство запечатанности не влечет за собой заполненность (тривиальный пример - входной базовый блок).\nПроблема возникает, когда мы пытаемся найти определение в незапечатанном блоке, в котором нет определения этой переменной. В таком случае мы создаем дополнительный параметр блока и указываем его в качестве значения. Для каждого блока мы храним список таких параметров. В дальнейшем, когда происходит запечатывание базового блока, для каждого такого параметра осуществляется поиск по алгоритму, описанному ранее.\nПолезным побочным эффектом данного алгоритма является то, что ряд оптимизаций происходит прямо во время построения представления. Например, протяжка констант.\nРанее рассмотренная функция f в SSA IR принимает следующий вид:\ncondbr %0: bool when_bodyl() when_cond2()\n%3 А = call_direct A.<init> %2: А, 5: int\n%6 А — calldirect A.<init> %5: А, 6: int\n%9 type_unk = call_direct A.print %8: А block return_block4(%ll: int):\nАлгоритмы над SSA IR\nВсе алгоритмы выполнены в форме проходов над представлением, которые запускаются последовательно.\nВалидация проверяет инварианты, общие для всех промежуточных состояний представления, а именно:\n•\tвсе базовые блоки замкнуты;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tвсе базовые блоки заканчиваются терминальными инструкциями;\n•\tвсе использования некоторого значения указаны в списке пользователей данного значения;\n•\tинструкция находится внутри базового блока, который указан как ее владелец;\n•\tколичество и тип параметров базового блока соответствует количеству и типу аргументов, переданных в него.\nУдаление недостижимых блоков. В результате трансляции из древовидного представления или в ходе какого-то преобразования может возникнуть базовый блок, у которого нет предков. Поток управления никак не может прийти в такой базовый блок, поэтому он может быть удален. Данный алгоритм реализован в LLVM, поэтому он не является обязательным. Тем не менее эта оптимизация уменьшает время работы дальнейших алгоритмов и упрощает отладку.\nОткрытая подстановка геттеров и сеттеров. В Котлине вместо методов вида getField() и setField() используются свойства (property), для которых автоматически генерируются соответствующие методы доступа к полям объекта: геттеры и сеттеры. Их можно переопределять, усложняя поведение, но в большинстве случаев в них нет никакой произвольной логики, кроме обращения к подлежащему полю. Возможность «увидеть» доступ к полям объекта крайне важен для escape-анализа, так как если доступ к полю скрыт внутри метода, то escape-анализ сможет увидеть, что объект убегает, через присваивание в поле только на этапе межпроцедурного анализа. Поэтому необходима трансформация, которая осуществляет открытую подстановку (инлайн) таких методов.\nПолноценная реализация такой оптимизации является крайне трудоемкой задачей с огромным числом эвристик. Для наших же целей достаточно реализовать простой алгоритм, который подставляет только геттеры и сеттеры с примитивными телами. Компиляция в режиме «закрытого мира» позволяет проанализировать тело вызываемого метода и принять решение о подстановке.\nПостроение графа вызова функций позволяет выделить компоненты сильной связности (т. е. взаимную рекурсию) и понять, какие функции «скрываются» за виртуальными вызовами. Без него крайне затруднительно проводить межпроцедурные оптимизации.\nВ компиляторах ООП языков наиболее распространены два алгоритма: Class Hierarchy Analysis и Rapid Type Analysis [6]. В данной работе использована упрощенная версия последнего алгоритма.\nРассмотрим пример работы алгоритма. Пусть на вход компилятору подается следующая программа:\nclass С : I {\noverride fun virtualFn() {}\n}\n@SSA\nfun f(isA: Boolean): I = if (isA) A() else B()\n@SSA\nfun main() {\nf(true).virtualFn()\n}\nВ этой программе объект класса C никогда не создается, поэтому в графе вызовов C.virtualFn отсутствует (рис. 5).\nЧтобы уменьшить нагрузку на сборщик мусора, необходимо статически вывести время жизни объектов. Те объекты, время жизни которых не превышает время жизни стекового фрейма, можно аллоцировать на стеке. Алгоритм, который реализует такой анализ, называется «escape-анализ». Существует несколько реализаций такого алгоритма. Большинство из них было написано для JVM, которая JIT-компилирует код в режиме открытого мира. Это требует ряда компромиссов, так как в данном случае компилятор разделяет ресурсы компьютера с исполняемым кодом. В нашем же случае компиляция происходит AOT в режиме закрытого мира, что позволяет получить более точные результаты анализа ценой времени компиляции.\nВ данной работе был реализован алгоритм, описанный в статье [7]. Как и многие глобальные анализы, выбранный алгоритм разбивается на две фазы: внутрипроцедурного и межпроцедурного анализа.\nВнутрипроцедурный анализ. Эта часть анализа заключается в построении локального графа связей для всех анализируемых функций.\nГраф связей. Структура данных, которая используется для вычисления и хранения информации о том, на какие объекты могут ссылаться переменные, поля объектов и параметры функций. Граф связей - это направленный граф Е).\nРис. 5. Пример графа вызовов Fig. 5. Call graph example\nEscape-анализ\nОписание работы использованного алгоритма\nN - это множество вершин, которое разделяется на два класса. No - множество объектных вершин, представляющих объекты. Nr - множество ссылочных вершин, представляющих ссылки на объекты. Существует несколько видов ссылочных вершин:\n•\tлокальные представляют локальные переменные, ссылающиеся на объекты.\n•\tактуальные (actual) - параметры метода, аргументы и возвращаемые значения.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tполя - поля ссылочного типа.\n•\tглобальные - глобальные переменные.\nСтоит отметить, что одна объектная вершина может представлять множество вершин времени исполнения (например, если аллокация происходит в цикле).\nЕ - это множество ребер нескольких видов:\n•\tуказатель - ребро от вершины-ссылки к вершине-объекту;\n•\tполе объекта - ребро от вершины-объекта o к вершине-ссылке f. Существует, только если f представляет поле объекта o;\n•\tотложенное ребро - ребро между двумя ссылками, которое возникает в случае присваивания.\nТакие ребра можно удалять с помощью операции ByPass(q). Она заключается в «перекидывании» отложенных ребер, указывающих на q, на вершины, на которые указывает q\nС каждой вершиной ассоциируется одно из двух состояний: не убегает или убегает. Последнее состояние назначается вершинам, которые живут дольше, чем стековый фрейм анализируемого метода. Состояние убегает «растекается» по ребрам, и, таким образом, все транзитивное замыкание «убегающей» вершины становится «убегающим».\nПостроение графа связей. Граф связей строится последовательным обходом графа потока управления. Циклы обрабатываются до тех пор, пока алгоритм не сойдется. Если спустя фиксированное число итераций алгоритм не сходится, всем вершинам метода консервативно выставляется состояние убегает. Граф связей на входе в базовый блок - это объединение всех графов связей его предшественников.\nПеред построением графа связей для входного базового блока нужно обработать параметры функции в виде f = a, где f - это локальная вершина ссылочного типа, a - актуальная вершина ссылочного типа, которая представляет собой фактический аргумент. О том, как обрабатываются присваивание, рассказано ниже.\nОбработка инструкций в базовом блоке.\n• Присваивание объекта О в вершину v. Создается новая объектная вершина для O. Затем вызывается ByPass(v), после чего добавляется ребро-указатель от v к O.\n(рис. 6).\nРис. 6. Пример операции ByPass(p) Fig. 6. ByPass(p) sample\n•\tПрисваивание переменной p значения переменной q. Применяем ByPass(p), затем добавляем отложенное ребро отp в q.\n•\tp.f = q. Если в графе нет объектных вершин, достижимых из p через указатели или отложенные ребра (например, это параметр функции), то создаем фантомный объект O и добавляем ребро-указатель. Потом убеждаемся, что для всех таких объектных вершин существует вершина для поля f Затем для всех f добавляем отложенное ребро к q. Если p.f - это глобальная переменная, то у q устанавливается состояние убегает.\n•\tp = q.f. Сначала делаем ByPass(p). Если у q нет объектов, на которые она указывает, создаем фантомный объект и добавляем ребро-указатель. Создаем ребра и вершины для всехf Затем добавляем отложенные ребра отp ко всемf\nНа выходе из метода возвращаемые значения обрабатываются как присваивания в актуальные ссылки. Затем применяется ByPass ко всем ссылочным вершинам, чтобы избавиться от всех отложенных ребер. После этого та часть подграфа, которая достижима из убегающих вершин формирует нелокальный подграф, который представляет собой то, как функция влияет на вызывающую его функцию.\nМежпроцедурная часть анализа заключается в уточнении графа вызывающей функции с помощью результатов анализа вызываемой функции.\nАргументы функций рассматриваются как присваивания в актуальные ссылочные вершины, т. е. происходит обработка присваивания a = p, где a - это актуальная ссылка, которая позднее будет связана с актуальной ссылкой в вызываемой функции (мы ее создаем в самом начале алгоритма).\nСразу после вызова функции мы должны обработать эффект, который вызываемая функция оказывает на вызывающую. Для этого мы должны построить соответствие между двумя графами связи. Мы это делаем начиная с актуальных ссылок, которые представляют формальные параметры метода на стороне вызываемой функции с соответствующими ссылками в вызывающей функции. Затем ищем соответствующие объекты в множествах PointsTo. Если в вызывающей функции нет соответствующей вершины для объекта, то создается фантомный объект, после чего строим соответствие между полями данных объектов. Этот процесс продолжается рекурсивно до полного замыкания. Далее добавляем соответствующие ребра по аналогичному правилу.\nТаким образом, нелокальный подграф вызываемой функции копируется в граф вызывающей функции, и его эффект распространяется на последнюю.\nВозникает естественный вопрос о рекурсивных вызовах. Для этого выделяются компоненты сильной связности, и межпроцедурный анализ запускается на них до тех пор, пока алгоритм не сойдется.\nРасстановка операций управления памятью. Следующая фаза использует результат es-cаpe-анализа для расстановки операций инкремента и декремента счетчика ссылок.\nВ случае если объект не покидает пределов метода, он просто аллоцируется на стеке и помечается специальной маской, чтобы сборщик мусора не удалил такой объект, несмотря на отсутствие живых ссылок на него.\nИначе происходит расстановка операций изменения счетчика ссылок:\n•\tпри передаче объекта в качестве аргумента в функцию счетчик увеличивается;\n•\tпосле возвращения из функции счетчик ссылок уменьшается;\n•\tпри записи в поле счетчик ссылок увеличивается, а у объекта, на который до этого указывало поле, уменьшается.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТрансляция из SSA Ш в LLVM Ш\nТак как трансляция в ШУМ осуществляется из низкоуровневой вариации SSA Ж, то данный процесс становится тривиальным. Параметры базовых блоков транслируются в ф-функ-ции, а большинство остальных инструкций SSA Ж - в их аналоги в ШУМ. Исключение\nсоставляют операции, которые не отражены в LLVM. Они транслируются в вызовы функций среды исполнения.\nФункция f в результате трансляции в LLVM IR выглядит следующим образом. Как видно по инструкции alloca, объект класса A аллоцируется на стеке:\ndefine i32 @\"kfun:#f(kotlin.Boolean){}kotlin.Int\"(il) #11 {\ncall void 811vm.memset.p0i8.i32(i8* %2, i8 0, i32 16, il false) %3 = bitcast %\"kclassbody:A#internal\"* %1 to %struct.ObjHeader* %typeInfoOrMeta = getelementptr inbounds %struct.ObjHeader,\nstore %struct.TypeInfo* @\"kclass:A\", %struct.TypeInfo** %typelnfoOrMeta_ call void @\"kfun:A#<init>(kotlin.Int){}\"(%struct.ObjHeader* %3, i32 5)\ncall void @llvm.memset.p0i8.i32(i8* %5, i8 0, i32 16, il false) %6 = bitcast %\"kclassbody:A#internal\"* %4 to %struct.ObjHeader* %typeInfoOrMeta 1 = getelementptr inbounds %struct.ObjHeader,\nstore %struct.TypeInfo* @\"kclass:A\", %struct.TypeInfo** %typelnfoOrMeta 1 call void @\"kfun:A#<init>(kotlin.Int){}\"(%struct.ObjHeader* %6, i32 6)\n%7 = phi %struct.ObjHeader* [ %3, %when body ], [ %6, %when cond ]\nРезультаты тестов\nТак как текущая реализация SSA IR поддерживает не все конструкции языка Котлин, вместо готовых наборов тестов пришлось создавать свой, в котором некоторые идиоматические конструкции языка были заменены более примитивными. Тесты были разбиты на 4 категории.\n1.\tПримитивные тесты, в которых нет аллокаций. Данные тесты позволяют оценить то, насколько улучшается работа LLVM при изменении способа порождения входного языка. В отличие от старого пайплайна в новом LLVM IR сразу порождается в SSA-форме, что упрощает работу оптимизатора (табл. 2).\n2.\tТесты, в которых аллоцированные объекты не убегают. Эта категория позволяет получить верхнюю оценку прироста от escape-анализа, так как при его использовании нагрузка на сборщик мусора падает практически до нуля.\n3.\tТесты, в которых аллоцированные объекты убегают. Цель данной категории - оценить эффективность межпроцедурной компоненты escape-анализа.\n4.\tСложные тесты, близкие к реальному продуктовому коду. В них большое количество виртуальных вызовов, и активно используется стандартная библиотека.\nТестовый стенд: MacBook Pro 2015.\nПроцессор: Intel i7-4980HQ.\nОперативная память: 16 GB DDR3. Операционная система: macOS 10.15.3.\nТаблица 2\nСравнение производительности\nTable 2\nPerformance comparison\nРежим компиляции\tСреднее время работы тестов, с\n1\t2\t3\t4\nБез SSA IR\t33.9\t51.6\t68.4\t107.3\nС SSA IR\t30.3\t5.2\t46.7\t90.5\nОтношение производительности\t1.12\t9.92\t1.46\t1.18\nЗаключение\nВ данной работе рассмотрены архитектура компилятора Kotlin / Native и ее основные проблемы. Представлено новое внутреннее представление, которое обладает свойствами, необходимыми для написания продвинутых оптимизаций. На его основе был реализован ряд анализов и оптимизаций, включая построение графа вызова функций и escape-анализ. Была реализована трансляция в данное представление из существующего древовидного, а также трансляция в LLVM IR. Удалось сохранить совместимость с текущим процессом компиляции, что обеспечивает возможность постепенного перехода на новое представление. Эксперименты показали, что данный подход может значительно увеличить производительность порождаемого кода.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСписок литературы / References\n1.\tLattner C., Adve V. LLVM: a compilation framework for lifelong program analysis & transformation. In: International Symposium on Code Generation and Optimization, 2004. CGO 2004, p. 75-86. DOI 10.1109/CGO.2004.1281665\n2.\tBacon D. F., Cheng P., Rajan V. T. A unified theory of garbage collection. In: Proceedings of the 19th Annual ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, 2004. DOI 10.1145/1035292.1028982\n3.\tAppel A. W. SSA is functional programming. ACM SIGPLAN Notices, April 1998, vol. 33, no. 4, p. 17-20. DOI 10.1145/278283.278285\n4.\tBraun M., Buchwald S., Hack S., LeiBa R., Mallon C., Zwinkau A. Simple and Efficient Construction of Static Single Assignment Form. Compiler Construction. Lecture Notes in Computer Science, 2013, vol. 7791, p. 102-122. DOI 10.1007/978-3-642-37051-9_6\n5.\tCytron R., Ferrante J., Rosen B. K., Wegman M. N., Zadeck F. K. Efficiently computing static single assignment form and the control dependence graph. ACM Transactions on Programming Languages and Systems, October 1991, vol. 13, no. 4, p. 451-490. DOI 10.1145/ 115372.115320\n6.\tBacon D. F, Sweeney P. F. Fast static analysis of C++ virtual function calls. In: Proceedings of the 11th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications. October 1996, p. 324-341. DOI 10.1145/236337.236371\n7. Choi J., Gupta M., Serrano M. J., Sreedhar V. C., Midkiff S. P. Stack Allocation and Synchronization Optimizations for Java Using Escape Analysis. ACM Transactions on Programming Languages and Systems, November 2003, vol. 25, no. 6, p. 876-910. DOI 10.1145/945885.945892\nМатериал поступил в редколлегию Received 03.06.2020\nСведения об авторе\nБоголепов Сергей Сергеевич, магистрант факультета информационных технологий Новосибирского государственного университета (Новосибирск, Россия) s.bogolepov@g .nsu.ru\nInformation about the Author\nSergey S. Bogolepov, Master's Student, Faculty of Information Technologies, Novosibirsk State University (Novosibirsk, Russian Federation) s.bogolepov@g .nsu.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-vnutrennego-predstavleniya-kompilyatora-kotlin-native-i-optimizatsiy-na-ego-osnove/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/primenenie-informatsionnyh-tehnologiy-v-farmatsevticheskom-konsultirovanii",
    "slug": "primenenie-informatsionnyh-tehnologiy-v-farmatsevticheskom-konsultirovanii",
    "title": "Применение информационных технологий в фармацевтическом консультировании",
    "abstract_description": "В статье представлен программный продукт для стандартизации и оптимизации фармацевтического консультирования в аптеке по конкретному заболеванию. При его разработке была использована программа Visual Studio Code на платформе Electron, язык JavaScript. Основой для формирования его структуры и логической последовательности явился разработанный ранее алгоритм фармацевтического консультирования посетителей аптек при выборе лекарственных средств для лечения и профилактики варикозной болезни нижних конечностей (без язв и воспалений). Полученный программный продукт может быть использован для повышения уровня оказания информационно-коммуникационных услуг в розничном звене фармацевтического рынка.",
    "full_text_body": "\n\n\n\n\uFEFFPEMEÖUUM\nМЕНЕДЖМЕНТ\n34\n62019\nН.Н. ЧЕСНОКОВА, С.В. КОНОНОВА, д.фарм.н.\nФедеральное государственное бюджетное образовательное учреждение высшего образования «Приволжский исследовательский медицинский университет» Министерства здравоохранения Российской Федерации, Россия, г. Н. Новгород\nDOI: https://doi.org/l0.21518/l561-5936-2019-06-34-37\nПрименение\nинформационных технологий\nв фармацевтическом консультировании\nВ статье представлен программный продукт для стандартизации и оптимизации фармацевтического консультирования в аптеке по конкретному заболеванию. При его разработке была использована программа Visual Studio Code на платформе Electron, язык JavaScript. Основой для формирования его структуры и логической последовательности явился разработанный ранее алгоритм фармацевтического консультирования посетителей аптек при выборе лекарственных средств для лечения и профилактики варикозной болезни нижних конечностей (без язв и воспалений). Полученный программный продукт может быть использован для повышения уровня оказания информационно-коммуникационных услуг в розничном звене фармацевтического рынка.\nКлючевые слова:\nфармацевтическое консультирование, информационные технологии, программный продукт, варикозная болезнь\nВВЕДЕНИЕ\nС изданием приказа Минздрава РФ от 31.08.2016 г. №647н «Об утверждении Правил надлежащей аптечной практики лекарственных препаратов (далее - ЛП) для медицинского\nприменения», а также приказа Минздрава РФ от 11.07.2017 г. №403н «Об утверждении правил отпуска ЛП для медицинского применения, в том числе иммунобиологических ЛП, аптечными организациями,\nиндивидуальными предпринимателями, имеющими лицензию на фармацевтическую деятельность» было легализовано понятие «фармацевтическое консультирование». Под фармацевтическим консультированием теперь понимают «доступ к информации о порядке применения или использования товаров аптечного ассортимента, в том числе о правилах отпуска, способах приема,\nSUMMARY\nKeywords: pharmaceutical consulting, information technology, software program, varicose vein disease\nThe article presents a software program for standardization and optimization of pharmaceutical consulting on a specific disease in the pharmacies. It was developed using Visual Studio Code built on Electron platform and JavaScript language. The structure and logical sequence of the software was based on the previously developed algorithm for pharmaceutical consulting of pharmacy visitors in choosing medicines for the treatment and prevention of lower extremity varicose vein disease (without ulcers and inflammations). The software program can be used to increase the level of information and communication services in the retail segment of the pharmaceutical market.\nN. N. CHESNOKOVA, S.V. KONONOVA, Dr. of Sci. (Pharm.) Federal State Budgetary Educational Institution of Higher Education «Privolzhsky Research Medical University» of the Ministry of Health of the Russian Federation, Russia, Nizhny Novgorod THE USE OF INFORMATION TECHNOLOGY IN PHARMACEUTICAL CONSULTING\nрежимах дозирования, терапевтическом действии, противопоказаниях, взаимодействии лекарственных препаратов при одновременном приеме между собой и (или) с пищей, правилах их хранения в домашних условиях» [4-5]. Появление определения в нормативно-правовых актах, регулирующих процесс отпуска ЛП в аптечных организациях (лицензионное требование, согласно п. 5 Постановления Правительства РФ от 22.12.2011 г. №1081н [3]), перевело ответственность, предусмотренную за нарушение установленных требований, в сферу регулирования Кодекса об административных правонарушениях, а именно части 4 статьи 14.1 - «осуществление предпринимательской деятельности с грубым нарушением требований и условий, предусмотренных специальным разрешением (лицензией)», что влечет за собой существенные административные штрафы [1]. С другой стороны, в условиях современного рынка необходимым условием выживания бизнеса является внедрение и применение актуальных информационных технологий. На сегодняшний день цифровизация фармацевтической отрасли (в том числе ее розничного звена) - одно из условий сохранения конкурентоспособности и дальнейшего развития компании.\nЦелъю исследования стала разработка программного продукта для стандартизации и оптимизации фармацевтического консультирования в аптеке по конкретному заболеванию (на примере варикозной болезни нижних конечностей). Таким образом, реализация цели позволяет, с одной стороны, обеспечить выполнение строгих требований законодателя, а с другой - открывает широкие возможности для повышения уровня обслуживания посетителей аптек, способствует формированию большей лояльности к конкретной аптечной организации и, следовательно, позволяет сделать ее более конкурентоспособной и экономически эффективной.\nМАТЕРИАЛЫ И МЕТОДЫ\nВ качестве основы при формировании структуры и логической последовательности программного средства использовался разработанный ранее алгоритм фармацевтического консультирования посетителей аптек при выборе лекарственных средств для лечения и профилактики варикозной болезни нижних конечностей (без язв и воспалений) [7]. При разработке электронной версии была использована программа Visual Studio Code на платформе Electron. Для программирования использовался\nязык JavaScript. Программа была названа «Помощник фармацевта», но предназначена она для использования любыми специалистами, имеющими право отпускать лекарственные препараты в аптеке. Программа доступна для установки на операционной системе Windows 7, 8, 10.\nРЕЗУЛЬТАТЫ И ОБСУЖДЕНИЕ\nПреимуществом разработанной программы является заложенная в ней возможность ориентирования фармацевтического работника в сим-птомокомплексах заболеваний, с которыми чаще всего ему приходится сталкиваться в своей практике. Главное окно программы содержит элементы, позволяющие получить доступ к основным информационным данным. При его открытии появляется информация для фармацевта/провизора о симптомах заболевания вен нижних конечностей. Существуют симптомокомплексы, при которых невозможно осуществить фармацевтическое консультирование и требуется уже специализированная медицинская помощь, - это симптомокомплекс тромбофлебита, тромбоза и трофических язв/воспаления (рис. 1) При наличии указанных симптомов фармацевт/провизор переходит по ссылке «да» на окно с\nрисунок ^^ Главное окно программы с указанием перечня ФЛП наружного и системного действия для одной из ценовых категорий\nPEMEOUUM\nМЕНЕДЖМЕНТ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n36\n62019\nрисунок ^^ ГГлавное окно программы со ссылкой на инструкцию для медицинского применения\nnwwiwmu\nМННКТЕКПЛ ц глюодглнсм IH и соаиоьийгц глацпи РОССИЙСКОЙ МДГГЛДЯИ ИПСТГГКЩШ\t\tНаружно: Л НЦдоямн, f«rti> npumiuiwn а\nТЮКСИАЛШ*\t\t5 Ipoufinncc Jlnoc, rYJib дня HMptmoro пряммвмя 30; 1,0\n6 бенмчви фооег, ГеПьд/я» мруянбто прнмчИчМ Sir\nГ П Til ............................ ^ ^ ^^\t\tВьгл-рь: t /oiwijpM. 1кя (VO 100мг »3ft U\n«и J.TX оисло*\nрисунок ^^ Главное окно программы со ссылкой на СОП\nрекомендациями отправить пациента к медицинскому специалисту и запретом на фармацевтическое консультирование. Заканчивая консультирование, фармацевт/ провизор попадает в начало программы. Симптомокомплексы указанных состояний перечислены в программе последовательно друг за другом, поэтому алгоритм консультирования и работы программы на последующих симптомокомплексах идентичен.\nФармацевтическое консультирование можно осуществить при наличии только таких симптомов, как тяжесть в ногах, усталость, дискомфорт при длительных статических\nнагрузках, наличие сосудистых «звездочек», расширенных вен, отеков, эти симптомы появляются в главном окне программы после отрицания посетителем трех предыдущих симптомов. После этого, кликнув левой кнопкой мыши по строке «да», фармацевт/провизор должен определиться с возрастом пациента, а также с наличием беременности и/или лактации - это маркерные противопоказания для рекомендаций флеботроп-ных лекарственных препаратов (ФЛП), заложенные в нашей программе. Как правило, заболеванию подвержены взрослые люди, однако в последнее время отмечается\nтенденция к его «омоложению», поэтому нами было принято решение выделить перечень тех ЛП, которые, согласно инструкции, можно использовать в подростковом возрасте. На следующем этапе предусмотрена возможность ценовой сепарации для рекомендации безрецептурных ФЛП. Условно нами было выделено три ценовые категории (исходя из полученных ранее данных маркетингового анализа регионального фармацевтического рынка ФЛП) - до 150 руб., от 150 до 300 руб. и свыше 300 руб. (рис. 2) [6, 8].\nОпределившись с желаемой ценовой категорией, при переходе по\nрисунок Главное окно программы со ссылкой на комплекс профилактических мероприятий\nрчЧжгрОГ - Adobe Bwdec\n|as »¡Е<\t\t\t■ .*\t. --„\n1»\n■4\t\t\t\tLumnuuu HMKiiU»Mft mt аллиши\nг чSKH[Их hMtfcoitfcJ* to иQuesilt UU№ IBIM. ti Й (uЛ His И К*1ШШМЙ]\nfAP\t— —\nИ»— fH—тпн. ним Ишвчни*\n—\nрисунок ^^ Главное окно программы со ссылкой на комплекс профилактических мероприятий\nсоответствующей ссылке фармацевтический работник получает перечень ЛП безрецептурного отпуска, разделенных дополнительно по способу применения (перечень может варьироваться в зависимости от ассортимента конкретной аптеки) (рис. 3).\nДалее мы предполагали возможность перехода на прайс-лист аптеки, осуществляемого при нажатии на наименование ФЛП. В силу того, что программа при разработке не была связана с конкретной аптечной организацией, этот этап оставлен нами как теоретически возможный. Для каждого ЛП в программе заложена ссылка на официальную инструкцию для медицинского применения (рис. 4).\nДополнительно в информационной области главного окна предусмотрены стационарные ссылки на разработанную стандартную операционную процедуру по фармацевтическому консультированию при ВБНК (без язв и воспалений), а также на информацию по профилактике прогрессирования заболевания и его осложнений (рис. 5-6). В связи с тем, что в клинических рекомендациях Министерства здравоохранения РФ «Варикозное расширение вен нижних конечностей без хронической венозной недостаточности» [2] к средствам консервативной терапии отнесены и компрессионные медицинские изделия, в нашей программе также предусмотрена помощь фармацевтическому работнику в дополнительном консультировании посетителя аптеки\nпо выбору компрессионного трикотажа. Ссылка на переход вынесена в самое начало программы, однако мы допускаем, что более целесообразным может быть перевод ее в стационарное состояние, как ссылки на СОП и профилактические рекомендации. Далее алгоритм программы предполагает деление всех изделий по видам: колготки, чулки, гольфы (перечень может регулироваться в зависимости от ассортимента конкретной аптеки) и степени компрессии (рис. 7).\nИСТОЧНИКИ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tКодекс Российской Федерации об административных правонарушениях от 30.12.2001 №195-фЗ (ред. от 27.12.2018, с изм. от 18.01.2019) (с изм. и доп., вступ.\nв силу с 16.01.2019). URL: http://www.\nconsultant.ru/document/cons_doc_\nLAW_34661/.\n2.\tКлинические рекомендации Министерства здравоохранения РФ «Варикозное расширение вен нижних конечностей без хронической венозной недостаточности». 2017: 87. URL: http:// phlebology-sro.ru/upload/iblock/7de/ klinicheskie-rekomendatsii-minzdrava-rf-po-vrv-bez-khvn-_2017_.pdf.\n3.\tО лицензировании фармацевтической деятельности: постановление Правительства РФ от 22.12.2011 года №1081н (ред. от 04.07.2017). URL: http:// www.consultant.ru/document/cons_ doc_LAW_124279/.\n4.\tОб утверждении правил отпуска ЛП для медицинского применения, в том числе иммунобиологических ЛП, аптечными организациями, индивидуальными предпринимателями, имеющими лицензию на фармацевтическую деятельность: приказ Минздрава РФ от 11.07.2017 года №403н. - URL: http://docs.cntd.ru/ document/542606543.\nПри выборе класса компрессии появляется перечень имеющихся в аптечной организации медицинских изделий (указанный перечень является примерным).\nЗАКЛЮЧЕНИЕ\nРазработанный программный продукт имеет гибкую структуру и может быть адаптирован для других протоколов фармацевтического консультирования с дальнейшим преобразованием в модульный ~ комплекс.\n5.\tОб утверждении Правил надлежащей аптечной практики лекарственных препаратов для медицинского применения: приказ Минздрава РФ от 31.08.2016 года №647н. URL: http://docs. cntd.ru/document/420377391/.\n6.\tЧеснокова Н.Н. Маркетинговое исследование рынка флеботропных лекарственных препаратов, применяемых в лечении и профилактике варикозной болезни нижних конечностей. Кубанский научный медицинский вестник. 2017;24(6):139-144. doi: 10.25207/16086228-2017-24-6-139-144.\n7.\tЧеснокова Н.Н. Совершенствование фармацевтического консультирования посетителей аптек при выборе средств консервативной терапии варикозной болезни нижних конечностей (без язв и воспалений). Кубанский научный медицинский вестник. 2017;24(3):120-127. doi: 10.25207/1608-6228-2017-24-3-120127.\n8.\tЧеснокова Н.Н., Кононова С.В., Петрова С.В., Писаненко Д.В Исследование рынка флеботропных лекарственных препаратов, применяемых при лечении варикозной болезни вен нижних конечностей (без язв и воспалений). Ремедиум. 2017;5:36-42. doi: 10.21518/1561-5936-2017-5-36-42.\nкроме того.\nНезаконные соглашения между производителями и специалистами здравоохранения\nПроверки Росздравнадзора выявили двукратный рост числа случаев нарушения медицинскими работниками\nустановленных законодательством ограничений по взаимодействию с фармацевтическими компаниями. По данным ведомства, в прошедшем году факты заключения врачами и фарм-специалистами незаконных соглашений о рекомендации определенных препаратов\nпациентам либо случаи получения ЛС от производителей с целью передачи пациентам были зарегистрированы в ходе 7,3% проведенных проверок. Годом ранее аналогичный показатель составлял 3,1%. Также в 7,3% проверок было выявлено получение медиками возна-\nграждений от производителей лекарств (годом ранее -4,1%). Всего в прошедшем году Росздравнадзором было проведено свыше 1,6 тыс. проверок на предмет соблюдения медицинскими и фармацевтическими работниками профессиональных ограничений.\n",
    "download_url": "https://cyberleninka.ru/article/n/primenenie-informatsionnyh-tehnologiy-v-farmatsevticheskom-konsultirovanii/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-sredy-ispolneniya-yazyka-javascrit-dlya-arhitektury-elbrus",
    "slug": "razrabotka-sredy-ispolneniya-yazyka-javascrit-dlya-arhitektury-elbrus",
    "title": "Разработка среды исполнения языка javascrit для архитектуры Эльбрус",
    "abstract_description": "Рассматривается разработка и реализация среды исполнения языка JavaScript для отечественной платформы Эльбрус. Эльбрус представляет собой архитектуру с длинным командным словом (VLIW). Новая платформа имеет повышенные характеристики безопасности за счет своего аппаратного устройства, а именно защищенный стек для хранения адресов возврата функций и тегирование команд. Это позволяет использовать процессоры Эльбрус для нужд госсектора, обороны ив других специальных областях.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.43\nД. Е. Бежецков\nНовосибирский государственный университет ул. Пирогова, 2, Новосибирск, 630090, Россия\ndima00782@gmail.com\nРАЗРАБОТКА СРЕДЫ ИСПОЛНЕНИЯ ЯЗЫКА JAVASCRIT ДЛЯ АРХИТЕКТУРЫ ЭЛЬБРУС\nРассматривается разработка и реализация среды исполнения языка JavaScript для отечественной платформы Эльбрус. Эльбрус представляет собой архитектуру с длинным командным словом (VLIW). Новая платформа имеет повышенные характеристики безопасности за счет своего аппаратного устройства, а именно защищенный стек для хранения адресов возврата функций и тегирование команд. Это позволяет использовать процессоры Эльбрус для нужд госсектора, обороны и в других специальных областях.\nКлючевые слова: Эльбрус, JavaScript, виртуальные машины, V8.\nВведение\nС момента производства первого компьютера прошло уже больше полувека, и электронные устройства стали частью нашей жизни. Мы читаем новости в Интернете, делаем расчеты на компьютере. Трудно переоценить влияние компьютеров на современный мир. Основной и самой главной частью компьютера является процессор. Фактически он и делает всю полезную работу.\nНе так давно на российском рынке появилась линейка процессоров Эльбрус, от компании МЦСТ. Новый процессор призван решить две проблемы: импортозамещение и безопасность.\nВсе чаще с политической арены мы слышим, что против России вводятся санкции, которые запрещают ввоз той или иной продукции в РФ. Наша страна, к сожалению, до недавнего времени не могла производить процессоры для большинства компьютеров в стране, так что в случае, если какой-нибудь крупный зарубежный производитель откажется поставлять процессоры, страна окажется в довольно затруднительном положении. Поэтому иметь в производстве свой процессор просто необходимо для нашей страны.\nС другой стороны, в современном мире все чаще возникает необходимость защищать важную информацию от третьих лиц. Это особенно важно для информации, составляющей государственную тайну. Чтобы обеспечить надежную защиту, необходимо использовать проверенные аппаратные решения.\nЧтобы исправить текущее положение дел, компания МЦСТ и выпустила новый процессор Эльбрус, весь цикл производства которого сосредоточен в России и может быть проверен на каждом этапе производства - от составления схемы до выпекания платы. Кроме того, процессор представляет собой новую архитектуру, которая кардинально отличается от устоявшихся архитектур, таких как х86_64, агшб4 и др. Новая архитектура предлагает аппаратно решать известные проблемы с безопасностью.\nБежецков Д. Е. Разработка среды исполнения языка 1ауаБсгй для архитектуры Эльбрус // Вестн. НГУ. Серия: Информационные технологии. 2017. Т. 15, № 2. С. 5-12.\nISSN 1818-7900. Вестник НГУ. Серия: Информационные технологии. 2017. Том 15, № 2 © Д. Е. Бежецков, 2017\nВ недавнем исследовании рынка используемых языков 1 язык JavaScript в очередной раз занял лидирующее место. Социальные сети, онлайн трансляции спортивных мероприятий -все это было бы сложно представить себе без использования Интернета, а следовательно, и без языка JavaScript.\nРазработанный всего 22 года назад язык для описания анимаций на странице, JavaScript стал почти доминирующим языком по количеству программистов, пишущих на нем 2. Реализация среды исполнения языка JavaScript де-факто является обязательным для всех десктоп-ных архитектур, и для Эльбруса в том числе.\nНа Эльбрусе в данный момент уже есть среда исполнения JavaScript - интерпретатор из проекта spiderMonkey, браузера Firefox. К сожалению, интерпретатор не удовлетворяет нуждам клиентов, а именно работает довольного медленно и практически никак не учитывает специфику архитектуры Эльбрус. В связи с этим автором была поставлена задача реализовать эффективную среду исполнения языка JavaScript для архитектуры Эльбрус.\nРеализация на основе V8\nДля реализации среды исполнения JavaScript на Эльбрусе была выбрана V8. Это среда исполнения JavaScript с открытым исходным кодом, поддерживаемая компанией Google и используемая в браузере Chrome. Выбор основывался на показателях набора промышленных тестов производительности 3. V8 показывает самую большую производительность на них, и, кроме того, архитектура V8 отличается от традиционной архитектуры виртуальной машины, что способствует более производительной реализации для Эльбруса.\nНа рис. 1 представлена архитектура V8. Машина не имеет байткода и интерпретатора, вместо этого у нее есть два JIT компилятора - FullCodegen и Crankshaft. Первый компилирует код быстро, не применяя при этом почти никаких оптимизаций. Второй компилирует с применением всех возможных оптимизаций. Первый компилятор вставляет инструментирующий код, который запоминает для каждой операции языка JavaScript типы, участвовавшие в этой операции. Данная техника называется встроенными кэшами. Она позволяет сократить в реальном коде динамичность языка JavaScript, что дает возможность использовать эту информацию о типах для оптимизации.\nНа уровне исходного кода V8 делится на две части: платформозависимую и платформоне-зависимую. Сделано это для облегчения портирования на новые архитектуры. Платформоза-висимая часть представляется в виде интерфейса, который необходимо реализовать. После того как исходный код на языке JavaScript разбирается в абстрактное синтаксическое дерево,\nРис. 1. Архитектура V8\n1\tStackoverflow. URL: https://insights.stackoverflow.com/survey/2016 (дата обращения 17.02.2017).\n2\tIbid.\n3\tOctane. URL: https://chromium.github.io/octane (дата обращения 17.02.2017).\nпочти для каждого узла необходимо написать генератор. Этот генератор должен по заданному узлу генерировать готовый код под конкретную архитектуру. Поскольку узлы в этом дереве представляют собой довольно крупные функциональные блоки языка JavaScript, то и возможностей для применения оптимизаций на таком блоке для Эльбруса больше, что хорошо сказывается на итоговой производительности.\nАдаптация стеков\nСреда исполнения V8 рассчитана на то, что все поддерживаемые ею архитектуры так или иначе в работе со стеком схожи с x86. Это, например, означает, что адрес возврата из функции лежит сразу после базового указателя фрейма. К сожалению, такое поведение учитывается и в платформонезависимом коде V8, который имеет внушительный объем.\nДля того чтобы не переписывать платформонезависимый код в данной работе было решено использовать стек пользовательских данных и два глобальных регистра, эмулирующие rsp и rbp, чтобы не сильно отличаться от x86. Адрес возврата из функции тоже относительно легко определить во время компиляции как адрес следующей за вызовом широкой команды.\nОдной из особенностей является то, что Эльбрус поддерживает аппаратно информацию\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n0\tфрейме. Эти данные хранятся в защищенном стеке связующей информации и недоступны для программиста из непривилегированного режима процессора. При каждом вызове Эльбрус запоминает в этом стеке пару значений - адрес возврата из функции и количество байтов, аллоцированных в стеке пользовательской информации. При выходе из функции аппаратура получает эту информацию, переходит по заданному адресу и откатывает стек пользовательской информации на заданное количество байт.\nПолучается, с одной стороны, у нас есть фрейм для JavaScript функции, который располагается в стеке пользовательских данных, и, с другой стороны, у нас есть аппаратный фрейм, который поддерживается аппаратурой. В данной работе был выбран вариант отображения\n1\t- 1, т. е. каждому JavaScript фрейму соответствует ровно один аппаратный фрейм. Это позволяет более просто писать код, но проявляет следующую проблему.\nЧтобы положить какое-нибудь значение на стек, необходимо заранее аллоцировать в нем память с помощью инструкции getsp, на x86, например, этого делать не надо. Проблема заключается в том, что мы должны во время компиляции определить размер для фрейма функции на JavaScript. Исходный код может быть сложным, и определить, сколько точно понадобится места, мы не можем, а можем подсчитать лишь максимум места. Соответственно если код функции пошел не по той ветке исполнения, где этот максимум достигается, то во фрейме оказывается дыра между текущим фреймом функции и следующим.\nЕще одной особенностью Эльбруса является то, что нельзя аллоцировать память по 1 байту, только по 2. Так что даже если мы идеально определить количество слотов в стеке (и если это количество не кратно двум), то все равно будет зазор. Дыры между фреймами не так страшны, и обычно это всего 8 байт, но когда происходит обращение из текущего фрейма к предыдущему из платформонезависимого кода, могут возникать проблемы. К счастью, V8 обращается к предыдущему фрейму лишь в одном случае: для получения адреса возврата. Поэтому, чтобы положить адрес возврата из функции в текущий фрейм, автором было предложено передавать адрес через регистр, и уже в новом фрейме - на стек пользовательской информации. В итоге получается простое для написания кода и для отладки решение, ведь доступный gdb оперирует аппаратными фреймами.\nОбработка исключений\nИсключения известны в программировании давно и предоставляют программисту удобный способ обрабатывать исключительные ситуации в коде. Исключения поддерживают почти все современные динамические языки, в том числе и язык JavaScript.\nРассмотрим реализацию механизма обработки исключений в V8 на примере:\nfunction foo() { throw 42; }\nfunction bar() { try { foo();\n} catch (e) { print(e);\n}\n}\nНа входе в блок try V8 создаст новый обработчик исключений и слинкует его в список текущих обработчиков. Также в этот обработчик запишется текущее значение верхушки стека (rsp), указателя на фрейм (frame pointer) и адреса блока catch. Когда исполнение дойдет до инструкции throw 42;, среда исполнения перейдет из JavaScript кода в C код и выполнит следующий алгоритм:\n1)\tпоиск подходящего обработчика исключений;\n2)\tподмена текущего rsp и rbp на соответствующие значения из обработчика;\n3)\tподмена адреса возврата на адрес блока catch;\n4)\tвозврат.\nИз-за того, что стек, который хранит адреса возвратов из функций, недоступен программисту на Эльбрусе, действия 3 и 4 невозможны без участия операционной системы, так как изменять значения в стеке связующей информации можно только в привилегированном режиме процессора.\nБыло решено использовать системный вызов, который позволяет менять адреса возврата в защищенном стеке на адрес специального стаба, в который возвратится исполнение V8 после C вызова throw. Этот стаб содержит только одну инструкцию return, которая отматывает все аппаратные фреймы до заданного.\nРешение не обладает большой производительностью, но и исключительные ситуации в коде должны происходить крайне редко.\nПрименение свертки условных выражений\nи спекулятивности\nТак как Эльбрус поддерживает исполнение инструкций под предикатами и имеет 32 предикатных регистра, то при реализации среды исполнения V8 можно применить свертку условных выражений.\nСвертка условных выражений для Эльбруса позволяет удалить дорогостоящие переходы и сократить количество широких команд. Рассмотрим простой пример с циклом:\nfor (var i = 0; i < N; ++i) { if (cond)\na = x; else\na = y;\nb = a + 2;\n}\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИспользуя предикатный регистр, можно трансформировать цикл в следующий эквивалентный:\nfor (I = 0; I < N; ++i) { pred1 = cond; a = x ? pred1 a = y ? ~pred1 b = a_2 + 2;\n}\nВ данном примере присваивание переменной a исполняется под предикатом 1 и его отрицанием. Из примера видно, что теперь тело цикла состоит только из двух широких команд и не содержит переходов, что, во-первых, увеличивает количество инструкций в одной широкой команде, а во-вторых, позволяет применять дальнейшие оптимизации по раскрутке цикла.\nСледует заметить, что инструкции на Эльбрусе могут исполняться под предикатом или его отрицанием либо вообще без предиката, и, следовательно, мы можем вычислять одновременно 65 потоков управления программы.\nРассмотрим другой пример:\nfunction foo(a, b) { let c;\nif (a !== null) { c = a.getValue(); } else {\nc = b.getValue();\n}\nНаивная реализация предполагает использование 4 широких команд и как минимум один переход по условию. Так как Эльбрус поддерживает явную спекулятивность на уровне команд, то мы можем сделать вызов и загрузку из памяти еще до проверки того, что a не является null:\nfunction foo(a, b) { let c;\nlet d = a.getValue(); | speculative let e = b.getValue(); | speculative if (a !== null) { c = a.getValue(); } else {\nc = b.getValue();\n}\nДальше можно применить свертку условных выражений с помощью предикатных регистров и получить следующий код:\nfunction foo(a, b) { let c = a.getValue(); | speculative let d = b.getValue(); | speculative p1 = (a === null);\nc = d ? pi\n}\nВ данном коде всего две широких команды в отличие от 4-х в наивной реализации. Эти две оптимизации применялись при компилировании среды исполнения V8, большая часть которой написана на JavaScript. Следует отметить что, эти оптимизации не учитывались в реализованном компиляторе Full-Codegen, потому что он должен работать быстро и не проводить практически никаких оптимизаций (кроме встроенных КЭШей), которые тормозили бы загрузку скриптов.\nСравнение производительности\nДля сравнения производительности использовались тесты с открытым исходным кодом octane 4. Тестирование проводилось на машине с 4-ядерным процессором Эльбрус E2S monokub, с тактовой частотой 750 МГц и 24 Гб оперативной памяти DDR2, работающей на частоте 667 МГц. Сравниваться будут интерпретатор из проекта spiderMonkey, который в настоящее время является единственным способом исполнения JavaScript на Эльбрусе, и базовый не оптимизирующий компилятор из V8 Full-Codegen, реализованный автором.\nРис. 2. Сравнение интерпретатора и базового компилятора\nРис. 3. Сравнение с Intel\n4 URL: https://chromium.github.io/octane\nНа рис. 2 видно, что компилятор значительно выигрывает за счет компиляции в бинарный код и примененных оптимизаций к самой среде исполнения. Отметим, что наибольший вклад в этот прирост производительности дают встроенные кэши.\nТакже интерес представляет сравнение с x86_64 архитектурой. Для теста использовался Intel Core i7-4770 с 3.4 ГГц и 16 Гб оперативной памяти DDR3 с частотой 1 600 МГц.\nНа рис. 3 представлено отношение результатов octane компилятора Full-Codegen на intel core i7 и на E2S. Видно, что Эльбрус проигрывает в разы, но стоит учитывать то, что техпроцесс и тактовая частота core i7 и E2S тоже сильно различаются. Конечно, тактовая частота -это не оправдание для автора, поэтому предложенная реализация будет дальше оптимизироваться. Мы только начинаем понимать, как нужно писать код для VLIW архитектуры. Следует также отметить, что и техпроцесс Эльбруса не стоит на месте, и компания МЦСТ выпустила процессор Эльбрус с тактовой частотой 1400 МГц.\nТакже на рис. 3 видно сильное замедление на бенчмарках crypto и zlib, связано это с тем, что intel поддерживает аппаратно команды для работы c AES и битами (BMI set), которых пока еще нет на Эльбрусе.\nЗаключение\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ ходе работы над статьей, автором были достигнуты следующие результаты.\n•\tПортирован базовый компилятор Full-Codegen для среды исполнения V8. Исследованы различия работы со стеком, исключениями, поддержкой сборщика мусора для архитектур x64 и Эльбрус.\n•\tРеализация полностью соответствует стандарту ECMAScipt 5, проходит сертификационные тесты 6 и соответственно может называться JavaScript виртуальной машиной.\n•\tПолученная реализация показывает увеличение производительности примерно в 4,3 раза относительно стандартного платформенно-независимого С++ интерпретатора JavaScript 7 на Эльбрус.\n•\tИсследованы и применены алгоритмы оптимизаций для VLIW архитектур.\nВ заключение можно сказать следующее. Несмотря на то, что Эльбрус пока сильно проигрывает в производительности аналогичным по цене процессорам, комфортно работать на нем в браузере уже можно. Реализация очень динамического языка JavaScript для такой экзотической архитектуры, как Эльбрус, представляет академический интерес, а также тестирует V8 с интересной стороны.\nМатериал поступил в редколлегию 15.03.2017\n5\tECMAScript 2015 Language Specification. URL: http://www.ecma-international.Org/ecma-262/6.0 (дата обращения 17.02.2017).\n6\tTest262. URL: https://github.com/tc39/test262 (дата обращения 17.02.2017).\n7\tSpiderMonkey. URL: https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey (дата обращения 17.02.2017).\nD. E. Bezhetskov\nNovosibirsk State University 2 Pirogov Str., Novosibirsk, 630090, Russian Federation\ndima00782@gmail.com\nIMPLEMENTATION OF JAVASCRIPT FOR ELBRUS ARCHITECTURE\nThe JavaScript (JS) language is the most popular language for web development in the world that is used by many modern web application such as Gmail, Google search engine, social networks etc. Elbrus is a new Russian CPU created for fast and secure computation. Implementation of JS virtual machine is usually obligatory for a modern hardware platform such as Elbrus. The solution is to write new a JS engine based on V8 Google engine. In that case we can significantly reduce time of development by reusing existing parts of V8. To sum up, this approach allows us to learn internals of V8 engine and introduce the first implementation of the JS language for the first modern Russian processor.\nKeywords: Elbrus, JavaScript, virtual machines, V8.\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-sredy-ispolneniya-yazyka-javascrit-dlya-arhitektury-elbrus/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/issledovanie-noveyshih-veb-tehnologiy-i-algoritmov-prodvizheniya-saytov",
    "slug": "issledovanie-noveyshih-veb-tehnologiy-i-algoritmov-prodvizheniya-saytov",
    "title": "Исследование новейших веб-технологий и алгоритмов продвижения сайтов",
    "abstract_description": "Представлено аналитическое исследование новейших технологий WEB-дизайна, анализ основных алгоритмов продвижения сайтов и их практическая реализация в виде интерактивного мультимедийного обучающего пособия «HTML5/CSS3, JavaScript/SEO. Разработка современных сайтов»",
    "full_text_body": "\n\n\n\n\uFEFFInput data for the method is a set of well-known testing techniques. As part of the solution of the problem a set of characteristics is formed and evaluated by the group of experts in the field.\nIn this paper, a method for the optimal set of accounting methods for effective testing of web resources based on a survey of experts in the field, is proposed.\nTo solve this problem we must solve some specific issues:\n-\tfinding the optimal set of test methods for specific cases of the website based on a survey of experts in the field of testing and applying multi-criteria optimization;\n-\tdeveloping an algorithm of test methods to ensure the highest quality web resource\nKeywords: software, testing, Pareto optimization, testing method\nПредставлено аналтичне дослиджен-ня новттх технологш WEB-дизайну, ана-лiз основних алгоритмiв просування сайтiв та гх практична реалiзацiя у виглядi тте-рактивного мультимедшного навчального поыбника «HTML5/CSS3, JavaScript/SEO. Розробка сучасних сайmiв»\nКлючовi слова: ттернет-технологи, динамiчна графша, ттерфейс, методи пошуковог оптимiзацiг, ранжування сай-тiв\n□-□\nПредставлено аналитическое исследование новейших технологий WEB-дизайна, анализ основных алгоритмов продвижения сайтов и их практическая реализация в виде интерактивного мультимедийного обучающего пособия «HTML5/CSS3, JavaScript/SEO. Разработка современных сайтов»\nКлючевые слова: интернет-технологии, динамическая графика, интерфейс, методы поисковой оптимизации, ранжирование сайтов -□ □-\nУДК 004.89\nИССЛЕДОВАНИЕ НОВЕЙШИХ ВЕБ-ТЕХНОЛОГИЙ И АЛГОРИТМОВ ПРОДВИЖЕНИЯ САЙТОВ\nИ.Н. Егорова\nКандидат технических наук, доцент Кафедра мультимедийных систем и технологий* Контактный тел.: (057) 702-13-78 E-mail: irinaiegorova@gmail.com Е.А. Бондаренко Кафедра медиасистем и технологий* Контактный тел.: 099-420-88-64 Е-mail: lena.guz@mail.ru *Харьковский национальный университет радиоэлектроники пр. Ленина, 16, г. Харьков, Украина, 61166\n1. Введение\nТехнологии создания клиентского интерфейса, а именно HTML5, CSS3, JavaScript,- представляют большой интерес в области современной WEB-разработки, так как позволяют значительно расширить функциональные возможности WEB-страниц, поддерживают работу с новейшими мультимедийными приложениями, при этом сохраняя легкость чтения кода пользователем и ясность исполнения компьютером.\nHTML5 - является перспективным направлением развития интернет-технологий. Семантическая разметка, структурные теги, динамическая графика, геолокация, добавление видео без использования сторонних плагинов, таких как Flash и QuickTime - вот то, что позволило создать новый ориентир в сфере разработки клиентского интерфейса, как для Web, так и для мобильных приложений.\nТакое многообразие новых возможностей особенно в сфере web -графики порождает ряд вопросов об особенностях их применения, и в частности:\n©\n-\tинтеграция с давно прижившимися web-техно-логиями;\n-\tцелесообразность использования динамической графики средствами HTML5 в том или ином проекте,\n-\tвозможности современных браузеров в поддержке столь перспективного направления web-проектиро-вания;\n-\tпути решения проблемы восприятия HTML5-тех-нологий некоторыми браузерами (InternetExplorer).\nДаже самый красивый, информационно-полезный и удобный сайт, разработанный в соответствии с новейшими тенденциями и технологиями web - проектирования, нуждается в соответствующем продвижении.\nПоисковая оптимизация представляет собой комплекс мер для поднятия позиций сайта в результатах выдачи поисковых систем по определенным запросам пользователей.\nОбычно чем выше позиция сайта в результатах поиска, тем больше заинтересованных посетителей его посетит.\nПроцесс определения порядка согласно рангу и релевантности, результат которого пользователь видит, получая ответ поисковой системы на свой запрос, называется ранжированием.\nПри этом каждая поисковая система проводит ранжирование по своим принципам в зависимости от определенных факторов.\nСоответственно, возникает необходимость определения наиболее рационального и эффективного способа поисковой оптимизации сайта таким образом, чтобы учесть особенности используемых фильтров и алгоритмов ранжирования ведущих поисковых систем.\nТаким образом, работа, направленная на аналитическое исследование новейших технологий Web-про-ектирования и анализ основных алгоритмов продвижения сайтов, представляется актуальной.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n2. Цель и задачи исследования\nЦелью работы является исследование новейших технологий WEB-проектирования, анализ основных алгоритмов продвижения сайтов и их практическая реализация в виде интерактивного мультимедийного обучающего пособия «HTML5/CSS3/ JavaScript/SEO. Разработка современных сайтов».\nПредметом исследования в работе являются технологии WEB-проектирования HTML5/CSS3/ JavaScript и методы поисковой оптимизации SEO.\nОбъектом исследования являются web-технологии и поисковая оптимизация сайтов.\nДля достижения поставленной цели необходимо решить целый комплекс задач.\nТак, проведение анализа возможностей языка HTML5, предоставляемых Web-разработчику, предполагает следующие этапы:\n-\tанализ обновленной структуры HTML-кода, определение преимуществ новых элементов объектной модели документа (DOM);\n-\tобзор возможностей создания динамических страниц посредством HTML5;\n-\tосуществление сравнения методов и технологий создания интерактивной Web-графики в HTML5 - Canvas и SVG (Scalable Vector Graphics);\n-\tопределение наиболее целесообразных сфер применения технологий Canvas и SVG для Web-проек-тирования и разработка рекомендаций для новых и опытных разработчиков по применению той или иной модели графики в HTML5;\n-\tанализ поддержки браузерами функциональных возможностей HTML5, а именно CSS3 свойств и селекторов, HTML5 форм ввода, атрибутов и аудио/видео кодеков, а также внедренного контента, такого как canvas, audio, video.\nАнализ методик поисковой оптимизации и алгоритмов продвижения WEB - сайтов предполагает следующие этапы:\n-\tанализ методов поисковой оптимизации (белая, серая, черная);\n-\tисследование механизма ранжирования поисковых систем;\n-\tанализ ключевых факторов ранжирования;\n-\tобзор разновидностей фильтров поисковой системы Google и анализ механизмов их работы;\n- определение наиболее оптимального алгоритма поисковой оптимизации на основе проведенного аналитического исследования.\n3. Исследование методов динамической графики, предоставляемых HTML5\nВ контексте данного исследования особое внимание хотелось бы обратить на методы проектирования web-графики, а именно - Canvas и Scalable Vector Graphics (SVG).\nHTML эволюционирует, обеспечивая улучшенную и более насыщенную стандартную графику, что способствует повышению качества взаимодействия с пользователями. Это дает веб-разработчикам возможность использовать веб-технологии на основе стандартов для создания насыщенных графикой интерактивных сайтов и приложений, не прибегая к специализированным технологиям, или написать код для конкретного браузера.\nCanvas и SVG - это две независимые технологии, хорошо дополняющие друг друга, хотя и различные по своей природе и происхождению.\nCanvas - это растровый холст, на котором можно рисовать через специальный API для JavaScript, предоставляющий базовые возможности: отрисовку примитивов и текста, побитовый доступ к изображению, вывод изображений и афинные преобразования контекста отрисовки.\nЯзык SVG используется для описания масштабируемой векторной графики, которая представляет собой модель графики с сохранением отображаемых данных, она сохраняется в памяти модели, которой можно управлять с помощью результатов выполнения кода при повторном рендеринге. Этот принцип работы отличается от непосредственного режима (Canvas). Хотя SVG может выступать в виде изолированного файла, внимание первоначально уделяется его естественной интеграции с HTML.\nПреимущества использования HTML5 Canvas:\n-\tвысокая производительность при отрисовке любых 2D объектов;\n-\tстабильная производительность - всё есть пиксель. Производительность падает только при увеличении разрешения изображения;\n-\tможно сохранить полученное изображение в PNG или JPG файл;\n-\tлучше всего подходит для создания растровой графики (например, в играх, фракталов и т.п.), редактирования изображений и операций, требующих манипулирования на уровне пикселей.\nПреимущества использования SVG:\n-\tнет зависимости от разрешения - SVG лучше подходит для кроссплатформенных пользовательских интерфейсов, так как позволяет масштабировать изображение при различных разрешениях экрана;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tSVG очень хорошо поддерживает анимацию. Элементы могут быть анимированы с использованием описательного синтаксиса или с помощью JavaScript;\n-\tможно получить полный контроль над каждым элементом, используя SVG DOM API в JavaScript;\n-\tSVG хранится в формате XML, что предоставляет больше возможностей браузерам по обеспечению до-\nступности SVG документов по сравнению с элементом canvas. Таким образом, SVG выглядит лучшим решением для пользовательских интерфейсов веб-приложений.\nНедостатки использования HTML5 Canvas:\n-\tотрисовка основана на пикселях;\n-\tне существует API для анимации. Вам придется прибегать к использованию таймеров и других событий для обновления канвы;\n-\tслабые возможности по рендерингу текста;\n-\tвозможно, не самый лучший выбор, когда доступность имеет решающее значение. Канва предоставляет вам поверхность для рисования в выбранном контексте (2D и 3D). Можно указать альтернативный контент внутри элемента canvas, который будет показан браузером при невозможности отображения графики. Кроме того, вы можете выполнить проверку доступности выбранного Canvas API с помощью JavaScript. На основе этого вы можете обеспечить различную функциональность для пользователей браузеров с разной поддержкой HTML 5 Canvas;\n-\tHTML 5 Canvas не подходит для создания вебсайтов или интерфейсов веб-приложений, так как пользовательские интерфейсы обычно должны быть динамическими и интерактивными, а Canvas требует от вас постоянной перерисовки каждого элемента в интерфейсе.\nНедостатки использования SVG:\n-\tнизкая скорость рендеринга при увеличении сложности документа (рисунка), так как используется модель DOM\n-\tскорее всего, SVG не подходит для таких приложений как игры. Возможно лучшим выбором будет комбинация HTML Canvas + SVG.\n4. Исследование методов поисковой оптимизации\nПоисковая оптимизация представляет собой комплекс мер для поднятия позиций сайта в результатах выдачи поисковых систем по запросам пользователей.\nМетоды поисковой оптимизации можно разделить на три класса: белую, серую и чёрную оптимизацию.\nБелая оптимизация - оптимизаторская работа над ресурсом без применения официально запрещённых каждой поисковой системой методов раскрутки ресурса - без влияния на поисковые алгоритмы сайтов.\nК серой поисковой оптимизации можно отнести добавление большого количества ключевых слов в текст страницы, зачастую в ущерб читабельности для человека.\nК чёрной оптимизации относятся все методы, которые противоречат правилам поисковых систем. Ранжирование - это процесс определения порядка согласно рангу, респектабельности или релевантности, результат которого пользователь видит, получая ответ поисковой системы на свой запрос.\nОсновной задачей SEO-оптимизации является учет внутренних и внешних факторов ранжирования и определение совокупности методов, позволяющих попасть в начало списка выдачи в результате ранжирования поисковыми системами. При этом каждая поисковая система проводит ранжирование по своим принципам. Существуют различные поисковые фильтры,\nцелью которых является отсеивание некачественных сайтов. Данные фильтры постоянно совершенствуются и видоизменяются.\nОпределение основных факторов ранжирования поисковых систем и их весового коэффициента в процессе определения релевантности web-ресурса, а также аналитическое исследование механизмов работы поисковых фильтров являются залогом качественно и продуктивной SEO-оптимизации.\nКлючевыми факторами ранжирования сайтов поисковой системой Google являются:\n-\tтраст и авторитетность домена. Факторы, которые могут уменьшить авторитетность домена: покупка и продажа, плохое, неестественный стиль роста, спам в комментариях, недостаточно разных ссылок, скудный или спамный;\n-\tанкоры с внешних ссылок;\n-\tключевые слова в контенте. Контентом могут быть не только статьи, но и любая, в данном случае, текстовая составляющая документа, отображаемая в нём читателю;\n-\tвес страниц, PageRank это числовая величина - мера \"важности\" страницы в поисковой системе Google. Зависит от числа внешних ссылок на данную страницу и от их веса (важности).\n5. Практическая реализация результатов исследования\nПрактическая реализация, основанная на результатах проведенного аналитического исследования, представляет собой интерактивное пособие. Данное интерактивное пособие позволяет пользователю не только осуществить обзор наиболее интересных функциональных возможностей HTML5/CSS3 и JavaScript, но также стать непосредственным участником процесса формирования Web-графики - динамически модифицировать специально подготовленные фрагменты кода с целью изменения визуального отображения графических (статичных и анимационных) элементов.\nОсновными особенностями данного интерактивного пособия являются:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tтеоретический обзор, представляющий собой экскурс в историю формирования языка гипертекстовой разметки вплоть до его последней версии - HTML5;\n-\tструктурированный анализ функциональных возможностей HTML5, позволяющих проектировать динамическую графику на страницах Web-сайтов и приложений;\n-\tподборка обучающих интерактивных примеров графических Web-элементов, имеющих наибольшее практическое применение в сфере проектирования динамической Web-графики.\nПрограммная реализация практической части включает создание клиентской и серверной частей. Разработка серверной части осуществляется с использованием технологий PHP и MySQL. PHP - мощный язык написания сценариев, обладающий рядом преимуществ по сравнению с аналогами: высокая производительность, наличие интерфейсов для СУБД, устойчивая поддержка объектно-ориентированного программирования, доступность исходного кода. MySQL является высокопроизводительной и надежной СУБД, которая хорошо интегрируется с РНР и ори-\nентирована на реализацию динамических Internet-приложений. Для создания клиентской части интерактивного обучающего пособия используются такие технологии, как HTML5, CSS3, JavaScript, jQuery, обеспечивая необходимую интерактивность, удобство и визуальную привлекательность продукта.\nДанное пособие ориентировано на пользователей, знакомых с языком гипертекстовой разметки, имеющих опыт работы со скриптовым языком JavaScript и базовыми знаниями объектно-ориентированного программирования.\nПланируемый срок службы данного интерактивного пособия является ограниченным, так как с течением времени новизна изложенных в нем материалов может потерять свою актуальность в связи с выходом в свет их обновленных версий, или с появлением новых, более совершенных технологий.\n6. Выводы\nВ работе проведено исследование особенностей языка HTML5, наиболее важных его новшеств; проанализирована совершенно новая парадигма HTML5, не признающая подключаемых модулей; описан элемент Canvas HTML5; рассмотрено понятие масштабируемой векторной графики (SVG).\nОсуществлено исследование поисковой оптимизации, определены ее основные методы, рассмотрены механизмы ранжирования сайтов поисковыми системами.\nНа основе анализа технологий производства динамической графики можно сделать вывод о сфере их применения. HTML 5 Canvas следует использовать для редактирования изображений: обрезки, изменения размеров, фильтров; создания растровой графики: визуализации данных, создания фракталов и графиков функций; анализа изображений: создания гистограмм и т.п.; создания игровой графики, такой как спрайты и фоны.\nSVG следует использовать для создания пользовательских интерфейсов веб-приложений, независимых от разрешения экрана; высокоинтерактивных аними-рованных пользовательских интерфейсов; графиков и диаграмм; редактирования векторных изображений.\nОсновой для эффективного продвижения сайтов поисковых системах является учет факторов ранжирования. На примере анализа факторов поисковой системы Google, можно прийти к выводу, что достижение траста и авторитетность домена, обеспечение анкоров с внешних ссылок, использование ключевых слов в контенте, получение высокого веса страницы (PageRank) не противоречащее внутренним правилам поисковой системы является залогом высоких позиций сайта в выдаче результатов запроса.\nЛитература\n1.\tКошик А. Веб-аналитика 2.0 на практике. Тонкости и лучшие методики [Текст] / А. Кошик - «Диалектика», 2011- 528с.\n2.\tЛедфорд Дж. Google Analytics 2.0 (Гугл Аналитикс): анализ веб-сайтов. Счётчик посещений и статистика сайта. Второе издание [Текст] / Дж. Ледфорд, М. Э. Тайлер - «Диалектика», 2008- 368с.\n3.\tДронов В.А. HTML 5, CSS 3 и Web 2.0. Разработка современных Web-сайтов. [Текст] / В.А. Дронов. - СПб.: БХВ-Петербург, 2011. - 416 с\n4.\tПилгрим М. Погружение в HTML5 [Текст] / М. Пилгрим - СПб: BHV, 2011. - 304с.\nAbstract\nTechnologies for creation user interface, namely HTML5, CSS3, JavaScript, - are of great interest in modern WEB-design, because they can significantly extend the functionality of WEB-pages, supports the latest multimedia applications, while maintaining ease of reading the code for developer and clarity of performance for computers and devices. Search engine optimization is a set of measures to raise the site positions in search engine results for a particular search users. There is a need to determine the most efficient and effective way to search engine optimization so as to take into account the features of the filters used and the ranking algorithms of the leading search engines. Thus, the work aimed to an analytical study of the latest technology Web-design and analysis of the basic algorithms of promotion of sites seems to be actual. The aim of the analytical study conducted in the Master's work is the implementation of the comparison of methods and technologies for creating interactive Web-graphics in HTML5 - Canvas and SVG (Scalable Vector Graphics) and determine the most appropriate applications of technology in the Canvas and SVG Web-design and development of recommendations for new and experienced developers for use of a particular model of graphics in HTML5. As well as identifying key ranking factors Veduchi search, analysis of the mechanism of the search filters and determining the optimal algorithm of search engine optimization on the basis of the analytical study. Practical implementation based on Trials conducted an interactive multimedia training manual «HTML5/CSS3, JavaScript. Development of modern sites\"\nKeywords: Internet technology, dynamic graphics, user interface, search engine optimization, ranking sites\n",
    "download_url": "https://cyberleninka.ru/article/n/issledovanie-noveyshih-veb-tehnologiy-i-algoritmov-prodvizheniya-saytov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/raspredelennaya-vychislitelnaya-set-na-osnove-veb-brauzerov-novye-tehnologicheskie-vozmozhnosti",
    "slug": "raspredelennaya-vychislitelnaya-set-na-osnove-veb-brauzerov-novye-tehnologicheskie-vozmozhnosti",
    "title": "Распределенная вычислительная сеть на основе веб-браузеров: новые технологические возможности",
    "abstract_description": "В статье рассматривается возможность создания распределенных вычислительных сетей на основе веб-браузеров исходя из анализа современного состояния браузерных технологий и производительности интерпретаторов JavaScript.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 519.2:004.421.5:004 7(075)\nП,Е. Бурамеиский, Р.Е. Buramensky, btipaev@gmai!.com\nОмский государственный технический университет, г. Омск. Россия\nOmsk State Technical University, Omsk, Russia\nРАСПРЕДЕЛЕННАЯ ВЫЧИСЛИТЕЛЬНАЯ СЕТЬ НА ОСНОВЕ ВЕБ-БРАУ ЗЕРОВ: НОВЫЕ ТЕХНОЛОГИЧЕСКИЕ ВОЗМОЖНОСТИ\nBROW SER-BASED DISTRIBU TED COMPUTING: NEW TECHNOLOGICAL CAPABILITIES\nВ статье рассматривается возмоасность создания распределенных вычислительных сетей на основе веб-браузеров исходя из анализа современного состояния йраузерных технологий н производительности интерпретаторов JavaScript.\nThe article considers possibility of creating a distributed computing through web-browsers from the analysis of the current stale of browser technology and performance of JavaScript engines.\nКлючевые слова: распределенные вычисления, веб-браузерJavaScript\nKeywords: distributed computing, web-browsers, JavaScript\nВведение\nПо предварительным оценкам к концу 2014-го года число пользователей интернета достигнет почти 3 миллиардов., что делает интернет мощнейшей распределенной вычислительной сетью, обладающей колоссальными вычислительными ресурсами. Встает вопрос: как использовать эти ресурсы с минимальными усилиями со стороны пользователя? Один из очевидных ответов: использовать веб-браузер в качестве промежуточного ПО для организации распределенных вычислений. Долгое время организация распределенных вычислений на базе веб-браузера была затруднена в силу отсутствия средств для запуска отдельных потоков вычислений, сохранения промежуточных данных и низкой скоростью JavaSciipt-инхерпретагорпмн но развитие HTML5 и совершенствование интерпретаторов открыто новые возможности для развития этой идеи.\n140\nОграничения hsï классы решаемых задач\nКластер, состоящий из веб-браузеров, по природе своей динамичен. Размер кластера может резко изменяться, связи между браузерами и серверами также не стабильны. Так как между браузерами нет связей типа точка-точка, любой обмен информацией между ними проходит через выделенные серверы. Эти черты определяют класс задач, которые можно решать с использованием такой структуры - это так называемые «пластичные алгоритмы» (оригинальный английский термин - «malleable applications») [2] К ним относится метод Монте-Карло, параметрические исследования, алгоритмы поиска направленных ациклических графов, алгоритмы параллельного анализа данных и др.\nПластичные алгоритмы могут адаптироваться к изменению вычислительной среды и, в частности, к изменению размера кластера. Таким образом, пластичный алгоритм позволяет не зависимо обрабатывать любое подмножество входного набор данных, допуская неравномерное распределение задач между множеством узлов. Соответственно, каждый браузер обрабатывает лишь небольшую часть данных, в то время как вычисления в целом легко масштабируются в силу большого числа браузеров в кластере.\nВеб-Зраузер как в ыч нет и тельный узел: возможности и ограничения\nВычислительным ядром веб-браузера является JavaScript-интерпретатор исполняющий код на клиентской стороне. Их производительность значительно выросла с приходом Wet 2.0 и широким внедрением AJAX. В соответствии с W3C стандартами JavaScript код в высокой степени переносим между различными реализациями браузеров и программных платформ. Такие технологии как Web workers, Web sockets, HTML5, WebGL (www Jihronos. org/webgl) и WebCL ( w w w Jdmmus oiç/ w e b cl) значительно расширяют возможности JavaSciipt-HHiepnpeTaTopa. Возможности, которые дают некоторые из этих технологий радикально повышают производительность и возможность веб-браузеров:\n-\tWeb worker обеспечивает исполнение задач JavaScript параллельно, не блокируя при этом другие процессы. Тем самым задачи обрабатываются в параллельных потоках;\n-\tWeb Socket является протоколом полно дуплекс ной связи поверх ТСР-соединения. предназначенным для обмена сообщенишш между браузером и веб-сервером в режиме реального времени;\n-\tWebCL (Web Computing Language) предоставляет доступ из JavaScript к OpenGL, что позволяет браузеру использовать GPU для параллельных вычислений в браузере, а также позволяет более эффективно использовать многоядерные CPU и GPU.\nИспользование браузера в качестве вычислительного узла имеет свои ограничения. Например, в отличии от натнвного клиента, браузер не может определить текущую загрузку процессора и использовать его ресурс в заданных рамках Однако пользователь может ограничивать используемый интерпретатором ресурс посредством таймеров.\nВозможности по передаче данных также ограничены. Соединение типа точка-точка (peer-to-peer или р2р) пока что доступны только для медкапотоков в рамках технологии WebRTC, так как в целях безопасности браузер не может прослушивать порты. Другое ограничение также связано с безопасностью: браузер блокирует кросс-доменные запросы, го есть браузер может делать запрос только в рамках текущего домена. Это ограничение можно обойти с помощью CORS: специального параметра Access Control Allow Origin добавляемого в заголовок запроса. CORS важен, поскольку он обеспечивает веб-браузеру доступ к удаленным данным напрямую из различных доменов, что обеспечивает передачу больших объемов данных на большое количество узлов.\nТакже осложняет использование браузера отсутствие высокопроизводительных JavaScnpt-библиотек, таких как GMP (предназначена для вычислений с произвольной точностью) для C/C++. Тем не менее, все эти ограничения меркнут на фоне перспективы использования: миллионов браузеров, каждый из которых может выполнять свой небольшой объем вычислений и тем самым вносить вклад в решение гораздо более значимых проблем.\nПроизводительность JavaScript\nОдной из слабых сторон JavaScript традиционно считается нижи производительность в сравнении с другими традиционными языками и компиляторами. Чтобы понять насколько данная позиция верна в случае использования JavaScript для распределенных вычислений, был проведен некоторый анализ производительности в сравнении с GNU С. На рис. 1 показано соотношение производительности для нескольких типичных, хорошо распараллеливаемых алгоритмов, запушенных под движком V8 и скомпилированных с помощью GNU GCC версии 4 5.2.\n15\n■V8-3.9 1YB-3.1 1V8-2.2 1VB-L3\nРнс. 1. Соотношение времени выполнения алгоритмов, реализованных на JavaScript (среда выполнения - различные версии JavaScript-ДБНжка VS) н на С. скомпилированных с помощью GNU GCC 4.5.2\nИсходный код алгоритмов на С позаимствованы со специализированного сайта Computer Language Benchmarks (http://shootout, alioth. debian.org' u32/benchmark.php). Эксперимент проводился под управлением 32-битной операционной системы на процессоре Intel Е5500.\n-\tRegex-DNA алгоритм сводится к оперированию со строками в частности, выполняется несколько регулярных выражений для поиска определенного шаблона и замены последовательности ДНК;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tSpectralNonii вычисляет спектральную норму матрицы; алгоритм на JavaScript использует тип данны Float64Arrays.\n-\tK-Nucleotide это алгоритм сортировки, поиска и подсчета ДНК-нуклеотидов.\n-\tN-Body моделирует орбитальное движение газовых гигантов:\n-\tВ-Tree является бэнчмарком, строящемся вокруг различных манипуляциях с бинарным деревом, включая аллокацию, деаллокашпо и обход дерева в глубину.\nВ целом, интерпретатор JavaScript от Google, конечно^ уступает в скорости GNU С. Но для некоторых алгоритмов можно видеть даже противоположенную картину: так алгоритм Regex-DNA на JS работает немного быстрее чем на С, благодаря оптимизации регулярных выражений в Chrome (Irregexp). Все другие алгоритмы выполняются медленней, чем на GNU С, но при этом заметен рост производительности в последних версиях V8; в сравнении с ранней версией 1.3.\nТак значительный рост производительности для алгоритма SpectralNonii можно связать с добавлением в V8 новых структур данных - АггауВиНег и Float64Array и глобальной оптимизацией Crankshaft. Эти результаты показывают явную тенденцию к приросту производительности JavaScript-интерпретатора.\nВ дополнение к результатам, показанным на рис. 1. были проведены гесты с использованием технологий OpenGL и WebCL. Последняя позволяет ускорить вьпшсление за\nсчёт использования процессора графической карты. Полученные результаты для алгоритма сложения векторов показывают, что обе технологии работают с одинаковой производительностью. Чего, впрочем, и следовало ожидать, учитывая, что JavaScript реализует лишь API к коду WebCL, который выполняется непосредственно на «железе».\nЗаключение\nИсходя из проведенного обзора актуальных браузерных технологий и оценки скорости выполнения JavaScript в современных средах, можно сделать уверенный вывод о том, в условиях надвигающегося информационного взрыва браузеры являются перспективной вычислительной платформой, способной превратить интернет в огромную вычислительную сеть за счет бесплатных и в данный момент неиспользуемых ресурсов веб-браузеров.\nБиблиографический список\n1.\tSansom, С. Hie DNA Deluge [Электронный ресурс] ! С. Sansom // Scientific Computing World. - Режим доступа : www.scientific-сomputing.coni/features/ feature.php? feature_id=168 (Дата обращения: 10.05.2014)\n2.\tTDesell, Т. Malleable applications for scalable high performance computing - In / K. Maghraoui, C. Varela H Cluster Computing - 2013. - Vol. 10, Issue 3. - P. 323-337.\n3.\tTilkov. S. Nodejs: Using JavaScript to Build High Performance Network Programs I S. Tilkov, S. Vmoski 11 IEEE Internet Computing. - 2012.. - Vol. 14, no. 6. - P. S(bS3.\n143\n",
    "download_url": "https://cyberleninka.ru/article/n/raspredelennaya-vychislitelnaya-set-na-osnove-veb-brauzerov-novye-tehnologicheskie-vozmozhnosti/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-prilozheniya-s-ispolzovaniem-tehnologiy-phonegap-javascript-html-i-jquery-mobile",
    "slug": "razrabotka-prilozheniya-s-ispolzovaniem-tehnologiy-phonegap-javascript-html-i-jquery-mobile",
    "title": "Разработка приложения с использованием технологий PhoneGap, JavaScript, html и jQuery Mobile",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFРазработка приложения с использованием технологий PhoneGap,\nJavaScript, HTML и jQuery Mobile\nМ.И. Притчина,\nстудентка 5-го курса, специальность «Информационные системы и технологии»\nЕ.А. Зотова,\nстудентка 5-го курса, специальность «Информационные системы и технологии»\nВ настоящее время все больше разработчиков и пользователей отказываются от native-приложений в пользу web-сервисов. Такое решение удобно для разработчиков, так как web-приложения являются кроссплатформенными, а, следовательно, не требуют длительного и дорогостоящего портирования приложения под различные платформы.\nДля пользователя web-сервис предоставляет возможность доступа к информации с любого компьютера или мобильного устройства и отсутствие необходимости установки ПО на устройство.\nНа данный момент web-сервисы для мобильных устройств все же не могут обеспечить полноценную замену native-приложениям, так как не имеют возможности взаимодействовать с большей частью аппаратных возможностей устройств, таких как акселерометр, компас, работа с внутренней памятью устройства, с контактами, сохраненными на устройстве. Высокая цена на передаваемый интернет-траффик и неравномерность зоны покрытия мобильных сетей часто не позволяют полноценно пользоваться web-приложениями и сервисами с мобильных устройств. Поэтому все же большинство приложений и сервисов пользователи предпочитают видеть в виде нативных приложений, не требующих передачи больших объемов данных через интернет-соединение, и доступных в режиме оффлайн.\nВ качестве возможного решения может выступить связка технологий PhoneGap, JavaScript, HTML и jQuery Mobile. При использова-\n50\nнии такой связки возможно сочетать достоинства web-приложений, таких как кроссплатформенность, простота написания кода, большое количество специалистов и справочной информации, и native-приложений: работа без подключения к сети, хранение данных на стороне клиента, доступ к аппаратной части устройства.\nДля иллюстрации удобства работы с данными технологиями продемонстрирован процесс написания простейшего приложения -конвертера расстояний.\nПервым шагом является создание нового проекта в среде разработки Eclipse для Android или Xcode для iOS (рис. 1).\nIV\"\nи 1 target, Ю5 SDK 5,0 Ш commorLjs\nТ ^ WWW\ncomments\nconfig.xrnl ш\t-Z.O.Q.js\nS] index.html w ^)jquery.mobile ► ^ images\nQ jquery-L.7_2.min\n^sij jquery.mobile-L.2.G.min.css\nil jquery.mobile-l,2.0,mir.js\nРис. 1. Исходные файлы проекта\nЗатем требуется написать HTML-код страниц приложения и поместить его в файл index.html, в проекте допускается использовать множество HTML-страниц, но начальная страница обязательно должна иметь имя index. При использовании фреймворка jQuery Mobile значительно уменьшается время написания кода за счет того, что jQuery Mobile автоматически выставляет размеры и позиции элементов в зависимости от размера экрана для улучшения внешнего вида приложения и повышения уровня комфорта работы с сенсорными экранами.\nДля работы приложения требуется подключить следующие файлы: библиотека PhoneGap, css-файл для оптимизации внешнего вида приложения, файл для реализации функционала ядра jQuery, файл jQuery Mobile для оптимизации работы JavaScript на мобильных устройствах (листинг 1).\n<!DOCTYPE HTML>\n<html>\n<head>\n<title>KoHBepTep</title>\n<meta name=»viewport» content=»initial-scale=1.0, user-scalable=no» charset=»utf-8»/>\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n51\n<script type=»text/javascript» charset=»utf-8» src=»cordova-\n2.0.\t0.js»></script>\n<link rel=»stylesheet» href=»jquery.mobile/jquery.mobile-\n1.2.0.\tmin.css» />\n<script type=»text/javascript» charset=»utf-8» src= «jquery.mobile/ jquery-1.7.2.min»></script>\n<script type=»text/javascript» charset=»utf-8» src=»jquery.mobNe/ jquery.mobile-1.2.0.min.js»></script>\n<script type=»text/javascript» charset=»utf-8» src=»common.js»></\nscript>\n</head>\nЛистинг 1. Подлючение библиотек\nВнешний вид приложения и методы взаимодействия с пользователем определяются в HTML коде. В данном примере использованы: jQuery Mobile разметка страницы и расширенные методы работы с элементами форм на странице (листинг 2).\n<body>\n<div data-role=»page» id=»index-page»>\n<div data-role=»header» data-position=»fixed»> <h6>KoHBepTep</h6>\n</div>\n<div data-role=»content»>\n<label for=»input»>BBeflHTe число:</1аЬе1>\n<input type=»number» name=»input» id=»input» value=»0» onchange=»convert()»>\n<label for=»inpPow» dass=»seled»>eдиницыl ввода:</1аЬе1>\n<select name=»inpPow» id=»inpPow» data-native-menu=»false» onchange=»convert()» data-theme=»b»>\n<option value=»0»>килoмeтpыK/optюn>\n<option value=»1»>MeTpu</option>\n<option value=»2»>сантимeтpыK/optюn>\n<option value=»3»>миллимeтpыK/optюn>\n</select>\n<label for=»outPov» dass=»seled»>eдиницыl вывода:</1аЬе1>\n<select name=»outPov» id=»outPov» data-native-menu=»false» onchange=»convert()» data-theme=»e»>\n<option value=»0»>килoмeтpыK/optюn>\n<option value=»1»>мeтpы</option>\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n<option value=»2»>сантимeтpыK/optюn>\n<option value=»3»>миллимeтpыK/optюn>\n</select>\n52\n<h2><div id=»output»>0</div></h2>\n</div>\n<div data-role=»footer» data-position=»fixed»></div>\n</div>\n</body>\n</html>\nЛистинг 2. HTML код страницы\nДля выбора величин измерения используются стандартные тэги HTML <select>. jQuery Mobile придает им привлекательный вид, не зависящий от платформы устройства (рис. 2).\nРис. 2. Слева: приложение без использования jQuery Mobile, справа: приложение с использованием jQuery Mobile\nЛогика работы приложения вынесена в отдельный файл common.js. В нем считываются значения элементов формы и производятся вычисления для конвертации расстояний (листинг 3).\nfunction convert(){\nvar input=0; var output=0; var inpPow=0; var outPov=0;\nvar temp=new Array([0,3,5,6],[-3,0,2,3],[-5-2,0,1],[-6-3-1,0]); input=document.getElementById(\"input\").value; inpPow=document.getElementById(\"inpPow\").value; outPov=document.getElementById(\"outPov\").value;\n53\noutput=input*Math.pow(10,temp[inpPow][outPov]);\ndocument.getElementById(\"output\").innerHTML=output;\n}\nЛистинг 3. JavaScript код приложения\nДля вычисления сконвертированной величины используется вспомогательный массив temp, представляющий собой таблицу соотношения величин между собой в виде степеней числа 10 (табл. 1).\nТаблица 1\nединицы\tкм\tм\tсм\tмм\nкм\t100\t103\t105\t106\nм\t10-3\t100\t102\t103\nсм\t10-5\t10-2\t100\t101\nмм\t10-6\t10-3\t101\t100\nВспомогательная таблица для конвертации чисел\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДля компиляции приложения можно использовать средства среды Eclipse и Xcode или воспользоваться онлайн сервисом Adobe PhoneGap build (https://build.phonegap.com). Компиляция в онлайн сервисе более проста и не требует установки или покупки специального ПО, но из-за автоматического добавления множества технических файлов скомпилированные приложения занимают больший объем памяти на устройстве, и медленнее выполняются.\nТак же стоит отметить удобство портирования уже готового HTML кода. В качестве приложения может выступать почти любая готовая HTML5 страница (рис. 3).\nРис. 3. web-страница, портированная в приложение для iPhone5\n54\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-prilozheniya-s-ispolzovaniem-tehnologiy-phonegap-javascript-html-i-jquery-mobile/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/analiz-raboty-prilozheniya-s-ispolzovaniem-server-side-rendering-migratsiya-nastroyka-i-razvertyvanie-prilozheniya-next-js",
    "slug": "analiz-raboty-prilozheniya-s-ispolzovaniem-server-side-rendering-migratsiya-nastroyka-i-razvertyvanie-prilozheniya-next-js",
    "title": "АНАЛИЗ РАБОТЫ ПРИЛОЖЕНИЯ С ИСПОЛЬЗОВАНИЕМ SERVER-SIDE RENDERING: МИГРАЦИЯ, НАСТРОЙКА И РАЗВЕРТЫВАНИЕ ПРИЛОЖЕНИЯ NEXT.JS",
    "abstract_description": "В статье анализируется приложение Next.JS с использованием рендеринга на стороне сервера, а также методы и подходы к миграции, настройке и развертыванию такого приложения на Production сервер.",
    "full_text_body": "\n\n\n\n\uFEFFкоторой имеет место известное эмерджентное явление, из знаний об этой материальной субстанции не следуют знания об ее материальных составляющих. Кроме того, разрешив рассматриваемую проблему, удастся пролить «яркий луч» на понимание сущности самой малой материальной величины, с которой приходится иметь дело в окружающей среде. В данном случае речь идет об определении планков-ской величины - минимального размера материальной субстанции в таком ее существовании, как вещество. То есть той материи, которую можно регистрировать,\tизмерять\tсовременными вещественными приборами, а также, на основе которой, расширять перечень изделий, используемых в эксплуатации, в том числе и средств обработки информации. Ведь эти планковские размеры, в современной науке получены на основе формул, взятых из теории относительности Эйнштейна и квантовой физики, несостоятельность которых, как отмечалось ранее, доказана во многих работах, в том числе и в [4], и «спешить» доверять им не следовало бы.\nТаким образом, в настоящей работе сформулирована важнейшая проблема естествознания, без\nразрешения которой слабо представляется дальнейшее развитие науки и техники, и, прежде всего, в фундаментальной науке кибернетики - в ее познании естественного интеллекта, и, в частности, создании средств обработки информации, приближенным, по своим возможностям, к естественным совокупностям материи, т.е. созданных природой.\nЛитература\n1.\tВышинский В.А. О предмете исследований науки кибернетики. Sciences of Europe № 74, (2021)\n2.\tЭмерджентная эволюция https://ru.wikipe-dia.org/wiki/%D0%AD%D0%BC%D0%B5%D1%80 %D0%B4%D0%B6%D0%B5%D0%BD%D1%82%D 0%BD%D0%B0%D1%8F_%D1%8D%D0%B2%D0 %BE%D0%BB%D1%8E%D1%86%D0%B8%D1%8 F\n3.\tДобро пожаловать в эпоху эмерджентности. https ://www.iidf. ru/media/articles/trends/dobro -pozhalovat-v-epokhu-emerdzhentnosti/\n4.\tВышинский В.А. Что такое энергия? Sciences of Europe № 42 vol 1, с. 31-41\n5.\tЯрилин А.А. «Золушка» становится принцессой, или место биологии в физике. «Экология и жизнь» №12 2008\nАНАЛИЗ РАБОТЫ ПРИЛОЖЕНИЯ С ИСПОЛЬЗОВАНИЕМ SERVER-SIDE RENDERING: МИГРАЦИЯ, НАСТРОЙКА И РАЗВЕРТЫВАНИЕ ПРИЛОЖЕНИЯ NEXT.JS\nКнязев И.В.\nСтарший разработчик программного обеспечения в June Homes\nБелгород, Россия\nANALYZING APPLICATION PERFORMANCE USING SERVER-SIDE RENDERING: MIGRATING, CONFIGURING AND DEPLOYING THE NEXT.JS APPLICATION\nKniazev I.\nSenior Software Developer at June Homes Belgorod, Russia\nАННОТАЦИЯ\nВ статье анализируется приложение Next.JS с использованием рендеринга на стороне сервера, а также методы и подходы к миграции, настройке и развертыванию такого приложения на Production сервер. ABSTRACT\nThe article analyzes the Next.JS application using server-side rendering, as well as methods and approaches for migrating, configuring and deploying such an application to the Production server. Ключевые слова: swr, javascript, reactjs, nextjs, typescript, es6. Keywords: swr, javascript, reactjs, nextjs, typescript, es6.\nКеширование данных и оптимизация веб-приложений являются самыми актуальными темами последних нескольких лет. Очевидно, что грамотное построение приложения, его архитектура, выбор технологий и дальнейшая его оптимизация влияют на такие показатели как расширяемость, переиспользуемость и эффективность.\nС момента огромного всплеска популярности высокодинамичных фреймворков, таких как React, веб-разработчики пытались найти баланс между интерактивным пользовательским интерфейсом, предлагаемым рендерингом на стороне клиента, и\nразличными преимуществами, связанными с скоростью и оптимизацией, предоставляемыми сервером и рендерингом данных на сервере.\nОдин из простых способов комбинировать эти методы, чтобы получить лучшее из обоих - использовать Nextjs, фреймворк, построенный на основе React, который позволяет пользователям использовать широкий спектр функций, таких как рендеринг на стороне сервера, статическая генерация, простая маршрутизация на основе файлов и многое другое.\nВ данной статье анализируются продвинутые функции Next.JS, фактическая реализация кода, миграция, настройка и развертывание приложения с использованием современного Server Side Rendering - рендеринга на стороне сервера. Использование CSR и SSR В основном, JavaScript фреймворки, например такие как React и Angular, используют рендеринг на стороне клиента (CSR), когда сервер отправляет на страницу почти пустой файл HTML, за которым следуют все файлы JavaScript в одном большом пакете, который затем должен быть обработан в браузере для рендеринга DOM-дерева.\nНа страницах, отображаемых на стороне клиента, начальная скорость загрузки низкая, и пользователь видит пустой экран, пока не будет выполнен весь JavaScript и не будут выполнены запросы к API. Однако последующие скорости загрузки будут быстрыми, так как дальнейшие изменения потребуют только обновления соответствующих разделов DOM-дерева.\nПроблема начальной скорости загрузки в CSR может быть решена с помощью рендеринга на стороне сервера (SSR), при котором сервер извлекает информацию из базы данных и отправляет на страницу подготовленный HTML-файл.\nПри таком подходе на странице есть значимый контент, который может просматривать пользователь. Страница становится интерактивной после выполнения файла JavaScript. Здесь сервер несет нагрузку по выборке и обработке данных, имея более высокую начальная скорость загрузк. Однако на последующие скорости загрузки это не повлияет, так как каждую страницу необходимо отобразить и снова получить с сервера.\nДругим важным преимуществом SSR перед CSR является поисковая оптимизация (SEO). Поскольку страницы, отображаемые на сервере, уже подготовлены с соответствующими метаданными, роботы, используемые поисковыми системами, такими как Google, могут легко классифицировать эти страницы, что приводит к более высокому поисковому рейтингу веб-сайта. Однако страницы, использующие CSR, полагаются на выполнение JavaScript для заполнения метаданных. Часто, если выполнение занимает более 300-400 мс, бот обрабатывает пустую страницу, что негативно влияет на SEO показатели.\nИдеальным решением является создание гибридного приложения, которое использует преимущества обоих этих методов для оптимизации доступности и взаимодействия с пользователем, и Next.js предлагает отличную отправную точку для этого.\nАвтоматическая настройка\nДля того, чтобы создать новое приложение Next.js рекомендуется использовать create-next-app, которое настраивает все автоматически. Чтобы создать проект, запустите npx create-next-app yarn create next-app\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЕсли вы хотите начать с проекта TypeScript, вы можете использовать --typescript флаг:\nnpx create-next-app --typescript yarn create next-app --typescript После завершения установки следуйте инструкциям по запуску сервера разработки. Попробуйте отредактировать pages/index.js и посмотрите результат в своем браузере. Ручная настройка\nДля начала установите next, react и react-dom в вашем проекте:\nnpm install next react react-dom yarn add next react react-dom Как только вы это сделаете, вы сможете установить все необходимые зависимости в своем проекте.\nОткройте package.json и добавьте следующее:\n\"scripts\": {\n\"dev\": \"next dev\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\" }\nЭти сценарии относятся к различным этапам разработки приложения:\n•\tdev - Запускает next dev в режиме разработки\n•\tbuild - Запускает next build сборку приложения для Production использования.\n•\tstart - Запускает next start Production сервер Next.js\n•\tlint - Запускает next lint настройку встроенной конфигурации ESLint Next.js\nСтоит отметить, что Next.js построен на концепции страниц. Страница представляет собой React Component экспортированный из .js, .jsx, .ts или .tsx файла в pages каталоге.\nСтраницы связаны с маршрутом на основе имени файла. Например pages/about.js, отображается на /about. Вы даже можете добавить параметры динамического маршрута с именем файла.\nИтак, нам необходимо далее создать pages каталог внутри проекта и заполнить ./pages/index.js следующим кодом: function Page() {\nreturn <p>paragraph/p> }\nexport default Page\nЧтобы начать разработку вашего приложения, запустите npm run dev или yarn dev. Это запустит сервер разработки на http://localhost:3000.\nПосетите http://localhost:3000, чтобы просмотреть ваше приложение.\nКак результат проделанного выше мы получаем:\n•\tАвтоматическую компиляцию с webpack и babel\n•\tБыстрое реагирование на обновления\n•\tСтатическую генерацию и рендеринг на стороне сервера\n•\tРаздачу статических файлов Развертывание приложения на Production.\nОсновные особенности, методы оптимизации и кэширования.\nПеред тем, как приступить к деплою (развертыванию) вашего приложения Next.js, вот несколько рекомендаций, чтобы обеспечить наилучшее взаимодействие с пользователем:\n•\tПо возможности используйте кеширование\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tОтложите загрузку тяжелых пакетов JavaScript до тех пор, пока они не понадобятся\n•\tУбедитесь, что логирование настроено\n•\tУбедитесь, что настроена обработка ошибок\n•\tНастройте страницы 404 (не найдено) и 500 (ошибка)\n•\tУбедитесь, что вы измеряете производительность\n•\tЗапустите Lighthouse, чтобы проверить производительность, передовой опыт, доступность и SEO. Для достижения наилучших результатов используйте Production сборку Next.js и используйте инкогнито в своем браузере, чтобы расширения не влияли на результаты\n•\tОзнакомьтесь с поддерживаемыми браузерами\nПовысить производительность можно используя:\n•\tnext/image и автоматическую оптимизацию изображений\n•\tавтоматическую оптимизацию шрифтов\n•\tоптимизацию скриптов\nСамый экономный по времени способ развернуть Next.js в рабочей среде - использовать платформу Vercel от создателей Next.js. Vercel - это облачная платформа для статических сайтов и гибридных приложений.\nЕсли вы еще этого не сделали, отправьте свое приложение Next.js поставщику Git по вашему выбору: GitHub , GitLab или BitBucket. Ваш репозито-рий может быть частным или публичным.\nЗатем выполните следующие действия:\n•\tЗарегистрируйтесь в Vercel\n•\tПосле регистрации вы попадете на страницу «Импорт проекта». В разделе «Из репозито-рия Git» выберите поставщика Git, который вы используете, и настройте интеграцию (там вы найдете инструкции: GitHub / GitLab / BitBucket )\n•\tПосле настройки нажмите «Импортировать проект из...» и импортируйте приложение Next.js. Он автоматически определяет, что ваше приложение использует Next.js, и настраивает конфигурацию сборки\n•\tПосле импорта он развернет ваше приложение Next.js и предоставит вам URL-адрес развертывания. Нажмите «Посетить», чтобы увидеть ваше приложение в разработке\nЕсли вы используете собственный сервер, рекомендую выполнить миграцию с него (например, с помощью динамической маршрутизации). Если вы не можете выполнить миграцию, стоит рассмотреть другие варианты хостинга.\nVercel сделан создателями Next.js и имеет отличную поддержку для Next.js соответственно.\nНапример, подход гибридных страниц полностью поддерживается «из коробки»:\n•\tКаждая страница может использовать либо статическую генерацию, либо рендеринг на стороне сервера (SSR).\n•\tСтраницы, использующие статическую генерацию и ресурсы (JS, CSS, изображения, шрифты и т.д.), Будут автоматически обслуживаться из сети Vercel Edge Network, что невероятно быстро.\n•\tСтраницы, использующие рендеринг на стороне сервера и маршруты API, автоматически становятся изолированными без серверными (serverless) функциями. Это позволяет бесконечно масштабировать рендеринг страниц и запросы API.\nПри развертывании приложения Next.js автоматически загрузит последнюю версию вашего приложения в фоновом режиме при маршрутизации. Для навигации на стороне клиента next/link временно будет работать как обычный <a> тег.\nЕсли новая страница (со старой версией) уже была предварительно загружена, Next.js будет использовать старую версию. Затем, после полного обновления страницы или нескольких переходов на стороне клиента, Next.js покажет последнюю версию.\nХостинг с помощью сервера Node.JS\nNext.js можно развернуть на любом хостинг-провайдере, поддерживающем Node.js. Это подход, который вам следует использовать, если вы используете собственный сервер.\nУбедитесь, что ваш package.json имеет 'ЪшИ\"и\n\"start\" скрипты:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n{\n\"scripts\": { \"dev\": \"next\", \"build\": \"next build\",\n\"start\": \"next start\" }\n}\nСкрипт next build создает Production приложение в папке .next. После сборки next start запускает сервер Node.js, который поддерживает гибридные страницы, обслуживая как статически сгенерированные, так и отображаемые на стороне сервера страницы.\nХостинг с помощью образа Docker Вы можете использовать этот подход при развертывании в Kubernetes или HashiCorp Nomad, или при работе внутри одного узла в любом облачном провайдере.\nПример использования Dockerfile: FROM node:alpine AS deps https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a3150 6\nRUN apk add --no-cache libc6-compat WORKDIR /app COPY package.json yarn.lock ./ RUN yarn install --frozen-lockfile FROM node:alpine AS builder WORKDIR /app COPY . .\nCOPY --from=deps /app/node_modules ./node_modules\nRUN yarn build && yarn install --production -ignore-scripts --prefer-offline\nFROM node:alpine AS runner\nWORKDIR /app ENV NODE_ENV production RUN addgroup -g 1001 -S nodejs RUN adduser -S nextjs -u 1001 COPY --from=builder /app/public ./public COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next\nCOPY --from=builder /app/node_modules ./node_modules\nCOPY --from=builder /app/package.json ./pack-age.json\nUSER nextjs EXPOSE 3000 CMD [\"yarn\", \"start\"]\nОбязательно поместите этот Dockerfile в корневую папку вашего проекта.\nВы можете создать свой контейнер docker build . -t my-next-js-app и запустить его с помощью docker run -p 3000:3000 my-next-js-app.\nСтратегии внедрения и переход на Next.JS Next.js был разработан так, что его можно внедрять постепенно. С Nextjs вы можете продолжать использовать существующий код и добавлять столько React, сколько вам нужно. Начав с малого и постепенно добавляя больше страниц, вы можете предотвратить сбой в работе, избегая полной перезаписи.\nПервая стратегия - настроить ваш сервер или прокси так, чтобы все в определенном subpath указывало на приложение Nextjs. Например, ваш существующий веб-сайт может находиться по адресу example.com, и вы можете настроить свой прокси-сервер таким образом, чтобы example.com/store обслуживал магазин электронной коммерции на Next.js.\nИспользуя basePath, вы можете настроить ресурсы и ссылки вашего приложения Nextjs для автоматической работы с вашим новым subpath/store. Поскольку каждая страница в Next.j s представляет собой отдельный автономный маршрут, такие страницы pages/products.js будут маршрутизироваться example.com/store/products в вашем приложении. В коде конфига это будет выглядеть так: // next.config.js module.exports = {\nbasePath: '/store', }\nВторая стратегия - создать новое приложение Nextjs, указывающее на корневой URL-адрес вашего домена. Затем вы можете использовать rewrites внутри next.config.js, чтобы проксировать некоторые subpath в существующее приложение.\nНапример, предположим, что вы создали приложение Nextjs, которое будет обслуживаться example.com следующим образом next.config.js. Теперь запросы для страниц, которые вы добавили в это приложение Nextjs (например, /about если вы добавили pages/aboutjs), будут обрабатываться Nextjs, а запросы для любого другого маршрута (например /dashboard) будут проксироваться proxy.example.com. В коде конфига это будет выглядеть так:\n// next.config.js module.exports = {\nasync rewrites() { return {\nfallback: [\n{\nsource: '/:path*',\ndestination: 4https://proxy.example.com/:path*\\ },\n],\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n}\nreturn [\n{\nsource: '/:path*',\ndestination: '/:path*', },\n{\nsource: '/:path*',\ndestination: 4https://proxy.example.com/:path*\\ },\n]\n},\n}\nМикро-фронтенды с монорепозиториями и субдоменами\nДля микро-фронтендов с монорепозиториями и субдоменами Nextjs (и Vercel) позволяет использовать поддомены для постепенного внедрения новых приложений. Некоторые преимущества микроинтерфейсов:\n•\tМеньшие, более сплоченные и удобные в обслуживании кодовые базы.\n•\tБолее масштабируемые организации с разделенными автономными командами.\n•\tВозможность обновлять или даже переписывать части интерфейса более инкрементально.\nПосле настройки вашего монорепозитория, отправьте изменения в репозиторий Git как обычно, и вы увидите коммиты, развернутые в проектах Vercel, которые вы подключили. Заключение\nРендеринг на стороне сервера имеет много преимуществ, не ограничивающийся лишь SEO оптимизацией. Можно отметить, что гибридное веб-приложение по сравнению с полностью развернутым на стороне клиента представляет собой более гибкий и масштабируемый вариант, который позволяет уменьшить сложность и стоимость разработки. В данной статье я проанализировал работу гибридных веб-приложений, а именно приложения на Next.JS, указал основные этапы и стратегии миграции и развертывания приложения на SSR с рабочими примерами кода.\nЛитература\n1.\tДокументация React.JS / [Электронный ресурс], 2021. Режим доступа: https://reactjs.org/ (дата обращения: 01.08.2021).\n2.\tРепозиторий GitHub / React.JS. [Электронный ресурс], 2021. Режим доступа: https://github.com/facebook/react/ (дата обращения: 01.08.2021).\n3.\tДокументация Next.JS / [Электронный ресурс], 2021. Режим доступа: https://nextjs.org/ (дата обращения: 01.08.2021).\n",
    "download_url": "https://cyberleninka.ru/article/n/analiz-raboty-prilozheniya-s-ispolzovaniem-server-side-rendering-migratsiya-nastroyka-i-razvertyvanie-prilozheniya-next-js/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy-1",
    "slug": "testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy-1",
    "title": "Тестирование сайта государственные услуги РФ инструментами современных web-технологий",
    "abstract_description": "Выявлена значимость современных web-технологий. Протестирован сайт Электронных государственных услуг. В результате анализа тестирования предложены рекомендации по повышению скорости загрузки страницы.",
    "full_text_body": "\n\n\n\n\uFEFFМЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №6/2016 ISSN 2410-700Х\nПродолжение таблицы 1\n3.\tАцетилированный дикрахмаладипат (Е1422)\t6 г\n4.\tДикрахмал-глицерин (Е1411)\t6 г\n5.\tАцетилированный дикрахмал-глицерин\t6 г\nЭти пищевые добавки не вызывают каких-либо неблагоприятных последствий даже при систематическом включении их в пищу ребенка, в количествах, существенно превышающих возможное их поступление с продуктами на зерновой основе.\nДля стабилизации коллоидных систем жидких и пастообразных продуктов прибегают к пищевым добавкам, регулирующим РН и буферные свойства системы. При изготовлении детских продуктов согласно международным стандартам прибегают к помощи высокоочищенных щелочей (гидроксидов), карбонатов, цитратов, а также пищевых кислот: лимонной, молочной, уксусной [2].\nВ качестве антиокислителей для детских пищевых продуктов допускается использование природных соединений, таких как а-токоферол или смесь токоферолов, аскорбиновая кислота, ее натриевая или калиевая соли [3].\nТаблица 2\nСтабилизаторы, допустимые к использованию в детском питании\n№ п/п\tНазвание добавки (Е.. .индекс)\tМаксимальные уровни добавки в расчете на 100 г готового продукта\n1.\tЫа, Са, К гидроксид (Е524, Е526, Е255)\tСогласно технологической инструкции\n2.\tЫа, К или Са карбонат (Е500, Е501, Е170)\tТо же\n3.\tЫа или К цитрат (Е331, Е332)\tТо же\n4.\tУксусная кислота\t0,5 г в консервах\n5.\tЭмульгаторы лецитин (Е322)\t0,5г\n6.\tМоно и диглицириды (Е471, Е472)\t0,15г\n7.\tАнтиокислители: а-токоферол (Е307)\t300 мг\n8.\tАскорбиновая кислота (Е300) и ее соли Ыа (Е301) или К (Е302)\t50мг на 100г сухого вещества\n9.\tВанилин, экстракт этилванилин\t7мг на 100г сухого вещества\nАнтиокислители фенольной структуры или эфиры гелловой кислоты в производстве пищевых продуктов для детей не применяют.\nПищевые добавки, влияющие на органолептические свойства продукта, - красители, ароматизаторы, подсластители - находят ограниченное применение при изготовлении пищевых продуктов для детей. Добавление синтетических красителей в детские продукты не допускается. Для придания привлекательного цвета используют только натуральные экстракты плодов и овощей. Список использованной литературы:\n1.\tТуниева Е.К. К вопросу безопасности пищевых добавок //Все о мясе. - 2015. - № 4. - С. 10-13.\n2.\tТуватова В.Е. Разработка и обоснование технологии пресервов из осьминога: Дис. канд. техн. наук: 17.05.02/Дальневосточ. гос. технич. рыбохоз. ун-т. - Владивосток, 2002. - 480 с.\n3.\tФридеманн Н. Органические консерванты нового поколения //Мясная индустрия. - 2011. - № 9. - С. 46-47.\n© Туватова В.Е., 2016\nУДК 004\nФандрова Людмила Петровна, Бурзянцева Екатерина Юрьевна\nканд. техн. наук, доцент каф. УГАТУ, студентка УГАТУ, г.Уфа, РФ E-mail: fandrova@yandex.ru, katya_9b@mail.ru\nТЕСТИРОВАНИЕ САЙТА ГОСУДАРСТВЕННЫЕ УСЛУГИ РФ ИНСТРУМЕНТАМИ\nСОВРЕМЕННЫХ WEB-ТЕХНОЛОГИЙ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nАннотация\nВыявлена значимость современных web-технологий. Протестирован сайт Электронных\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №6/2016 ISSN 2410-700Х_\nгосударственных услуг. В результате анализа тестирования предложены рекомендации по повышению скорости загрузки страницы.\nКлючевые слова\nWeb-технология, тестирование программного продукта, скорость загрузки страницы, код JavaScript.\nВ настоящее время одним из самых важных ресурсов организации становится информация [1, с.24]. Потребность в информации растет с развитием экономики и общества.\nWeb-технология кардинально изменила наше мнение не только о работе с информацией, но и с компьютером в том числе. Как стало известно, общепринятые нормы развития вычислительной техники -производительность, пропускная способность, емкость запоминающих устройств - не принимали в расчет основное затруднение системы - интерфейса c человеком. Использование обществом отработанного механизма применения информационной системы являлось препятствием для появления инноваций, а также сокращалась выгода от использования прежних технологий. Поэтому, когда взаимопонимание между человеком и «умной машиной» при помощи создания более простого интерфейса, было достигнуто, возрос интерес к способностям этой «чудо - машины», именуемой вычислительной техникой. Сегодня основную массу пользователей глобальной сети Интернет составляют слои населения, которые не являются программистами, а имеют статус «пользователь - любитель».\nС развитием инновационных технологий гипертекстовой разметки в Интернете стало появляться всё больше сайтов, тематика которых была совершенно различной - от сайтов крупных компаний, повествующих об успехах компании и её провалах, до сайтов маленьких фирм, предлагающих посетить их офисы в пределах одного города [2, с.56].\nКроме того, появляется все больше фирм, осуществляющих свою деятельность через Интернет. Коммерческий интернет-сайт должен быть эффективным бизнес-инструментом [3, с.22]. В данном случае, во избежание конкуренции, необходимо обеспечить быстрый доступ к сайту, так как медленная загрузка web-страницы может привести к потере потенциальных пользователей. Пользователи судят о производительности сайта по времени его отклика на их действия [4, с.77].\nТаким образом, чтобы избежать подобных ситуаций, необходимо создать максимально высокую скорость загрузки страниц сайта. Скорость - первая характеристика доступа в Интернет [5].\nВ настоящее время глобальная сеть Интернет предлагает огромный спектр онлайн-программ, тестирующих сайты на скорость загрузки, таких как «sitespeed.ru», «tools.pingdom», «Web Page Performance Test» и т.д. Одним из самых популярных является бесплатный программный продукт Google Developers «PageSpeed Insights», предназначенный в основном для разработчиков сайта. Данный продукт позволяет определить скорость загрузки web-страницы по 100-бальной шкале, а также выявить причины, по которым тот или иной сайт имеет недостаточную скорость. Ввиду того, что скорость подключения у разных пользователей различна, «PageSpeed Insights» рассматривает только независимые от сети стороны функционирования страницы: конфигурация сервера, структура HTML, использование внешних ресурсов. В результате анализа сайта сервис «PageSpeed Insights» предлагает некоторые рекомендации, позволяющие ускорить процесс загрузки [6].\nИнструментами программного продукта «PageSpeed Insights» протестирован сайт Электронных государственных услуг РФ (далее ЭГУ РФ) «www.gosuslugi.ru» [7].\nЭГУ РФ - федеральная государственная информационная система, обеспечивающая предоставление в электронной форме государственных и муниципальных услуг - учет обращений граждан. Потребителями этих услуг являются только физические или юридические лица. Услуги предоставляются по запросам указанных лиц (заявителей) в соответствии с административными регламентами. Имея большое количество пользователей, сайт ЭГУ РФ обладает завышенной загруженностью, вследствие чего увеличивается время открытия web-страницы. Таким образом, целесообразно протестировать данный сайт на скорость загрузки.\nВ результате тестирования, скорость сайта составила 74 из 100 баллов. Данная оценка характеризует среднюю скорость загрузки и имеет место ввести некоторые коррективы в программный код.\nПредлагаются некоторые рекомендации по увеличению скорости сайта государственных услуг РФ:\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №6/2016 ISSN 2410-700Х_\n1.\tИспользовать кеш браузера.\nЕсли указывать в заголовках HTTP дату или срок действия статических ресурсов, браузер будет загружать уже полученные ранее ресурсы с локального диска, а не из Интернета.\n2.\tИсключить из верхней части страницы код JavaScript и CSS, препятствующий отображению контента.\n2.1.\tКоличество блокирующих скриптов на странице: 14. Количество блокирующих ресурсов CSS на странице: 4. Они замедляют отображение контента. Все содержание верхней части страницы отображается только после загрузки указанных далее ресурсов. Необходимо отложить загрузку этих ресурсов, загружать их асинхронно или встроить их самые важные компоненты непосредственно в код HTML.\n2.2.\tТакже необходимо удалить код JavaScript, препятствующий быстрой загрузке и отображению элементов сайта (рис. 1).\n//www.gosuslugi.ru/...ssionid=3E6C58A65B1FA2nD523D63828766406; //www.gosuslugi.ru/pgu/htdocs/j s/2012/j query.tmpl .j s; //www.gosuslugi.ru/ pgu/htdocs/js/2012/json2.js; //www.gosuslugi.ru/ pgu/htdocs/js/2012/fw/framechunk.js //www.gosuslugi .ru/ pgu/htdocs/j s/2012/epgu.j s; //www.gosuslugi.ru/ pgu/htdocs/j s/2012/j query.validate.j s; //www.gosuslugi .ru/ pgu/htdocs/j s/2012/j query.validate.patch.j s; //www.gosuslugi.ru/ pgu/htdocs/js/2012/validateFunctions.js; //www.gosuslugi .ru/ pgu/htdocs/j s/2012/fw/form .j s; //www.gosuslugi.ru/ pgu/htdocs/js/2012/bootstrap-tooltip.js; //www.gosuslugi.ru/ pgu/htdocs/js/2012/bootstrap-popover.js.\nРисунок 1 - Код JavaScript, препятствующий быстрому отображению контента\n2.3.\tОптимизировать работу CSS.\nБраузеры запрашивают внешние файлы CSS, хранящие таблицы связанных стилей, перед отображением контента на экране. Это приводит к задержке и замедлению обработки страницы. Если внешние ресурсы CSS имеют малый объем, их можно вставить непосредственно в документ HTML. Аналогичное встраивание разрешает браузеру продолжать загрузку страницы.\nСтоит заметить что, если файл CSS слишком велик, то после его встраивания PageSpeed Insights предупреждает, что верхняя часть страницы имеет слишком большой объем. В этом случае, необходимо найти код CSS, отвечающий за контент в верхней части страницы, и встроить его в HTML, отложив загрузку остальных стилей.\nПо данным проверки необходимо оптимизировать работу CSS на ресурсах, показанных на рис. 2.\n0\thttps\n0\thttps\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n0\thttps\n//www.gosuslugi.ru/.ssionid=3E6C58A65B1FA211D523D63828766406; //www.gosuslugi.ru/ pgu/htdocs/css/2012/epgu.css; //www.gosuslugi.ru/ pgu/htdocs/css/2012/liquid_index.css; //www.gosuslugi.ru/ pgu/htdocs/css/2012/popover.css.\nРисунок 2 - Ресурсы, требующие оптимизации в работе CSS\n3.\tОптимизировать изображения.\nВерный формат и сжатие изображений дает возможность сократить их объем. В таблице 1 представлены адреса изображений, сжатие без потерь которых приведет к заметному уменьшению объема.\nТаблица 1\nОптимизация изображений (составлено автором)\nАдрес изображения\t\tУменьшение объема\nКБ\t%\nhttps\t//static.gosuslugi.ru/cms/htdocs/0/0/0/0/0/0/0/0/0/map 1 .jpg\t19,5\t15\nhttps\t//www.gosuslugi.ru/...s/img/2012/slider-news-pager-wrap-bg.png\t2,6\t96\nhttps\t//www.gosuslugi.ru/...ocs/img/2012/slider-news-pager-lines.png\t1,8\t58\nМЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №6/2016 ISSN 2410-700Х\nПродолжение таблицы 1\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg tool region.png\t1\t54\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/maps-icon.png\t930\t41\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012bg top menu.png\t915\t37\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/title info.png\t868\t52\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg search box.png\t855\t58\nhttps\t//www.gosuslugi.ru/... /2012/slider-life-situations-item-bg.png\t771\t24\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/html-bg.png\t675\t61\n4.\tСократить HTML.\nСжатие HTML-кода (в том числе встроенного кода JavaScript или CSS) позволяет сократить объем данных, чтобы ускорить загрузку и обработку.\nСжатие кода на ресурсе https://www.gosuslugi.ru/ позволит уменьшить его размер на 4,4 КБ (21 %).\n5.\tСократить JavaScript.\nСжатие кода JavaScript позволяет сократить объем данных, чтобы ускорить загрузку, обработку и выполнение. Предлагается сократить код JavaScript на ресурсе «https://www.gosuslugi.ru/pgu/htdocs/js/2012 /jquery. validate.js», чтобы уменьшить его размер на 3,4 КБ (33 %).\nВот главные направления, по которым возможно вести оптимизацию сайта Госуслуги РФ. Применение вышеперечисленных стратегий позволит значительно снизить время загрузки и повысить производительность сайта ЭГУ РФ, что в свою очередь будет способствовать увеличению количества пользователей.\nВ заключении необходимо отметить, что программирование является неотъемлемой частью написания сайта. На разработчиков сайтов возлагается ответственность не только за хороший интерфейс и визуализацию, но и за скоростные характеристики загрузки web-страницы. Выявить те или иные недостатки или причины, по которым скорость загрузки недостаточна, можно проведя тестирование сайта. Сеть Интернет может предложить множество бесплатных инструментов тестирования в режиме онлайн. С их помощью разработчики сайтов могут значительно упростить решение своих задач. Список использованной литературы:\n1.\tЭкономика фирмы. Учебник. Под ред. Иващенко Н.П. - М.: Проспект, 21 янв. 2016 г. - 408 с.\n2.\tЭкономика инноваций: [учебник для студентов высших учебных заведений, обучающихся в магистратуре по экономическим специальностям] / А. И. Базилевич [и др.]; под ред. В. Я. Горфинкеля. - М: ВУЗОВСКИЙ УЧЕБНИК, 2009 - 416 с.\n3.\tПоисковая оптимизация. Практическое руководство по продвижению сайта в Интернете. 3-е изд. Севастьянов Иван Олегович. Изд. дом Питер, 24 сент. 2015 г. - 272 с.\n4.\tКорпоративный веб-сайт на 100проц.: требуйте от сайта большего! Роман Овчинников. Изд. дом Питер, 26 мар. 2009 г. - 322 с.\n5.\tЗвоним через интернет. Экономим в 100 раз. Василий Леонов. Litres, 24 окт. 2014 г.\n6.\tСайт анализа скорости загрузки web-страниц: https://developers.google.com/speed/pagespeed/insights.\n7.\tСайт ЭГУ РФ: https://www.gosuslugi.ru.\n© Фандрова Л.П., Бурзянцева Е.Ю., 2016\nУДК 004\nФандрова Людмила Петровна, Галифанова Римма Ильмировна\nканд. техн. наук, доцент каф. УГАТУ, студентка УГАТУ, г.Уфа, РФ E-mail: fandrova@yandex.ru, rimma-nasibullina@rambler.ru\nОБЛАЧНЫЕ ТЕХНОЛОГИИ В ПОДДЕРЖКУ СОВРЕМЕННОЙ СИСТЕМЕ ОБРАЗОВАНИЯ\nАннотация\nРассматриваются информационные и коммуникационные технологии, облачные хранилища в\n",
    "download_url": "https://cyberleninka.ru/article/n/testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy-1/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy",
    "slug": "testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy",
    "title": "Тестирование сайта государственные услуги РФ инструментами современных web-технологий",
    "abstract_description": "Выявлена значимость современных web-технологий. Протестирован сайт Электронных государственных услуг. В результате анализа тестирования предложены рекомендации по повышению скорости загрузки страницы.",
    "full_text_body": "\n\n\n\n\uFEFF_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\nнаименования операций, нормы времени, нормы расхода материалов и т.д.; база «Общие технологические процессы» (ОТП) с наборами операций, переходов, оснащения, применяемых как при автоматическом, так и при диалоговом проектировании ТП [4, с. 45-47]; база «Условия и расчеты», в которую вносятся условия выбора операций и оснащения для автоматизированного проектирования ТП, а также необходимые расчеты параметров ТП; база «Конструкторская и нормативная документация»; база «Справочники», которая открывает доступ к базе материалов, справочникам кодирования элементов конструкции изделия и их параметров [5, с. 135-138].\nСписок использованной литературы\n1.\tСуровцева, О.А. Создание комплекса интегрированного проектирования для автоматизации процесса технологической подготовки обувного производства [Текст] / О.А. Суровцева, // сборник науч. трудов по материалам Междун,. научно-практич., конференции: - Смоленск, 2016, Ч.1, С.1П-П3.\n2.\tСуровцева, О.А. Автоматизированное проектирование технологических операций для сборки низа обуви [Текст] / О.А. Суровцева // Сборник научных статей магистрантов, аспирантов, молодых учёных и преподавателей «Развитие современной науки: теоретические и прикладные аспекты»:- Пермь, 2016. С. 2930.\n3.\tСуровцева, О.А. Использование потенциала САПР ТП «ТехноПро» для формирования интегрированных комплексов на основе CALS технологий [Текст] / О.А. Суровцева, Г.И. Шишкина, Н.Ю. Федорова // Сборник статей 9-й международной научно-практической конференции «Состояние и перспективы развития сельскохозяйственного машиностроения» «Интерагромаш-2016» Ростов-на-Дону, 2016, С.330-332.\n4.\tСуровцева, О.А. Проектирование инновационного технологического процесса по производству обуви с использованием САПР ТП [Текст] / О.А. Суровцева // Сборник научно-практической конференции «Наука сегодня: реальность и перспективы» Научный центр «Диспут»:- Вологда, 2016. С. 45-47.\n5.\tСуровцева, О.А. Совершенствование автоматизированной системы технологической подготовки обувного производства [Текст] / О.А. Суровцева, Т.В. Тернавская, // Известия вузов. Северо-Кавказский регион. Технические науки. Новочеркасск - 2014. №1.- С.135-138.\n© Суровцева О.А., 2016\nУДК 004\nФандрова Людмила Петровна,\nканд. техн. наук, доцент каф. УГАТУ, Бурзянцева Екатерина Юрьевна\nстудентка УГАТУ,г.Уфа, РФ E-mail: fandrova@yandex.ru, katya_9b@mail.ru\nТЕСТИРОВАНИЕ САЙТА ГОСУДАРСТВЕННЫЕ УСЛУГИ РФ ИНСТРУМЕНТАМИ\nСОВРЕМЕННЫХ WEB-ТЕХНОЛОГИЙ\nАннотация\nВыявлена значимость современных web-технологий. Протестирован сайт Электронных государственных услуг. В результате анализа тестирования предложены рекомендации по повышению скорости загрузки страницы.\nКлючевые слова\nWeb-технология, тестирование программного продукта, скорость загрузки страницы, код JavaScript.\nВ настоящее время одним из самых важных ресурсов организации становится информация [1, с.24]. Потребность в информации растет с развитием экономики и общества.\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\nWeb-технология кардинально изменила наше мнение не только о работе с информацией, но и с компьютером в том числе. Как стало известно, общепринятые нормы развития вычислительной техники -производительность, пропускная способность, емкость запоминающих устройств - не принимали в расчет основное затруднение системы - интерфейса c человеком. Использование обществом отработанного механизма применения информационной системы являлось препятствием для появления инноваций, а также сокращалась выгода от использования прежних технологий. Поэтому, когда взаимопонимание между человеком и «умной машиной» при помощи создания более простого интерфейса, было достигнуто, возрос интерес к способностям этой «чудо - машины», именуемой вычислительной техникой. Сегодня основную массу пользователей глобальной сети Интернет составляют слои населения, которые не являются программистами, а имеют статус «пользователь - любитель».\nС развитием инновационных технологий гипертекстовой разметки в Интернете стало появляться всё больше сайтов, тематика которых была совершенно различной - от сайтов крупных компаний, повествующих об успехах компании и её провалах, до сайтов маленьких фирм, предлагающих посетить их офисы в пределах одного города [2, с.56].\nКроме того, появляется все больше фирм, осуществляющих свою деятельность через Интернет. Коммерческий интернет-сайт должен быть эффективным бизнес-инструментом [3, с.22]. В данном случае, во избежание конкуренции, необходимо обеспечить быстрый доступ к сайту, так как медленная загрузка web-страницы может привести к потере потенциальных пользователей. Пользователи судят о производительности сайта по времени его отклика на их действия [4, с.77].\nТаким образом, чтобы избежать подобных ситуаций, необходимо создать максимально высокую скорость загрузки страниц сайта. Скорость - первая характеристика доступа в Интернет [5].\nВ настоящее время глобальная сеть Интернет предлагает огромный спектр онлайн-программ, тестирующих сайты на скорость загрузки, таких как «sitespeed.ru», «tools.pingdom», «Web Page Performance Test» и т.д. Одним из самых популярных является бесплатный программный продукт Google Developers «PageSpeed Insights», предназначенный в основном для разработчиков сайта. Данный продукт позволяет определить скорость загрузки web-страницы по 100-бальной шкале, а также выявить причины, по которым тот или иной сайт имеет недостаточную скорость. Ввиду того, что скорость подключения у разных пользователей различна, «PageSpeed Insights» рассматривает только независимые от сети стороны функционирования страницы: конфигурация сервера, структура HTML, использование внешних ресурсов. В результате анализа сайта сервис «PageSpeed Insights» предлагает некоторые рекомендации, позволяющие ускорить процесс загрузки [6].\nИнструментами программного продукта «PageSpeed Insights» протестирован сайт Электронных государственных услуг РФ (далее ЭГУ РФ) «www.gosuslugi.ru» [7].\nЭГУ РФ - федеральная государственная информационная система, обеспечивающая предоставление в электронной форме государственных и муниципальных услуг - учет обращений граждан. Потребителями этих услуг являются только физические или юридические лица. Услуги предоставляются по запросам указанных лиц (заявителей) в соответствии с административными регламентами. Имея большое количество пользователей, сайт ЭГУ РФ обладает завышенной загруженностью, вследствие чего увеличивается время открытия web-страницы. Таким образом, целесообразно протестировать данный сайт на скорость загрузки.\nВ результате тестирования, скорость сайта составила 74 из 100 баллов. Данная оценка характеризует среднюю скорость загрузки и имеет место ввести некоторые коррективы в программный код.\nПредлагаются некоторые рекомендации по увеличению скорости сайта государственных услуг РФ:\n1.\tИспользовать кеш браузера.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЕсли указывать в заголовках HTTP дату или срок действия статических ресурсов, браузер будет загружать уже полученные ранее ресурсы с локального диска, а не из Интернета.\n2.\tИсключить из верхней части страницы код JavaScript и CSS, препятствующий отображению контента.\n2.1. Количество блокирующих скриптов на странице: 14. Количество блокирующих ресурсов CSS на странице: 4. Они замедляют отображение контента. Все содержание верхней части страницы отображается\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\nтолько после загрузки указанных далее ресурсов. Необходимо отложить загрузку этих ресурсов, загружать их асинхронно или встроить их самые важные компоненты непосредственно в код HTML.\n2.2. Также необходимо удалить код JavaScript, препятствующий быстрой загрузке и отображению элементов сайта (рис. 1).\n0\thttps\t//www.gosuslugi.ru/.. .ssionid=3E6C58A65B1FA211D523D63828766406;\n0\thttps\t//www.gosuslugi.ru/pgu/htdocs/j s/2012/j query.tmpl .j s;\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/json2.js;\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/fw/framechunk.js\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/epgu.js;\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/jquery.validate.js;\n0\thttps\t//www.gosuslugi .ru/ pgu/htdocs/j s/2012/j query.validate.patch.j s;\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/validateFunctions.js;\n0\thttps\t//www.gosuslugi .ru/ pgu/htdocs/j s/2012/fw/form .j s;\n0\thttps\t//www.gosuslugi .ru/ pgu/htdocs/j s/2012/bootstrap -tooltip.j s;\n0\thttps\t//www.gosuslugi.ru/ pgu/htdocs/js/2012/bootstrap-popover.js.\nРисунок 1 - Код JavaScript, препятствующий быстрому отображению контента\n2.3. Оптимизировать работу CSS.\nБраузеры запрашивают внешние файлы CSS, хранящие таблицы связанных стилей, перед отображением контента на экране. Это приводит к задержке и замедлению обработки страницы. Если внешние ресурсы CSS имеют малый объем, их можно вставить непосредственно в документ HTML. Аналогичное встраивание разрешает браузеру продолжать загрузку страницы.\nСтоит заметить что, если файл CSS слишком велик, то после его встраивания PageSpeed Insights предупреждает, что верхняя часть страницы имеет слишком большой объем. В этом случае, необходимо найти код CSS, отвечающий за контент в верхней части страницы, и встроить его в HTML, отложив загрузку остальных стилей.\nПо данным проверки необходимо оптимизировать работу CSS на ресурсах, показанных на рис. 2.\n0 https://www.gosuslugi.ru/...ssionid=3E6C58A65B1FA2nD523D63828766406; 0\thttps://www.gosuslugi.ru/ pgu/htdocs/css/2012/epgu.css;\n0\thttps://www.gosuslugi.ru/ pgu/htdocs/css/2012/liquid_index.css;\n0\thttps://www.gosuslugi.ru/ pgu/htdocs/css/2012/popover.css.\nРисунок 2 - Ресурсы, требующие оптимизации в работе CSS\n3.\tОптимизировать изображения.\nВерный формат и сжатие изображений дает возможность сократить их объем. В таблице 1 представлены адреса изображений, сжатие без потерь которых приведет к заметному уменьшению объема.\nТаблица 2\nОптимизация изображений (составлено автором)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nАдрес изображения\t\tУменьше-ние объема\nКБ\t%\nhttps\t//static.gosuslugi.ru/cms/htdocs/0/0/0/0/0/0/0/0/0/map 1 .jpg\t19,5\t15\nhttps\t//www.gosuslugi.ru/...s/img/2012/slider-news-pager-wrap-bg.png\t2,6\t96\nhttps\t//www.gosuslugi.ru/...ocs/img/2012/slider-news-pager-lines.png\t1,8\t58\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg tool region.png\t1\t54\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/maps-icon.png\t930\t41\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012bg top menu.png\t915\t37\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/title info.png\t868\t52\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg search box.png\t855\t58\nhttps\t//www.gosuslugi.ru/... /2012/slider-life-situations-item-bg.png\t771\t24\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/html-bg.png\t675\t61\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\n4.\tСократить HTML.\nСжатие HTML-кода (в том числе встроенного кода JavaScript или CSS) позволяет сократить объем данных, чтобы ускорить загрузку и обработку.\nСжатие кода на ресурсе https://www.gosuslugi.ru/ позволит уменьшить его размер на 4,4 КБ (21 %).\n5.\tСократить JavaScript.\nСжатие кода JavaScript позволяет сократить объем данных, чтобы ускорить загрузку, обработку и выполнение. Предлагается сократить код JavaScript на ресурсе\n«https://www.gosuslugi.ru/pgu/htdocs/js/2012/jquery. validate.js», чтобы уменьшить его размер на 3,4 КБ (33 %).\nВот главные направления, по которым возможно вести оптимизацию сайта Госуслуги РФ. Применение вышеперечисленных стратегий позволит значительно снизить время загрузки и повысить производительность сайта ЭГУ РФ, что в свою очередь будет способствовать увеличению количества пользователей.\nВ заключении необходимо отметить, что программирование является неотъемлемой частью написания сайта. На разработчиков сайтов возлагается ответственность не только за хороший интерфейс и визуализацию, но и за скоростные характеристики загрузки web-страницы. Выявить те или иные недостатки или причины, по которым скорость загрузки недостаточна, можно проведя тестирование сайта. Сеть Интернет может предложить множество бесплатных инструментов тестирования в режиме онлайн. С их помощью разработчики сайтов могут значительно упростить решение своих задач. Список использованной литературы\n1.\tЭкономика фирмы. Учебник. Под ред. Иващенко Н.П. - М.: Проспект, 21 янв. 2016 г. - 408 с.\n2.\tЭкономика инноваций: [учебник для студентов высших учебных заведений, обучающихся в магистратуре по экономическим специальностям] / А. И. Базилевич [и др.]; под ред. В. Я. Горфинкеля. - М: ВУЗОВСКИИ УЧЕБНИК, 2009 - 416 с.\n3.\tПоисковая оптимизация. Практическое руководство по продвижению сайта в Интернете. 3-е изд. Севастьянов Иван Олегович. Изд. дом Питер, 24 сент. 2015 г. - 272 с.\n4.\tКорпоративный веб-сайт на 100проц.: требуйте от сайта большего! Роман Овчинников. Изд. дом Питер, 26 мар. 2009 г. - 322 с.\n5.\tЗвоним через интернет. Экономим в 100 раз. Василий Леонов. Litres, 24 окт. 2014 г.\n6.\tСайт анализа скорости загрузки web-страниц: https://developers.google.com/speed/pagespeed/insights.\n7.\tСайт ЭГУ РФ: https://www.gosuslugi.ru.\n© Фандрова Л.П., Бурзянцева Е.Ю., 2016\nУДК-681.5.015\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nФатеев Денис Сергеевич,\nбакалавр группы МП-42 Сабурова Виктория Владимировна,\nбакалавр группы МП-30 Сорока Владимир Григорьевич.\nбакалавр группы МП-45 Национальный исследовательский университет «МИЭТ», г. Москва\nE-mail: denisfateev94@mail.ru.com\nМНОГОЧЛЕНЫ ЭРМИТА Аннотация\nВ статье рассмотрены многочлены Эрмита, их свойства и применение.\n",
    "download_url": "https://cyberleninka.ru/article/n/testirovanie-sayta-gosudarstvennye-uslugi-rf-instrumentami-sovremennyh-web-tehnologiy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/nekotorye-voprosy-ispolzovaniya-tehnologii-webassembly-v-sovremennyh-brauzerah",
    "slug": "nekotorye-voprosy-ispolzovaniya-tehnologii-webassembly-v-sovremennyh-brauzerah",
    "title": "Некоторые вопросы использования технологии WebAssembly в современных браузерах",
    "abstract_description": "В статье рассматривается технология Web Assembly, принцип ее работы, области применения и возможности, которые открываются с ее интеграцией в современные браузеры. Плюсы и минусы использования данной технологии.",
    "full_text_body": "\n\n\n\n\uFEFFНЕКОТОРЫЕ ВОПРОСЫ ИСПОЛЬЗОВАНИЯ ТЕХНОЛОГИИ WEBASSEMBLY В СОВРЕМЕННЫХ БРАУЗЕРАХ Григоренко А.В.\nГригоренко Александр Вадимович - студент, Институт цифровой экономики и информационных технологий, Российский экономический университет им. Г.В. Плеханова, г. Москва\nАннотация: в статье рассматривается технология Web Assembly, принцип ее работы, области применения и возможности, которые открываются с ее интеграцией в современные браузеры. Плюсы и минусы использования данной технологии. Ключевые слова: WebAssembly, браузеры, кроссплатформенность, безопасность, байткод, нейронные сети.\nУДК 004.42\nС появлением интернета веб-технологии находятся в постоянном развитии. Сначала была изобретена гипертекстовая разметка и статичный контент сайта, позже он сменился динамическим, появились новые инструменты для генерации html и css, специальные фреймворки, предназначенные для разделения веб-сайта на модули, рендеринг страниц на стороне сервера. Позже стали популярными SPA [1], создали разнообразные инструменты сборки-бандлирования javascript кода и стилей. Мир фронтэнда очень расширился, но одна из основных проблем веба осталась - невозможность написать на javascript в браузере полноценные приложения, которые могли бы работать как нативные.\nОднако появилась технология, которая позволяет запускать готовые приложения прямо в браузере - WebAssembly. Под термином WebAssembly будем подразумевать бинарный формат инструкций для стековой виртуальной машины [2]. WebAssembfy представляет собой переносимое абстрактное синтаксическое дерево, то есть конечное помеченное ориентированное дерево, в котором внутренние вершины сопоставлены (помечены) с операторами языка программирования, а листья — с соответствующими операндами [3], обеспечивающее как более быстрый парсинг, так и более быстрое выполнение кода, чем просто сам JavaScript. За счет этого данная технология приносит новые возможности и большой прирост производительности. Сами разработчики не пишут инструкции на webassembly коде, они компилируют низкоуровневые языки, такие как C, C++, Rust, а также все интерпретируемые языки.\nПо сути, WebAssembly позволяет запускать приложения, написанные на нескольких языках, в вебе на скорости, близкой к скорости обычных веб-сайтов. Нужно сразу обратить внимание на то, что код, скомпилированный при помощи WebAssembly, не может работать быстрее, чем javascript. С одной стороны это минус, но с другой стороны современные движки браузеров делают очень качественные оптимизации, которые позволяют достичь около «С++-ных» скоростей. Замеры скоростей javascript и C++ с применением пяти фильтров на изображении представлены на Рисунке 1.\nРис. 1. Сравнение производительности C++ с Javascript в WebAssembly\nЕще одним плюсом является то, что можно вообще не знать, как писать код для WebAssembly, так как ее модули можно импортировать в веб-приложение, предоставив ей функции для использования, написанные на javascript.\nВслед за автором [4] выделим следующие основные цели WebAssembly:\n•\tБыть быстрым, эффективным и портативным - код WebAssembly может выполняться с близкой скоростью на разных платформах, используя общие аппаратные возможности.\n•\tБыть удобочитаемым и отлаживаемым - WebAssembly — это низкоуровневый язык ассемблера, но он имеет удобный для пользователя текстовый формат (спецификация для которого все еще завершается), что позволяет писать, просматривать и отлаживать код вручную.\n•\tСохранять безопасность. WebAssembly запускается в безопасной изолированной среде. Как и на обычных веб-страницах данная технология будет иметь те же политики безопасности.\n•\tWebAssembly сконструирован таким образом, что он отлично работает с другими веб-технологиями и поддерживает обратную совместимость.\nОтвечая на возникающий вопрос «Как WebAssembly вписывается в веб-браузер?», можно сказать, что браузер можно рассматривать, как:\n1)\tВиртуальная машина (VM), которая запускает код веб-приложения, например. код JavaScript, который активирует веб-приложения, написанный разработчиками.\n2)\tНабор веб-API, который веб-приложение может вызывать для управления функциональностью веб-браузера и позволяет использовать различные инструменты (DOM, CSSOM, WebGL, IndexedDB, Web Audio API и т. Д.).\nИсторически сложилось, что VM могла загружать только JavaScript. И это устраивало разработчиков, так как JavaScript достаточно мощный, чтобы решить большинство проблем, которые люди сегодня испытывают в Интернете. Однако мы столкнулись с проблемами производительности при попытке использовать JavaScript для более интенсивных приложений, таких как 3D-игры, Virtual и Augmented Reality, компьютерное зрение, редактирование изображений и видео и ряд других доменов, требующих собственной производительности.\nAPI JavaScript предоставляет разработчикам возможность создавать модули, таблицы и экземпляры. Отдав экземпляр WebAssembly, код JavaScript может синхронно вызывать его экспорт, который отображается как обычные функции JavaScript. Произвольные функции JavaScript также можно синхронно вызывать кодом WebAssembly, передавая в них функции JavaScript как импорт экземпляра WebAssembly. Поскольку JavaScript имеет полный контроль над тем, как загружается, компилируется и запускается код WebAssembly, разработчики JavaScript могут даже думать о WebAssembly как о функции JavaScript для эффективного создания высокопроизводительных функций.\nДля компиляции используется и создания WASM кода используется сборщик wasm Emscripten. Инструмент Emscripten способен взять практически любой исходный код C / C ++ и скомпилировать его в модуль .wasm, а также необходимый код «склеивания» JavaScript для загрузки и запуска модуля и HTML-документ для отображения результатов кода (Рисунок 2).\nРис. 2. Принцип работы с Emscripten\nПроцесс рыботы Emscripten можно описать так:\n1)\tEmscripten сначала передает C / C ++ в clang + LLVM - зрелую программную цепочку компилятора с открытым исходным кодом C / C ++, например, поставляемую как часть XCode на OSX.\n2)\tEmscripten преобразует скомпилированный результат clang + LLVM в двоичный файл .wasm.\n3)\tСам по себе WebAssembly не может напрямую обращаться к DOM; он может вызывать только JavaScript, передавая примитивные типы данных с целыми числами и с плавающей точкой. Таким образом, для доступа к любому веб-API WebAssembly необходимо вызвать JavaScript, который затем совершает вызов Web API.\nТаким образом WebAssembly обеспечивает браузер следующими возможностями [5]:\n•\tРедактирование изображения / видео.\n•\tИгры, которые должны иметь быстрый старт.\n•\tAAA-игры с тяжелыми ресурсами.\n•\tИгровые порталы.\n•\tМузыкальные приложения (потоковая передача, кеширование).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tРаспознавание изображений.\n•\tУвеличение видео в реальном времени (например, установка шляп на головы людей).\n•\tVR и дополненная реальность.\n•\tНаучная визуализация и моделирование.\n•\tИнтерактивное образовательное программное обеспечение и новостные статьи.\n•\tМоделирование / эмуляция платформы (ARC, DOSBox, QEMU, MAME, ...).\n•\tУстные переводчики и виртуальные машины.\n•\tPOSIX, позволяя портировать существующие приложения POSIX.\n•\tИнструмент разработчика (редакторы, компиляторы, отладчики, ...).\n•\tУдаленный рабочий стол.\n•\tVPN.\n•\tШифрование.\n•\tЛокальный веб-сервер.\n•\tОбщие пользователи NPAPI, в рамках модели безопасности Интернета и API.\n•\tЖирный клиент для корпоративных приложений (например, баз данных).\nWebAssembly открывает новый мир в области веб-приложений. Становятся доступными\nранее невозможные типы программ и виды взаимодействия с пользователем. Сообщество из ведущих компаний, такие как Google, Mozilla, Apple, Microsoft вместе создают и развивают данную технологию. Все большую популярность приобретают нейронные сети, дополненная реальность и другие интересные технологии, которые вскоре мы сможем использовать прямо на клиентской стороне - в нашем браузере.\nСписок литературы\n1.\tMichael Mikowski. Single Page Web Applications: JavaScript end-to-end 1st Edition -Manning Publications Co. 2014. 5 c.\n2.\tMike Rourke. Learn WebAssembly - Packt Publishing. 2018. 7 c.\n3.\tВикипедия. Абстрактное синтаксическое дерево. [Электронный ресурс]. URL: https://m.wikipedia.0rg/wiki/A6cTpaKTH0e_CTHraKcmecK0e^epeB0 (дата обращения: 26.11.2018).\n4.\tMDN Документация. Mozilla: Что такое WebAssembly? [Электронный ресурс]. URL: https://developer.mozilla.org/en-US/docs/WebAssembly/Concepts (дата обращения: 26.11.2018).\n5.\tОфициальный сайт WebAssembly. WebAssembly Community Group: Документация WebAssembly. [Электронный ресурс]. URL: https://webassembly.org/docs/use-cases/ (дата обращения: 26.11.2018).\nПЕРСПЕКТИВЫ ОСВОЕНИЯ БАЖЕНОВСКОЙ СВИТЫ НА ТЕРРИТОРИИ ЗАПАДНОЙ СИБИРИ Колос В.Ю.\nКолос Виктория Юрьевна - студент, кафедра разработки и эксплуатации нефтяных и газовых месторождений, Тюменский индустриальный университет, г. Тюмень\nАннотация: в статье рассматриваются существующие способы разработки баженовской свиты и их применение передовыми нефтяными компаниями, а также перспективы развития термогазового и термохимического способов разработки. Ключевые слова: геологические особенности пород, баженовская свита, эксплуатация при естественном режиме, способы разработки, многостадийный гидроразрыв пласта, термогазовое воздействие, низкопроницаемые породы.\nБаженовской свиты (БС) имеет некоторые особенности: листоватая структура; достаточно не высокие фильтрационно-емкостные свойства коллекторов; аномально высокие пластовые давления в залежах; наличие трещин разной ориентации; хрупкость пород [2]. Поиском способов работы с такими породами занимались следующие нефтегазодобывающие компании: ПАО «Газпром нефть», АО «РИТЭК», АО «Русснефть» и ПАО «Сургутнефтегаз», ПАО «Лукойл», «Роснефть».\nПервая эксплуатация опытных участков баженовской свиты проводилась при естественном режиме (Салымское, Ем-Еговское, Правдинское и Маслиховское месторождения). При этом использовалась внутренняя энергия пласта, характеризующаяся аномально высоким пластовым давлением. Вследствие чего добычу нефти получали за счет фонтанирования скважин. Дебит таких скважин достигал 300,0-350,0 т/сут., а иногда доходил до порядка 700,0 т/сут. [5]. При таком способе разработки залежей БС нефтеотдача составляет 3—5%, поэтому наиболее перспективными являются инновационные способы разработки, которые включают: внутрипластовое горение, низкотемпературное окисление, гидроразрывы, термические воздействия и др. [3, с. 46].\nНаибольшее распространение получила американская технология: бурение горизонтальных скважин с многостадийным гидроразрывом пласта. Эта технология давно применяется при разработке месторождений с традиционными запасами в пластах имеющих низкую проницаемость, а также находит применение для добычи нефти из БС на Красноленинском месторождении в рамках национального проекта «Газпром нефти» — «Бажен» [7].\n",
    "download_url": "https://cyberleninka.ru/article/n/nekotorye-voprosy-ispolzovaniya-tehnologii-webassembly-v-sovremennyh-brauzerah/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-sredstv-vizualizatsii-meditsinskih-dannyh-na-osnove-otkrytyh-javascript-bibliotek",
    "slug": "razrabotka-sredstv-vizualizatsii-meditsinskih-dannyh-na-osnove-otkrytyh-javascript-bibliotek",
    "title": "Разработка средств визуализации медицинских данных на основе открытых JavaScript библиотек",
    "abstract_description": "Данная статья представляет результаты исследования возможности применения открытых javascript-шаблонов для визуализации стандартизированных медицинских данных",
    "full_text_body": "\n\n\n\n\uFEFFI и информационные\nтехнологии\niij\n>\nГ.Д. КОПАНИЦА,\nк.т.н., ассистент кафедры оптимизации систем управления Института кибернетики, Национального исследовательского Томского политехнического университета; старший научный сотрудник ТГАСУ, г. Томск, Россия, georgy.kopanitsa@gmail.com М.А. ТАРАНИК,\nаспирант кафедры оптимизации систем управления Института кибернетики, Национального исследовательского Томского политехнического университета, г. Томск, Россия\nРАЗРАБОТКА СРЕДСТВ ВИЗУАЛИЗАЦИИ МЕДИЦИНСКИХ ДАННЫХ НА ОСНОВЕ ОТКРЫТЫХ JAVASCRIPT БИБЛИОТЕК\nУДК 002; 002:338.2\nКопаница Г.Д., Тараник М.А. Разработка средств визуализации медицинских данных на основе открытых JavaScript библиотек (Национальный исследовательский Томский политехнический университет, г. Томск, Россия)\nАннотация: Данная статья представляет результаты исследования возможности применения открытых javascript-шаблонов для визуализации стандартизированных медицинских данных.\nКлючевые слова: архетипыы, медицинская информационная система, визуализация.\nUDC 002; 002:338.2\nKopanica G.D., Taranik M.A. Implementation of a medical data visualization solution based on open source JavaScript libraries (National Research Tomsk Polytechnic University, Tomsk, Russia)\nAbstract: In this paper we analyze the experience of application of open source java script templates to visualize standard based medical data.\nKeywords: archetypes, electronic health record, visualization.\nВведение\n□ дним из наиболее важных аспектов при работе с персональными медицинскими записями (ПМЗ) является пользовательский интерфейс. Необходимость в простых и удобных средствах отображения показателей состояния здоровья пациента особенно актуальна при наблюдении за пациентами в престарелом возрасте, реализуемом в рамках подхода ALL (Ambient Assisted Living). В его основе лежит концепция, предполагающая разработку интеллектуальных систем для обработки данных, полученных при помощи различных сенсорных устройств, объединенных в сеть и расположенных по всему периметру дома наблюдаемого пациента [1—5]. Также данный подход направлен на разработку специальных средств, таких как социальные сети [6] и веб-сервисы, позволяющие пациенту удаленно взаимодействовать с медицинским специалистом [7]. Для формирования полного и развернутого представления о состоянии здоровья пациента необходимы данные из разнородных источников. Таким образом\n© Г.Д. Копаница, М.А. Тараник, 2014 г.\n32\nВизуализация данных\nданный подход требует стандартизации хранимых данных.\nСтандарты хранения клинических данных не дают ответа на вопрос о представлении медицинской информации пользователю [13, 14]. Эта проблема изучалась в ранее проведенных исследованиях [9-12], направленных на разработку методов визуализации стандартизированных медицинских данных.\nПри использовании стандартизированных медицинских данных разработка графического пользовательского интерфейса требует дополнительных существенных временных и финансовых затрат для его реализации. К тому же пользовательский интерфейс разрабатывается под конкретные медицинские информационные системы [15]. Одним из способов представления стандартизированных данных является применение открытых библиотек JavaScript [16, 17]. В качестве хранилища информации для работы с данными библиотеками обычно выступают файлы с расширением JBOS или csv. Целью данной статьи является исследование возможности применения открытых JavaScript-библиотек для отображения стандартизированных медицинских данных в формате XML [8, 18-20], на примере данных наблюдения за пациентом с сахарным диабетом.\nМетоды\nДля достижения поставленной задачи — визуализации стандартизированных медицинских данных с использованием JavaScript-библиотек, был определен набор медицинских данных, отображающих динамику состояния пациента с сахарным диабетом. Данные были смоделированы в виде архетипов ISO 13606 [18]. Такой формат был выбран для сохранения семантики при передаче данных между различными медицинскими информационными системами.\nДля определения характеристик графического представления медицинских данных была разработана информационная модель [22],\nwww.idmz.ru\nгол 4, № 1\n■■■■\nгш\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nпредставляющая собой XML-схему. Используемые в проекте библиотеки JQuery [16,17] применялись для построения статических и динамических диаграмм с целью определения корреляции между уровнем сахара в крови и инсулином в различные периоды наблюдения: ежедневный, еженедельный и ежемесячный. В качестве среды разработки интерфейса использовалась MS VisualStudio, полученные результаты визуализации были отображены с применением браузера Mozila Firefox.\nРезультаты\nИспользуемая совокупность медицинских данных была определена как соответствующая совокупность архетипов, что позволяет совершать обмен данной медицинской информацией между пользователями. Определенные архетипы представляют собой набор XML-файлов. Настоящие медицинские данные, необходимые для представления пользователю в графическом виде, были получены из различных EHR-систем. Различные данные, представленные различными архетипами, были объединены в группы. Характеристики визуализации медицинских данных, описанные в ИМ, определяют тип диаграмм, а также другие свойства конечного графического представления пользователю. При применении соответствующего шаблона для отображения данных результатом визуализации становится сгенерированная HTML страница с диаграммой, за построение которой отвечают библиотеки JavaScript. На рис. 1 представлен процесс модельного преобразования, обеспечивающий графическое отображение медицинских данных пользователю.\nВизуальная модель основана на архетип-ной модели стандарта ISO 13606. Уровень сущности содержит архетипы, а также информационную модель (ИМ) представления данных — визуальные сущности. На уровне данных происходит связь файлов ИМ с файлами XML, содержащих медицинские данные. На\n■\t■ ■\t■ ■ ■■ ■ ■ ■\t■■■ ■ ■ ■\t■■ ■ ■ ■■■ ■ ■ ■ ■ 33 ■\nгш\nВизуализация данных\n1 и информационные\nтехнологии\n>\n/\tN\t\t/\nУровень\tISO 13606\t\t—\\\t\tВизуальная\nмодели\tМодель архетипов\t\t\tи\t\tмодель\nV\t\tJ\nXML Schema\nУровень\nсущности\n\\\nАрхетипы\nV\t\t)\nс\tВизуальные\t\\\nсущности\n\\\t\t)\nс\tf\tN\t\\\nУровень\t\tМедицинские\nданных\t\tданные\nV\t\tк\tJ\t/\nУровень\nинтерфейса\nГрафический интерфейс\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nXML Schema сущности\nJava script шаблоны\nРис. 1. Процесс визуализации медицинских данных\nследующем уровне представления медицинских данных применяются JavaScript-шаблоны для графического отображения диаграмм. Результаты настоящей работы представлены на рис. 2 и 3. Данные диаграммы отображают динамику изменения уровня сахара в крови пациента. Диаграмма на рис. 2 демонстрирует совокупность различных параметров, определенных различными архетипами, но содержащихся в одном медицинском документе. Шаблон, представленный на рис. 3, позволяет масштабировать необходимые части диаграммы для более детального просмотра.\nОбсуждение\nПредставленный в настоящем исследовании подход, определяющий метод визуализации медицинских данных с применением графических библиотек JavaScript, несомненно, требует дальнейшего всестороннего изучения. Перспектива такого подхода заключается в успешном применении средств opensour-ce при графическом представлении стандар-\nтизированных клинических данных, хранящихся в XML-файле. Шаблоны, используемые для визуализации, были настроены вручную.\nСреди подобных opensource-продуктов можно выделить библиотеку Formatting Objects Processor (FOP) [23], позволяющую генерировать выходные графические PDF-документы при представлении медицинских данных с использованием элементов (Scalable Vector Graphics) SVG. Для корректной работы библиотеки FOP необходима среда выполнения IKVM [24], она также является компонентом opensource и реализует java приложения на платформе .NET в среде разработки MS VisualStudio.\nЗаключение\nПолученные решения помогают реализовать гибкие и тривиальные способы графического представления медицинских данных. Используя библиотеки JavaScript, разработчик получает мощный инструмент для создания графических элементов. Дополнительным достоинством средств opensource является\n34\nРис. 2. Диаграмма показателей инсулина и уровня сахара в крови пациента\nРис. 3. Динамическая диаграмма уровня сахара в крови пациента\nмногообразие уже разработанных шаблонов — готовых решений. При данном подходе разработчику необходимо внести минимальные коррективы в исходный код для получения соответствующего графического представления клинической информации. Результат тако-\nго представления является простым и информативным. Таким образом, использование средств opensource позволит значительно снизить финансовые затраты при создании EHR-систем, а также сократить время разработки пользовательского интерфейса.\n■\t■ ■\t■ ■ ■■ ■ ■ ■\t■■■ ■ ■ ■\t■■ ■ ■ ■■■ ■ ■ ■ ■ 35 ■\nI и информационные\nтехнологии\nids\nЛИТЕРАТУРА\n1. Sousa F., Viola L., Ferreira L., Trevisan G. , Cunha D., Alves J., etal. An ecosystem of products and systems for ambient intelligence — the AAL4ALL users perspective//Studies in health technology and informatics. — 2012. — №177. — P.263-271. PubMed PMID: 22942066. Epub 2012/09/04. eng.\n2. Munoz A., Serrano E, Villa A., Valdes M, Botia J.A. An approach for representing sensor data to validate alerts in Ambient Assisted Living//Sensors (Basel, Switzerland). — 2012. — № 12(5). — P.6282-6306. PubMed PMID: 22778642. Pubmed Central PMCID: PMC3386741. Epub 2012/07/11. eng.\n3.\tFernandez-Llatas C, Garcia-Gomez J.M, Vicente J., Naranjo J.C, Robles M, Benedi J.M , eta. Behaviour patterns detection for persuasive design in Nursing Homes to help dementia patients//Conference proceedings: Annual International Conference of the IEEE Engineering in Medicine and Biology Society IEEE Engineering in Medicine and Biology Society Conference. — 2011. — P.6413-6417. PubMed PMID: 22255806. Epub 2012/01/19. eng.\n4.\tChen C., Haddad\tD .,\tSelskyJ.,\tHoffman\tJ.E .,\tKravitz R.L.,\tEstrin\tD .E .,\tetal .\tMaking\nsense of mobile health data: an open architecture to improve individual- and population-level health//Journal of medical Internet research. — 2012. — № 14(4). — P. e112. PubMed PMID: 22875563. Pubmed Central PMCID: PMC3510692. Epub 2012/08/10. eng.\n5.\tAquilano M., Cavallo F., Bonaccorsi M., Esposito R., Rovini E., Filippi M., et al. Ambient Assisted Living and ageing: Preliminary results of RITA project//Conference proceedings: Annual International Conference of the IEEE Engineering in Medicine and Biology Society IEEE Engineering in Medicine and Biology Society Conference. — 2012 Aug; 2012. — P.5823-5826. PubMed PMID: 23367253. Epub 2013/02/01. eng.\n6.\tDemski H., Hildebrand C., Lopez Bolos J., Tiedge W, Wengel S., D OB, et al. Technical requirements of a social networking platform for senior citizens//Studies in health technology and informatics. — 2012. — №180. — P.818-822. PubMed PMID: 22874306. Epub 2012/08/10. eng.\n7. Cascado D., Romero S.J., Hors S., Brasero A., Fernandez-Luque L., Sevillano J.L. Virtual worlds to enhance Ambient-Assisted Living//Conference proceedings: Annual International Conference of the IEEE Engineering in Medicine and Biology Society IEEE Engineering in Medicine and Biology Society Conference. — 2010; 2010. — P.212-215. PubMed PMID: 21097183. Epub 2010/11/26. eng.\n8.\tVeseli H., Kopanitsa G., Demski H. Standardized EHR interoperability — preliminary results of a German pilot project using the archetype methodology//Studies in health technology and informatics. — 2012. — №180. — P.646-650. PubMed PMID: 22874271. Epub 2012/08/10. eng.\n9.\tAtalag K., Yang H.Y., Tempero E., Warren J. Model driven development of clinical information sytems using openEHR//Studies in health technology and informatics. — 2011. — № 169. — P.849-853. PubMed PMID: 21893867. Epub 2011/09/07. eng.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n10.\tCios K.J., Moore G.W. Uniqueness of medical data mining//Artificial intelligence in medicine. — 2002 Sep-Oct. — №26(1-2). — P. 1-24. PubMed PMID: 12234714. Epub 2002/09/18. eng.\n36\nВизуализация данных\nwww.idmz.ru\nгол 4, № 1\n■■■■\nгш\n11.\tvan der Linden H, Austin T, Talmon J. Generic screen representations for future-proof systems, is it possible? There is more to a GUI than meets the eye//Computer methods and programs in biomedicine. — 2009 Sep. — №95(3). — P.213-226. PubMed PMID: 19368989. Epub 2009/04/17. eng.\n12. van der Linden H, Schuler T, Chen R, Talmon J. Generic screen representations for future proof systems — is it possible? Two-model approach to a generic GUI//Stud-ies in health technology and informatics. — 2007. — № 129. — Pt. 2. — P. 1122-1126. PubMed PMID: 17911890. Epub 2007/10/04. eng.\n13.\tFonseca T., Ribeiro C., Granja C. Vital signs in intensive care: automatic acquisition and consolidation into electronic patient records//Journal of medical systems. — 2009 Feb. —№33(1). — P.47-57. PubMed PMID: 19238896. Epub 2009/02/26. eng.\n14.\tRaghupathi W, Umar A. Upper-level ontologies for health information systems. Towards an archetype patterns approach//Methods of information in medicine. — 2011. — №50(3). — P.285-295. PubMed PMID: 21336420. Epub 2011/02/22. eng.\n15.\tHanzlicek P, Spidlen J., Heroutova H, Nagy M. User interface of MUDR electronic health record//International journal of medical informatics. — 2005 Mar. — № 74(2-4).\n—\tP.221-7. PubMed PMID: 15694628. Epub 2005/02/08. eng.\n16.\thttp://d3js.org/. Data-Driven Documents [cited 2013 15.02.2013]. Data-Driven Documents].\n17.\thttp://www.flotcharts.org/. Attractive JavaScript plotting for jQuery [cited 2013 15.02.2013].\n18.\tRinner C, Kohler M, Hubner-Bloder G, Saboor S., Ammenwerth E, Duftschmid G. Creating ISO/EN 13606 archetypes based on clinical information needs//Studies in health technology and informatics. — 2011. — № 165. — P.43-48. PubMed PMID: 21685584. Epub 2011/06/21. eng.\n19.\tDuftschmid G, Wrba T, Rinner C. Extraction of standardized archetyped data from Electronic Health Record systems based on the Entity-Attribute-Value Model// International journal of medical informatics. — 2010 Aug. — № 79(8). — P. 585-597. PubMed PMID: 20537942. Epub 2010/06/12. eng.\n20.\tRinner C, Janzek-Hawlat S, Sibinovic S, Duftschmid G. Semantic validation of standard-based electronic health record documents with W3C XML schema//Methods of information in medicine. — 2010. — №49(3). — P. 271-280. PubMed PMID: 20405091. Epub 2010/04/21. eng.\n21.\tMola E. Patient empowerment, an additional characteristic of the European definitions of general practice/family medicine//The European journal of general practice.\n—\t2013, Jan 22. PubMed PMID: 23336328. Epub 2013/01/23. Eng.\n22.\tKopanitsa G. Standard based multiclient medical data visualization//Studies in health technology and informatics. — 2012. — № 180. — P. 199-203. PubMed PMID: 22874180. Epub 2012/08/10. eng.\n23.\thttp://xmlgraphics.apache.org/fop/. The Apache FOP Project [cited 2013 15.02.2013].\n24.\thttp://www.ikvm.net/. IKVM.NET Home Page [cited 2013 15.02.2013].\n■\t■ ■\t■ ■ ■■ ■ ■ ■\t■■■ ■ ■ ■\t■■ ■ ■ ■■■ ■ ■ ■ ■ 37 ■\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-sredstv-vizualizatsii-meditsinskih-dannyh-na-osnove-otkrytyh-javascript-bibliotek/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-poiska-anomalnyh-aktivnostey-veb-prilozheniy",
    "slug": "metody-poiska-anomalnyh-aktivnostey-veb-prilozheniy",
    "title": "Методы поиска аномальных активностей веб-приложений",
    "abstract_description": "Предмет исследования. Представлен обзор существующих методов выявления аномальных активностей веб-приложений. Приведены сравнительные характеристики. Показаны направления совершенствования средств защиты информации в веб-приложениях. Метод. Для оценки методов поиска аномальных активностей веб-приложений определены критерии выбора показателей. Особое внимание уделено таким показателям как скорость запуска веб-приложений после загрузки; скорость реакции веб-приложений на действия пользователя; количество найденных аномальных активностей в сравнении с количеством найденных ложных срабатываний. Выполнено сравнение трех методов поиска аномальных активностей: статистического сканирования кода; динамического сканирования кода; мониторинга сетевого трафика. Рассмотрены достоинства и недостатки каждого метода, примеры реализации. Основные результаты. Показано, что лучшими характеристиками обладает динамический метод поиска аномальных активностей. Метод позволяет выявлять аномалии, связанные с передачей трафика и аномалии, возникающие в процессе локальной работы веб-приложений. Метод реализуется в виде встроенного в движок браузера анализатора кода. Анализатор проверяет все обращения веб-приложения к движку и выявляет аномальную активность на основе таких обращений. В отличие от статического, динамическое сканирование позволяет определять аномалии в Web Workers, WebAssembly и в частях кода, которые загружаются по сети после запуска приложения. Практическая значимость. Работа может быть полезна специалистам по информационной безопасности, которые занимаются проблемами защиты веб-приложений, а также программистам и системным администраторам на этапе создания и внедрения приложений. Итоги работы могут найти применение при разработке веб-приложений, браузеров, программного обеспечения для защиты информации.",
    "full_text_body": "\n\n\n\n\uFEFFНАУЧНО-ТЕХНИЧЕСКИИ ВЕСТНИК ИНФОРМАЦИОННЫХ ТЕХНОЛОГИИ, МЕХАНИКИ И ОПТИКИ март-апрель 2020\tТом 20 № 2\tISSN 2226-1494\thttp://ntv.itmo.ru/\nSCIENTIFIC AND TECHNICAL JOURNAL OF INFORMATION TECHNOLOGIES, MECHANICS AND OPTICS March-April 2020\tVol. 20 No 2\tISSN 2226-1494\thttp://ntv.itmo.ru/en/\nHHIIIDPMAIlHDHHhlX ТЕХНОЛОГИЙ, МЕХАНИКИ И ОПТИКИ\nУДК 004.492.3\tdoi: 10.17586/2226-1494-2020-20-2-233-242\nМЕТОДЫ ПОИСКА АНОМАЛЬНЫХ АКТИВНОСТЕЙ ВЕБ-ПРИЛОЖЕНИЙ О.И. Михеева^ Ю.А. Гатчину С.В. Савковb, Р.М. Хамматова^ А.П. Нырковd\na Университет ИТМО, Санкт-Петербург, 197101, Российская Федерация b ЗАО «Мобикон», Санкт-Петербург, 199178, Российская Федерация\nc ООО «Удостоверяющий центр ГАЗИНФОРМСЕРВИС», Санкт-Петербург, 198096, Российская Федерация d Государственный университет морского и речного флота им. адмирала С.О. Макарова, Санкт-Петербург, 198035, Российская Федерация\nАвтор для переписки: rapppersha@yandex.ru Информация о статье\nПоступила в редакцию 14.02.20, принята к печати 07.03.20 Язык статьи — русский\nСсылка для цитирования: Михеева О.И., Гатчин Ю.А., Савков С.В., Хамматова Р.М., Нырков А.П. Методы поиска аномальных активностей веб-приложений // Научно-технический вестник информационных технологий, механики и оптики. 2020. Т. 20. № 2. С. 233-242. doi: 10.17586/2226-1494-2020-20-2-233-242\nАннотация\nПредмет исследования. Представлен обзор существующих методов выявления аномальных активностей веб-приложений. Приведены сравнительные характеристики. Показаны направления совершенствования средств защиты информации в веб-приложениях. Метод. Для оценки методов поиска аномальных активностей веб-приложений определены критерии выбора показателей. Особое внимание уделено таким показателям как скорость запуска веб-приложений после загрузки; скорость реакции веб-приложений на действия пользователя; количество найденных аномальных активностей в сравнении с количеством найденных ложных срабатываний. Выполнено сравнение трех методов поиска аномальных активностей: статистического сканирования кода; динамического сканирования кода; мониторинга сетевого трафика. Рассмотрены достоинства и недостатки каждого метода, примеры реализации. Основные результаты. Показано, что лучшими характеристиками обладает динамический метод поиска аномальных активностей. Метод позволяет выявлять аномалии, связанные с передачей трафика и аномалии, возникающие в процессе локальной работы веб-приложений. Метод реализуется в виде встроенного в движок браузера анализатора кода. Анализатор проверяет все обращения веб-приложения к движку и выявляет аномальную активность на основе таких обращений. В отличие от статического, динамическое сканирование позволяет определять аномалии в Web Workers, WebAssembly и в частях кода, которые загружаются по сети после запуска приложения. Практическая значимость. Работа может быть полезна специалистам по информационной безопасности, которые занимаются проблемами защиты веб-приложений, а также программистам и системным администраторам на этапе создания и внедрения приложений. Итоги работы могут найти применение при разработке веб-приложений, браузеров, программного обеспечения для защиты информации. Ключевые слова\nаномальная активность, браузер, браузерный движок, веб-приложения, движок JavaScript, анализ трафика между клиентом и сервером, статический анализ кода, динамический анализ кода, поиск аномальных активностей\ndoi: 10.17586/2226-1494-2020-20-2-233-242\nSEARCH METHODS FOR ABNORMAL ACTIVITIES OF WEB APPLICATIONS O.I. Mikheevaa, Yu.A. Gatchina, S.V. Savkovb, R.M. Khammatovac, A.P. Nyrkovd\na ITMO University, Saint Petersburg, 197101, Russian Federation b ZAO Mobicon, Saint Petersburg, 199178, Russian Federation\nc LLC Certification Authority Gazinformservice, Saint Petersburg,198096, Russian Federation d Admiral Makarov State University of Maritime and Inland Shipping, Saint Petersburg, 198035, Russian Federation Corresponding author: rapppersha@yandex.ru Article info\nReceived 14.02.20, accepted 07.03.20 Article in Russian\nFor citation: Mikheeva O.I., Gatchin Yu.A., Savkov S.V., Khammatova R.M., Nyrkov A.P. Search methods for abnormal activities of web applications. Scientific and Technical Journal of Information Technologies, Mechanics and Optics, 2020, vol. 20, no. 2, pp. 233-242 (in Russian). doi: 10.17586/2226-1494-2020-20-2-233-242\nAbstract\nSubject of Research. The paper presents a review of existing detection methods for abnormal activities of web applications. Comparative characteristics are given. Priorities for improving information security tools in web applications are shown. Method. For evaluation of search methods for abnormal activities of web applications, criteria for selecting indicators were defined. Particular attention was paid to such indicators as: the launching speed of web applications after loading, web application responsiveness to user actions and the number of abnormal activities found in comparison with the number of malfunctions found. Three methods of searching for abnormal activities were compared: statistical code scanning, dynamic code scanning and network traffic monitoring. We considered advantages and disadvantages of each method and implementation examples. Main Results. It is shown that the dynamic method of searching for abnormal activities has the best characteristics. The method provides the identification of anomalies associated with traffic transfer and anomalies that occur during the local operation of web applications. The method is implemented as a code analyzer built into the browser engine. The analyzer checks all calls of the web application to the engine and detects abnormal activity based on such calls. In contrast to static scanning, dynamic scanning identifies anomalies in Web Workers, WebAssembly and in the parts of code that are downloaded over the network after the application starts. Practical Relevance. The work can be useful to information security specialists who deal with the problems of protecting web applications, as well as programmers and system administrators at application creation and implementation stage. The results of the work can find practical use in the development of web applications, browsers, and information protection software. Keywords\nabnormal activity, browser, browser engine, web applications, JavaScript engine, traffic analysis between client and server, static code analysis, dynamic code analysis, search for abnormal activities\nВведение\nВеб-приложения начали использоваться в конце 1990-х — начале 2000-х годов и позволяют клиентам взаимодействовать с веб-сервером при помощи браузера. Со временем они получили широкое распространение в таких важных сферах как государственные услуги, банки, электростанции. Веб-приложения используются пользователями для доступа к большому массиву информации.\nТехнологии веб-приложений развиваются большими темпами. JavaScript, практически не использующийся в сайтах 20 лет назад, превратился в мощнейший язык программирования с широкой инфраструктурой разработки. Применение технологии WebAssembly привело к тому, что в сфере веб-приложений появились модули, написанные на различных языках программирования. Современные веб-приложения являются асинхронными и используют технологии Web Workers, с помощью которых код может выполняться в фоновом режиме.\nВ связи с активной разработкой технологии веб-приложений и растущим их количеством остро встает проблема защиты информации. Большое количество веб-приложений не проходит достаточный контроль со стороны разработчиков и выпускается в недоработанном виде на рынок. Пользователи используют его, зачастую не предполагая проблем, с которыми они столкнутся. По данным экспертов, 90 % веб-приложений подвержены угрозе атак на клиентов, в 9 случаях из 10 злоумышленники могут атаковать посетителей сайта, 16 % приложений содержат уязвимости, позволяющие получить полный контроль над системой, а в 8 % случаев — атаковать внутреннюю сеть компании1,2.\n1\tPositive Technologies: 82 % уязвимостей веб-приложений содержится в исходном коде [Электронный ресурс]. 2020 Режим доступа: http://www.itsec.ru/news/positive-technologies-82-uyazvimostey-veb-prilozheniy-soderzhitsia-v-ishodnom-kode (дата обращения: 02.03.2020).\n2\tВведение в тему безопасности веб-приложений [Электронный ресурс]. 2011 Режим доступа: https://www.\nЦелью данной работы является проведение сравнительного анализа существующих методов поиска аномальной активности в веб-приложениях. Это необходимо для понимания происходящих в данной среде изменений и путей развития средств защиты информации в веб-приложениях.\nИзвестны попытки предоставить методы анализа кода стандартных приложений на аномальные активности, однако эти методы не полностью подходят к веб-приложениям. Связано это с тем, что в случае классических приложений работа ведется с исходным кодом. В случае веб-приложений работа происходит только с кодом клиента, который сложно анализировать в силу специфики области применения.\nЭта специфика заключается в автоматическом обновлении кода и широком использовании сетевых соединений. Код изменяется по мере использования приложения, в результате чего появляется необходимость в реальном времени предупреждать пользователя о возможном аномальном поведении браузера.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСложность решения подобной задачи состоит в том, что сфера применения веб-приложений еще интенсивно развивается, в результате чего приходится постоянно использовать методы, применяемые для классических приложений. Они часто оказываются недостаточно эффективными в веб-приложениях с учетом постоянного сетевого обмена информацией и наличия динамического окружения [1-4]3,4.\nptsecurity.com/ru-ru/research/webinar/1487/ (дата обращения: 02.03.2020).\n3\tTypes of XSS: Stored XSS, Reflected XSS and DOM-based XSS // Acunetix Blog [Электронный ресурс]. Режим доступа: https://www.acunetix.com/websitesecurity/xss/ (дата обращения: 22.01.2020).\n4\tBerners-Lee T. Uniform Resource Locators // RFC 1738 -IETF [Электронный ресурс]. Режим доступа: https://www.ietf. org/rfc/rfc1738.txt (дата обращения: 23.01.2020).\nСпецифика веб-приложений\nВеб-приложения доставляются посредством браузера, выполняются в браузере, имеют доступ к основным возможностям операционной системы через браузер, а также завершают свое выполнение в браузере и производят автоматическое обновление своих частей через браузер. Браузер при этом входит в состав операционной системы и представлен в виде широкой разновидности приложений. Главное, что объединяет все эти приложения в класс браузеров, — это выполнение определенных стандартов консорциума всемирной компьютерной сети [5]1,2.\nКаждый браузер имеет в своем составе так называемый браузерный движок (layout engine). Он состоит из движков для выполнения программного кода, парсинга структуры CSS (Cascading Style Sheets — каскадные таблицы стилей) и HTML (Hypertext Markup Language — язык гипертекстовой разметки), циклического движка для рендера и вспомогательных библиотек для доступа к функциям операционной системы (рис. 1). На этом движке выполняется основной код веб-приложения. Необходимо обратить внимание на построитель DOM-выражений (Document Object Model — объектная модель документа), так как здесь злоумышленники с помощью стороннего кода производят подмену элементов, обеспечивая незаметный для пользователя запуск аномальной активности. Точно также вызывает интерес возможность доступа через слой API (Application Programming Interface — интерфейс взаимодействия между сайтом и сторонними программами и серверами) к функциям операционной системы, т. е. возможность перехватить управление компьютером [6].\nОсновными частями современного браузера (рис. 1) являются такие компоненты, как Networking — компонент операционной системы для работы с сетью; Operating System — API-слой операционной системы; Resource Loader — компонент загрузки ресурсов, таких как сокеты, файлы, пайпы; Plugin Layer — компонент, обеспечивающий доступ к внешним плагинам для выполнения операций, например, управление потоком в WebSocket или работа с видеопотоком; CSS Parser — парсер CSS-выражений; HTML Parser — парсер HTML-выражений; JavaScript Engine — движок, который выполняет JavaScript-выражения; DOM Builder — билдер DOM-выражений для создания структуры страницы; Render Engine — движок, который осуществляет рен-дер и последующее обновление элементов страницы; User Interface — интерфейс веб-приложения поверх браузера.\n1\tCross-frame-scripting // OWASP the free and open software security community [Электронный ресурс]. Режим доступа: https://www.owasp.org/index.php/Cross_Frame_Scripting (дата обращения: 24.01.2020).\n2\tКак хакеры атакуют веб-приложения: боты и простые уязвимости. Блог компании Positive Technologies [Электронный ресурс]. 25.04.2017. Режим доступа: https:// habr.com/ru/company/pt/blog/327344/ (дата обращения: 24.01.2020).\nNetworking\nРис. 1. Структура движка браузера3\nВыделим такие движки для вывода веб-страниц:\n—\tBlink (компания Google) — представлен в браузерах Google Chrome, Microsoft Edge, Opera, в многочисленных open-source проектах;\n—\tGecko (компания Mozilla) — представлен в браузерах Firefox;\n—\tWebKit (компания Apple) — представлен в браузере Safari и в операционных системах Mac OS X, IOS. Внутри браузерного движка находится движок\nJavaScript, который необходим для выполнения встроенных программ на языке программирования JavaScript. Для представляемого исследования он является наиболее важной частью, поскольку большая часть кода написана и исполняется именно на этом движке [7]. Основные движки JavaScript на данный момент:\n—\tV8 (компания Google) — используется в браузерах Chrome;\n—\tChakra (компания Microsoft) — используется в браузерах Edge;\n—\tRhino (компания Mozilla) — используется в браузерах Firefox;\n—\tSquirrelFish (компания Apple) — используется в браузерах Safari.\nПеред непосредственным выполнением код проходит определенный поток преобразований. Это представляет интерес по той причине, что на каждом из этапов компиляции и оптимизации движком система защиты и злоумышленный код могут встроить свои конструкции, изначально не обнаруживаемые в исходном коде. Сначала движок JavaScript трансформирует код в абстрактное синтаксическое дерево (AST). Далее, основываясь на AST, начинается выполнение кода интерпретатором, на выходе которого получается не оптимизируемый байт-код. Его может анализировать система защиты.\nВ силу этого традиционные методы анализа кода постоянно сталкиваются с проблемами. В ходе работы на основе собранных профилирующих данных оптимизирующий компилятор генерирует более оптимизи-\n3 Язык JavaScript (введение) 2015 [Электронный ресурс]. Режим доступа: https://en.ppt-online.org/84862 (дата обращения: 01.02.2020).\nрованный машинный код, из-за чего браузер способен выполнять код быстрее. Интерпретатор в распространенном движке V8 называется Ignition (зажигание), а оптимизирующий компилятор — Turbofan (вентилятор). Таким образом, представляет интерес анализ кода в двух точках выполнения, поэтому структура выполнения веб-приложений является достаточно сложной. При этом на все ее элементы может оказываться хакерское воздействие. Например, могут подменяться одни элементы другими, чтобы заставить пользователя выполнять непредумышленные действия.\nДля всех движков и инфраструктуры выполнения кода общими являются, с точки зрения защиты информации, следующие отличительные черты:\n—\tвыполняемый код приходит в открытом виде и проходит несколько этапов компиляции специальной программой и оптимизации в процессе исполнения;\n—\tдвижки браузеров постоянно добавляют новые технологии, значительно отличающиеся в поведении друг от друга, хотя и следуют общим рекомендациям консорциума всемирной паутины;\n—\tдля реализации многопоточного выполнения кода используется цикл событий Event Loop, посредством которого можно как зациклить выполнение кода, так и получить доступ к критически важной информации через прерывания [8];\n—\tбольшое количество выполняющегося кода в фоне, особенно с приходом технологии Web Workers, создает проблемы для точного понимания текущей ситуации в веб-приложении [9, 10]1;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n—\tдостаточно частое общение с сервером посредством сетевого доступа осложняется широким выбором технологий для доступа к серверу, а также различными publisher-subscriber (шаблоны проектирования приложения, в которых отправители сообщений напрямую не привязаны к подписчикам, а производится обмен сообщениями через технологии подписки) технологиями;\n—\tсекретные данные пользователя (банковские карты, персональные данные, пароли, служебная информация) изначально передавались в открытом виде, сейчас же большая часть такой информации передается в шифрованном виде посредством HTTPS-соединения, но внутри клиента она находится в открытом виде [11];\n—\tразличные офлайн-режимы вынуждены накапливать секретную информацию пользователя и передавать ее при первом появлении связи на сервер. Реализация угроз аномальных активностей, которые могут реализовываться во время выполнения кода веб-приложений в браузере, может привести как к небольшому дискомфорту с точки зрения использования приложений, так и к значительному ущербу в области защиты информации. Виды таких угроз весьма различны.\n1 Двухфакторная аутентификация: что это и зачем оно нужно? Блог Лаборатории Касперского [Электронный ресурс]. Режим доступа: https://www.kaspersky.ru/blog/what_is_ two_factor_authenticatio/4272/ (дата обращения: 01.02.2020).\n—\tНарушение конфиденциальности информации.\nКонфиденциальность информации можно нарушить двумя способами:\n1)\tпередача закрытой информации пользователя, полученной во время выполнения кода, на сервер злоумышленника;\n2)\tсбор статистики о совершаемых действиях пользователя, что позволяет злоумышленнику следить за пользователем.\n—\tНарушение целостности информации в веб-приложениях. В данном случае проблема также может возникнуть в виде реализации двух угроз:\n1)\tподмена страниц веб-приложения на страницы злоумышленника или непосредственная замена всей страницы, отдельных элементов страницы или выполняемой функциональности;\n2)\tраспространение вредоносного программного обеспечения в виде вирусов, троянов, установка их на компьютер через веб-приложения [12, 13].\n—\tВыполнение вредоносных действий от имени пользователя. Это действие может привести к таким действиям через веб-приложения, как удаление содержимого от имени пользователя или участие устройства пользователя в атаках сети, спам-атаках, а также кибератаках [14, 15].\nМожно выделить основные методы поиска аномальных активностей, применимые к веб-приложениям. К ним относятся: мониторинг трафика между браузером и внешней сетью; статическое сканирование кода; динамическое сканирование исполняемого кода на этапе выполнения.\nВ каждом методе поиска могут использоваться в качестве дополнительных такие средства как сбор статистики по коду, анализ профилирующих данных, мониторинг вызовов АР1-функций операционной системы, а также снимков DOM-дерева браузера в разное время [16].\nС точки зрения пользователя веб-приложений при сравнении методов поиска аномальной активности имеет смысл рассматривать определенные критерии их применимости. Важным моментом выбора того или иного метода является возможность применять средства защиты, не возвращаясь к использованию веб-приложений без каких-либо элементов защиты.\nДля оценки методов поиска аномальных активностей веб-приложений выберем такие показатели как:\n—\tпадение скорости запуска веб-приложений после загрузки - разница времени между первым запуском «чистого» веб-приложения и веб-приложения с включенной системой защиты;\n—\tпадение скорости реакции веб-приложений на действия пользователя;\n—\tсравнение количества найденных аномальных активностей с количеством найденных ложных срабатываний.\nМониторинг трафика между браузером и внешней сетью\nПодобный способ поиска аномальных активностей заключается в использовании традиционного для\nанализа сетевого трафика решения. Устанавливается прокси-сервер, который просматривает и анализирует трафик между веб-приложением и внешней сетью. Мониторинг выполняется посредством анализа содержимого в HTTP-пакете, анализа адресов источника и назначения, а также портов. Для анализа шифрованного трафика, передающегося через SSL-соединение (соединение Secure Sockets Layer — соединение, использующее уровень защищенных сокетов), применяется прокси, который либо встраивается в схему SSL-соединения, либо является его исходной точкой. Определение аномальной активности осуществляется через поиск в HTTP-пакетах определенных сигнатур, свидетельствующих об отклонении, либо использование черных списков для поиска конкретных хостов злоумышленников [17-20]. В качестве вспомогательного средства производится мониторинг API-вызовов операционной системы. В ряде случаев это может давать определенные результаты.\nВ виде примеров таких систем можно привести персональные антивирусные системы со встроенным в них модулем анализа HTTP-трафика: Flowmon Networks, OWASP ZAP, Kaspersky Internet Security, С-Терра СОВ, Qualys Web Application Scanner.\nПреимущества подобного способа поиска аномальных активностей заключаются в более быстром анализе трафика при поиске уязвимостей. При этом практически не снижается производительность веб-приложения. На данный метод не оказывает влияние обфускация кода, он позволяет находить большинство традиционных сетевых атак, таких как подключение веб-приложения в бот-сеть, обращение к другим хостам, не имеющим отношение к работе данного веб-приложения [21].\nК сожалению, данный метод не позволяет выявлять аномальную активность, не связанную с передачей трафика. Например, известная атака, когда одни элементы подменяются другими для того, чтобы пользователь выполнил авторизационное действие. Само действие не является аномальным, поэтому выделить его как аномальное практически невозможно [22]. Также он плохо определяет большинство аномальных активностей, специфичных для веб-приложений, например, воровство cookies и XSS-атаки.\nСтатическое сканирование кода\nСтатическое сканирование кода выполняется перед тем, как очередная порция программного кода веб-приложения попадает в движок браузера. Во время статического кода происходит анализ приложения, выявление возможных аномальных активностей [23].\nТакой поиск осуществляется по известным базам сигнатур. Также происходит поиск в коде вызовов к операционной системе для обращения к различным авторизованным действиям, что является непосредственным признаком веб-приложения. Код анализируется по базам данных уязвимостей, доступным еще в традиционных языках программирования [24].\nОднако в современных реалиях при экспоненциальном росте компьютерных технологий затруднено создание полноценной базы сигнатур аномальных активно-\nстей веб-приложений, что не позволяет с достаточной эффективностью выявлять их аномальное поведение [25]. Фактически приходится постоянно находить компромисс между анализом кода, его расширяемостью и быстротой исполнения, а это влияет на эффективность поиска аномальных активностей [26, 27].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПри статическом сканировании на входе принимается исходный код, а на выходе выдается информация о найденных аномальных активностях. Метод ограничен теоретической проблемой, сформулированной в теореме Райса.\nСогласно теории алгоритмов, «для любого свойства, для которого существуют вычислимые функции с этим свойством и вычислимые функции без этого свойства, определить, является ли произвольный алгоритм функцией с таким свойством, является неразрешимой задачей».\nИначе говоря, невозможно сказать, исходя из исходного произвольного кода, все ли проблемы безопасности, которые появятся в процессе его выполнения, будут найдены.\nСтатический анализатор плохо обнаруживает аномальные активности, использующие нулевой указатель исключения, или активности, связанные с передачей управления коду, полученному из стека. Все, что может статический анализатор - выделять частные случаи, но при этом проверка на аномальную активность все равно должна проводиться другим методом.\nСтатический анализ может производиться как на основе заранее заготовленных шаблонов аномалий, так и на основании потока выполнения кода, где в зависимости от определенных прыжков и условий можно распознать аномальную активность. Также существует статистический подход, основанный на анализе метрик — аномальная активность выявляется по статистическим показателям.\nПрекрасным примером применения данных подходов является инструмент Mashup Developer Tool (рис. 2), в котором, с одной стороны, по определенным шаблонам анализируется код, с другой стороны — производится анализ потока выполнения, а с третьей стороны — происходит сбор метрик по внешнему обращению к сети. Данные анализируются, выявляются различные аномальные активности и о них сообщается пользователю.\nНа рис. 2 показан процесс статического анализа кода (System Workflow) с помощью инструмента Mashup Developer Tool. В начале процесса пользователь (Mashup Developer) использует три источника для анализа приложения: External JavaScript Library URLs (внешние JavaScript URL, которые разрешено использовать в коде); Mashup Application (приложение для анализа); Trust Policy (авторизационные правила, которые применяются для анализа приложения). C помощью этих источников происходит оценка приложения (Policy Adherence Assessment). В ходе оценки код подвергается статическому анализу (Static Code Analysis). Выявленные попытки неразрешенных обращений к другим сайтам (Dynamic Code Injection Sites) и нарушения созданных пользователем политик доступа приложения к API (Potential Trust Violation Sites) со-\nРис. 2. Статический анализ кода на практике Mashup Developer Tool [28]\nставляют аномальные активности. Информация о них в виде предупреждений (Warning Information) передается через обработку связанных правил (Policy Violation Handling) обратно к пользователю.\nНаиболее применимый способ на данный момент — проверка по базе шаблонов. Другой способ — более сложный, заключается в попытке предсказать, каким образом будет выполняться программа, зачастую имеет значительный показатель ложных срабатываний. Анализ таких метрик как количество строк кода, а также вызовов сторонних функций мало эффективен и используется лишь в виде дополнительного средства анализа кода [29].\nС 2014 года компания Mozilla пытается построить статическое средство анализа кода, в том числе с точки зрения безопасности пользователя, ScanJS. Однако результаты внедрения этого способа показали его неэффективность, и Mozilla отказалась от дальнейшей разработки1.\nС точки зрения конкретного пользователя статический анализ кода неэффективен. Время ожидания проверки и возможная модификация исполнения кода после сетевого взаимодействия осложняют практику применения данного метода.\nПримерами практической реализации данного метода поиска уязвимостей являются платформы: NodeJsScan, EsLint, Node Security Platform, Retire.js, IBM Security AppScan Source, Checkmarx CxSAST, WhiteHat Security.\nЛинтеры представляют собой важнейший инструмент для разработчиков программного обеспечения. Они позволяют анализировать код на различные аномальности в процессе разработки и особенно при выпуске программного обеспечения. Одним из наиболее признанных инструментов статического анализа кода для выявления проблемных шаблонов, обнаруженных в коде JavaScript, является EsLint. Однако, с точки зрения пользователя веб-приложения, такой метод недостаточно эффективен ввиду неспособности находить динамически изменяющийся код и его влияние при первом запуске на производительность веб-приложения.\n1 The importance of web application scanning // Важность сканирования веб-приложений. 2019 [Электронный ресурс]. Режим доступа: https://www.acunetix.com/websitesecurity/ the-importance-of-web-application-scanning/ (дата обращения: 22.01.2020).\nПреимущество данного метода заключается в том, что он выполняется только один раз при загрузке кода. В последующем ему достаточно проверять только сохраненные контрольные суммы и сравнивать их с текущими. Такой же метод позволяет доверять серверным базам контрольные суммы уже проверенных файлов. В сравнении с сетевым мониторингом метод позволяет выявлять больше аномальных активностей кода.\nПроблема применения подобного метода заключается в большом разнообразии веб-приложений и их архитектур, в результате чего построение базы сигнатур и аномальных активностей затруднено. Кроме того, быстрое развитие технологий и постоянное внедрение новых архитектурных стандартов делает невозможным достижение достаточной скорости нахождения сетевых аномалий в коде. Плохо находятся аномальные активности в обфусцированном и самозагружающемся коде. Речь идет о таком довольно распространенном способе построения приложения, когда код приложения достаточно быстро перестраивается и становится отличным от того, каким был на момент загрузки. Дополнительную сложность создают технологии WebAssembly, поскольку проанализировать подключаемый код на этапе предварительной компиляции становится невозможным [30-32].\nДинамическое сканирование исполняемого кода на этапе выполнения\nДинамическое сканирование исполняемого кода подразумевает постоянное помодульное сканирование в момент выполнения инструкции браузерным движком и движком JavaScript. Анализ может производиться в моменты выполнения модулей Ignition и TurboFan. Первый служит для процесса компиляции кода, второй обеспечивает процесс оптимизации кода (рис. 3).\nJavaScript-код в процессе выполнения сначала проходит этап интерпретации кода (Interpreted). Как исходный файл (JavaScript Source) он проходит через движок компиляции (Ignition). В процессе формируется низкоуровневый байт-код (Bytecode). После этого начинает работать компилятор первого уровня (Full-codegen), который производит код для непосредственного выполнения в браузере, но не оптимизированный (Unoptimized code). Это второй этап компиляции кода, после которого начинает работать веб-приложение (Baseline). На треть-\nInterpreted\tBaseline\tOptimized\nРис. 3. Схема потока выполнения JavaScript-кода1\nем этапе код анализируется браузером с целью ускорения выполнения. Этот этап называется оптимизацией кода (Optimized). Код на данном этапе попадает сразу в два разных оптимизирующих компилятора: TurboFan и Crankshaft. Разница между ними заключается в том, что TurboFan перегенерирует оптимизированный машинный код, а Crankshaft пользуется для оптимизации исходным кодом. В результате получается новый оптимизированный скомпилированный машинный код JavaScript (Optimized Code), который со временем теряет свою актуальность. Тогда оптимизация проходит заново.\nВ обоих модулях имеется возможность анализа как бинарного кода, что довольно затруднительно, так и кода, получаемого на языке C, а также возможность применять анализ JavaScript-кода на входе в JavaScript-движок. С точки зрения разработчика программного обеспечения есть возможность запускать код в браузере, подключать систему динамического сканирования и получать результаты после того, как код отработает. Тем самым гарантируется, что полученные результаты сканирования подобны полученным пользователем. После проверки программному обеспечению присваивается определенная категория надежности. В итоге можно обеспечить информирование пользователя об уровне безопасности через контрольную сумму и категорию безопасности. Однако для пользователя данный способ проверки затратен из-за большого времени выполнения [33-35].\nТакой метод на практике предоставляет информацию о времени выполнения дерева вызова функции, актуальных типах данных объектов и переменных, неявных преобразованиях типов, а также деструктуриза-ции переменных [36]. Метод работает при встраивании в код таким образом, чтобы возможность получения записи всех происходящих событий не меняла логику программы и схему ее выполнения. Он добавляет свои функции наблюдателя во все события для последующего отслеживания и реакции на действия. Поведение кода можно отследить в режиме выполнения, при встраивании в определенные моменты с помощью перехватов глобальных событий и идентификаторов. Вместе с тем это требует настройку браузера для выполнения или наличия движка JavaScript.\nПоскольку динамический анализ основан на анализе входного набора данных, его эффективность зависит от\nJavaScript V8 Engine Explained // Объяснение работы движка Javascript V8. 2019. [Электронный ресурс]. Режим доступа: https://hackernoon.com/javascript-v8-engine-explained-3f940148d4ef (дата обращения: 02.03.2020).\nкачества и количества входных данных, а также зависит от способа анализа. Входными данными могут быть такие метрики, как:\n—\tвремя исполнения программы и ее отдельных модулей, количество внешних запросов, количество используемой памяти и др.;\n—\tцикломатическая сложность кода программы, ци-кломатическая динамическая сложность (т. е. количество ветвей в программе по мере выполнения);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n—\tвозникающие программные ошибки и доступ за пределами выделенной памяти и стека;\n—\tобъем передаваемых данных и объем загруженного кода для исполнения.\nДинамическое сканирование применяется как последнее средство перед выполнением кода в браузере или используется для анализа кода после зафиксированной аномальной активности. И в том, и в другом случае динамическое сканирование затрудняет работу пользователя с веб-приложением. С другой стороны, этот вид сканирования кода наиболее приближен к пользователю и представляет полную информацию о выполняемом коде. В ряде случаев в ходе динамического сканирования используют снимки состояния браузера при выполнении кода, полученные или от разработчика, или от предыдущих запусков веб-приложения. Эти снимки позволяют более эффективно разделять нормальную и аномальную активность, а также обходить такие сложные случаи, как высоко оптимизированный код в WebAssembly, работающий с OpenGl, и напрямую с видеокартой.\nУ динамического анализа кода есть неоспоримое преимущество — точное знание, какая функция и какими аргументами вызвана. Также можно проверить корректность вызова, но это затруднено тем, на каком этапе в потоке выполнения JavaScript-движка будет осуществляться этот анализ. Если динамический анализ будет выполнен на этапе не оптимизируемого интерпретатора, то можно будет упустить из рассмотрения функции и аргументы, появившиеся после запуска оптимизирующего компилятора.\nС другой стороны, если код будет проанализирован после оптимизации, существует риск не увидеть всю картину анализа кода и не разобраться, какую непосредственную роль в обработке события играет данная функция. При статическом анализе это утверждать с уверенностью невозможно, но картина анализа кода получается более высокоуровневой.\nИнструментами для поиска аномальных активностей с применением метода динамического сканирования служат: Iroh.js, Clinic.js, PVS-Studio.\nДостоинства данного метода состоят в том, что он разрешает выполнять анализ и манипуляцию кода в процессе выполнения, при этом нет необходимости модифицировать исходный код или снабжать его аннотациями как в случае со средствами статической типизации. Способствует выявить аномальную активность до ее непосредственного выполнения и тем самым предотвратить злоумышленное действие. Разные примеры подобного подхода, такие как онлайн IDE (Integrated Development Environment — интегрированная среда разработки), позволяют находить аномальные актив-\nности в ходе редактирования кода. В большинстве реализаций появление ложных срабатываний исключено, так как обнаружение ошибки происходит в момент ее возникновения в программе. Таким образом, обнаруженная ошибка является не предсказанием, сделанным на основе анализа модели программы, а констатацией факта ее возникновения [37].\nНедостатки данного метода поиска аномальной активности заключаются в том, что он является экспериментальным, и его применение сопряжено с проблемами обеспечения производительности. Его эффективность по сравнению с другими методами довольно низкая, база данных сигнатур растет быстро, и поиск новых сигнатур затруднен постоянным развитием сферы веб-приложений. Проблема состоит в том, что, в отличие от компилируемых языков, объектные сигнатуры интерпретируемого языка JavaScript и DOM-движка еще не разработаны достаточно для продуктивного анализа.\nЗаключение\nНаиболее эффективным методом анализа веб-приложений является динамический способ анализа кода, реализуемый в виде встроенного в движок браузера анализатора кода, который проверяет все обращения\nвеб-приложения к движку и выявляет аномальную активность на основе таких обращений. Из-за неизбежного снижения производительности браузера и необходимости его постоянного адаптирования под конкретные веб-приложения подобный метод так и не был доработан в полноценное коммерческое решение. Вместе с тем потенциально этот метод позволяет выявлять с большой точностью активности, не являющиеся обычными для веб-приложений.\nНа сегодняшний день защиту веб-приложений выполняет сам браузер, предоставляя возможность создания и выполнения различных движков. При этом затруднен доступ к нативным функциям операционной системы. Использование Secure Sockets Layer соединения обеспечивает надежную защиту от подделки кода и атак «человек посередине». Тем самым получается код, переданный разработчиком, и этот код имеет доступ не ко всем функциям операционной системы.\nТаким образом, динамический метод анализа кода является самым перспективным способом анализа аномальных активностей, и необходим дальнейший более глубокий анализ этого метода с точки зрения производительности и выявления необходимых аномалий [38-40].\nЛитература\n1.\tНизамутдинов М.Ф. Тактика защиты и нападения на Web-приложения. СПб.: БХВ-Петербург, 2005. 432 с.\n2.\tЗайцев А.С., Малюк А.А. Разработка классификации внутренних угроз информационной безопасности посредством кластеризации инцидентов // Безопасность информационных технологий. 2016. Т. 23. № 3. С. 20-33.\n3.\tGarin E.V., Meshcheryakov R.V. Method for determination of the social graph orientation by the analysis of the vertices valence in the connectivity component // Вестник Южно-Уральского государственного университета. Серия: Математика. Механика. Физика. 2017. Т. 9. № 4. С. 5-12. doi: 10.14529/mmph170401\n4.\tStuttard D., Pinto M. The Web Application Hacker's Handbook: Discovering and Exploiting Security Flaws. John Wiley & Sons, 2011. 912 p.\n5.\tМейксин С.М. Безопасность банков // Вестник науки и образования. 2019. № 4-2(58). С. 53-55 [Электронный ресурс]. URL: https://cyberleninka.rU/article/n/bezopasnost-bankov (дата обращения: 23.02.2020).\n6.\tСукиасян В.М., Придиус Е.С. Современные принципы и подходы к frontend архитектуре веб-приложений // Наука, техника и образование. 2019. № 10(б3). С. 54-57.\n7.\tТомилов И.О., Трифанов А.В. Фаззинг. Поиск уязвимостей в программном обеспечении без наличия исходного кода // Интерэкспо ГЕО-Сибирь. 2017. Т. 9. № 2. С. 75-80.\n8.\tМельников В.Г., Гребень А.Е., Макарова Д.Г. Исследование межсетевых экранов для веб-приложений с открытым исходным кодом // Интерэкспо ГЕО-Сибирь. 2018. № 7. С. 233-236.\n9.\tМельников В.Г., Трифанов А.В. Методы обхода межсетевых экранов для приложений // Интерэкспо ГЕО-Сибирь. 2017. Т. 9. № 2. С. 113-117.\n10.\tСеменова З.В., Данилова О.Т., Ковшарь И.Р. Анализ безопасности стека технологий для разработки web-ресурсов // Динамика систем, механизмов и машин. 2019. Т. 7. № 4. С. 98-105 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/analiz-bezopasnosti-steka-tehnologiy-dlya-razrabotki-web-resursov (дата обращения: 23.02.2020).\n11.\tFogie S., Grossman J., Hansen R., Rager A., Petkov P. XSS Attacks: Cross Site Scripting Exploits and Defense. Oxford: Elsevier, 2007. 448 p.\nReferences\n1.\tNizamutdinov M.F. Tactics of Defense and Attack on Web Applications. St.Petersburg, BHV Publ., 2005, 432 p. (in Russian)\n2.\tZaytsev A.S., Malyuk A.A. Development of information security insider threat classification using incident clustering. IT Security,\n2016,\tvol. 23, no. 3, pp. 20-33. (in Russian)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3.\tGarin E.V., Meshcheryakov R.V. Method for determination of the social graph orientation by the analysis of the vertices valence in the connectivity component. Bulletin of the South Ural State University. Series: Mathematics. Mechanics. Physics, 2017, vol. 9, no. 4, pp. 5-12. doi: 10.14529/mmph170401\n4.\tStuttard D., Pinto M. The Web Application Hacker's Handbook: Discovering and Exploiting Security Flaws. Wiley Publ., 2011, 912 p.\n5.\tMeyksin S.M. Bank security. Bulletin of Science and Education, 2019, no. 4-2(58), pp. 53-55. Available at: https://cyberleninka.ru/ article/n/bezopasnost-bankov (accessed: 23.02.2020). (in Russian)\n6.\tSukiasyan V.M., Pridius E.S. Contemporary principles and approaches to frontend web architecture. Science, Technology and Education, 2019, no 10(63). pp. 54-57. (in Russian)\n7.\tTomilov I.O., Trifanov A.V. Fuzzing. Gray-box method. Interexpo GEO-Siberia, 2017, vol. 9, no. 2, pp. 75-80. (in Russian)\n8.\tMelnikov V.G., Greben A.E., Makarova D.G. Investigation of open source firewalls for web applications. Interexpo GEO-Siberia, 2018, no. 7, pp. 233-236. (in Russian)\n9.\tMelnikov V.G., Trifanov A.V. WAF bypass. Interexpo GEO-Siberia,\n2017,\tvol. 9, no. 2, pp. 113-117. (in Russian)\n10.\tSemenova Z.V., Danilova O.T., Kovshar I.R. The analysis of security of a stack of technologies for development of web-resources. Dynamics of Systems, Mechanisms and Machines, 2019, vol. 7, no. 4, pp. 98-105. Available at: https://cyberleninka.ru/article/n/analiz-bezopasnosti-steka-tehnologiy-dlya-razrabotki-web-resursov (accessed: 23.02.2020). (in Russian)\n11.\tFogie S., Grossman J., Hansen R., Rager A., Petkov P. XSS Attacks: Cross Site Scripting Exploits and Defense, Oxford, Elsevier, 2007, 448 p.\n12.\tAlcorn W., Frichot Ch., Orru M. The Browser Hacker's Handbook. John Wiley & Sons, 2014, 648 p.\n13.\tCross M. Developer's guide to web application security. Elsevier, 2007, 500 p. doi: 10.1016/B978-1-59749-061-0.X5000-1\n12.\tAlcorn W., Frichot Ch., Orru M. The Browser Hacker's Handbook. John Wiley & Sons, 2014. 648 p.\n13.\tCross M. Developer's guide to web application security. Elsevier, 2007. 500 p. doi: 10.1016/B978-1-59749-061-0.X5000-1\n14.\tБеляев А., Петренко С. Системы обнаружения аномалий: новые идеи в защите информации [Электронный ресурс]. URL: http:// citforum.ru/security/articles/anomalis/ (дата обращения: 14.02.2020).\n15.\tЦыганенко Н.П. Статический анализ кода мобильных приложений как средство выявления его уязвимостей // Труды БГТУ. Физико-математические науки и информатика. 2015. № 6(179). С.200-203.\n16.\tМарков А.С., Матвеев В.А., Фадин А.А., Цирлов В.Л. Эвристический анализ безопасности программного кода // Вестник МГТУ им. Н.Э. Баумана. Серия: Приборостроение. 2016. № 1. С. 98-111.\n17.\tИконников М.А., Карманов И.Н. Меры и требования к защищенным веб-приложениям // Интерэкспо Гео-Сибирь. 2019. Т. 6. № 2. С. 13-19. doi: 10.33764/2618-981X-2019-6-2-13-19\n18.\tБарабанов А.В., Лавров А.И., Марков А.С., Полотнянщиков И.А. Исследование атак типа «межсайтовая подделка запросов» // Вопросы кибербезопасности. 2016. № 5. С 43-49. doi: 10.21581/2311-3456-2016-5-43-50.\n19.\tБарабанов А.В., Марков А.С., Фадин А.А., Цирлов В.Л. Статистика выявления уязвимостей программного обеспечения при проведении сертификационных испытаний // Вопросы кибербезопас-ности. 2017. № 2. С 2-8. doi: 10.21581/2311-3456-2017-2-2-8\n20.\tOWASP TOP 10 — 2017. The Ten Most Critical Web Application Security Risks. OWASP Foundation, 2017. 23 p.\n21.\tGeetha K., Sreenath N. SYN flooding attack - Identification and analysis // Proc. International Conference on Information Communication and Embedded Systems (ICICES 2014). 2014. P. 1-7. doi: 10.1109/ICICES.2014.7033828\n22.\tМарков А.С., Цирлов В.Л. Опыт выявления уязвимостей в зарубежных программных продуктах // Вопросы кибербезопасности. 2013. № 1. С. 42-48.\n23.\tЯковлев Г.О., Батетников И.А. Обеспечение безопасности сторонних компонентов веб приложений // Вестник науки и образования. 2019. № 9-2(63). С. 6-9.\n24.\tЧукляев Е.И. Современные технологии статического и динамического анализа программного обеспечения // Наукоемкие технологии в космических исследованиях Земли. 2016. Т. 8. № S2. С. 56-60.\n25.\tШишкин Ю.Е. Оптимизация выявления аномалий облачных сервисов // Наука, техника и образование. 2017. № 4(34). С. 6265. doi: 10.20861/2312-8267-2017-34-002\n26.\tСкабцов Н. Аудит безопасности информационных систем. СПб.: Питер, 2018. 272 с. (Библиотека программиста).\n27.\tАртамонов А.С., Иванов А.Ю. Перспективные методы анализа информационных потоков в сфере безопасности автоматизированных систем МЧС России (информационно-аналитически обзор часть 2) // Научно-аналитический журнал «Вестник Санкт-Петербургского университета Государственной противопожарной службы МЧС России». 2017. № 1. С. 74-83. doi: 10.24411/2218-130X-2017-00035\n28.\tChang J., Venkatasubramanian K., West A.G., Kannan S., Sokolsky O., Kim M.J., Lee I. ToMaTo: A trustworthy code mashup development tool. // Proc. 5th International Workshop on Web APIs and Service, Mashups'11. 2011. P. 18 [Электронный ресурс]. URL: https://dl.acm.org/doi/10.1145/2076006.2076012 (дата обращения: 31.03.2020). doi: 10.1145/2076006.2076012\n29.\tНамиот Д.Е., Романов В.Ю. Анализ данных для программных репозиториев // International Journal of Open Information Technologies. 2018. Т. 6. № 4. С. 1823 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/analiz-dannyh-dlya-programmnyh-repozitoriev (дата обращения: 23.02.2020).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n30.\tWang H., Zhang D., Shin K.G. Detecting syn flooding attacks // Proc. 21st Annual Joint Conference of the IEEE Computer and Communications Societies. INFOCOM-2002. 2002. V. 3. P. 15301539. doi: 10.1109/INFCOM.2002.1019404\n31.\tErtaul L., Martirosyan Y. Implementation of a Web Application for Evaluation of Web Application Security Scanners // Proc. International Conference on Security and Management. 2012. P. 82-89.\n32.\tRafique S., Humayun M., Gul Z., Abbas A., Javed H. Systematic Review of Web Application Security Vulnerabilities Detection Methods // Journal of Computer and Communications. 2015. V. 3. N 9. P. 28-40. doi: 10.4236/jcc.2015.39004\n33.\tОдинокая М.А. Об эффективном использовании современных технологий создания интерактивных веб-документов // Интер-\n14.\tBeliaev A., Petrenko S. Anomaly detection systems: novel Ideas for data protection. Available at: http://citforum.ru/security/articles/ anomalis/ (accessed: 14.02.2020). (in Russian)\n15.\tTsyganenko N.P. The static analysis of mobile applications code as vulnerabilities detection method. Proceedings of BSTU. Physics and Mathematics. Informatics, 2015, no. 6(179), pp. 200-203. (in Russian)\n16.\tMarkov A.S., Matveev V.A., Fadin A.A., Tsirlov V.L. Heuristic analysis of source code security. Herald of the Bauman Moscow State Technical University. Series Instrument Engineering, 2016, no. 1, pp. 98-111. (in Russian)\n17.\tIkonnikov M.A., Karmanov I.N. Measures and requirements to protected web applications. Interexpo GEO-Siberia, 2019, vol. 6, no. 2, pp. 13-19. (in Russian). doi: 10.33764/2618-981X-2019-6-2-13-19\n18.\tBarabanov A., Lavrov A., Markov A., Polotnyanschikov I. A Study of Cross-Site Request Forgeries During Software Security Evaluation. Voprosy kiberbezopasnosti, 2016, no. 5, pp. 43-49. (in Russian). doi: 10.21581/2311-3456-2016-5-43-50.\n19.\tBarabanov A., Markov A., Fadin A., Tsirlov V. Statistics of Software Vulnerabilities Detection During Certified Testing. Voprosy kiberbezopasnosti, 2017, no. 2, pp. 2-8. (in Russian). doi: 10.21581/2311-3456-2017-2-2-8\n20.\tOWASP TOP 10 - 2017. The Ten Most Critical Web Application Security Risks. OWASP Foundation, 2017, 23 p.\n21.\tGeetha K., Sreenath N. SYN flooding attack — Identification and analysis. Proc. International Conference on Information Communication and Embedded Systems (ICICES 2014), 2014, pp. 1-7. doi: 10.1109/ICICES.2014.7033828\n22.\tMarkov A., Tsirlov V. Experience in identifying vulnerabilities in software. Voprosy kiberbezopasnosti, 2013, no. 1, pp. 42-48. (in Russian)\n23.\tYakovlev G.O., Batetnikov I.A. Securing third-party web application components. Bulletin of Science and Education, 2019, no. 9-2(63), pp. 6-9. (in Russian)\n24.\tChuklyaev E.I. The modern technologies of static and dynamic analysis of software. H&ESResearch, 2016, vol. 8, no. S2, pp. 56-60. (in Russian)\n25.\tShishkin Yu.E. Optimization of cloud services anomalies detection. Science, Technology and Education, 2017, no. 4(34), pp. 62-65. (in Russian). doi: 10.20861/2312-8267-2017-34-002\n26.\tSkabtcov N. Audit of Information Systems Security. St.Petersburg, Piter Publ., 2018, 272 p. (in Russian)\n27.\tArtamonov A.S., Ivanov A.Yu. Advanced methods of analysis of information flows in the sphere of security of the automated systems of emercom of Russia (information-analytical review - part 2). Vestnik sankt-peterburgskogo universiteta GPS MCHS Rossii, 2017, no. 1, pp. 74-83. (in Russian). doi: 10.24411/2218-130X-2017-00035\n28.\tChang J., Venkatasubramanian K., West A.G., Kannan S., Sokolsky O., Kim M.J., Lee I. ToMaTo: A trustworthy code mashup development tool. Proc. 5th International Workshop on Web APIs and Service, Mashups'11, 2011, pp. 18. Available at: https://dl.acm.org/ doi/10.1145/2076006.2076012 (accessed: 31.03.2020). doi: 10.1145/2076006.2076012\n29.\tNamiot D., Romanov V. On data mining for software repositories. International Journal of Open Information Technologies. 2018, vol. 6. no 4. pp. 1823. Available at: https://cyberleninka.ru/article/n/analiz-dannyh-dlya-programmnyh-repozitoriev (accessed: 23.02.2020). (in Russian)\n30.\tWang H., Zhang D., Shin K.G. Detecting syn flooding attacks. Proc. 21st Annual Joint Conference of the IEEE Computer and Communications Societies. INFOCOM-2002, 2002, vol. 3, pp. 15301539. doi: 10.1109/INFCOM.2002.1019404\n31.\tErtaul L., Martirosyan Y. Implementation of a Web Application for Evaluation of Web Application Security Scanners. Proc. International Conference on Security and Management, 2012, pp. 82-89.\n32.\tRafique S., Humayun M., Gul Z., Abbas A., Javed H. Systematic Review of Web Application Security Vulnerabilities Detection Methods. Journal of Computer and Communications, 2015, vol. 3, no. 9, pp. 28-40. doi: 10.4236/jcc.2015.39004\n33.\tOdinokaya M.A. About the effective usage of modern tech nologies of the creation of interactive web-documents. Interactive science, 2017, no. 3(13), pp. 55-56. Available at: https://cyberleninka.ru/ article/n/ob-effektivnom-ispolzovanii-sovremennyh-tehnologiy-sozdaniya-interaktivnyh-veb-dokumentov-1 (accessed: 22.02.2020). (in Russian). doi: 10.21661/r-118243\n34.\tNovozhylov A.V., Akulov G.S. Browsers support of HTML5 and CSS3. Russian Universities Reports. Mathematics. 2014, vol. 19,\nактивная наука. 2017. № 3(13). C. 55-56 [Электронный ресурс]. URL: https://cyberleninka.rWarticle/n/ob-effektivnom-ispolzovanii-sovremennyh-tehnologiy-sozdaniya-interaktivnyh-veb-dokumentov-1 (дата обращения: 22.02.2020). doi: 10.21661/r-118243\n34.\tНовожилов А.В., Акулов Г.С. Поддержка браузерами технологий HTML5 и CSS3 // Вестник российских университетов. Математика. 2014. Т. 19. № 2. С. 663-665 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/podderzhka-brauzerami-tehnologiy-html5-i-css3 (дата обращения: 22.02.2020).\n35.\tБутин А.А. Методические аспекты разработки систем защиты программного обеспечения // Вестник науки и образования. 2018. № 16-1(52). С. 30-36 [Электронный ресурс]. URL: https:// cyberleninka.ru/article/n/metodicheskie-aspekty-razrabotki-sistem-zaschity-programmnogo-obespecheniya (дата обращения: 22.02.2020).\n36.\tГригорьев С.В., Ковалев Д.А. Алгоритм синтаксического анализа контекстно-свободной аппроксимации динамически формируемого кода // Известия вузов. Северо-Кавказский регион. Технические науки. 2017. № 3(195). С. 43-48 [Электронный ресурс]. URL: https ://cyberleninka.ru/article/n/algoritm-sintaksicheskogo-analiza-kontekstno-svobodnoy-approksimatsii-dinamicheski-formiruemogo-koda (дата обращения: 22.02.2020). doi: 10.17213/0321-2653-2017-3-43-48\n37.\tКулясов Н.В., Исаев С.В. Исследование сетевых аномалий корпоративной сети Красноярского научного центра // Сибирский журнал науки и технологий. 2018. Т. 19. № 3. С. 412-422 [Электронный ресурс]. URL: https://cyberleninka.rU/article/n/ issledovanie-setevyh-anomaliy-korporativnoy-seti-krasnoyarskogo-nauchnogo-tsentra (дата обращения: 22.02.2020). doi: 10.31772/2587-6066-2018-19-3-412-422\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n38.\tЗуев В.Н., Ефимов А.Ю. Нейросетевой поведенческий анализ действий пользователя в целях обнаружения вторжений уровня узла // Программные продукты и системы. 2019. № 2. С. 268-272 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/ neyrosetevoy-povedencheskiy-analiz-deystviy-polzovatelya-v-tselyah-obnaruzheniya-vtorzheniy-urovnya-uzla (дата обращения: 22.02.2020). doi: 10.15827/0236-235X.126.268-272\n39.\tВишневский А.С. Обманная система для выявления хакерских атак, основанная на анализе поведения посетителей веб-сайтов // Вопросы кибербезопасности. 2018. № 3(27). С. 54-62 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/ obmannaya-sistema-dlya-vyyavleniya-hakerskih-atak-osnovannaya-na-analize-povedeniya-posetiteley-veb-saytov (дата обращения: 22.02.2020). doi: 10.21681/2311-3456-2018-3-54-62\n40.\tБурлаков М.Е., Ивкин А.Н. Система обнаружения вторжения на основе искусственной иммунной системы // Вестник ПНИПУ. Электротехника, информационные технологии, системы управления. 2019. № 29. С. 209-224 [Электронный ресурс]. URL: https://cyberleninka.ru/article/n/sistema-obnaruzheniya-vtorzheniya-na-osnove-iskusstvennoy-immunnoy-sistemy (дата обращения: 22.02.2020).\nno. 2, pp. 663-665. Available at: https://cyberleninka.ru/article/n/ podderzhka-brauzerami-tehnologiy-html5-i-css3 (accessed: 22.02.2020). (in Russian)\n35.\tButin A.A. Methodical aspects of development ofprotection systems software. Bulletin of Science and Education, 2018, no. 16-1(52), pp. 30-36. Available at: https://cyberleninka.ru/article/n/ metodicheskie-aspekty-razrabotki-sistem-zaschity-programmnogo-obespecheniya (accessed: 22.02.2020). (in Russian)\n36.\tGrigorev S.V., Kovalev D.A. Syntax analysis of context-free approximation of dynamically generated code. University news. North-Caucasian region. Technical sciences series, 2017, no. 3(195), pp. 43-48. Available at: https://cyberleninka.ru/article/n/algoritm-sintaksicheskogo-analiza-kontekstno-svobodnoy-approksimatsii-dinamicheski-formiruemogo-koda (accesed: 22.02.2020). (in Russian). doi: 10.17213/0321-2653-2017-3-43-48\n37.\tKulyasov N.V., Isaev S.V. Investigation of the network anomalies of the corporate network of Krasnoyarsk scientific center. Siberian Journal of Science and Technology, vol. 19, no. 3, pp. 412-422. Available at: https://cyberleninka.ru/article/n/issledovanie-setevyh-anomaliy-korporativnoy-seti-krasnoyarskogo-nauchnogo-tsentra (accessed: 22.02.2020). (in Russian). doi: 10.31772/2587-6066-201819-3-412-422\n38.\tZuev V.N., Efimov A.Yu. Neural network user behavior analysis for detecting host-level intrusion. Software & Systems, 2019, no. 2, pp. 268-272. Available at: https://cyberleninka.ru/article/n/ neyrosetevoy-povedencheskiy-analiz-deystviy-polzovatelya-v-tselyah-obnaruzheniya-vtorzheniy-urovnya-uzla (accessed: 22.02.2020). (in Russian). doi: 10.15827/0236-235X.126.268-272\n39.\tVishnevsky A. Content Based Attack Detection in Web-Oriented Honeypots. Voprosy kiberbezopasnosti, 2018, no. 3(27), pp. 54-62. Available at: https://cyberleninka.ru/article/n/obmannaya-sistema-dlya-vyyavleniya-hakerskih-atak-osnovannaya-na-analize-povedeniya-posetiteley-veb-saytov (accessed: 22.02.2020). (in Russian). doi: 10.21681/2311-3456-2018-3-54-62\n40.\tBurlakov M.E., Ivkin A.N. Intrusion detection system based on the artificial immune system. PNRPU Bulletin. Electrotechnics, Informational Technologies, Control Systems, 2019, no. 29, pp. 209224. Available at: https://cyberleninka.ru/article/n/sistema-obnaruzheniya-vtorzheniya-na-osnove-iskusstvennoy-immunnoy-sistemy (accessed: 22.02.2020). (in Russian)\nАвторы\nМихеева Олеся Игоревна — студент, Университет ИТМО, Санкт-Петербург, 197101, Российская Федерация, ORCID ID: 0000-0001-8370-529X, rapppersha@yandex.ru\nГатчин Юрий Арменакович — доктор технических наук, профессор, профессор, Университет ИТМО, Санкт-Петербург, 197101, Российская Федерация, Scopus ID: 56127302800, ORCID ID: 0000-0002-1067-619X, gatchin@mail.ifmo.ru\nСавков Сергей Витальевич — директор по информационным технологиям, ЗАО «Мобикон», Санкт-Петербург, 199178, Российская Федерация, Scopus ID: 57212837033, ORCID ID: 0000-0002-9438-4564, sergsavkov@gmail.com\nХамматова Регина Марсельевна — инженер, ООО «Удостоверяющий центр ГАЗИНФОРМСЕРВИС», Санкт-Петербург, 198096, Российская Федерация, ORCID ID: 0000-0001-7236-9024, r.hamatova@mail.ru\nНырков Анатолий Павлович — доктор технических наук, профессор, профессор, Государственный университет морского и речного флота им. адмирала С.О. Макарова, Санкт-Петербург, 198035, Российская Федерация, Scopus ID: 56607396800, ORCID ID: 0000-0002-9803-6284, NyrkowAP@gumrf.ru\nAuthors\nOlesia I. Mikheeva — Student, ITMO University, Saint Petersburg, 197101, Russian Federation, ORCID ID: 0000-0001-8370-529X, rapppersha@yandex.ru\nYury A. Gatchin — D.Sc., Full Professor, ITMO University, Saint Petersburg, 197101, Russian Federation, Scopus ID: 56127302800, ORCID ID: 0000-0002-1067-619X, gatchin@mail.ifmo.ru\nSergey V. Savkov — Chief Information Officer, ZAO Mobicon, Saint Petersburg, 199178, Russian Federation, Scopus ID: 57212837033, ORCID ID: 0000-0002-9438-4564, sergsavkov@gmail.com\nRegina M. Khammatova — Engineer, LLC Certification Authority Gazinformservice, Saint Petersburg,198096, Russian Federation, ORCID ID: 0000-0001-7236-9024, r.hamatova@mail.ru\nAnatoliy P. Nyrkov — D.Sc., Full Professor, Admiral Makarov State University of Maritime and Inland Shipping, Saint Petersburg, 198035, Russian Federation, Scopus ID: 56607396800, ORCID ID: 0000-0002-9803-6284, NyrkowAP@gumrf.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-poiska-anomalnyh-aktivnostey-veb-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/veb-predstavitelstvo-kompanii-metody-i-instrumenty-razrabotki",
    "slug": "veb-predstavitelstvo-kompanii-metody-i-instrumenty-razrabotki",
    "title": "ВЕБ-ПРЕДСТАВИТЕЛЬСТВО КОМПАНИИ: МЕТОДЫ И ИНСТРУМЕНТЫ РАЗРАБОТКИ",
    "abstract_description": "В статье обосновывается актуальность веб-представительства для компаний. Рассматриваются преимущества и недостатки видов веб-разработки, проводится обзор программных средств для самостоятельной веб-разработки.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004\nШестакова С.А.,\nстудент\nСеверный (Арктический) федеральный университет им. М. В. Ломоносова, г. Архангельск, Россия Научный руководитель: Чижова Л.А., доцент кафедры прикладной информатики, к.э.н.,\nг. Архангельск, Россия\nВЕБ-ПРЕДСТАВИТЕЛЬСТВО КОМПАНИИ: МЕТОДЫ И ИНСТРУМЕНТЫ РАЗРАБОТКИ Аннотация\nВ статье обосновывается актуальность веб-представительства для компаний. Рассматриваются преимущества и недостатки видов веб-разработки, проводится обзор программных средств для самостоятельной веб-разработки.\nКлючевые слова: веб-представительство, веб-разработка, сайт, конструктор сайтов, редактор кода.\nShestakova S. A.,\nstudent\nNorthern (Arctic) Federal district University. M. V. Lomonosova, Arkhangelsk, Russia Scientific supervisor: Chizhova L. A., associate Professor of applied Informatics, Ph. D. in Economics,\nArkhangelsk, Russia\nWEB REPRESENTATION OF THE COMPANY: METHODS AND TOOLS FOR DEVELOPMENT Abstract\nThe article substantiates the relevance of web representation for companies. There are advantages and disadvantages of web development types, and software tools for independent web development are reviewed in this article.\nKeywords: web representation, web development, website, website Builder, code editor.\nВ современных условиях для устойчивого развития компании необходимо грамотное привлечение клиентов. Сегодня наиболее эффективным\nинструментом, обеспечивающим достижение этой цели, является веб-представительство. Этот инструмент актуален в связи с тем, что почти любая отрасль деятельности, с одной стороны связана с производством товаров, выполнением работ или оказанием услуг, с другой - нуждается в продвижении, которое основывается на информировании [1, с. 2].\nОтметим, что наличие у компании веб-представительства не только способствует развитию предпринимательской деятельности, но и помогает частично нивелировать риски бизнеса. Так, например, для северных территорий факторами риска предпринимательской деятельности выступают суровые природно-климатические условия, низкая плотность населения, слабо развитая инфраструктура, отрицательная демографическая динамика, повышенные затраты на энергоресурсы и т.п. [2, с. 11].\nВеб-представительство заключается в описании предприятия и его деятельности в интернете. Другими словами, это сайт организации со всей важной информацией, которую представитель посчитает необходимым разместить [3, с. 6]. Сайт выступает каналом обратной связи для коммуникации с клиентом. Одна из главных задач сайта заключается в том, чтобы его посетитель стал потенциальным клиентом компании. При наличии детальной информации о компании, клиент еще до личного контакта может решить, удовлетворяют ли услуги компании его потребности. Сайт позволяет при необходимости предоставить в публичном доступе актуальную информацию о продукции предприятия. Помимо клиентов сайт может привлекать поставщиков и партнеров. Для компании сайт - это в первую очередь подтверждение её технического обеспечения. Наличие сайта повышает доверие к компании. Сайт выступает системой взаимодействия с партнерами и клиентами, работающей 24 часа в сутки, так как позволяет зафиксировать заявку в любое время, тем самым повышая удобство обслуживания. Благодаря этому увеличивается эффективность работы компании, структурируется деятельность, растет прибыль [4].\nВажным преимуществом веб-представительства являются его обширные маркетинговые возможности, которые обеспечивают работу именно со своей целевой аудиторией, позволяют оценить действия по её привлечению и многое другое. С помощью сайта легче создать свой бренд, которому клиенты буду доверять в последующем, узнавая его по логотипу, слогану и другим уникальным особенностям компании. Грамотное построение бренда будет важным конкурентным преимуществом компании и придаст ей уверенности на рынке.\nВ целом веб-представительство в виде собственного сайта позволяет компании заявить о себе в информационно-коммуникационной сети, тем самым найдя новых клиентов и партнеров, повышая информационную открытость о себе; даёт возможность осуществления электронных платежей и использования маркетинговых инструментов; помогает компании развивать свой бренд.\nВ настоящее время веб-разработка является востребованной и интересной областью программирования, включающей так называемую внешнюю и внутреннюю составляющие (фронт-энд и бэк-энд). Бэк-энд предполагает разработку программного кода на стороне сервера, т.е. обработку, хранение и выдачу данных. Фронт-энд - это работа с внешним функционалом, с которым взаимодействует пользователь в браузере [5, с. 24].\nСуществуют разные способы создания сайтов от простейших, основанных на использовании готовых конструкторов до самостоятельно разработанных вариантов, выполняемых под конкретные задачи с непосредственным использованием языков веб-программирования. Каждый способ имеет свои особенности, которые определяют как недостатки, так и преимущества в сравнении между собой.\nРассмотрим подробнее основные преимущества и недостатки конструкторов, а также самостоятельной разработки веб-представительств фирмы в таблице 1.\nТаблица 1\nПреимущества и недостатки видов разработки веб-представительств компании\nВид разработки\tПреимущества\tНедостатки\nСамостоятельная разработка\t-\tнет ограничений по функционалу и дизайну; -\tабсолютное соответствие требованиям конкретных проектов; -\tболее дешевое решение за счет того, что оплата хостинга и домена меньше ежемесячной оплаты за использование конструктора сайтов; -\tсайт размещен на собственном сервере (виртуальном хостинге), что расширяет возможности работы с ним, в отличие от сайта, размещённого на сервере конструктора; -\tразработчик может добиться быстрой работы сайта за счёт оптимизации и использования только необходимых компонентов;\t-\tбольшие трудозатраты на разработку; -\tнеобходимость владения большим количеством навыков для создания эффективного сайта.\n- более высокая степень безопасности, которая разработана для конкретного сайта.\nРазработка с\t- адаптивные сайты с разнообразным\t- нет доступа к исходному коду\nпомощью\tдизайном (возможность компоновать\tпроекта;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nконструктора\tмакеты секций с нуля из различных\t- ограниченный функционал\nэлементов, а потом сохранять их для\tбез платного аккаунта: малый\nпостоянного доступа из редактора.);\tнабор блоков, нельзя\n- привлекательный интерфейс;\tподключить собственное\n- встроенная CRM;\tдоменное имя, SEO\n- гибкость операций над страницами;\tоптимизацию и др.;\n- встроенные магазин и блог;\t- низкая индивидуализация\n- возможность экспорта файлов сайта;\tпродукции под заказы\n- возможность интеграции сторонних\tконкретных потребителей\nонлайн-сервисов.\t(кастомизация);\n- невозможно добавить блоки с\nнестандартной программной\nлогикой;\n- нельзя создавать большие\nсайты (на платных тарифах, как\nправило, выделяют 1 Гб\nсвободного места под файлы\nсайта.);\n- частичное отсутствие\nпрофильной функциональности\nдля лендингов;\n- все шаблоны одностраничные,\nк тому же использование\nшаблонов подразумевает\nпотерю оригинальности;\n- на всех сайтах, созданных при\nпомощи конструкторов,\nразмещена реклама (вместо\nоплаты за хостинг и домен).\nГлавным недостатком разработки сайта самостоятельно по сравнению с созданием в конструкторе являются большие трудозатраты на разработку и необходимость владеть большим количеством навыком для создания эффективного сайта.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКонструктор сайтов - это сервис, позволяющий любому человеку без специальных знаний собрать себе сайт из готовых блоков и тут же его запустить. Основные преимущества перед традиционной сборкой сайта: простота и скорость. Конструктор невыгоден заказчику высокими затратами за\nслабую функциональность. Такой проект не будет иметь потенциал для масштабирования и дальнейшей автоматизации бизнес логики. Кроме того, разработка сайта «с нуля» позволяет продумать все детали дизайна сайта и его юзабилити, использование конструктора вынуждает вписывать информацию в строго определенные наборы блоков.\nПрежде чем приступать к веб-разработке, необходимо выбрать подходящий инструмент, удовлетворяющий требованиям решаемых задач. Среди всех инструментов, когда-либо используемых разработчиками, труднее всего выбрать редактор кода. Хороший редактор упрощают работу и в то же время повышают производительность [3]. Рассмотрим наиболее популярное программное обеспечение, подходящее для веб-разработки (таблица 2).\nТаблица 2\nСравнительная характеристика редакторов кода\nКритерий\tПрограммное обеспечение\nNotepad++\tVSCode\tAtom\tSublime\tWebStor m\tPhpStorm\nКатегория\tРедактор\tРедактор\tРедактор\tРедактор\tIDE\tIDE\nОткрытый\t+\t+\t+\t-\t-\t-\nисходный код\nЛегковестность\t+\t+\t+\t+\t-\t-\nАвтодополнение\t-\t+\t+\t+\t+\t+\nкода\nОткрытие больших файлов\t-\t+\t-\t+\t+\t+\nПоддержка HTML, CSS и JS\t+\t+\t+\t+\t+\t+\nПоддержка PHP\t+\t+\t+\t+\t-\t+\nПоддержка NPM\t-\t+\t+\t+\t+\t+\nНаличие GUI для\t+\t+\t+\t-\t+\t+\nнастроек\nВстроенный GIT\t-\t+\t+\t-\t+\t+\nНаписана на\tC++\tJavaScript\tJavaScript\tC++ и Python\tJava\tJava\nКроссплатформе\t-\t+\t+\t+\t+\t+\nн-ность\nНаличие\t-\t+\t+\t-\t+\t+\nотладчика\nПоследнее\t05.12.2019\t25.11.2019\t16.12.2019\t01.10.201\t25.04.201\t30.10.201\nобновление\t\t\t\t9\t9\t9\nСостояние\tАктивное\tАктивное\tАктивное\tАктивное\tАктивное\tАктивное\nСтоимость\tБесплатны\tБесплатны\tБесплатны\t80$\t59$ в год\t$89 в год\nй\tй\tй\tразово\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nNotepad++ - свободный текстовый редактор с открытым исходным кодом для Windows с подсветкой синтаксиса большого количества языков программирования и разметки. Базовая функциональность программы может быть расширена как за счёт плагинов, так и сторонних модулей, таких как компиляторы и препроцессоры. Значительно уступает по функциональности более современным редакторам и интегрированным средам разработки (IDE).\nVSCode - «легкий» редактор кода для кроссплатформенной разработки веб- и облачных приложений. Использует большое число технологий Microsoft, такие как система автодополнения IntelliSense и веб-редактор Monaco. VSCode потребляет много ресурсов компьютера, т.к. разработан с помощью технологии Electron. Он работает как JavaScript-процесс в браузере Chromium.\nAtom - бесплатный текстовый редактор с открытым исходным кодом и поддержкой плагинов. Как и VSCode использует Electron в качестве основы, что негативно сказывается на быстродействии. Плохо открывает большие файлы, при попытке открыть файл весом несколько мегабайт, редактор, скорее всего, зависнет и придется его перезапускать.\nSublime - проприетарный текстовый редактор. Поддерживает плагины на языке программирования Python. Является легковесным инструментом, не загружающим систему. Разработан на С++ и Python, что положительно сказывается на быстродействии и минимально нагружает компьютер.\nWebStorm - мощная среда разработки для JavaScript. Его главным достоинством является удобный и умный редактор JavaSrnpt, HTML и CSS, а также их производные. Имеет большое количество встроенных инструментов и плагинов.\nPhpStorm - мощная среда разработки для веб-разработки. представляет собой интеллектуальный редактор для PHP, HTML и JavaScript с возможностями анализа кода на лету, предотвращения ошибок в коде и автоматизированными средствами рефакторинга для PHP и JavaScript. Вся функциональность WebStorm включена в PhpStorm.\nВ результате сравнительного анализа можно сделать вывод о том, что большинство профессиональных интегрированных сред разработки веб-представительств компании являются достаточно дорогими. Из бесплатных наиболее выделяются своим функционалом редакторы Atom и VSCode, которые разработаны на технологии Electron, но при этом VSCode отличается лучшей оптимизацией, более качественным автодополнением кода, открытием больших файлов и удобством отладки.\nЛИТЕРАТУРА\n1.\tЧугунова Н.Ю., Королева И.В. Официальный сайт как инструмент продвижения компании // Научный журнал КубГАУ. 2017. № 130. С. 1-12. DOI: 10.21515/1990-4665-130-069\n2.\tБизнес-сообщество Русского Севера: модели поведения: монография / А.Г. Тутыгин, В.Б. Коробов, Л.А. Чижова, К.О. Малинина. - Ростов н/Д: Легион-М, 2018. - 244 с.\n3.\tИгнатов Ю.Ю. Проектирование и разработка веб-представительства фирмы: учебное пособие для студентов, обучающихся по направлениям подготовки 38.03.05 Бизнес-информатика, 01.03.02 Прикладная математика и информатика. - Саратов: Саратовский социально-экономический институт (филиал) РЭУ им Г.В. Плеханова, 2017. - 160с.\n4.\tИнькова Н.А., Котов Е.В. Повышение эффективности бизнеса компании на основе интернет-представительства // Психолого-педагогический журнал Гаудеамус. 2010. № 2 (16). С. 1-2.\n5.\tАрисова Д. А., Чернова С. В. К вопросу о веб-разработках // Вестник науки и образования. 2018. №15 (51). Часть 2. С. 24-26.\n",
    "download_url": "https://cyberleninka.ru/article/n/veb-predstavitelstvo-kompanii-metody-i-instrumenty-razrabotki/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/nekotorye-aspekty-otsenki-proizvoditelnosti-dinamichnyh-interaktivnyh-ajax-prilozheniy",
    "slug": "nekotorye-aspekty-otsenki-proizvoditelnosti-dinamichnyh-interaktivnyh-ajax-prilozheniy",
    "title": "Некоторые аспекты оценки производительности динамичных интерактивных Ajax – приложений",
    "abstract_description": "Современные web-приложения практически не отличаются от настольных приложений по развитости пользовательского интерфейса, интерактивности. В свою очередь, это выдвигает высокие требования к их производительности. Для достижения максимальной производительности web-приложения необходимо минимизировать объём передаваемых данных и число запросов к web-серверу. В статье рассматриваются методы повышения скорости загрузки web-страниц, получившие наиболее широкое распространение.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 681.3.06\nМедведев Ю.С.1, Терехов В.В.2 ©\n1Профессор, доктор технических наук, Северо-Кавказский филиал ФГБОУ ВПО «Российская\nакадемия правосудия», г. Краснодар;\n2Доцент, кандидат технических наук, Филиал Военного учебно-научного центра Военно-\nвоздушных Сил «Военно-воздушная академия им. профессора Н.Е. Жуковского и\nЮ.А. Гагарина» (г. Краснодар)\nНЕКОТОРЫЕ АСПЕКТЫ ОЦЕНКИ ПРОИЗВОДИТЕЛЬНОСТИ ДИНАМИЧНЫХ\nИНТЕРАКТИВНЫХ AJAX - ПРИЛОЖЕНИЙ\nАннотация\nСовременные web-приложения практически не отличаются от настольных приложений по развитости пользовательского интерфейса, интерактивности. В свою очередь, это выдвигает высокие требования к их производительности. Для достижения максимальной производительности web-приложения необходимо минимизировать объём передаваемых данных и число запросов к web-серверу. В статье рассматриваются методы повышения скорости загрузки web-страниц, получившие наиболее широкое распространение.\nКлючевые слова: web-приложение, web-сервер, web-браузер, Ajax-приложение. Keywords: web application, web server, web browser, Ajax application.\nВ недалёком прошлом большинство web-ресурсов, как правило, содержало лишь копии традиционных источников информации в формате html. Со временем web-приложения перестали быть системами распространения статического контента. На сегодняшний день это распределённые персонализированные приложения уровня предприятия [1, 339]. Разработка и поддержание таких программных комплексов является весьма сложной задачей.\nРазвитие технологий программирования на стороне web-браузера достаточно долго сдерживалось, так как web-браузеры обеспечивали весьма слабую совместимость, позволяя кроссбраузерно отображать только самые простые HTML-документы. Код более сложных web-приложений разрабатывался, как правило, для конкретной версии web-браузера [2, 13].\nПоявление Rich Internet application (RIA, «богатое Интернет-приложение») позволило расширить круг решаемых задач и расширить сферу применения web-приложений. До появления технологии Ajax web-приложения выполнялись преимущественно на стороне web-сервера. Web-браузер в таком случае играл роль пассивного монитора, который отображал полученный с web-сервера HTML-документ. Управление поведением элементов пользовательского интерфейса осуществлялось путём полной перерисовки HTML-документа, полученного новым запросом с web-сервера, а это слишком тяжеловесное решение [2, 13].\nВ противоположность классическому web-приложению, Ajax-приложение выполняется как на web-сервере, так и на web-клиенте, т.е. в web-браузере. Использование фонового (без перезагрузки основного HTML-документа) обмена данными между web-браузером и web-сервером позволяют создавать по-настоящему динамические web-приложения.\nВ настоящее время web-разработчики могут выбирать из широкого круга библиотек JavaScript, обеспечивающих кроссбраузерность (jQuery, Prototype.js, YHOO UI и др.). Такие библиотеки реализуют базовые средства разработки приложений, компоненты пользовательского интерфейса, такие как Slider, Accordion, Data Picker, визуальные эффекты, технологию drag-and-drop. К положительным особенностям библиотек относятся профессиональный художественный дизайн и глубокая проработка каждого модуля библиотеки [2, 10].\nСовременные многофункциональные web-приложения - это приложения, которые удобны для пользователя и обеспечивают функциональность, ставшую уже привычной для настольного (desktop) приложения. Они должны отвечать требованиям, предъявляемым к web-\n© Медведев Ю.С., Терехов В.В., 2014 г.\nприложениям уровня предприятия. Перечислим некоторые из них [3, 12]: наличие внешних (пользовательских) и внутренних (корпоративных) разделов сайта; единообразие внешнего вида всех генерируемых web-страниц; высокая производительность обслуживания пользователей.\nТеперь невозможно представить web-приложения без использования JavaScript, графических изображений, CSS. Загрузка, кэширование и отображение этих ресурсов требует значительного времени. Для достижения максимальной производительности web-приложения необходимо минимизировать объём передаваемых данных и число запросов к web-серверу. Перечислим некоторые методы повышения скорости загрузки web-страницы, получившие широкое распространение [3, 41]: кэширование данных на стороне сервера; кэширование web-страниц (на стороне сервера либо на стороне клиента); использование многоуровневой архитектуры FrontEnd-BackEnd; использование web-сервера, построенного по FSM (Finite State Machine), сжатие передаваемых данных средствами протокола HTTP. Все они в той или иной мере способствуют повышению производительности web-приложения и могут применяться как по отдельности, так и комбинироваться разработчиками web-приложений.\nБольшое влияние на скорость загрузки имеет качественный программный код: применение производительных конструкций кода может дать ощутимый прирост производительности web-приложения. Скорость загрузки web-приложения также ухудшается при неявно закрытых тегах HTML. Web-разработчику следует помнить универсальное правило: web-приложение, соответствующее спецификации XHTML, быстрее загружается и отображается браузером. При помощи доступных в сети инструментов (например Offline HTMLHelp.com Validator) можно осуществить такую проверку.\nЦелесообразно JavaScript-код главной страницы web-приложения размещать непосредственно в HTML-файле этой страницы. JavaScript-код, необходимый для других страниц, выносят в отдельные файлы, которые подгружаются динамически при отображении этих страниц web-приложения. Использование файлов с JavaScript - кодом большого размера также может негативно сказаться на работе web-приложения. В ряде случаев вместо этого целесообразно использовать несколько файлов меньшего размера, применять программные средства, такие как LazyLoad JavaScript для динамической загрузки сценариев, разбивая логику web-приложения на независимые модули.\nВ случае если тег <script> размещается (как зачастую рекомендуют в учебниках по HTML) внутри элемента <head>, то страница обрабатывается только после загрузки и выполнения JavaScript - кода. Этот недостаток устраняется размещением тега <script> перед закрывающим тегом </body>. Тогда визуально сайт загружается значительно быстрее.\nWeb-приложение должно проектироваться таким образом, чтобы оно функционировало и при отключённом JavaScript - коде. Это позволит вначале загружать файлы изображений и CSS, а определённая задержка загрузки JavaScript-кода будет некритичной. Оптимально, если необходимые ресурсы будут загружаться по запросу в случае необходимости.\nПрименительно к языку PHP высокую эффективность показали программы-акселераторы, позволяющие кэшировать скомпилированный байт-код [3, 59]. Для кэширования неоткомпилированного кода предлагается использовать программу Memcached. Это может ускорить процесс обращения к базе данных [3, 62]. Отмечается прирост производительности web-приложений в обоих случаях до 300% [3, 74].\nДля уменьшения размеров файлов используют специальные утилиты (YUI Compressor, PngCrush, PngOptimizer). В файлах JavaScript и CSS удаляются лишние биты: удаляются пробелы, комментарии, переводы строк, заменяются на более короткие имена переменных. Изображения также оптимизируются. В результате объём файла уменьшается в среднем на 5055%. Дополнительно на web-сервере файлы могут сжиматься утилитой GZIP. Суммарно такая обработка файлов может привести к уменьшению объёма файлов на 80-85% [3, 47].\nБиблиотеки JavaScript (Prototype, JQuery, Dojo, MooTools, YUI, ExtJS, и т.д.) дают возможность быстрой разработки web-компонентов, решают проблемы кросс-браузерной совместимости. При этом их применение целесообразно в том случае, если используется весь арсенал имеющихся средств. В противном случае разумнее использовать более легковесное\nрешение - написать код JavaScript. Следует также ограничить число обработчиков событий в web-приложении, т.к. их чрезмерное использование также неминуемо скажется на производительности web-приложения.\nТехнология Ajax совершила настоящий прорыв, приблизив web-приложения к традиционным интерактивным настольным приложениям. При этом разработчики не должны забывать, что Ajax-запрос выполняет полный HTTP-запрос, что эквивалентно по затратам ресурсов перезагрузке все страницы [2, 14]. Поэтому количество Ajax-запросов для сложных web-приложений должно ограничиваться.\nДля динамичных интерактивных web - приложений характерна высокая нагрузка на сервер. Для повышения производительности применяют кеширование объектов, прежде всего графических изображений. Ведь зачастую объекты не изменяются, поэтому при последующих запросах они могут использоваться браузером повторно (к примеру, верхний (header) и нижний (footer) блоки web-страниц). Для загрузки изменённых файлов, как правило, изменяют их имена, программно обновляя ссылки на них в web-приложениях, применяя сценарий сборки. Для оптимизации кеширования настраиваются соответствующим образом заголовки в запросах, передавая инструкции серверу о сроке хранения ресурсов [1, 431].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nОтдельного внимания заслуживает механизм взаимодействия с DOM. Производительность web-приложения в значительной мере можно повысить, грамотно используя стили вместо многократных перерисовок изображения страницы изменениями программного кода [1, 154].\nУдалённые ресурсы, что очевидно, дольше загружаются по сети. Резервом увеличения производительности является использование сети доставки содержания (CDN), которая, кроме того, применяет gzip-сжатие и контроль за кешированием файлов [1, 309]. Распределение файлов по сети основывается на географическом расположении web-клиентов.\nАнализ сетевого трафика, вызванного загрузкой страницы web-приложения (количество HTTP-запросов, размер и количество загружаемых ресурсов, HTTP-заголовки, сведения о кэше для исследуемого файла и т.д.) можно осуществить с помощью расширений большинства современных браузеров: Firebug для Mozilla® Firefox®, Web Inspector для Safari®, Developer Tools для Chrome®, Developer Tools для Internet Explorer® 8 [3, 112]. Такая диагностика позволяет выявить причины низкой производительности и повысить скорость работы web-приложения.\nРассмотренные в статье методы в отдельности могут не привести к значительному повышению производительности web-приложения, однако проведение комплекса предлагаемых мероприятий может значительно увеличить скорость загрузки сайта, что особенно актуально для web-приложений с большим трафиком.\nЛитература\n1.\tВеллинг Л., Томсон Л. Разработка Web-приложений с помощью PHP и MySQL, 3-е изд. - М.: «Вильямс», 2006. - 880 с.\n2.\tХольцнер С. jQuery. Практическое применение.-М.: Эскмо, 2010. - 224 с.\n3.\tФаулер М. Архитектура корпоративных программных приложений. - М.:Изд.дом «Вильямс», 2006. - 540 с.\n",
    "download_url": "https://cyberleninka.ru/article/n/nekotorye-aspekty-otsenki-proizvoditelnosti-dinamichnyh-interaktivnyh-ajax-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/analiz-rezultatov-audita-setevyh-informatsionnyh-resursov-mchs-rossii",
    "slug": "analiz-rezultatov-audita-setevyh-informatsionnyh-resursov-mchs-rossii",
    "title": "Анализ результатов аудита сетевых информационных ресурсов МЧС России",
    "abstract_description": "Сетевые информационные ресурсы МЧС России, и прежде всего сайты, являются одним из главных источников информации для общественности и основой формирования имиджа министерства, поэтому сайты постоянно модернизируются и улучшаются. Прослеживается положительная тенденция в усовершенствовании как дизайна, так и технических элементов сетевых информационных ресурсов. В статье проанализированы результаты их аудита, в основном, на предмет скорости загрузки сайтов как одного из главных показателей эффективности взаимодействия с целевой аудиторией. Даны обоснованные практические рекомендации по оптимизации параметров скорости загрузки.",
    "full_text_body": "\n\n\n\n\uFEFFАНАЛИЗ РЕЗУЛЬТАТОВ АУДИТА СЕТЕВЫХ ИНФОРМАЦИОННЫХ РЕСУРСОВ МЧС РОССИИ\nМ.В. Буйневич, доктор технических наук, профессор; А.В. Максимов, кандидат технических наук; А.В. Вострых.\nСанкт-Петербургский университет ГПС МЧС России\nСетевые информационные ресурсы МЧС России, и прежде всего сайты, являются одним из главных источников информации для общественности и основой формирования имиджа министерства, поэтому сайты постоянно модернизируются и улучшаются. Прослеживается положительная тенденция в усовершенствовании как дизайна, так и технических элементов сетевых информационных ресурсов. В статье проанализированы результаты их аудита, в основном, на предмет скорости загрузки сайтов как одного из главных показателей эффективности взаимодействия с целевой аудиторией. Даны обоснованные практические рекомендации по оптимизации параметров скорости загрузки.\nКлючевые слова: сетевые информационные ресурсы, сайты, аудит, скорость загрузки, целевая аудитория\nNETWORK INFORMATION RESOURCES OF THE EMERCOM OF RUSSIA: AUDIT S RESULTS ANALYSIS\nM.V. Buinevich; A.V. Maksimov; A.V. Vostrykh.\nSaint-Petersburg university of State fire service of EMERCOM of Russia\nThe network information resources of the EMERCOM of Russia, and above all the websites, are one of the main sources of information for the public and the basis for forming the image of the ministry, therefore the websites are constantly being modernized and improved. There is a positive trend in improving both the design and the technical elements of network information resources. The article analyzes the results of their audit, mainly regarding the speed of loading sites, as one of the main indicators of the effectiveness of interaction with the target audience. Practical reasonable recommendations are given for optimizing download speed parameters.\nKeywords: network information resources, sites, audit, download speed, target audience\nЦентральный интернет-портал МЧС России (https://www.mchs.gov.ru/) и сайты главных управлений по субъектам Российской Федерации являются одними из главных и достоверных источников статистической и оперативной информации о пожарах и результатах надзорной деятельности, происшествиях и чрезвычайных ситуациях (ЧС), а также источником рекомендаций и предупреждений о складывающейся метеорологической обстановке и т.д. [1]. Этим достигаются новые, более широкие возможности по обеспечению информационных потребностей граждан и общества в области техносферной, пожарной и прочих видов безопасности.\nВсе информационные сайты МЧС России имеют общий (в смысле, единый) лаконичный дизайн, адаптивную структуру и систему управления, тем самым через элементы гиперссылок на другие порталы реализуется интеграция со сторонними корпоративными ресурсами, создаётся единое информационное пространство министерства, позволяющее вести эффективный диалог между руководством, сотрудниками и общественностью.\nИмея огромную разнообразную аудиторию, информационные сайты должны развиваться и соответствовать как многочисленным информационным потребностям\nпользователей, так и последним требованиям технологий, предъявляемым к качественным информационным ресурсам [2].\nОт того насколько грамотно спроектированы серверы МЧС России и находящиеся на них сайты, зависит эффективность информационного обмена с пользователями, что, естественно, сказывается на имидже и престиже всего министерства в целом у сотрудников его структурных подразделений, государственных служащих иных министерств и ведомств, «рядовых» граждан, а также средств массовой информации (включая зарубежные).\nПроанализировав изменения структуры, технических особенностей, дизайна и логики информационно-технического взаимодействия на сайтах МЧС России с 2014 по 2019 гг., можно сделать предварительный вывод, что все изменения проходят с положительной динамикой и отвечают не только требованиям законодательства Российской Федерации в данной области, но и практически всем современным тенденциям [3-5]. В частности, сайты обновляются в режиме реального времени и внутренне организованы как многоуровневое объединение различных ресурсов и сервисов.\nОсобенно стоит выделить создание полноценной мобильной версии сайтов, чего явно не хватало современной аудитории на протяжении последних несколько лет. Согласно отчётам информационного агентства comScore [6] количество мобильных пользователей ещё в 2014 г. превысило число пользователей персональных компьютеров. Тем самым важность создания мобильной версии была неоспоримой, так как сайты МЧС России теряли практически половину потенциальной аудитории по причине невозможности получать информацию посредством мобильных устройств. В новой версии сайтов все элементы управления, цветовая схема и логика управления находятся на высоком уровне с возможностью обращения к сетевым информационным ресурсам с помощью гаджетов, имеющих любое разрешение дисплея [7].\nОднако, несмотря на все положительные новшества, остаются и проблемные вопросы, центральным из которых является недостаточная скорость загрузки сайта. Данный показатель напрямую влияет на количество отказов, то есть количество пользователей, не дождавшихся загрузки контента и покинувших сайт, так и не получив необходимой информации. Проведенные исследования [8] показали, что период ожидания от 1 до 3 сек. -приводит к вероятности отказа в 32 %, от 3 до 5 сек. - 70 %, от 5 до 10 сек. - 90 %, свыше 10 сек. - почти 100 %.\nТакже низкая скорость загрузки сайтов является негативным фактором ранжирования в поисковых системах Google и Яндекс, что приводит к снижению позиций сайта в выдаче, трафика и конверсии, глубины просмотров и лояльности пользователей.\nСкорость загрузки графических и текстовых элементов является одним из основных показателей качественно спроектированных интерфейсов и логики взаимодействия пользователей [9]. Недостаточное внимание к этой составляющей приводит к проявлению недоверия со стороны целых аудиторий, которые не в состоянии удовлетворить свои информационные потребности [10].\nСогласно данным официального портала мониторинга государственных сайтов (https://gosmonitor.ru [11]), в период с сентября по декабрь 2019 г. центральный сайт МЧС России посетили более 800 тыс. человек со средним временем пребывания на ресурсе около трех минут. Основная часть аудитории (64 %) переходила на сайт по «ключевым» запросам, остальные (36 %) - с помощью «прямых» переходов и ссылок из социальных сетей, блогосферы и «рекомендательных» систем. Целевая аудитория по возрастным категориям распределилась следующим образом: 18-24 года - 16 %; 25-34 года - 27,6 %; 35-44 года -26,9 %; 45-54 года - 15,2 %; 55 лет и старше - 9,09 %, - причем основная доля аудитории (58 %) заходила на сайт МЧС России с персональных компьютеров, и 42 % - с мобильных устройств. Причина невысокого процента мобильных пользователей связана с недавним созданием полноценной мобильной версии, удобства которой полностью ещё не оценено аудиторией.\nДля проведения сравнения центрального сайта МЧС России, расположенного по адресу https://www.mchs.gov.ru, на соответствие современным требованиям поисковых систем авторами использовался инструмент Google PageSpeed Insights [12]. Данный сервис анализирует производительность сайта на мобильных и десктопных устройствах, делая акцент на скорость загрузки контента. В зависимости от показателей сервис начисляет определённое количество баллов ресурсу по шкале от 0 до 100; оценка происходит с помощью автоматизированного инструмента Lighthouse. На странице сервиса вводится адрес сайта, где осуществляется проверка сразу для мобильной и десктопной версии. Первым результатом анализа выступает оценка эффективности страницы, результаты которой расшифровываются следующим образом:\n-\t90 и выше - высокая скорость загрузки;\n-\t50-89 - средняя скорость загрузки;\n-\tменее 49 - низкая скорость загрузки.\nВведя в адресную строку сервиса название сайта - https://www.mchs.gov.ru, были получены следующие результаты оценки скорости загрузки в баллах (рис. 1).\nРис. 1. Оценка скорости загрузки сайта на компьютере и мобильных устройствах\nИз рис. 1 (круговой индикатор) видно, что скорость загрузки для мобильных устройств оценивается в 16 баллов (крайне низкая скорость), а для компьютеров - в 51 балл (нижний порог средней скорости). Также на рис. 1 показаны значения скорости отрисовки контента (FCP) и первой задержки ввода (FID), которые отображаются в процентах и милисекундах (ms).\nДля улучшения этого показателя разработчикам сайта МЧС России необходимо провести следующую работу:\n-\tуменьшить количество внешних ресурсов - каскадных таблиц стилей (CSS, от англ. Cascading Style Sheets), файлов и библиотек JavaScript (JS) [13, 14] - путем их укрупнения или даже удаления излишних (попавших в разработку из шаблонов-заготовок);\n-\tпровести HTTP-кэширование, что позволит повысить скорость извлечения данных за счёт загрузки файлов с сервера без выполнения повторных вычислений и обработки;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tускорить загрузку FCP, CSS, JS, которая не должна превышать 2 500 ms. Граница предела ожидания в 2 500 ms основана на различных исследованиях современных аудиторий пользователей [15] и определена сервисом Google PageSpeed Insights как максимально допустимая для положительной оценки.\nСледующий раздел аудита - «Имитация загрузки страницы» - содержит шесть показателей (рис. 2), повышение оценки каждого из которых зависит от качества перечисленных выше мероприятий:\n1)\tвремя загрузки (отрисовки) первого контента (FCP, от англ. First Contentful Paint) -показатель, который определяет интервал времени между началом загрузки страницы и появлением первого информационного блока;\n2)\tиндекс скорости загрузки (Speed Index) - показывает, как быстро на странице появляется контент;\n3)\tвремя загрузки для взаимодействия (TTI, от англ. Time to Interaction) - время, по истечению которого страница становится готова к взаимодействию с пользователем;\n4)\tвремя загрузки достаточной части контента (FMP, от англ. First Meaningful Paint) -показатель, определяющий интервал времени между началом загрузки страницы и появлением основного контента;\n5)\tвремя окончания работы центрального процессора или первый простой процессора (First CPU Idle) - время, когда на странице становится возможна обработка пользовательского ввода;\n6)\tмаксимальная потенциальная задержка после первого ввода (FID, от англ. First Input Delay) - время выполнения самой длительной задачи в миллисекундах; если время реакции превышает 50 ms, пользователям может показаться, что приложение работает с задержками.\nQ ДЛЯ МОБИЛЬНЫХ\nРис. 2. Имитация загрузки страницы сайта\nИз рис. 2 видно, что кроме показателя «времени загрузки первого контента» только для компьютеров (отмечен зелёным цветом - 0,9 с; остальные пункты отмечены оранжевым цветом - удовлетворительная оценка, и красным - неудовлетворительная оценка), требуется комплексная доработка файлов и элементов сайта по всем показателям.\nВ разделе «Оптимизация» выделены «слабые» места проверяемого сайта, работа над которыми позволит ускорить загрузку. Результаты тестирования представлены на рис. 3 -и они, как видно, неудовлетворительны.\nРазберём по пунктам полученные результаты:\nВ первом пункте «Используйте современные форматы изображений» сервис рекомендует применять новейшие форматы изображений, которые имеют значительные преимущества сжатия с сохранением качества рисунков, что позволит уменьшить «вес» изображений, автоматически увеличив скорость загрузки всей страницы. К таким форматам относятся: JPEG XR, WebP и JPEG 2000. Сохранение и загрузка изображений в этих форматах позволит исключить данное предупреждение, что индицирует о повышении скорости загрузки.\n□ ДЛЯ КОМПЬЮТЕРОВ\nОптимизация - Эти рекомендации могут помочь вам ускорить загрузку страницы. Они не влияют на показатель производительности напрямую.\nВозможности\nИспользуйте современные форматы изображений\n▲ Отложите загрузку скрытых изображений\nНастройте эффективную кодировку изображений\n■\tВключите сжатие текста\n■\tУдалите неиспользуемый код CSS\nш Устраните ресурсы, блокирующие отображение\nСократите время ответа сервера (время до получения первого байта)\nПриблизительная экономия 2,04 s V\n1.2 s 0,76 s\n0,76 s 0,4 s 0,31 s 0,02 s\nОптимизация - Эти рекомендации могут помочь вам ускорить загрузку страницы. Они не влияют на показатель производительности напрямую.\nВозможности\nИспользуйте современные форматы изображений\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nА Отложите загрузку скрытых изображений\nНастройте эффективную кодировку изображений\n▲\tВключите сжатие текста\n▲\tУдалите неиспользуемый код CSS\nА Устраните ресурсы, блокирующие отображение\nПриблизительная экономия - 13,5 s ^\n9,9 s\t-\n4,95 s\t^\n4,35 s\t~\n2,4 s\t-\n1,53 s\tv»\nРис. 3. Оптимизация сайта\nПункт «Отложите загрузку скрытых изображений» для сайта МЧС России рекомендует применять подход асинхронной загрузки изображений [16], который можно реализовать с помощью следующих инструментов: Lazy Load XT jQuery, Lazy loading, Yall, BLazy, Lazysizes [14]. Использование асинхронной загрузки позволит загружать не все изображения одновременно, а по мере их показа пользователю.\n«Настройте эффективную кодировку изображений». Рекомендации данного пункта здесь выполняются использованием последних форматов изображений, указанных выше (пункт «Используйте современные форматы изображений»).\n«Включите сжатие текста». Данный пункт выполняется применением алгоритмов сжатия для текстовой информации. Наиболее оптимальным решением видится использование GZIP как поддерживаемого большинством браузеров.\n«Удалите неиспользуемый код CSS». Данный пункт указывает на то, что на сайте имеется неиспользуемый CSS-код, который тратит временные ресурсы на бесполезную загрузку [13]. Если известно, что такие блоки кода имеются, их необходимо удалить.\nПри нажатии на раскрывающийся список пункта «Устраните ресурсы, блокирующие отображение» появляются ссылки на JS-, CSS- и HTML-ресурсы, которые препятствуют загрузке контента страницы. В анализируемом сайте сервис отменил одну ссылку (/build/public.css), устранение которой позволит сэкономить 1 080 ms. В любом случае оптимизацию по данному пункту можно провести с помощью следующих манипуляций:\n-\tзагрузка только самого важного контента на первом экране;\n-\tограничение объема ресурсов, которые отображаются в верхней части страницы или их перенос в нижнюю часть сайта («футер», «подвал»);\n-\tуказание для JS файлов асинхронной загрузки [14];\n-\tдобавление в ссылку стилей значение «preload» атрибута «rel» и событие «onload» [13, 14];\n-\tразбиение внешних CSS на несколько файлов по медиа-типам и медиа-запросам.\nВ последнем пункте «Сократите время ответа сервера» рассматриваемого раздела сервис Google Page Speed ставит низкую оценку анализируемому сайту по причине длительного времени отклика сервера. В идеале оно должно составлять не более 200 ms [16]. Медленная загрузка может быть связана с проблемами на хостинге, например внутренними неполадками у хостера, или блокировкой сайта за нагрузку с превышением лимитов. В этом случае необходимо обратиться в техническую поддержку компании, предоставляющей хостинг.\nРаздел «Диагностика» - это дополнительная информация о соответствии страницы рекомендациям по производительности (рис. 4).\nЗдесь также большинство пунктов нуждаются в оптимизации. Рассмотрим способы ее реализации.\nПункт «Задайте правила эффективного использования кеша для статических объектов». Для оптимизации требуется настроить сервер так, чтобы кеширование статических файлов происходило с необходимой периодичностью. Для сайтов МЧС России, предоставляющих ежедневно актуальную информацию, оптимальным станет выбор правила еженедельного кеширования.\n«Настройте показ всего текста во время загрузки веб-шрифтов». В данном пункте сообщается, что пользователи сайта не увидят текстовый контент до полной загрузки шрифтов. Необходимо добавить в тег «link» параметр «display=swap», тем самым браузер отобразит дополнительный шрифт, пока основной шрифт загружается.\nПункт «Уменьшите влияние стороннего кода» информирует, что сторонний код заблокировал основной поток на 2 090 ms. Рекомендуется использовать только самые необходимые сторонние ресурсы и сделать так, чтобы они загружались в последнюю очередь. В анализируемом сайте таковым является Yandex Metrica.\n«Минимизируйте работу в основном потоке». Данный пункт подразумевает оптимизацию JS-кода, в которую входит удаление неиспользуемого кода, первоочередная загрузка только необходимых файлов, а также сжатие JS-файлов.\nПункт «Предотвратите чрезмерную нагрузку на сеть» выдаёт низкую оценку из-за неоптимизированных ресурсов сайта, к которым относятся изображения, стили, скрипты, текст и т.д. Способы их оптимизации рассмотрены в разделах выше.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nа для компьютеров\nДиагностика - Подробная информация о производительности вашего приложения. Эти цифры не влияют на показатель производительности напрямую\nЗадайте правила эффективного использования кеша для статических объектов — Найдено 54 ресурса\nА Настройте показ всего текста во время загрузки веб-шрифтов\nУменьшите влияние стороннего кода - Сторонний код заблокировал основной поток на 350 мс\n▲ Предотвратите чрезмерную нагрузку на сеть - Общий размер достиг 6 785 КБ А Сократите размер структуры DOM — 2184 элемента ■ Минимизируйте работу в основном потоке - 3,7 сек. Ш Сократите время выполнения кода JavaScript -2,4 сек.\nСократите глубину вложенности критических запросов - Найдено б цепочек\nПостарайтесь уменьшить количество запросов и размеры передаваемых данных -\n77 запросов ■ б 787 КБ\nДиагностика - Подробная информация о производительности вашего приложения. Эти цифры не влияют на показатель производительности напрямую\nЗадайте правила эффективного использования кеша для статических объектов —\nНайдено 54 ресурса\n▲\tНастройте показ всего текста во время загрузки веб-шрифтов\t~\nУменьшите влияние стороннего кода - Сторонний код заблокировал основной поток\nна 2 090 мс\n▲\tМинимизируйте работу в основном потоке — 12,8 сек.\t^\n▲\tПредотвратите чрезмерную нагрузку на сеть - Общий размер достиг б 784 КБ\t~ А Сократите время выполнения кода JavaScript — 9,5 сек. ~ А Сократите размер структуры DOM - 2 009 элементов\n( Сократите глубину вложенности критических запросов - Найдено 6 цепочек\t^\nПостарайтесь уменьшить количество запросов и размеры передаваемых данных —\n76 запросов • 6 785 КБ\nРис. 4. Диагностика сайта\n«Сократите время выполнения кода JS». В данном пункте снова говорится о необходимости оптимизации JS-кода. В анализируемом сайте таковыми файлами являются /metrika/tag.js - 740 ms, /buil d/public.js - 666 ms, .. .TYDIjJAqC.. ,/recaptcha_en.js - 121 ms.\nПункт «Сократите размер структуры DOM» информирует, что в анализируемом сайте имеется большое «дерево» DOM (от англ. Document Object Model - «объектная модель документа»). «Дерево» DOM состоит из объектов, которые называются узлами, например это элементы HTML, текстовое содержимое, закомментированный код - все их следует сократить. Оптимальным количеством узлов в DOM является 1 500 при глубине в 32 узла [16].\nПоследний раздел под названием «Успешные аудиты» демонстрирует параметры, которые не нуждаются в оптимизации и доработке (рис. 5). Они удовлетворяют требованиям поисковых машин и современных стандартов.\nДЛЯ КОМПЬЮТЕРОВ\nУспешные аудиты (8)\n•\tНастройте подходящий размер изображений\n•\tУменьшите размер кода CSS\n•\tУменьшите размер кода JavaScript\n•\tИспользуйте предварительное подключение к необходимым доменам\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tИзбегайте большого количества переадресаций\n•\tНастройте предварительную загрузку ключевых запросов\n•\tИспользуйте видеоформаты для анимированного контента\n•\tМетки и промежутки пользовательского времени\nQ ДЛЯ МОБИЛЬНЫХ\nУспешные аудиты (8)\n•\tНастройте подходящий размер изображений\n•\tУменьшите размер кода CSS\n•\tУменьшите размер кода JavaScript\n•\tИспользуйте предварительное подключение к необходимым доменам\n•\tИзбегайте большого количества переадресаций\n•\tНастройте предварительную загрузку ключевых запросов\n•\tИспользуйте видеоформаты для анимированного контента\n•\tМетки и промежутки пользовательского времени\nРис. 5. «Успешные аудиты» сайта\nТаким образом, по результатам авторского опыта использования и аудита можно сделать вывод о том, что многолетняя модернизация сетевых информационных ресурсов МЧС России носит исключительно положительный характер, становясь с каждой версией всё более технологичным и «приятным» в использовании инструментом получения жизненно важной информации. Существующие на сегодня недостатки, в основном относящиеся к низкой скорости загрузки сайтов, носят лишь временный характер и с помощью таких сервисов, как Google PageSpeed Insights, могут быть устранены посредством выполнения пошаговых рекомендаций.\nЛитература\n1.\tМЧС России. URL: http://www.mchs.gov.ru (дата обращения: 03.01.2020).\n2.\tНильсен Я., Лоранжер Х. Web-дизайн. Удобство использования Web-сайтов. М.: Вильямс, 2009.\n3.\tОб обеспечении доступа к информации о деятельности государственных органов и органов местного самоуправления: Федер. закон Рос. Федерации от 9 февр. 2009 г. № 8-ФЗ. Доступ из справ.-правовой системы «КонсультантПлюс».\n4.\tО Требованиях к технологическим, программным и лингвистическим средствам обеспечения пользования официальными сайтами федеральных органов исполнительной власти: приказ Министерства экономического развития Рос. Федерации (Минэкономразвития России) от 16 нояб. 2009 г. № 470 г. Доступ из справ.-правовой системы «КонсультантПлюс».\n5.\tМетодические рекомендации по внедрению принципов открытости в работу территориальных органов, организаций и учреждений центрального подчинения МЧС России (утв. МЧС России 22 дек. 2014 г. № 2-4-87-36-28). Доступ из справ.-правовой системы «КонсультантПлюс».\n6.\tComScore, Inc. «Rossiyskaya Digital industriya v 2015 godu» [Russian Digital Industry in 2015], 2015 г. URL: https://www.comscore.com/rus/Insights/Press-Releases/2015/11/comScore-releases-its-2015-Russia-DigitalFuture-in-Focus-Report (accessed: 18.11.2019).\n7.\tУолтер А. Эмоциональный веб-дизайн. СПб.: Изд-во «Символ-Плюс», 2012. 93 с.\n8.\tМаркотт И. Отзывчивый веб-дизайн. СПб.: Изд-во «Манн, Иванов Фербер», 2012.\n176 с.\n9.\tГоловач В. Дизайн пользовательского интерфейса. Usethics, 2005-2008. 97 c.\n10.\tУэйншенк С. 100 главных принципов дизайна. Как удержать внимание. СПб.: Изд-во «Питер», 2011. 272 с.\n11.\tМониторинг государственных сайтов. URL: https://gosmonitor.ru/ (дата обращения: 20.01.2020).\n12.\tGoogle PageSpeed Insights. URL: https://developers.google.com/speed/pagespeed/ insights/?hl=RU (дата обращения: 03.01.2020).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n13.\tДакетт Дж. Javascript и jQuery. Интерактивная веб-разработка. М.: Изд-во «Эксмо», 2017. 640 с.\n14.\tДакетт Дж.НТМЬ и CSS. Разработка и дизайн веб-сайтов. М.: Изд-во «Эксмо», 2013. 480 с.\n15.\tБЛОГ GETGOODRANK. URL: http://blog.getgoodrank.ru/vremya-zagruzki-sajta-vliyanie-na-nastroenie-polzovatelej/ (дата обращения: 20.01.2020).\n16.\tБИЗНЕС ОНЛАЙН. URL: https://business-online.su/blog/google-pagespeed-insights/ (дата обращения: 20.01.2020).\nReferences\n1.\tMCHS Rossii. URL: http://www.mchs.gov.ru (data obrashcheniya: 03.01.2020).\n2.\tNil'sen Ya., Loranzher H. Web-dizajn. Udobstvo ispol'zovaniya Web-sajtov. M.: Vil'yams, 2009.\n3.\tOb obespechenii dostupa k informacii o deyatel'nosti gosudarstvennyh organov i organov mestnogo samoupravleniya: Feder. zakon Ros. Federacii ot 9 fevr. 2009 g. № 8-FZ. Dostup iz sprav.-pravovoj sistemy «Konsul'tantPlyus».\n4.\tO Trebovaniyah k tekhnologicheskim, programmnym i lingvisticheskim sredstvam obespecheniya pol'zovaniya oficial'nymi sajtami federal'nyh organov ispolnitel'noj vlasti: prikaz Ministerstva ekonomicheskogo razvitiya Ros. Federacii (Minekonomrazvitiya Rossii) ot 16 noyab. 2009 g. № 470 g. Dostup iz sprav.-pravovoj sistemy «Konsul'tantPlyus».\n5.\tMetodicheskie rekomendacii po vnedreniyu principov otkrytosti v rabotu territorial'nyh organov, organizacij i uchrezhdenij central'nogo podchineniya MCHS Rossii (utv. MCHS Rossii 22 dek. 2014 g. № 2-4-87-36-28). Dostup iz sprav.-pravovoj sistemy «Konsul'tantPlyus».\n6.\tComScore, Inc. «Rossiyskaya Digital industriya v 2015 godu» [Russian Digital Industry in 2015], 2015 g. URL: https://www.comscore.com/rus/Insights/Press-Releases/2015/11/comScore-releases-its-2015-Russia-DigitalFuture-in-Focus-Report (accessed: 18.11.2019).\n7.\tUolter A. Emocional'nyj veb-dizajn. SPb.: Izd-vo «Simvol-Plyus», 2012. 93 s.\n8.\tMarkott I. Otzyvchivyj veb-dizajn. SPb.: Izd-vo «Mann, Ivanov Ferber», 2012. 176 s.\n9.\tGolovach V. Dizajn pol'zovatel'skogo interfejsa. Usethics, 2005-2008. 97 c.\n10.\tUejnshenk S. 100 glavnyh principov dizajna. Kak uderzhat' vnimanie. SPb.: Izd-vo «Piter», 2011. 272 s.\n11.\tMonitoring gosudarstvennyh sajtov. URL: https://gosmonitor.ru/ (data obrashcheniya: 20.01.2020).\n12.\tGoogle PageSpeed Insights. URL: https://developers.google.com/speed/pagespeed/ insights/?hl=RU (data obrashcheniya: 03.01.2020).\n13.\tDakett Dzh. Javascript i jQuery. Interaktivnaya veb-razrabotka. M.: Izd-vo «Eksmo», 2017. 640 s.\n14.\tDakett Dzh.HTML i CSS. Razrabotka i dizajn veb-sajtov. M.: Izd-vo «Eksmo», 2013.\n15.\tBLOG GETGOODRANK. URL: http://blog.getgoodrank.ru/vremya-zagruzki-sajta-vliyanie-na-nastroenie-polzovatelej/ (data obrashcheniya: 20.01.2020).\n16.\tBIZNES ONLAJN. URL: https://business-online.su/blog/google-pagespeed-insights/ (data obrashcheniya: 20.01.2020).\n",
    "download_url": "https://cyberleninka.ru/article/n/analiz-rezultatov-audita-setevyh-informatsionnyh-resursov-mchs-rossii/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/mnogochleny-ermita",
    "slug": "mnogochleny-ermita",
    "title": "Многочлены Эрмита",
    "abstract_description": "В статье рассмотрены многочлены Эрмита, их свойства и применение.",
    "full_text_body": "\n\n\n\n\uFEFF_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\n4.\tСократить HTML.\nСжатие HTML-кода (в том числе встроенного кода JavaScript или CSS) позволяет сократить объем данных, чтобы ускорить загрузку и обработку.\nСжатие кода на ресурсе https://www.gosuslugi.ru/ позволит уменьшить его размер на 4,4 КБ (21 %).\n5.\tСократить JavaScript.\nСжатие кода JavaScript позволяет сократить объем данных, чтобы ускорить загрузку, обработку и выполнение. Предлагается сократить код JavaScript на ресурсе\n«https://www.gosuslugi.ru/pgu/htdocs/js/2012/jquery. validate.js», чтобы уменьшить его размер на 3,4 КБ (33 %).\nВот главные направления, по которым возможно вести оптимизацию сайта Госуслуги РФ. Применение вышеперечисленных стратегий позволит значительно снизить время загрузки и повысить производительность сайта ЭГУ РФ, что в свою очередь будет способствовать увеличению количества пользователей.\nВ заключении необходимо отметить, что программирование является неотъемлемой частью написания сайта. На разработчиков сайтов возлагается ответственность не только за хороший интерфейс и визуализацию, но и за скоростные характеристики загрузки web-страницы. Выявить те или иные недостатки или причины, по которым скорость загрузки недостаточна, можно проведя тестирование сайта. Сеть Интернет может предложить множество бесплатных инструментов тестирования в режиме онлайн. С их помощью разработчики сайтов могут значительно упростить решение своих задач. Список использованной литературы\n1.\tЭкономика фирмы. Учебник. Под ред. Иващенко Н.П. - М.: Проспект, 21 янв. 2016 г. - 408 с.\n2.\tЭкономика инноваций: [учебник для студентов высших учебных заведений, обучающихся в магистратуре по экономическим специальностям] / А. И. Базилевич [и др.]; под ред. В. Я. Горфинкеля. - М: ВУЗОВСКИИ УЧЕБНИК, 2009 - 416 с.\n3.\tПоисковая оптимизация. Практическое руководство по продвижению сайта в Интернете. 3-е изд. Севастьянов Иван Олегович. Изд. дом Питер, 24 сент. 2015 г. - 272 с.\n4.\tКорпоративный веб-сайт на 100проц.: требуйте от сайта большего! Роман Овчинников. Изд. дом Питер, 26 мар. 2009 г. - 322 с.\n5.\tЗвоним через интернет. Экономим в 100 раз. Василий Леонов. Litres, 24 окт. 2014 г.\n6.\tСайт анализа скорости загрузки web-страниц: https://developers.google.com/speed/pagespeed/insights.\n7.\tСайт ЭГУ РФ: https://www.gosuslugi.ru.\n© Фандрова Л.П., Бурзянцева Е.Ю., 2016\nУДК-681.5.015\nФатеев Денис Сергеевич,\nбакалавр группы МП-42 Сабурова Виктория Владимировна,\nбакалавр группы МП-30 Сорока Владимир Григорьевич.\nбакалавр группы МП-45 Национальный исследовательский университет «МИЭТ», г. Москва\nE-mail: denisfateev94@mail.ru.com\nМНОГОЧЛЕНЫ ЭРМИТА Аннотация\nВ статье рассмотрены многочлены Эрмита, их свойства и применение.\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\nКлючевые слова\nМногочлены Эрмита ,разложение в ряд, полиномы Чебышева-Эрмита.\nМногочлены Чебышева-Эрмита—специальная система многочленов последовательно возрастающих степеней. В теории вероятностей полиномы Эрмита обычно определяются выражением:\n, dn\nHmath(x) = (-1)nex2/2_e-x2/2\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ndx\nВ физике обычно используется другое определение:\nn\nHnphys(x) = (-1)nex2^e-x2\nВ частности,\nЯ0 = 1,Я2 = 4х2 — 2, Я4 = 16х4 — 48х2 + 12.\nЯ! = 2х,Я3 = 8х3 — 12х, Многочлены Чебышева-Эрмита ортогональны на всей оси относительно веса е — х. Дифференциальное уравнение для\nУ = Яп (х). у\" — 2ху' + 2пу = 0\nРекуррентные формулы:\nЯп + 1(х) — 2хЯп (х) + 2пЯп — 1(х) = 0 я;(х) — 2пЯп-!(х) = 0[1]\nИногда за Нп принимают многочлены, отличающиеся от указанных выше множителями, зависящими от пд иногда в качестве веса берут e-3/2 . Основные свойства этой системы были изучены П. Л. Чебышевым(1859) и Ш. Эрмитом (1864).[2] Общее уравнение для многочленов Эрмита имеет вид:\n[!1 .. . . 1\nZ(_lVn!\tn(n-1) _ тп(п-1)(п-2)(п-3)\n(п — 2/)! 2 2\nСвойства\n1)Для любой функции, которая записывается как суперпозиция экспонент /(х) = £^=1 сйеЯй*можно записать следующее разложение по многочленам Эрмита:\nV\n/(х) = V ЛпЯп(х),Лп = ^ V cfcec\nn=0\t'fc=1\nРазложения известных гиперболических и тригонометрических функций имеют вид:\nt2n — ^ t2n+1 ch tx = е 2\t^„M, ^ tx = е 2 ^ (2n + 1)l^2W+i(x),\nn=0( )!\tn=0 (\n^\tt2n\tt2n+1\ncos tx = e 2 ¿(-1)П^ТУЯ2п(*), sintx = e 2 ¿(-1)\"(2n + ^ tf2n+i(*),\nn=0\t( )!\tn=0\t(\t)!\n2)Производная -ого порядка от многочлена Эрмита Hn(x), n > k также есть многочлен Эрмита: dk\n^Hn(x) = n(n - 1) ... (n-k + 1)Hn-k(x)\n3) Имеет место следующая формула сложения для многочленов Эрмита:\nИ )2\n(а? + a| + - + a2)2 |ai xi + a2 x2 + - + a2xn ■ H\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n+ ai + + an\nm1 m1\na\ta\" Я Я\nm1!\tmn! Hmi(Xl) Hmn(xn)\nmi+-mn=^\n= V a^\n= V m! mn! Hmi(\n+ Х2)\t= Лп^п(Х)[2]\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №5/2016 ISSN 2410-700X_\n4)Многочлен Hn(x) содержит члены только той же чётности, что и само число n: H2n(-x) = H2n(x),H2n+i(-x) = -H2n+i(x),n = 0,1,2, ...\nПрименение\nВ квантовой механике многочлены Эрмита входят в выражение волновой функции квантового гармонического осциллятора. В безразмерных переменных уравненияШрёдингера, которое описывает состояние квантового гармонического осциллятора, имеет вид:\nI ^п(л) =\nРешениями этого уравнения являются собственные функции осциллятора, которые отвечают собственным значениямАп = 2п + 1 . Нормированные на единицу, они записываются как:\nх2 (-1)п\n■фп(х) = р 2 —\tИ*г(г), п = п = 0,1,2, ...\nV2 Пп\\^п\nВ данном выражении используются именно «физические» многочлены ЭрмитаН^(х) . Многочлены Эрмита используются в решении одномерного уравнения теплопроводности^ — ихх = 0 на бесконечном интервале. Это уравнение имеет решение в виде экспоненциальной функциии(х, t) = gax+a2t . Поскольку такую функцию можно представить в виде разложения по многочленам Эрмита, а с другой стороны она может быть разложена в ряд Тейлора по а:\n7\tПП\nеах+а f = ln=o^Pn(*,t) [1] то функцииРп(х, t), которые являются решением уравнения теплопроводности и удовлетворяют\nначальному условиюРп(х, t = 0) = хп , выражаются через многочлены Эрмита следующим образом:\n2\n-yndy\nX \\ 1 Г+т (х-у)2\nДля получения последнего равенства был использован интеграл Пуассона — Фурье. В лазерной физике, а точнее - в теории открытых (оптических) резонаторов, многочлены Эрмита входят в выражение, описывающее распределение амплитуды в поперечном сечении соответствующей поперечной моды Эрмита-Гаусса (собственно, произведение одного из многочленов Эрмита и функции Гаусса), характерной для оптических резонаторов с прямоугольной формой зеркал резонатора.[2] Список использованной литература:\n1.\tЗорич В.А. Математический анализ М.: ФАЗИС; Наука; Ч.1. - 1997, 568с.; 4.II. - 1984, 640с.\n2.\tТихонов А.Н., Самарский А.А. Уравнения математической физики: 2-е изд., стер. — М.: Наука, 1969. — 288 с.\n© Фатеев Д.С., Сабурова В.В., Сорока В.Г. 2016\nУДК 004\nХлестова Дарья Робертовна\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСтудентка 2 курса ИУБП БашГУ, г. Уфа, РФ E-mail: dasha.hlestova@yandex.ru Попов Кирилл Геннадьевич к.э.н., доцент кафедры информационной безопасности БашГУ, г. Уфа, РФ\nE-mail: popovkg@mail.ru\nОСОБЕННОСТИ ЗАЩИТЫ КОНФИДЕНЦИАЛЬНОЙ ИНФОРМАЦИИ НА ПРЕДПРИЯТИЯХ\nАннотация\nВ данной статье рассматриваются особенности обеспечения защиты конфиденциальной информации\n",
    "download_url": "https://cyberleninka.ru/article/n/mnogochleny-ermita/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/k-voprosu-o-dostizhenii-maksimalnoy-proizvoditelnosti-ajax-prilozheniy",
    "slug": "k-voprosu-o-dostizhenii-maksimalnoy-proizvoditelnosti-ajax-prilozheniy",
    "title": "К вопросу о достижении максимальной производительности AJAX-приложений",
    "abstract_description": "Современные web-приложения практически не отличаются от настольных приложений по развитости пользовательского интерфейса, интерактивности. В свою очередь, это выдвигает высокие требования к их производительности. Для достижения максимальной производительности web-приложения необходимо минимизировать объем передаваемых данных и число запросов к web-серверу. В статье рассматриваются методы повышения скорости загрузки web-страниц, получившие наиболее широкое распространение.",
    "full_text_body": "\n\n\n\n\uFEFFТЕХНИЧЕСКИЕ НАУКИ TECHNICAL SCIENCES\nУДК 004.41/.42 ББК 32.973-018 42\nМедведев Ю.С.\nДоктор технических наук, профессор кафедры общеобразовательных дисциплин СевероКавказского филиала ФГБОУ ВПО «Российская академия правосудия», Краснодар, e-mail: ysm-73@yandex.ru Терехов В.В.\nКандидат технических наук, зав. 105 кафедрой механики филиала Военного учебно-ночного центра Военно-воздушных Сил «Военно-воздушная академия им. проф. Н.Е. Жуковского и Ю.А. Гагарина», Краснодар, e-mail: partner2002@front.ru\nК вопросу о достижении максимальной производительности\nAjax-приложений\n(Рецензирована)\nАннотация\nweb-\t-\nвитости пользовательского интерфейса, интерактивности. В свою очередь, это выдвигает высокие\n.\twebweb-\t.\nweb-\t,\n.\nКлючевые слова: web-прможение, web-cepeep, web-браузер, Ajax-пршожение.\nMedvedev Yu.S.\nDoctor of Technical Sciences, Professor of Department of General Education Disciplines, the North-Caucasus Branch of Russian Academy of Justice, Krasnodar, e-mail: ysm-73@yandex.ru\nTerekhov V.V.\nCandidate of Technical Sciences, Head of Mechanics Department 105, Branch of Military Education-Scientific Center of Military-Air Forces, Military-Air Academy named after Professor N.E. Zhukovsky and Yu.A. Gagarin, Krasnodar, e-mail: partner2002@front.ru\nHow to maximize an Ajax application's performance\nAbstract\nModern web applications do not differ in practice from desktop applications in the development of the user interface and interactivity. In turn, this puts forward high demands to their performance. To achieve maximum performance of your web application you need to minimize the amount of transmitted data and the number of requests to the web server. The paper discusses the methods of increasing speed of loading the most widespread web pages.\nKeywords: web application, web server, web browser, Ajax application.\nВ недалеком прошлом большинство web-ресурсов, как правило, содержало лишь копии традиционных источников информации в формате html. Со временем web-приложения перестали быть системами распространения статического контента. На сегодняшний день это распределенные персонализированные приложения уровня предприятия [1]. Разработка и поддержание таких программных комплексов является весьма сложной задачей.\nРазвитие технологий программирования на стороне web-браузера достаточно дол-\nго сдерживалось, т.к. web-браузеры обеспечивали весьма слабую совместимость, позволяя кроссбраузерно отображать только самые простые HTML-документы. Код более сложных web-приложений разрабатывался, как правило, для конкретной версии web-браузера [2].\nПоявление Rich Internet application (RIA, «богатое Интернет-приложение») позволило расширить круг решаемых задач и расширить сферу применения web-приложений. До появления технологии Ajax web-приложения выполнялись преимущественно на стороне web-сервера. Web-браузер в таком случае играл роль пассивного монитора, который отображал полученный с web-сервера HTML-документ. Управление поведением элементов пользовательского интерфейса осуществлялось путем полной перерисовки HTML-документа, полученного новым запросом с web-сервера, а это слишком тяжеловесное решение [2].\nВ противоположность классическому web-приложению, Ajax-приложение выполняется как на web-сервере, так и на web-клиенте, т.е. в web-браузере. Использование фонового (без перезагрузки основного HTML-документа) обмена данными между web-браузером и web-сервером позволяют создавать по-настоящему динамические web-приложения.\nВ настоящее время web-разработчики могут выбирать из широкого круга библиотек JavaScript, обеспечивающих кроссбраузерность (j Query, Prototype.js, YHOO UI и др.). Такие библиотеки реализуют базовые средства разработки приложений, компоненты пользовательского интерфейса, такие как Slider, Accordion, Data Picker, визуальные эффекты, технологию drag-and-drop. К положительным особенностям библиотек относятся профессиональный художественный дизайн и глубокая проработка каждого модуля библиотеки [1].\nСовременные многофункциональные web-приложения - это приложения, которые удобны для пользователя и обеспечивают функциональность, ставшую уже привычной для настольного (desktop) приложения. Они должны отвечать требованиям, предъявляемым к web-приложениям уровня предприятия. Перечислим некоторые из них [3]: наличие внешних (пользовательских) и внутренних (корпоративных) разделов сайта; единообразие внешнего вида всех генерируемых web-страниц; высокая производительность обслуживания пользователей.\nТеперь невозможно представить web-приложения без использования JavaScript, графических изображений, CSS. Загрузка, кэширование и отображение этих ресурсов требует значительного времени. Для достижения максимальной производительности web-приложения необходимо минимизировать объем передаваемых данных и число запросов к web-серверу. Перечислим некоторые методы повышения скорости загрузки web-страницы, получившие широкое распространение [1, 2]: кэширование данных на стороне сервера; кэширование web-страниц (на стороне сервера либо на стороне клиента); использование многоуровневой архитектуры FrontEnd-BackEnd; использование web-сервера, построенного по FSM (Finite State Machine), сжатие передаваемых данных средствами протокола HTTP. Все они в той или иной мере способствуют повышению производительности web-приложения и могут применяться как по отдельности, так и комбинироваться разработчиками web-приложений.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБольшое влияние на скорость загрузки имеет качественный программный код: применение производительных конструкций кода может дать ощутимый прирост производительности web-приложения. Скорость загрузки web-приложения также ухудшается при неявно закрытых тегах HTML. Web-разработчику следует помнить универсальное правило: web-приложение, соответствующее спецификации XHTML, быстрее загружается и отображается браузером. При помощи доступных в сети инструментов (например, Offline HTMLHelp.com Validator) можно осуществить такую проверку.\nЦелесообразно JavaScript-код главной страницы web-приложения размещать непосредственно в HTML-файле этой страницы. JavaScript-код, необходимый для других страниц, выносят в отдельные файлы, которые подгружаются динамически при отображении этих страниц web-приложения. Использование файлов с JavaScript-кодом большого размера также может негативно сказаться на работе web-приложения. В ряде случаев вместо этого целесообразно использовать несколько файлов меньшего размера, применять программные средства, такие как LazyLoad JavaScript для динамической загрузки сценариев, разбивая логику web-приложения на независимые модули.\nВ случае если тег <script> размещается (как зачастую рекомендуют в учебниках по HTML) внутри элемента <head>, то страница обрабатывается только после загрузки и выполнения JavaScript-кода. Этот недостаток устраняется размещением тега <script> перед закрывающим тегом </body>. Тогда визуально сайт загружается значительно быстрее.\nWeb-приложение должно проектироваться таким образом, чтобы оно функционировало и при отключенном JavaScript-коде. Это позволит вначале загружать файлы изображений и CSS, а определенная задержка загрузки JavaScript-кода будет некритичной. Оптимально, если необходимые ресурсы будут загружаться по запросу в случае необходимости.\nПрименительно к языку PHP высокую эффективность показали программы-акселераторы, позволяющие кэшировать скомпилированный байт-код [2]. Для кэширования неоткомпилированного кода предлагается использовать программу Memcached. Это может ускорить процесс обращения к базе данных [2]. Отмечается прирост производительности web-приложений в обоих случаях до 300% [2].\nДля уменьшения размеров файлов используют специальные утилиты (YUI Compressor, PngCrush, PngOptimizer). В файлах JavaScript и CSS удаляются лишние биты: удаляются пробелы, комментарии, переводы строк, заменяются на более короткие имена переменных. Изображения также оптимизируются. В результате объем файла уменьшается в среднем на 50-55%. Дополнительно на web-сервере файлы могут сжиматься утилитой GZIP. Суммарно такая обработка файлов может привести к уменьшению объема файлов на 80-85% [2].\nБиблиотеки JavaScript (Prototype, JQuery, Dojo, MooTools, YUI, ExtJS, и т.д.) дают возможность быстрой разработки web-компонентов, решают проблемы кросс-браузерной совместимости. При этом их применение целесообразно в том случае, если используется весь арсенал имеющихся средств. В противном случае разумнее использовать более легковесное решение - написать код JavaScript. Следует также ограничить число обработчиков событий в web-приложении, т.к. их чрезмерное использование также неминуемо скажется на производительности web-приложения.\nТехнология Ajax совершила настоящий прорыв, приблизив web-приложения к традиционным интерактивным настольным приложениям. При этом разработчики не должны забывать, что Ajax-запрос выполняет полный HTTP-запрос, что эквивалентно по затратам ресурсов перезагрузке всех страниц [2]. Поэтому количество Ajax-запросов для сложных web-приложений должно ограничиваться.\nДля динамичных интерактивных web-приложений характерна высокая нагрузка на сервер. Для повышения производительности применяют кеширование объектов, прежде всего графических изображений. Ведь зачастую объекты не изменяются, поэтому при последующих запросах они могут использоваться браузером повторно (к примеру, верхний (header) и нижний (footer) блоки web-страниц). Для загрузки измененных файлов, как правило, изменяют их имена, программно обновляя ссылки на них в web-приложениях, применяя сценарий сборки. Для оптимизации кеширования настраиваются соответствующим образом заголовки в запросах, передавая инструкции\nсерверу о сроке хранения ресурсов [2].\nОтдельного внимания заслуживает механизм взаимодействия с DOM. Производительность web-приложения в значительной мере можно повысить, грамотно используя стили вместо многократных перерисовок изображения страницы изменениями программного кода [1].\nУдаленные ресурсы, что очевидно, дольше загружаются по сети. Резервом увеличения производительности является использование сети доставки содержания (CDN), которая, кроме того, применяет gzip-сжатие и контроль за кешированием файлов [1, 2]. Распределение файлов по сети основывается на географическом расположении web-клиентов.\nАнализ сетевого трафика, вызванного загрузкой страницы web-приложения (количество HTTP-запросов, размер и количество загружаемых ресурсов, HTTP-заголовки, сведения о кэше для исследуемого файла и т.д.), можно осуществить с помощью расширений большинства современных браузеров: Firebug для Mozilla® Firefox®, Web Inspector для Safari®, Developer Tools для Chrome®, Developer Tools для Internet Explorer® 8 [1]. Такая диагностика позволяет выявить причины низкой производительности и повысить скорость работы web-приложения.\nРассмотренные в статье методы в отдельности могут не привести к значительному повышению производительности web-приложения, однако проведение комплекса предлагаемых мероприятий может значительно увеличить скорость загрузки сайта, что особенно актуально для web-приложений с большим трафиком.\nПримечания:\n1. Овчаренко А.В. Л]ах на примерах. СПб.: БХВ-Петербург, 2010. 432 с.\n2.\tХольцнер С. ]Риегу. Практическое применение.\n.:\t, 2010. 224 .\n3.\t.\t-\nграммных приложений. М.: Изд. дом «Вильямс», 2006. 540 с.\nReferences:\n1.\tOvcharenko A.V. The examples of Ajax use. SPb.: BHhV-Petersburg, 2010. 432 pp.\n2.\tHoltsner S. jQuery. Practical application. M.: Eskmo, 2010. 224 pp.\n3.\tFowler M. Architecture of corporate program applications. M.: «Williams» publishing house, 2006. 540 pp.\n",
    "download_url": "https://cyberleninka.ru/article/n/k-voprosu-o-dostizhenii-maksimalnoy-proizvoditelnosti-ajax-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-sbora-informatsii-o-posetitelyah-korporativnogo-veb-sayta",
    "slug": "metody-sbora-informatsii-o-posetitelyah-korporativnogo-veb-sayta",
    "title": "Методы сбора информации о посетителях корпоративного веб-сайта",
    "abstract_description": "Сеть Интернет предоставляет доступ к большому количеству информации большому количеству пользователей и, таким образом, возникает необходимость анализа поведения пользователей на корпоративном веб-сайте чтобы, определять качество посетителей, фиксировать наиболее успешные и проблемные зоны с точки зрения удобства использования, тестировать проводимые изменения.",
    "full_text_body": "\n\n\n\n\uFEFF25 декабря 2011 г. 3:37\nТЕХНОЛОГИИ ИНФОРМАЦИОННОГО ОБЩЕСТВА\nМетоды сбора информации о посетителях корпоративного веб-сайта\nСеть Интернет предоставляет доступ к большому количеству информации большому количеству пользователей и, таким образом, возникает необходимость анализа поведения пользователей на корпоративном веб-сайте чтобы, определять качество посетителей, фиксировать наиболее успешные и проблемные зоны с точки зрения удобства использования, тестировать проводимые изменения.\nАндрюков АА,\nк.т.н., доцент кафедры АИТСС\nВ последние годы основным средством хранен^ и распространения информации становится всемирная сеть Интернет. Люди всё чаще стали использовать Интернет для решена разнообразных задач. так как сеть Интернет предоставляет доступ к большому количеству информации для всех сфер деятельности. Таким образом возникает необходимость анализа поведения пользователей на корпоративном веб-сайте, во-первых, для анализа данных о пользователе, и, во-вторых, для обеспечения доступности к нужной для пользователя информации и разработки методов эффективного функционирования сайта на основании полученных данных.\nНа основе подобного веб-анализа можно:\n•\tулучшить удобство использования сайта;\n•\tувеличить долю клиентов среди посетителей;\n•\tувеличить число заказов;\n•\tоценить эффективность рекламы;\n•\tулучшить качество обслуживания;\n•\tпроанализировать роботу сайга.\nСоответственно, веб-аналитика — это измерение, сбор, анализ, наблюдение за закономерностями работы сайта, представление и интерпретация информации о посетителях веб-сайтов с целью улучшения и оптимизации работы сайта. Веб-аналитика делится на две главные категории: анализ поведения сайга в веб-системе (внешняя аналитика) и внутренний анализ самого сайга (внутренняя аналитика). Внешняя аналитика взаимодействует с системой измерений и оценивает потенциальную аудиторию сайта, а также фиксирует долю рекламного воздействия и анализирует вызываемый интерес к нему со стороны потенциальных посетителей Внутренняя аналитика отслеживает путь посетителя на сайте и наиболее полно оценивает эффективность сайга как с показательной, так и с коммерческой точки зрения. Все собранные донные сравниваются со всеми ключевыми показателями эффективности, и напрямую используются для повышения интереса целевой аудитории к работе сайта или рекламной кампании.\nВеб-аналитика помогает во многих аспектах развития сайта, основные из них:\n•\tразвитие функционала сайга, на основании тенденций в поведении посетителей;\n•\tоценка эффективности рекламных кампаний любого типа;\n•\tвыявление проблемных мест в навигации сайга.\nОсновной задачей веб-аналитики является мониторинг работы\nвебсайтов, на основании которого определяется веб-аудитория и изучается поведение веб-посетителей для принятия решений по развитию и расширению функциональных возможностей вебресурса [2].\nОднако, современная система анализа веб-сайта должна не только отслеживать, но и предсказывать поведение пользователя на основе уже собранной информации о других пользователях. Задача предсказания поведения может быть решена в рамках решения задачи классификации пользователей. Для этого нужно при первоначальном сборе информации составить таблицу \"объект-атрибут* Объект, в данном случае пользователь веб-сайта, описывается как набор атрибутов. Атрибут — свойство, характеризующее объект. Например: IP-адрес, страна, город время посещения, ссылка, по которой пришел пользователь, браузер и тд.\nКлассификащ« — это закономерность, позволяющая делать вывод относительно определения характеристик конкретных групп пользователей по непересекающимся множествам: случайный, потенциальный заказчик, злонамеренный и тд Решение задачи классификации по существу есть предсказание категории пользователей на основе выборки категориальных переменных.\nСуществует четыре основных способа сбора данных о пользователе, каждый из которых позволяет выявить тот или иной атрибут посетителя: веб-журналы (лот), веб-маяки, дескрипторы JavaScript и анализ пакетов [2].\nВеб-журноны являются первоначальным инструментом для сбора данных. И могут фиксировать большее количество данных, применимых для анализа. Преимущества использована веб-журналов в качестве механизма сбора данных следующие:\n•\tвеб-журналы — наиболее легкодоступный источник информации. Каждый веб-сервер обладает простым встроенным механизмом сбора данных и создания веб-журнала. Данные собираются независимо от того, используются они или нет;\n•\tвеб-журналы — единственный механизм сбора данных, способный фиксировать и хранить информацию о посещениях и поведении роботов поисковых систем на веб-сайге. Последние не выполняют дескрипторы JavaScript, а следовательно, не оставляют никаких следов для других механизмов сбора данных. Так, при необходимости проанализировать посещения роботами таких поисковых систем как Google, MSN (Microsoft NetwoHc — сеть Microsoft), Yahoo и других, чтобы удостовериться в просмотре и правильности индексирования ими веб-сайта, придется использовать веб-журналы;\n•\tпри использовании веб-журналов данными располагает сам владелец веб-сайта. При большинстве других методик информацию будет фиксировать, обрабатывать и хранить исполнитель веб-анализа;\nНедостатки использования веб-журналов в качестве механизма сбора данных:\n•\tвеб-журналы прежде всего предназначены для фиксации технической информации (ошибок 404, тенденций использования сервера, типов браузера). Они не оптимальны для сбора деловой или маркетинговой информации;\n•\tпри необходимости фиксировать дополнительную маркетинговую и коммерческую информацию потребуется взаимодействие с\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nT-Comm, #10-2011\nгруппой информационных технологий и полная зависимость от нее. Эго несхалько сложнее, чем у других механизмов сбора данных;\n•\tесли веб-сервер не устанавливает файлы cookie, идентификация посетителей с любой степенью точности сомнительна.\n•\tвеб-журналы создавались для фиксации всех обращении к серверу. Следовательно, при их использовании для получения точных тенденций трафика и поведения необходимо правильно отфильтровать запросы изображений, ошибки загрузки страниц трафик роботов, запросы файлов каскадных таблиц стилей (Cascading Style Sheet — CSS) и тд;\n•\tкеширование страниц провайдерами (ISP) и прокси-серверами может привести к тому, что часть трафика (порядка 10%) окажется неучтенной, поскольку когда в сети ISP запрашивает ту же страницу, которую кто-то другой уже запрашивал до него, ISP передаст ее из своего кеша и не будет запрашивать ее снова с веб-сервера. Следовательно, у владельца веб-сервера не появится в файле журнала запись об этом запросе.\nВеб-маяки — это прозрачные изображения размером 1x1 пиксель, которые помещают на веб-страницу при помощи дескриптора HTML [2]. Прозрачные изображения, как правило, находятся на сервере стороннего исполнителя отличном от сервера, содержащего веб-страницу. Преимущества использования веб-маяков в качестве механизма сбора данных следующие:\n•\tвеб-маяки легко реализуемы, поскольку они представляют собой лишь пару строк кода в оболочке дескриптора HTML, img srq\n•\tсуществует возможность точно указать» какие данные собирает маяк, например, только о просмотре страниц или включая время, значения файлов cookie, или реферрер, а поскольку роботы запросов изображений не выполняют, сбор нежелательных данных исключен. Это позволит поддерживать размер журнала в контролируемых пределах и не потребует сложной фильтрации;\n•\tвеб-маяки подходят при сборе данных для нескольких вебсайтов или доменов. Когда одинаковое содержимое размещается на нескольких сайтах или когда компания имеет множество сайтов в собственной сети, для облегчения сбора и хранения данных обо всех этих сайгах на одном сервере можно использовать маяси (со всех сайтов запрашивается тот же маяк). Это позволяет узнать, что происходит на всех веб-сайтах, следовательно, лучше представить содержимое посетителям. Фиксируемые данные менее глубоки, чем у других методик, но для конкретных специфических целей баннеры, электронная почта данная методика работает очень хорошо.\nНедостатки использования веб-маяков в качестве механизма сбора данных;\n•\tмаяки обычно ассоциируются с рекламой в сети, следовательно, люди не принимают их всерьёз. В результате большинство посетителей решительно отказались от получения рекламной рассылки по электронной почте, а также установили программу AniSpyware, автоматически удаляющую файлы cookie, что препятствует возможности сбора данных;\n•\tесли у пользователя отключены запросы изображений в программе электронной почты (в таких программах, как Microsoft Office Outlook и Gnxjil от Google) или браузере, то собрать данные о нем будет невозможно;\n•\tмаяки настраиваемы сложнее, чем дескрипторы JavaScript, с точки зрения фиксируемых данных. Они фиксируют меньшее количество информации, но могут делать это для широкого диапазона веб-сайтов;\n•\tмаяки взаимодействуют с серверами стороннего производителя и устанавливают файлы cookie последнего. Они подвержены более строгим ограничениям безопасности, вследствие чего браузеры (типа Internet Explorer) или не будут принимать их совсем или не\nбуду предъявлять файлы cookie стороннего исполнителя. Система защиты AntiSpyware также удаляет файлы cookie стороннего исполнителя, тем самым существенно ограничивает отслеживание повторных посещений.\nПри необходимости отслеживать поведение посетителя на нескольких веб-сайтах или частоту проверки электронной почты определенным пользователем веб-маяки являются оптимальным решением Но для улучшения аналитики веб-сайта следует полагаться на другие методы анализа донных Данные, фиксируемые маяками, менее исчерпывающие, чем данные предоставляемые дескрипторами JavaScript.\nВеб-маяки применимы также в электронной почте. Здесь, как и на веб-странице, в ходе загрузки электронной почты в приложение ее чтения запрашивается прозрачное изображение, и данные о доставке письма отсылаются обратно и записываются. К типичным данным, собираемым таким образом, относится сам факт получения и чтения сообщения, соответственно, адрес электронной почты и любые другие параметры, которые могут быть добавлены в конец запроса прозрачного изображения, встроенного в сообщение электронной почты. С распространением дескрипторов JavaScript использование веб-маяков стало менее популярным; обычно они применяются для отслеживания баннеров и сообщений электронной почты.\nДескрипторы JavaScript, подходят для более точного сбора большего количества данных. Информашя о сеансе посетителя фиксируется на других серверах (обычно серверах сторонних исполнителей веб-аналитики), обрабатывается там и предоставляется в виде отчета, доступного по сети [2]. Преимущества использования дескрипторов JavaScript в качестве механизма сбора данных следующие:\n•\tэта методика проще реализуется по сравнению с реализацией веб-журналов. Добавления нескольких стандартных строк кода JavaScript в глобальный элемент сайта (например, нижний колонтитул) оказывается вполне достаточным для всего сайта;\n•\tпри отсутствии непосредственного доступа к самим веб-серверам (технически) или журналам веб-сервера применение дескрипторов JavaScript- единственный способ получения информации. Дескрипторы на страницах можно установить самостоятельно, а для формирования отчетов использовать провайдера ASP;\n•\tкеширование страниц производится либо локально на компьютере посетителя, либо на фермах кеширования. Независимо от того, откуда загружается веб-страница, дескриптор Jcr/aScnpt выполняется, и инструмент веб-аналитики будет способен собрать данные;\n•\tналичие полного контроля над тем, какие именно данные нужно собирать. Существует возможность реализовать специальные дескрипторы на специальных страницах, позволяющие собирать дополнительные данные для этих страниц;\n•\tприменение дескрипторов JavaScript позволяет разделить сбор данных и их обслуживание. При использовании дескрипторов JavaScript выпуск сайта происходит быстрее, поскольку отдел информационных технологий не должен ничего проверять, кроме установки дескриптора на странице;\n•\tупрощается использование файлов cookie стороннего производителя, отслеживание пользователей на нескольких доменах, поскольку файлы cookie стороннего производителя и их идентификационные элементы остаются неизменными при посещении пользователем нескольких доменов, где установлены те же дескрипторы JavaScript.\nНедостатки использования дескрипторов JavaScript в качестве механизма сбора данных:\nТ-Comm, # 10-2011\n•\tне у всех посетителей веб-сайта разрешено выполнение кеда JavaScript, для защиты личной информации пользователи отключают его. Об этих пользователях платформа аналитики не сможет собрать никаких данных. Данные, собираемые при помощи дескрипторов JavaScript, отделены от других метаданных Следовательно, понадобится более тщательное обдумывание и планирование при создании дескриптора, который будет фиксировать таксономию сайта и его иерархию с учетом оптимальности анализа. По мере развития сайта это может превратиться в процесс, требующий регулярного обслуживания;\n•\tсбор данных при помощи дескрипторов JavaScript базируется на \"стороне браузера\", а не на \"стороне сервера\". Некоторые вебсайты, вместо того чтобы хранить донные в файлах cookie или параметрах URI, хранят их в течение сеанса посетителя на сервере. Следовательно, дескрипторы не зафиксируют существенной информации. Если стратегия подразумевает содержание ключевых данных на сервере, а не в браузере, то дескрипторы могут не подойти;\n•\tфиксация данных о загрузке (например, файлов PDF или EXE) и переадресации при помощи дескрипторов JavaScript сложнее, чем с использованием веб-журналов.\nПрименение дескрипторов JavaScript при сборе данных следует рассмотреть в первую очередь. Большинство новых разработок в веб-аналитики совершенствуют инструменты в области использования дескрипторов JavaScript. Их применение может быть оптимальным при необходимости управления собираемыми данными.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nАнализ пакетов — один из наиболее техн^ески сложных способов сбора веб-данных. Анализаторы пакетов - это дополнительный слой между клиентом и веб-страницей. В результате возникает две важные проблемы: объем работ по конфигурации решения анализатора пакетов, чтобы он исследовал только необходимые данные из всех доступных, вторая проблема - безопасность. Необработанные пакеты позволяют фиксировать все данные, включая такие как пароли, имена, адреса и номера кредитных карточек(2].\nПри использовании большинства решений анализа пакетов для правильного сбора всех данных, необходимых при оптимальном анализе, понадобятся дескрипторы JavaScript. Без них анализатор пакетов не получит данных о котируемых страницах (поскольку в этом случае на веб-сервер никаких запросов не поступоет), невозможность получения данных от файлов Adobe Flash, Ajax и улучшенных приложений Интернета (Rich Internet Application - RIA). Эти автономные файлы поступают на браузер посетителя, и большая часть\nАмллтдтор\n-га\nСУБД \"о0ь«кт- ГЩ1 атрибут”\nВ**> <г*|*в*ч>\n6«1>'ЖУ|>ИМ .... kl\nС«рв«р аиллим\n8«*'» МЛЯКОв N\nJavaScript две*рипторов\nРис. 1. Процесс сбора данных в системе анализа пользователей\nвзаимодействия с ним происходит там, следовательно, не отмечается традиционным анализатором пакетов, поскольку ресурс улучшенного взаимодействия не передает никаких запросов на сервер, неспособность собрать информацию о базовой структуре и метаданных страниц Кроме того, анализ пакетов может оказаться дорогим при наличии множества веб-серверов в разных сетях, в этом случае приходится устанавливать программное обеспечение или аппаратные средства во всех сетях.\nНа рис. 1 изображена система сбора данных о пользователе, использующая все четыре метода.\nПакеты пользователя поступают на веб-сервер через анализатор пакетов (если установлен), и веб-сервер прежде чем начать сеанс связи передаёт информацию в виде веб-маяков и/или JavaScript дескрипторов на сервер (обычно внешний). Также вся информация о сеансе записывается в журнал (лог). Вся эта информация должна поступить но сервер СУБД где она будет извлечена, структурирована и помещена в таблицу \"объект-атрибут\". Далее эта информация может использоваться любыми системами анализа данных, такими как SAS Enterprise Miner, любыми OLAP-системами и др [ 1 ].\nЛитература\n1\tБергвр A. Microsoft SQL Server 2005 AncJysis Ser/ices. OLAP и много-мерньй анализ денных. Спб: БХВ-Летербург, 2007, 928.\n2\tКоамс А Веб-аналитжа. Анализ информации о посетителях веб-сайтов. — М.: Диалектика, Вильямс, 2009, 464.\nT-Comm, # 10*2011\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-sbora-informatsii-o-posetitelyah-korporativnogo-veb-sayta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/the-hybrid-compiler-targeting-javascript-language",
    "slug": "the-hybrid-compiler-targeting-javascript-language",
    "title": "The hybrid compiler targeting JavaScript language",
    "abstract_description": "Статья посвящена созданию прототипа новой виртуальной машины языка JavaScript. Работа основана на платформе Tizen, которая использует HTML5 и JavaScript для разработки приложений. Производительность и потребление памяти JavaScript-программ на существующих машинах хуже по сравнению с С++ или С# приложениями. В нашей работе мы попытались уменьшить разрыв по производительности между JavaScript и другими языками.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.453\nAyrapetyan R.B.1, Gavrin E.A.21, Shitov A.N.21\n1 Samsung Research Center, Moscow, Russia 2 Lomonosov Moscow State University, Moscow, Russia\nTHE HYBRID COMPILER TARGETING JAVASCRIPT LANGUAGE\nAbstract\nThe article is devoted to the prototyping of a new JavaScript virtual machine. The work is based on the Tizen platform, which uses HTML5 and JavaScript for application development. The performance and memory consumption of JavaScript programs on existing machines is worse compared to C ++ or C # applications. In our work, we tried to reduce this gap between JavaScript and other languages.\nKeywords\nJavaScript; virtual machine; just-in-time compilation; optimization.\nАйрапетян Р.Б.1, Гаврин Е.А.2,1, Шитов А.Н.2,1\n1 Исследовательский! Центр Самсунг, г. Москва, Россия 2 Московский государственный университет имени М.В. Ломоносова, г. Москва, Россия\nГИБРИДНЫЙ КОМПИЛЯТОР ДЛЯ ДИНАМИЧЕСКОГО ЯЗЫКА ПРОГРАММИРОВАНИЯ\nJAVASCRIPT\nАннотация\nСтатья посвящена созданию прототипа новой виртуальной машины языка JavaScript. Работа основана на платформе Tizen, которая использует HTML5 и JavaScript для разработки приложений. Производительность и потребление памяти JavaScript-программ на существующих машинах хуже по сравнению с С++ или С# приложениями. В нашей работе мы попытались уменьшить разрыв по производительности между JavaScript и другими языками.\nКлючевые слова\nJavaScript; виртуальная машина; динамическая компиляция; оптимизация.\nIntroduction\nIn this paper we cover our work dedicated to creating a prototype of novel JavaScript execution engine. The work is inspired by the Tizen platform, which announces HTML5 and JavaScript as the main approach for developing applications. The performance and memory consumption of JavaScript-based programs on existing engines is worse comparing to native or Java applications. In our work we tried to reduce this gap between JavaScript and other languages.\nCommon architecture of JavaScript engine is a virtual machine, which consists of several execution layers. First one is fast interpreter or fast code generator, second and next are more heavyweight and better optimizing compilers. Modern JavaScript engines, like Google's v8 [1], Apple's JavaScriptCore [2] and Mozilla's SpiderMonkey [3] have this structure. The drawback of this approach is that every run starts\nfrom parsing of JS source code and engine requires some time to compile the code and accelerate execution.\nOur main idea is to apply a novel hybrid approach of virtual machines design: to mix JIT and AOT compilation. Basic way of execution is the same as in v8 and JavaScriptCore, but only for the first run. During first run we cache additional data, which improves performance of the application. This data includes profile information, including seen types, and generated native code. Moreover, we perform full compilation of the application between executions, which means that not only \"hot\" regions, but all JavaScript code will be highly optimized. After revealing new optimization opportunities application becomes more and more optimized. At some point, for example if the whole application was compiled, it is possible to disable incremental updates of cached information and just execute the native binary.\nWe implemented a prototype of a hybrid JavaScript engine. In comparison to v8 engine on LongSpider [4] benchmark (extended version of SunSpider [5] benchmark) it shows 40% performance and 25% memory improvement, which proves that hybrid approach for running JavaScript applications is efficient.\nBase design and implementation\nWe took the JerryScript [6] project as the base. JerryScript is an ultra-lightweight JavaScript engine for internet of things. Its main feature is low memory consumption. As our solution is targeting mobile platform, therefore low memory consumption is an important feature we tried to inherit from JerryScript solution.\nJerryScript is an interpreter. It parses source code into bytecode and then executes bytecode instructions step by step. JerryScript also has a feature of saving bytecode to snapshot and starting execution from it. For us this feature is a quite early prototype of hybrid compilation.\nJerryScript is targeting small devices, therefore it is not designed for high performance. So at first we implemented its core parts to reach our performance goals.\nValue representation\nFor dynamically-typed languages there is an issue with specifying a structure, which can represent any type of the language.\nA union of all possible types, tagged by object type field, can be utilized. The disadvantage of this approach is that small values (e.g., integer) are stored as packaged (boxed) values, and their access is performed via an auxiliary pointer. JerryScript has this extra indirection in values access.\nHigh performance implementations of JavaScript language utilize tagged pointers. This means that some additional information is stored inside a pointer. This is possible due to the fact that the minimum memory size is 4 bytes and the two least significant bits of a pointer are equal to zero and can be used for storing auxiliary data. For example, all of the real pointers can be marked by setting the least significant bit, and pack integers into values with the zeroed least significant bit (31-bit integers). This approach is utilized in V8.\nThe minimum memory block equals to 8 bytes in JavaScriptCore and SpiderMonkey engines. Pointer, integer, double numbers as well as some additional types can be packed in such a block. This technique is called nan-boxing [7]. In High-Performance JavaScript engine we chose this representation.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nFast property access\nAnother important thing is to provide fast access to object's properties and methods. In general case to access a property in object a dynamic lookup inside a table of properties is required. To optimize the lookup procedure we dynamically create hidden classes behind\nthe scenes the same way as V8 does [8]. Each object has associated runtime hidden class that describes the structure of the object and the displacement of specific properties therein. This allows to make access to the object's properties as fast as in the languages in which the object structure is predetermined and could not be changed during program execution.\nWe take advantage of using another commonly used technique for optimizing dynamically typed languages called inline caching [9]. High performance JavaScript Engine maintains a cache of the type of objects, which were seen during bytecode interpretation. By assuming that future operations would happen with the same types, instruction handlers are replaced with more specific, which process only those concrete types.\nDynamic machine code generation\nIt is impossible to achieve performance comparable to industrial engines by doing only interpretation of JavaScript code. All mature solutions generate native code on the fly. We utilize LLVM [10] as a backend and implement optimizing compiler using its JIT infrastructure.\nDuring runtime execution hot regions are detected and compiled for those types which were seen during previous execution. Consequently, we need to generate type checks in order to verify that types seen during interpretation and types during native code execution match. Several checks are generated for each instruction, which leads to a pretty big overhead.\nThere is a number of circumstances, which force a fall back from native code to interpreter, for example, mismatch of types. This situation is called a bailout. The tricky thing is restoration after bailouts. In this case several compiled functions could call each other and the inner-most could cause a bailout, which would require interpreter's frame reconstruction.\nHybrid compilation\nThe key concept of this project was hybrid compilation: combination of just in time and ahead of time compilation. To do this we cache additional information about some program internals:\n•\tSource code\n•\tBytecode\n•\tType information (inline caches)\n•\tCompiled code\nIn the first run we execute in a traditional way and save the specified information into the snapshot file. When the application is executed again, inline caches and native code are loaded from cache, making the execution very fast immediately after the start, removing the necessity of accumulation of the type information and detection of hot loops.\nAnother beautiful thing is that snapshot contains all required information to perform complete compilation of the application. This is done offline (between application executions), if offline compilation succeeds, and no bailouts occur during next run of the\napplication, optimizing compiler will be never called, which significantly reduces memory consumption.\nThe overall design of the engine is show on Fig. 1.\nEngine as\nstatic library\nEngine as\nLLVM IR\nLanguage-Oriented optimizer\nI\nLanguage optimizations Uses profile (Type feedback] Type inference Emits LLVM\nLLVM Optimizer\nExecution\nTable 2. Comparison of engine's performance 2 board\nFigure 1: Overall design of High-Performance JavaScript Engine on Raspberry Pi\nHigh-Performan\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nBenchmark\tGoogle V8 (seconds)\tce JavaScript Engine (seconds)\n3d-cube.js\t10.98\t2.89\n3d-morph.js\t20.34\t22.36\n3d-raytrace.js\t16.59\t0.62\naccess-binary-trees.js\t17.5\t22.1\naccess-fannkuch.js\t6.25\t13.21\naccess-nbody.js\t16.03\t31.26\naccess-nsieve.js\t6.1\t7.92\nbitops-3bit-bits-in-byte.js\t0.66\t0.6\nbitops -b its -in-byte.js\t2.11\t1.47\nbitops-nsieve-bits.js\t16.52\t19.22\ncontrolflow-recursive.js\t10.99\t15.1\ncrypto-aes.js\t17.08\t0.37\ncrypto-md5.js\t27.21\t21.14\ncrypto-shal.js\t33.27\t30.01\nmath-cordic.js\t23.53\t2.63\nmath-partial-sums.js\t24.03\t14.77\nmath-spectral-norm.js\t13.61\t39.37\nstring-fasta.js\t23.84\t11.73\nTotal (seconds and geometric mean)\t286.64\t256.77\n3d-morph.js\t11060\t8680\n3d-raytrace.js\t26020\t19088\naccess-binary-trees.js\t30424\t116864\naccess-fannkuch.js\t6564\t4160\naccess-nbody.js\t7308\t4604\naccess-nsieve.js\t86316\t83864\nbitops-3bit-bits-in-byte.js\t6132\t3972\nbitops-bits-in-byte.js\t6128\t3940\nbitops-nsieve-bits.js\t18904\t17172\ncontrolflow-recursive.js\t6304\t4388\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ncrypto-aes.js\t15936\t8936\ncrypto-md5.js\t40732\t7860\ncrypto-shal.js\t81824\t62988\nmath-cordic.js\t8480\t4192\nmath-partial-sums.js\t9416\t4216\nmath-spectral-norm.js\t7904\t4160\nstring-fasta.js\t8916\t4532\nTotal (kilobytes and geometric mean)\t390104\nTable 3. Comparison of engine's memory consumption on ARM32\nThis feature allowed us to perform full compilation of longspider benchmarks starting from the second run and beat v8 on longspider (see tables 2-3).\nIn next section we cover optimization techniques that we utilized in the project.\nOptimizations\nOne of the big challenges is to achieve good quality of generated native code. To achieve this goal the optimizing compiler has to support several things:\n•\tRepresenting temporary values as unboxed values;\n•\tInlining;\n•\tOptimizations, such as global value numbering (GVN) and loop-invariant code motion (LICM).\nHigh-\nPerforman\nBenchmark\tGoogle V8\tce\n(kilobytes)\tJavaScript\nEngine\n(kilobytes)\n3d-cube.js\t11736\t56068\nUnboxing reduces memory pressure and permits usage of effective native machine instructions. Inlining improves performance and permits more optimizations to occur.\nJIT compiler optimizations\nIn our project we reused optimizations, integrated into LLVM infrastructure. We have several scenarios for compilation. One is just-in-time compilation. For this case we enable only part of LLVM optimizations to make compilation faster. Another case is offline compilation. For it we turn on the maximum number of optimizations to achieve best code quality.\nLLVM is a mature project which covers almost all possible optimizations for static languages, but it is not enough for JavaScript. Bluntly compiled code has JavaScript-specific semantics and contains a lot of type checks and accesses to boxed objects, which break many of LLVM optimizations. LLVM compiler has nothing to do with it.\nThis fact forced us to implement additional analysis layer to resolve JavaScript-specific things and generate as low-level code as possible, so that LLVM optimizations would work fine on it.\nIn next sections we discuss optimizations, which are implemented on the analysis layer.\nType-check elimination\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nAs it was mentioned in the previous sections, type checks are required to provide correct execution of compiled code.\nEach byte code instruction has input operands. In general case type of each operand of the instruction is checked, which gives too much overhead. Many checks could be removed, for example, if several instructions have the same input variable, and there are no writes to the variable between those instructions, one check is enough.\nOptimizer's task is too remove as many redundant checks as possible.\nWe implemented analysis which find checks that could be avoided. Simple version works per a single basic block: it tracks all reads and writes to a variable and, when there are several consecutive reads, all the checks, except first read, are removed. More complex, per-function type-check elimination tracks reads/writes from incoming basic blocks and analyses cycles.\nFixed arrays\nJavaScript arrays are pretty complicated as their size can change during execution, their elements could contain any type, they can contain holes and any object could be used as an array. This forces to have complicated runtime support for performing operations on arrays from native code.\nWe implemented support for arrays compilation, even if they are not used in static way: arrays are not obliged to have fixed size and uniform contents.\nProfile-based dead code elimination\nJavaScript applications tend to contain pretty big amount of dead code. Close look at longspider [4] benchmark revealed that its tests also could be significantly optimized by applying dead code elimination techniques.\nBasic technique of dead code elimination that we used is to analyse byte code fragment and determine that output operands are never used, which means that instructions, which produce those operands, are obsolete. There are also several tricky cases that we covered.\nstring-fasta benchmark performs a big amount of string operations but it is clear that most of them are redundant. For instance, there is the following code: ret += seq.substring(seqi, seqi+lenOut).length; This fragment calculates length of a substring and the substring itself is not used. We win in this case by not doing any real operations on a string and calculating only the length.\nAnother case is from 3d-raytrace benchmark. It has main cycle with a call to a pair of functions inside of it:\ntestOutput\t=\narrayToCanvasCommands(raytraceScene());\nOn every iteration the same scene is rendered. This functions itself intensively allocate objects and contain global object accesses. So they are not pure. But in fact on each iteration they access only objects which were created on the same iteration. We implemented the optimization which tracks generations of objects and determines that created and accessed objects always belong to the same iterations, which proves that in fact these functions are pure and their result value can be cached.\nTrace-based compilation\nThis optimization is a tricky case of eliminating redundant computations. This was primarily targeted for cases, like in the access-binary-trees benchmark, which performs the following:\nfor ( var n = 4; n <= 16; n += 1 ) { var minDepth = 4;\nvar maxDepth = Math.max(minDepth + 2, n); var stretchDepth = maxDepth + 1;\nvar check = bottomUpTree(0,stretchDepth).itemCheck();\nvar longLivedTree = bottomUpTree(0,maxDepth); for (var depth=minDepth; depth<=maxDepth; depth+=2){\nvar iterations = 1 << (maxDepth - depth + minDepth);\ncheck = 0;\nfor (var i=1; i<=iterations; i++){ check +=\nbottomUpTree(i,depth).itemCheck(); check += bottomUpTree(-\ni,depth).itemCheck(); }\n}\nret += longLivedTree.itemCheck();\n}\nThis particular loop contains a big amount of calls to bottomUpTree(..).itemCheck(). Output value of this calls modify check variable. But in the middle of the loop there is a store of zero to the check variable. This store discards all previous modifications of this variable, therefore all previous calls to itemCheck() function are redundant. Straight-forward dead code elimination techniques do not work in this case.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nOur approach is to break compiled region parts to blocks of independent computations and record a trace of the blocks' execution without performing actual computations with except of those, which are necessary to track control flow. The trace is optimized to remove blocks, which compute unused values, and is replayed to perform only those of actual computations, which are actually necessary.\nThe final trace contains only few calls to bottomUpTree(..).itemCheck() and the loop executes significantly faster.\nConclusion\nIn our work we implemented prototype of a hybrid JavaScript engine, which combines ahead of time and just in time compilation approaches. As far as we know, for the current moment this is the first existing hybrid implementation of a JavaScript engine. Our prototype is targeting Tizen platform, which claims Web technologies in general and JavaScript in particular, as the main way of application development. This allows us to assume that source JavaScript code is always located on a device and we can perform its optimization offline. We cache type information, bytecode and native code which provide us all required knowledge to perform fully-optimized offline compilation. By utilizing this technique, we achieve 40% performance improvement over Google's v8 engine.\nOur work is an early prototype and we plan to extend optimizations that we have developed to more general cases.\nReferences\n1.\tChrome V8. https://developers.google.com/v8.\n2.\tJavaScriptCore. https://developer.apple.com/reference/javascriptcore.\n3.\tSpiderMonkey. https://developer.mozilla.org/ru/docs/SpiderMonkey.\n4.\tWebKit / LongSpider, 2016. https://github.com/WebKit/webkit/tree/master/PerformanceTests/LongSpider.\n5.\tWebKit. SunSpider JavaScript Benchmark, 2017. https://webkit.org/perf/sunspider/sunspider.html\n6.\tGavrin, E., Lee, S. J., Ayrapetyan, R., & Shitov, A. (2015, October). Ultra-lightweight JavaScript engine for internet of things. In Companion Proceedings of the 2015 ACM SIGPLAN International Conference on Systems, Programming, Languages and Applications: Software for Humanity (pp. 19-20). ACM.\n7.\t\"Value representation in JavaScript implementations\", https://wingolog.org/archives/2011/05/18/value-representation-in-javascript-implementations.\n8.\tDesign elements of V8 https://developers.google.com/v8/design.\n9.\tAdaptive Optimization for SELF: Reconciling High Performance with Exploratory Programming, Urs Holzle, 163p.\n10.\tLLVM compiler infrastructure. http://llvm.org/.\n11.\tHolzle, U., Chambers, C., AND Ungar, D. 1991. Optimizing dynamically-typed object-oriented languages with polymorphic inline caches. In Proceedings of the ECOOP '91 Conference. Lecture Notes in Computer Science, vol. 512. Springer-Verlag, Berlin.\nПоступила: 10.05.2017\nОб авторах:\nАйрапетян Рубен Борисович, ведущий инженер-программист отдела компиляции, Исследовательский\nЦентр Самсунг, cv.ru@samsung.com Гаврин Евгений Александрович, аспирант факультета вычислительной математики и кибернетики, Московский государственный университет имени М.В. Ломоносова; руководитель отдела компиляции, Исследовательский Центр Самсунг, eugene. a. gavrin @ gmail. com Шитов Андрей Николаевич, аспирант факультета вычислительной математики и кибернетики, Московский государственный университет имени М.В. Ломоносова; ведущий инженер-программист отдела компиляции, Исследовательский Центр Самсунг, sand1k@yandex.ru\nNote on the authors:\nAyrapetyan Ruben, leading engineer-programmer of Compilation Department, Samsung Research Center, cv.ru@samsung.com\nGavrin Evgeny, Postgraduate Student of Faculty of Computational Mathematics and Cybernetics, Lomonosov Moscow State University; Head of Compilation Department, Samsung Research Center, eugene.a.gavrin@gmail.com\nShitov Andrey, Postgraduate Student of Faculty of Computational Mathematics and Cybernetics, Lomonosov Moscow State University; engineer-programmer of Compilation Department, Samsung Research Center, sand1k@yandex.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/the-hybrid-compiler-targeting-javascript-language/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/ispolzovanie-veb-soketov-v-internet-prilozheniyah",
    "slug": "ispolzovanie-veb-soketov-v-internet-prilozheniyah",
    "title": "Использование веб-сокетов в Интернет приложениях",
    "abstract_description": "При разработке многопользовательских веб-приложений разработчики сталкиваются с рядом проблем, среди которых можно выделить нагрузку на сервер и оптимизацию работы приложения. Данные проблемы призван решить протокол, работающий поверх TCP соединения websocket. Позволяющий оптимизировать передачу данных и снизить нагрузку на сервер за счет поддержания открытого соединения между клиентом и сервером.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004\nТехнические науки\nПрокин А. А., преподаватель факультета довузовской подготовки и среднего профессионального образования, ФГБОУ ВО «Мордовский государственный университет им. H.П. Огарёва», г. Саранск Рузманов А. А., студент факультета довузовской подготовки и среднего профессионального образования, ФГБОУ ВО «Мордовский государственный университет им. H.П. Огарёва», г. Саранск E-mail: aaprokin90@yandex. ru\nИСПОЛЬЗОВАНИЕ ВЕБ-СОКЕТОВ В ИНТЕРНЕТ ПРИЛОЖЕНИЯХ\nАннотация: При разработке многопользовательских веб-приложений разработчики сталкиваются с рядом проблем, среди которых можно выделить нагрузку на сервер и оптимизацию работы приложения. Данные проблемы призван решить протокол, работающий поверх TCP соединения - websocket. Позволяющий оптимизировать передачу данных и снизить нагрузку на сервер за счет поддержания открытого соединения между клиентом и сервером.\nКлючевые слова: веб-сокет, асинхронность, протокол, соединение, оптимизация.\nAbstract: When developing multi-user web applications, developers are faced with a number of problems, among which are the load on the server and the optimization of the application. These problems are designed to solve the Protocol running on top of TCP connection - web socket. Allows you to optimize data transfer and reduce the load on the server by maintaining an open connection between the client and the server.\nKeywords: web socket, asynchronous, protocol, connection, optimization.\nРазвитие интернет индустрии не стоит на месте. Каждый день создаются тысячи новых проектов. Большинство из них является отчасти уникальным, если обращать внимание на технологию создания. И все больше проектов стали строиться с помощью системы реального времени. Под системой реального времени понимается характеристика, которая может быть измерена реальными физическими часами, в отличие от логического времени, определяющего лишь качественную характеристику, выражаемую относительным порядком следования событий. Для реализации данной системы был разработан веб-сокет.\nВеб-сокет (Web Socket) - это протокол, который создает интерактивное соединение между клиентом и сервером для обмена данными в режиме реального времени [1]. В отличии от HTTP протокола, который построен на модели «запрос - ответ» веб-сокеты позволяют установить соединение между клиентом и сервером, и сохранять его пока это необходимо. Что позволяет значительно ускорить обмен данными между пользователями и сервером. С появлением AJAX в 2005 году все больше людей начали работать над созданием двунаправленных соединений.\nПротокол web socket основан на работе протокола TCP что способствует созданию приложений реального времени. Приложение реального времени позволяет пользователям получать или отправлять информацию сразу же после публикации, без необходимости периодического опроса источника информации. Таким образом, приложение дает пользователям ощущение того, что действия происходят в данный момент, без малейших задержек. Это в большей части осуществляется за счет асинхронных запросов с клиента на сервер и с сервера на клиент (рисунок 1).\nАсинхронность в наше время является очень популярной темой. Начиная от довольно нового языка программирования Go, заканчивая различными JS фреймворками [3; 6]. Асинхронное программирование обычно используют при написании серверной части приложения для сетевого взаимодействия. Но бывают и элементы пользовательского интерфейса, завязанные на\nасинхронности. В частности, отличным решением использования веб-сокета является реализация чата, массивных многопользовательских игр или инструмента для пирингового взаимодействия.\nРисунок 1 - Визуализация клиент-серверного взаимодействия.\nХотелось бы отметить, что веб-сокеты поддерживаются большинством браузеров без использования сторонних плагинов и приложений, поэтому внедрение данной технологии не потребует значительных изменений и дополнительных программных ресурсов.\nВзаимодействие клиента с сервером приложения веб-сокет проходит в несколько этапов [2; 4]:\nа)\tУстановка соединения или рукопожатие (handshake).\nб)\tСоздание обработчиков событий: onopen (соединение создано), onclose (соединение закрыто), onmessage (пришло сообщение от сервера), onerror (ошибка при работе веб-сокетов).\nв)\tОтправка сообщений (фреймов) на сервер.\nТем самым позволяя общаться клиенту с сервером асинхронно в режиме реального времени. Благодаря такой связке клиента и сервера снижается нагрузка на сервер и ускоряется передача данных. Так как веб-сокет основан на клиент-серверном соединении, то для реализации данного протокола требуется внедрение кода как на стороне сервера, так и на клиенте приложения.\nТеперь, когда мы разобрались что такое веб-сокеты и асинхронные запросы можно поговорить о том, с помощью чего их можно реализовать. Возможность работы с веб-сокетами реализована во многих языках программирования, но полноценно эта технология раскрывается в Node.js.\nNode.js - это серверная платформа, работающая на движке V8 (транслирующем JavaScript в машинный код), превращающая JavaScript из узкоспециализированного языка в язык общего назначения. Node.js добавляет возможность JavaScript взаимодействовать с устройствами ввода-вывода через свой API написанный на C++, подключать другие внешние библиотеки, написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода. Собственно говоря, платформа Node.js и была разработана для решения задачи быстрого и удобного взаимодействия клиента c сервером.\nГлавным плюсом Node.js по сравнению с другими платформами является то, что в ней уже изначально можно использовать методы асинхронного программирования, тем самым делая связку с веб-сокетом еще более результативной.\nПодводя итоги получаем достаточно существенные плюсы при использовании веб-сокетов [1; 5]:\nа)\tвысокая динамичность интерфейса и данных из-за обновления в режиме реального времени;\nб)\tотсутствие необходимости в кэшировании;\nв)\tэкономия трафика из-за передачи только изменений;\nг)\tзначительный спад сетевой и серверной нагрузки;\nд)\tналичие событийно-ориентированной схемы дает возможность отслеживать изменения данных в реальном времени. И в целом говоря о веб-\nсокетах можно отметить, что технология достаточно привлекательная и удобная. Все больше разработчиков начинают использовать данную технологию в своих проектах.\nБиблиографический список:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tВеб-сокеты: боевое применение. [Электронный ресурс]. -URL:https://habr.com/post/162301/ (Дата обращения 01.04.2019).\n2.\tАсинхронность: назад в будущее. [Электронный ресурс]. -ЦКЬ:https://habr.com/post/201826/ (Дата обращения 01.04.2019).\n3.\tВеб-сокеты в каждый дом. [Электронный ресурс]. -URL:https://hharek.m/веб-сокеты-в-каждый-дом (Дата обращения 01.04.2019).\n4.\tПрокин А. А. Современное состояние и основные проблемы интернет-торговли в российской федерации / А. А. Прокин, В. А. Богатырская, Е. С. Сергушина, И. С. Листратов // Е-Бсю. - Саранск, 2018 - № 3 (18). - С. 36-41.\n5.\tПрокин А. А. Создание и актуальные проблемы продвижения \"трансрегионавтоматика \") / А.А. Прокин, В. А. Богатырская, Е. С. Сергушина, Е. В. Кренделев // Е-Бсю. - 2018 - № 4 (19). - С. 263-268.\n6.\tПрокин А. А. Основы разработки эффективного веб-сайта / А. А. Прокин, В. А. Богатырская, Е. С. Сергушина, В. Ю. Клипиков // Е-Бсю. -Саранск, 2018 - № 3 (18). - С. 12-17.\n",
    "download_url": "https://cyberleninka.ru/article/n/ispolzovanie-veb-soketov-v-internet-prilozheniyah/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sravnitelnoe-testirovanie-yazykov-programmirovaniya",
    "slug": "sravnitelnoe-testirovanie-yazykov-programmirovaniya",
    "title": "Сравнительное тестирование языков программирования",
    "abstract_description": "Данная статья посвящена исследованию влияния языка программирования на эффективность и надежность программного обеспечения. Известно, что выбор языка программирования влияет на характеристики создаваемых программ. В данной работе производится сравнение ведущих языков программирования (C, C#, Java, JavaScript, RUST, Go и Swift) с помощью тестирования написанных на них программ. Для получения объективных и сравнимых результатов на каждом языке программирования написана программа, которая решает одну задачу вычисление фрактала Мандельброта одним и тем же способом. Были выбраны следующие характеристики: скорость выполнения, объем используемой памяти и лаконичность исходного кода. В результате было выделено несколько языков-лидеров в своей области, ни один язык программирования не стал лучшим по всем критериям.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.438 ББК З973.2\nС О. ИВАНОВ, Д.В. ИЛЬИН, И.Ю. БОЛЬШАКОВ\nСРАВНИТЕЛЬНОЕ ТЕСТИРОВАНИЕ ЯЗЫКОВ ПРОГРАММИРОВАНИЯ\nКлючевые слова: языки программирования, тестирование, фрактал Мандельбро-та, C, C#, Java, JavaScript, RUST, Go, Swift.\nДанная статья посвящена исследованию влияния языка программирования на эффективность и надежность программного обеспечения. Известно, что выбор языка программирования влияет на характеристики создаваемых программ. В данной работе производится сравнение ведущих языков программирования (C, C#, Java, JavaScript, RUST, Go и Swift) с помощью тестирования написанных на них программ. Для получения объективных и сравнимых результатов на каждом языке программирования написана программа, которая решает одну задачу - вычисление фрактала Мандельброта одним и тем же способом. Были выбраны следующие характеристики: скорость выполнения, объем используемой памяти и лаконичность исходного кода. В результате было выделено несколько языков-лидеров в своей области, ни один язык программирования не стал лучшим по всем критериям.\nВ настоящее время существует огромное количество языков программирования. Их более 2500, но наиболее значимых - около 700, и это без учета их диалектов. Споры от том, какой среди них лучший, ведутся давно. Существует объективно наблюдаемая разница в работе программ, написанных на разных языках. Так, например, функциональный язык SISAL в 6 раз медленнее C и в 2,5 раза больше использует оперативную память [6]. В каждом языке имеет место определенная зависимость между выразительностью языка и его эффективностью, а также существует множество других критериев, по которым можно оценить язык программирования. Таким образом, задача выбора языка программирования является сложной, многокритериальной задачей с большим (теоретически бесконечным) количеством оцениваемых объектов.\nВыбор «живого» перспективного языка важен и для обучения, и для написания оптимальной программы как по производительности, так и по скорости написания и удобству дальнейшего сопровождения. Так, например, у ведущих языков программирования отсутствуют возможности для уточнения, автоматической верификации, безопасности [9]. С необходимостью выбора языка программирования чаще всего сталкиваются программисты при изучении первого языка программирования. Здесь на выбор первого языка программирования оказывает влияние множество факторов: дидактические, педагогические, отраслевые и технологические [7]. В работе [1] отмечено, что выбор самими учащимися подходящего языка программирования для решения конкретной задачи повышает их интерес к изучаемой дисциплине. Правильный выбор средств и инструментов оказывает существенное влияние на результат любого инженерного проекта, особенно для таких критических систем, как космические спутники [2, 4].\nСуществуют различные подходы к решению проблемы выбора языка программирования. В данной статье производится сравнение «продвинутых»\nязыков программирования с традиционными «ведущими» языками для выявления «перспективных» языков.\nОсобенности сравнения языков программирования. Среди огромного количества существующих языков программирования широко используются около 50. В различных рейтингах, например в TIOBE Index [13], учитываются только 100 наиболее популярных. Поэтому выбор языка программирования можно сократить до 100 из постоянно обновляемого списка TIOBE Index.\nЯзыки программирования используются для различных задач. Хотя большинство языков являются универсальными, некоторые являются более подходящими для конкретных целей. Можно выделить следующие независимые группы целей: прототипирование (скорость) - проверка концепций и экспериментирование; переносимость (легкость) - многократно используемый, свободно распространяемый код; производство (надежность) - создание ПО для заказчика, быстрый, надежный, системный код. Таким образом в каждой категории будет свой язык-«лидер».\nТак как язык программирования - это абстрактное описание вычислительного процесса, то объективно измерить можно только сам процесс и его результаты. Суть подобных методов сравнения языков программирования заключается в том, что оценивается код программы, написанной на разных языках. При этом следует учитывать разницу между языком программирования и программой при использовании этого метода и интерпретации результатов.\nРассмотрим особенности этого метода сравнения языков программирования.\n1.\tЗависимость от задачи. Некоторые языки предназначены для решения определенных задач, поэтому выбор задачи для тестирования оказывает существенное влияние на результаты. Наиболее распространенный подход к выбору задач [5, 6, 8] - это использовать вычислительно трудоемкие задачи, такие, как функция Аккермана, тринолиномы, серии экспоненциальных функций и др. В других работах [11, 12] задачи акцентированы на возможностях языка по распараллеливанию вычислений - проблемы Куочена (Cowichan), синхронизации и «бутылочного горлышка», эффективности коммуникации. Все предыдущие тесты основаны на реальных задачах из практики, что позволяет говорить о существовании оптимальных решений, на нахождение которых ориентированы языки программирования и программисты. Для проверки других случаев используются синтетические тесты [3, 10], проверяющие комбинации операций -whetstone, перебор комбинаций вариантов выполняемых действий.\n2.\tЗависимость от алгоритма. Алгоритм решения выбранных задач также оказывает влияние на результаты сравнения, так как языки программирования предоставляют разные вычислительные примитивы (абстракции, конструкции). В работе [6] отмечают сильное влияние на производительность кода выбора рекурсии вместо итерации. Работы [11, 12] посвящены оценке влияния различных подходов к распараллеливанию на эффективность программы. Необходимо отметить также влияние на производительность программы эффективности реализации операций над структурами данных (массивы и списки) и средств ввода-вывода (необходимость дополнительного перекодирования данных).\nТаким образом, для сопоставимости результатов программы для каждого языка должны быть либо самыми производительными, либо точно следовать\nодному алгоритму. Для нахождения наилучших программ для решения определенной задачи на разных языках можно использовать системы, используемые в олимпиадах по программированию. Этот подход используется в существующем проекте [5].\n3.\tЗависимость от компилятора. Компиляторы отличаются возможностями оптимизации и параметрами компиляции - результаты тестирования одной и той же программы, скомпилированной с разными параметрами, могут существенно отличаться. Для усложнения оптимизации в работе [3] используются трудно оптимизируемые для компиляторов выражения. Многие компиляторы для разных языков программирования используют также одинаковый «back-end», например llvm для clang, swift, rust и т.п., который выполняет окончательную оптимизацию и генерацию кода. Таким образом результаты тестирования в первую очередь будут показывать, насколько хорошо работает «back-end» и насколько удобен язык программирования для него.\n4.\tЗависимость от платформы. Достаточно очевидным фактом является то, что производительность компьютерной платформы непосредственно влияет на результаты выполнения кода. Так, например, машина Тьюринга теоретически может выполнить любую известную вычислительную задачу, но на практике ее реализация совершенно неэффективна и по удобству программирования, и по размеру кода, и по эффективности вычислении. Поэтому для сопоставимости результатов необходимо либо использовать только одну платформу для всех тестов, либо ввести поправочный коэффициент. Для вычисления коэффициента можно использовать результаты выполнения одного и того же эталонного кода. Кроме производительности платформы обладают различным набором вычислительных средств и компонент среды, что делает невозможным проведение некоторых тестов, например в некоторых случаях необходимо наличие веб-браузеров и сетевых средств [10].\nКритерии тестирования. Рассмотрим критерии, с помощью которых можно оценить языки программирования:\n1)\tскорость выполнения - время, затрачиваемое на выполнение программы - показывает производительность языка;\n2)\tиспользуемая память - объем необходимой оперативной памяти -показывает экономичность языка;\n3)\tразмер исходного кода - количество символов в программе без учета разделителей - показывает лаконичность языка;\n4)\tразмер результирующей программы - размер исполняемой программы - показывает громоздкость получаемых программ;\n5)\tподдерживаемые абстракции - набор конструкций и парадигм -показывает удобство языка;\n6)\tподдерживаемые специальные средства - количество компонент для решения специальных задач - показывает развитость языка;\n7)\tпопулярность среди программистов и работодателей - распространенность языка - показывает перспективность языка.\nСкорость выполнения программы можно считать основным критерием оценки языка программирования. С учетом используемых объемов памяти сегодня объем используемой памяти и размер результирующей программы не\nсущественны. Оценить популярность языка можно по специальным индексам, например TIOBE Index [13].\nДля сравнения языков программирования были выбраны следующие критерии: время работы программы от запуска до конца ее выполнения; количество символов в исходном коде программы данного языка.\nТестирование языков программирования. Для сравнения были выбраны известные языки программирования: C, C#, Java, JavaScript, RUST, Go и Swift. На каждом из приведенных языков была написана линейная программа, которая выводила символьный рисунок фрактала Мандельброта размером 4096 на 4096 символа. Все программы имели один алгоритм и имели идентичные типы используемых переменных. Пример программы на языке С:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n#include <stdio.h> #include <stdlib.h>\ndouble bias = 5.0; int maxIter = 64;\nchar mandelbrot(double p, double q){ double x = 0; double y = 0; char res = 0;\nwhile((x*x + y*y < bias) && (res < maxIter)){ double x1 = x, y1 = y; x = x1*x1 - y1*y1 + p; y = 2*x1*y1 + q;\nres++; }\nreturn res; }\nint main(int argc, char **argv){\ndouble fac;\nchar *buf;\nint xi,yi;\nint size = 1024;\nif(argc > 1){\nsscanf(argv[1], \"%d\", &size); }\nfac = 2.0 / size;\nbuf = (char *)calloc(size*size+1,sizeof(char));\nfor(yi=0; yi<size; yi++){\nfor(xi=0; xi<size; xi++){\ndouble y = (yi*fac - 1.0);\ndouble x = (xi*fac - 1.0);\nbuf[yi*size+xi] = mandelbrot(x,y)+ '0'; }\nbuf[yi*size + size - 1] = '\\n'; }\nbuf[size*size] = 0;\nprintf(\"Mandelbrot: %d, %d\\n\",size,size); puts(buf);\nfree(buf); }\nВсе тесты были выполнены на выделенной удаленной машине, на которой была установлена ОС Ubuntu Server 16.04. Результаты приведены в таблице.\nРезультаты тестирования\nЯзык программирования\tСреднее время выполнения, с\t\t\tКоличество символов\nобщее\tвне ядра\tв ядре\tс пробелами\tбез пробелов\nRUST\t2:46\t2:34\t0:04\t953\t612\nC\t2:90\t2:09\t0:13\t813\t618\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nJavaScript\t3:22\t3:20\t0:17\t768\t591\nSwift\t4:23\t0:13\t0:19\t857\t806\nJava\t4:21\t2:90\t0:24\t1418\t881\nGo\t7:09\t6:20\t0:97\t750\t575\nC#\t7:49\t6:17\t0:27\t1161\t750\nВ данном эксперименте по скорости выполнения программы новый системный язык программирования RUST оказался быстрее, чем классический системный язык Си. Язык Go по общему времени выполнения не оказался на последнем месте, но затратил существенно больше времени на вычисления, чем остальные языки. Схожие по синтаксису и возможностям языки программирования Java и C# показали одинаковую скорость вычисления, но на запуск программы на C# ушло больше времени.\nСамым лаконичным языком оказался Go, а самым избыточным Java, что соответствует принципам, использовавшимся при их создании.\nВыводы. Сравнение языков программирования способом тестирования программ, написанных на них, используется давно. В настоящее время основное внимание уделяется тестированию возможностей параллелизации и оптимизации. Но применение этого метода это сложная, многокритериальная задача, так как выразительность языка программирования зависит от его синтаксиса, а эффективность - от платформы, на которой выполняют программу. Поэтому однозначно выбрать лучший язык программирования невозможно, необходимо в зависимости от выбранных целей расставлять приоритеты между критериями. Например, по популярности среди работодателей уже несколько лет подряд первое место занимает язык программирования Java, который отстает по скорости и избыточен по синтаксису. При выборе языка программирования стоит помнить, что плохие, «неудачные» языки вымирают, поэтому выгоднее изучать перспективные языки.\nЛитература / References\n1.\tAparanji U., Kumar V. Improving Classroom Discussions of Programming Assignments via Language Choice. Proc. of 2016 IEEE Eighth Int. Conf. on Technology for Education (T4E), 2017. DOI: 10.1109/T4E.2016.017.\n2.\tBlanco-Cuaresma S., Bolmont E. What can the programming language Rust do for astrophysics? Proc. of the Int. Astronomical Union, IAU Symposium, 2017, vol. 325, pp. 341-344.\n3.\tCurnow H.J., Wichmann B.A. A synthetic benchmark. Comput J 1976; 19 (1): 43-49. doi: 10.1093/comjnl/19.1.43\n4.\tGarrido J., Zamorano J., de la Puente J.A., Alonso A., Salazar E. ADA, the Programming Language of Choice for the UPMSat-2 Satellite. DAta Systems in Aerospace, Proceedings of the conference held 19-21 May, 2015 in Barcelona, Spain. Edited by L. Ouwehand. ESA-SP vol. 732, 2015, id. 41.\n5.\tGouy I. The Computer Language Benchmarks Game. Available at: http://benchmarks-game.alioth.debian.org.\n6.\tHammes J., Wim Bohm A.P. On the Performance of Functional Programming Languages on Realistic Benchmarks. PDPTA, 1997, pp. 296-304.\n7.\tIvanovic M., Budimac Z., Radovanovic M., Savic M. Does the choice of the first programming language influence students' grades? CompSysTech '15 Proc. of the 16th Int. Conf.on Computer Systems and Technologies. Dublin, Ireland, 2015, pp. 305-312.\n8.\tKnoebel A. Benchmarks of programming languages for special purposes in the space station. NASA. Marshall Space Flight Center Research Reports: 1986 NASA (ASEE Summer Faculty Fellowship Program), 1986, 20 p.\n9.\tKoenig J., Rustan K., Leino M. Programming Language Features for Refinement. EPTCS 209, 2016, pp. 87-106. DOI: 10.4204/EPTCS.209.7\n10.\tKuutila M., Mantyla M., Raulamo-Jurvanen P. Benchmarking Web-testing - Selenium versus Watir and the Choice of Programming Language and Browser. eprintarXiv:1611.00578. 2016. 40 p.\n11.\tNanz S., West S., Soares da Silveira K. Benchmarking Usability and Performance of Multicore Languages. Proc. of the 7th ACM-IEEE Int. Symp. Empirical Software Engineering and Measurement (ESEM13), 2013, pp. 183-192. doi:10.1109/ESEM.2013.10\n12.\tRicciA., Ben-Gurion G.W., RikenA.Y. Proceedings of the 2013 workshop on Programming based on actors, agents, and decentralized control. SPLASH '13 Conference on Systems, Programming, and Applications: Software for Humanity. ACM New York, 2013, pp. 115-126.\n13.\tTIOBE Index. Available at: https://www.tiobe.com/tiobe-index (Accessed 01.05.2017).\nИВАНОВ СЕРГЕЙ ОЛЕГОВИЧ - старший преподаватель кафедры математического и аппаратного обеспечения информационных систем, Чувашский государственный университет, Россия, Чебоксары (v101-11@mail.ru).\nИЛЬИН ДМИТРИЙ ВЛАДИМИРОВИЧ - кандидат физико-математических наук, заведующий кафедрой математического и аппаратного обеспечения информационных систем, Чувашский государственный университет, Россия, Чебоксары (destr@mail.ru).\nБОЛЬШАКОВ ИВАН ЮРЬЕВИЧ - студент IV курса факультета информатики и вычислительной техники, Чувашский государственный университет, Россия, Чебоксары.\nS. IVANOV, D. ILIN, I. BOLSHAKOV BENCHMARK OF PROGRAMMING LANGUAGES\nKey words: programming languages, benchmark, Mandelbrot Fractal, C, C#, Java, JavaScript, RUST, Go, Swift.\nThis article is devoted to studying the influence of a programming language on the efficiency and reliability of software. It is known that the choice of a programming language has a strong influence on the programs characteristics that are being created. In this paper we compare the leading programming languages: C, C #, Java, JavaScript, RUST, Go and Swift, using the testing ofprograms written on them. The features of this method of comparison and their influence on results are considered. To obtain the objective and comparable results in each programming language, the program is written that solves one task - the calculation of the Mandelbrot fractal, using the same algorithm. Among the available characteristics, the following were selected: the speed of execution, the amount of memory used, and the conciseness of the source code. As a result, several languages-leaders in their field were determined, but no programming language has become the best by all the criteria.\nIVANOV SERGEY - Senior Lecturer of Math and Hardware Information Systems Department, Chuvash State University, Russia, Cheboksary (v101-11@mail.ru).\nILIN DMITRY - Candidate of Physical and Mathematical Sciences, Head of Math and Hardware Information Systems Department, Chuvash State University, Russia, Cheboksary.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nBOLSHAKOV IVAN - Student of Informatics and Computing Faculty, Chuvash State University, Russia, Cheboksary.\nСсылка на статью: Иванов С.О., Ильин Д.В., Большаков И.Ю. Сравнительное тестирование языков программирования // Вестник Чувашского университета. - 2017. - № 3. - С. 222-227.\n",
    "download_url": "https://cyberleninka.ru/article/n/sravnitelnoe-testirovanie-yazykov-programmirovaniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/tehnologiya-razrabotki-odnostranichnogo-veb-prilozheniya-na-platforme-angular-8",
    "slug": "tehnologiya-razrabotki-odnostranichnogo-veb-prilozheniya-na-platforme-angular-8",
    "title": "Технология разработки одностраничного веб-приложения на платформе Angular 8",
    "abstract_description": "Приводится пример разработки одностраничного веб-приложения на платформе Angular 8. Рассмотрены различные аспекты в разработке одностраничных веб-приложений, а также преимущества и недостатки их применения. Описаны наиболее популярные JavaScript фреймворки для создания одностраничных веб-приложений. Разработана диаграмма развертывания приложения, разработанного по архитектуре REST с применением фреймворка Spring и СУБД PostgreSQL. На основании проведенной работы сделаны выводы о целесообразности применения рассматриваемой технологии.",
    "full_text_body": "\n\n\n\n\uFEFF\nУДК-004.422.81\nТЕХНОЛОГИЯ РАЗРАБОТКИ ОДНОСТРАНИЧНОГО ВЕБ-ПРИЛОЖЕНИЯ НА ПЛАТФОРМЕ ANGULAR 8\nА. В. Сулыз, А. Н. Панфилов\nЮжно-Российский государственный политехнический университет (НИИ) имени М. И. Платова (г. Новочеркасск, Российская Федерация)\nПриводится пример разработки одностраничного веб-приложения на платформе Angular 8. Рассмотрены различные аспекты в разработке одностраничных веб-приложений, а также преимущества и недостатки их применения. Описаны наиболее популярные JavaScript фреймворки для создания одностраничных веб-приложений. Разработана диаграмма развертывания приложения, разработанного по архитектуре REST с применением фреймворка Spring и СУБД Postgre SQL. На основании проведенной работы сделаны выводы о целесообразности применения рассматриваемой технологии. Ключевые слова: веб-программирование, UML, диаграмма развертывания.\nTECHNOLOGY OF DEVELOPING A SINGLE-PAGE WEB APPLICATION ON THE\nANGULAR 8 PLATFORM\nA. V. Sulyz, A. N. Panfilov\nPlatov South-Russian State Polytechnic University (NPI) ( Novocherkassk, Russian Federation)\nThis paper gives an example of developing a single-page web application on the Angular 8 platform. Various aspects in the development of single-page web applications, as well as the advantages and disadvantages of their application, are considered. Various JavaScript frameworks are considered, which are the most popular for creating single-page web applications. A deployment diagram has been developed for a REST architecture application using the Spring framework and Postgre SQL DBMS. Based on the work done, conclusions are drawn on the appropriateness of using the technology in question.\nKeywords: web development, UML, deployment diagram.\nВведение. В настоящее время все большую популярность при веб-разработке набирают одностраничные приложения SinglePageApplication (SPA). За последние несколько лет SPA получили широкое распространение для создания панелей инструментов приложений, реализованных по форме Softwareas a service (SaaS), а также для интернет-сервисов в целом. Данные веб-приложения имеют как ряд преимуществ, так и недостатков.\nИз-за ряда новых технологий, применяемых в SPA, изменяется и архитектура разрабатываемого веб-приложения. Понимание структуры и протоколов связи компонентов такого сайта может стать трудной задачей для впервые столкнувшегося с ней разработчика. В данной работе рассматривается структура компонентов SPA на примере диаграммы развертывания UML с применением конкретных технологий.\nПреимущества и недостатки SPA-Основными преимуществами данных приложений являются [1]:\n- высокое быстродействие за счет того, что большинство ресурсов таких как HTML, CSS, JavaScript загружаются только один раз, изменяются только данные;\n-\tупрощен поиск ошибок, поскольку почти каждым веб-браузером предоставляются инструменты для отслеживания сетевых операций, исследования элементов страницы и их данных;\n-\tсуществующие фреймворки для создания SPA позволяют использовать один и тот же код для создания кроссплатформенных приложений;\n-\tSPA позволяет эффективно кешировать данные в локальном хранилище, что позволяет использовать данные даже в автономном режиме.\nОднако наряду с указанными преимуществами есть и недостатки:\n-\tпроблемная поисковая оптимизация веб-приложения (SEO) за счет того, что все данные страницы загружаются с помощью AJAX;\n-\tпо сравнению с традиционными веб-приложениями SPA менее безопасны;\n-\tутечки памяти движка JavaScript могут привести к замедлению работы системы.\nПопулярные реализации 8РЛ.Несмотря на вышеприведенные недостатки фреймворки для\nразработки SPA развиваются и пользуются большой популярностью. Среди наиболее популярных веб-фреймворков можно выделить следующие [2]:\n-\tAngular является старейшим фреймворком для создания SPA. Разработан компанией Google в 2010 году и до 2016 носил название Angular.js. В 2016 был выпущен Angular.js 2, который по сути являлся совершенно новым фреймворком и, чтобы избежать путаницы, его переименовали в Angular;\n-\tReact является фреймворком разработанным компанией Facebook в 2013 году. Он пользуется популярностью и поддержкой сообщества и имеет множество сторонних библиотек и расширений;\n-\tVue.js является самым молодым фреймворком, разработанным бывшим сотрудником Google в 2014 году и, в настоящий момент, поддерживается лишь группой энтузиастов. Тем не менее, по качеству реализации он держится на уровне своих конкурентов и догоняет их по популярности.\nПример реализации SPA. SPA обычно взаимодействуют с приложениями на стороне вебсервера по архитектуре RepresentationalStateTransfer (REST). REST — это архитектурный стиль взаимодействия компонентов приложения в сети. На сегодняшний день он практически вытеснил все остальные стили, в том числе SimpleObjectAccessProtocol (SOAP) и WebServicesDescriptionLanguage (WSDL). Рассмотрим пример использования технологии SPA в связке с SpringBoot и СУБД PostgreSQL.\nSpring— это фреймворк для создания веб-приложений на Java. Он обеспечивает комплексную модель разработки и конфигурации для современных бизнес-приложений для любых платформ. Его основными возможностями являются внедрение зависимостей, аспектно-ориентированное программирование, создание RESTful веб-сервисов и многое другое [3].\nДля реализации технологии SPA может быть выбран фреймворк Angular 8. Основные возможности Angular: двустороннее связывание, позволяющее динамически изменять данные в одном месте интерфейса при изменении данных модели в другом, шаблоны, маршрутизация и так далее. Одной из ключевых особенностей Angular является то, что в качестве языка программирования используется TypeScript. Несмотря на то, что другие фреймворки пользуются большей популярностью, разработчики компаний все равно продолжают использовать его в своих проектах [4].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИз диаграммы развертывания, приведенной на рис. 1 видно, что для развертывания SPA в браузере пользователю достаточно иметь поддержку JavaScript, которая присутствует во всех веб-\nL4QQ/J\nбраузерах, однако, он может быть отключен пользователем. В этом случае SPA не будет работать. В другом случае, при использовании SPA в качестве мобильного приложения, будет создано полноценное прикладное приложение, основной компонентой которого будет среда NativeScript или, в случае использования React,—ReactNative. При этом стоит отметить, что Angular при запуске его в контейнере NodeJs компилирует код из TypeScript в JavaScript. Такой подход позволяет программисту писать на TypeScript код, который не имеет привязки к определенной версии JavaScript, что позволяет единожды написать программу и компилировать под нужную версию языка. Данная задача обусловлена тем, что различные веб-браузеры могут не поддерживать новые стандарты JavaScript.\nРис. 1. Диаграмма развертывания приложения на Angular 8\nЗаключение. Таким образом можно сделать следующие заключения:\n-\tSPA отличаются быстродействием и кроссплатформенностью, но, в тоже время, имеют низкий уровень безопасности;\n-\tAngular 8 является наиболее популярным фреймворком на текущий момент для реализации SPA, однако, в скором времени его могут заменить конкуренты, пользующиеся большей поддержкой сообщества.\nРезультаты данной работы могут пригодится для понимания структуры современного SPA, основных рисках и преимуществах, связанных с их применением, а также получения представления о современной ситуации в веб-разработке.\nБиблиографический список\n1. Single-page application vs. multiple-page application [Электронный ресурс] / Medium. — Режим доступа: https://medium.com/@NeotericEU/single-page-application-vs-multiple-page-application-2591588efe58 (дата обращения : 10.01.2020).\nL4QQ/J\n2. React vs Angular vs Vue.js — What to choose in 2019? (updated) [Электронный ресурс] / Medium. — Режим доступа : https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d (дата обращения : 10.01.2020).\nдоступа :https://angular.io/guide/architecture (дата обращения : 10.01.2020).\nОб авторах:\nСулыз Андрей Викторович, студент Южно-Российского государственного политехнического университета (НПИ) имени М.И. Платова (346428, РФ, г. Новочеркасск, ул. Просвещения, 132), sulyz2012@mail. ги\nПанфилов Александр Николаевич, доцент кафедры «Информационные и измерительные системы и технологии» Южно-Российского государственного политехнического университета (НПИ) имени М.И. Платова (346428, РФ, г. Новочеркасск, ул. Просвещения, 132), кандидат технических наук, доцент, panfiloff@rambler.ru\nSulyz Andrey Viktorovich, student, Platov South-Russian State Polytechnic University (NPI), (346428, Russian Federation, Novocherkassk, Prosveshcheniya street 132), sulyz2012@mail. ru\nPanfilov Alexander Nikolaevich, associate professor, the Department of Information and Measurement Systems and Technologies, Platov South-Russian State Polytechnic University (NPI), (346428, Russian Federation, Novocherkassk, Prosveshcheniya street 132), candidate of technical sciences, associate professor, panfiloff@rambler.ru\n3.\tBuildingaRESTfulWebService [Электронный ресурс]\t/Spring. доступа :https://spring.io/guides/gs/rest-service/ (дата обращения : 10.01.2020).\n4.\tArchitectureoverview [Электронный ресурс]\t/ Angular.\nРежим\nРежим\nAuthors:\n",
    "download_url": "https://cyberleninka.ru/article/n/tehnologiya-razrabotki-odnostranichnogo-veb-prilozheniya-na-platforme-angular-8/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/webassembly-novyy-standart-kotoryy-izmenit-web",
    "slug": "webassembly-novyy-standart-kotoryy-izmenit-web",
    "title": "WebAssembly - новый стандарт который изменит Web",
    "abstract_description": "В статье рассмотрены важные преимущества и сферы применения нового стандарта WebAssembly.",
    "full_text_body": "\n\n\n\n\uFEFFМЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №7/2016 ISSN 2410-700X\nФИЗИКО-МАТЕМАТИЧЕСКИЕ НАУКИ\nУДК 004.431\nАртамошкин Максим Сергеевич\nстудент 4 курса факультета математики и информационных технологий ФГБОУ ВПО «МГУ им. Н.П. Огарёва»,\nг. Саранск, РФ E-mail: admin@zverit.com\nWEBASSEMBLY - НОВЫЙ СТАНДАРТ КОТОРЫЙ ИЗМЕНИТ WEB\nАннотация\nВ статье рассмотрены важные преимущества и сферы применения нового стандарта - WebAssembly.\nКлючевые слова WebAssembly, язык низкого уровня, веб-программирование, JavaScript, компилятор, машинный код, бит код\nWebAssembly (сокр. wasm) - это эффективный низкоуровневый язык программирования. Главное его предназначение заключается в повышении производительности JavaScript.\nWebAssembly построен на подмножестве JavaScript - asm.js. Он также хранится в текстовом формате. Может возникнуть вопрос: как код может быть эффективнее если он также проходит интерпретатор, а затем компилируется? Для этого используется пролог директива, благодаря которой компилятор сразу переводит код на язык ассемблера, пропуская этап интерпретации (рисунок 1).\nБраузер\nРисунок 1 - Компиляция WebAssembly кода\nКод wasm представлен как помеченное, ориентированное дерево, в котором внутренние вершины сопоставлены с операторами языка, а листья с соответствующими операндами. И это дерево хранится в двоичном формате. Благодаря этому мы получаем небольшой размер модуля, быстрое декодирование, и меньшее использование памяти. Если удастся приблизиться к скорости выполнения машинного кода, то произойдет настоящая революция в развитии веб-приложений.\nПосле появления этого стандарта появилась возможность компилировать языки верхнего уровня в код wasm или asmjs. На данный момент доступно для языков C и C++.\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №7/2016 ISSN 2410-700X_\nДля примера скомпилируем код С: #include<stdio.h> int main() { printf(\"hello, world! \\n\"); return 0;\n}\nДля этого воспользуемся компилятором Emscripten, способный преобразовывать бит код LLVM (Low Level Virtual Machine) в представление на языке JavaScript и Binaryen который имеет инструментарий для компиляции wasm [1]. Чтобы скомпилировать, выполним следующую команду: emcc file.cpp -o file.js -s 'BINARYEN=\"путь для двоичного файла\"' Примерно так выглядит уже транслированный код C в wasm: (module (memory 16777216 16777216)\n(type $FUNCSIG$iiii (func (param i32 i32 i32) (result i32))) (type $FUNCSIG$ii (func (param i32) (result i32))) (type $FUNCSIG$vi (func (param i32))) (import $abort \"env\" \"abort\" (param i32)) (export \"add\" $add)\n(func $add (param $x i32) (param $y i32) (result i32) (local $i2 i32) (local $i3 i32)\n(i32.add (get_local $x) (get_local $y)\n)\n)\n)\nПри переводе в бинарный формат производится несколько этапов сжатия:\n•\tСырой формат - стандартный бинарный формат;\n•\tСпециальное сжатие бинарного формата;\n•\tОбщая компрессия.\nЕще одним плюсом wasm является непосредственный доступ к машинному коду. Так как зачастую в машинном языке новый функционал представляется в виде SDK, к которому нет доступа с клиентской части веб-приложений. И для того, чтобы иметь возможность использовать этот SDK нужно время, когда браузеры будут поддерживать новые возможности и предоставят соответствующий API. Но, даже при этих условиях JavaScript будет работать слишком медленно [2].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИспользование API машинного кода средствами WebAssembly становится гораздо проще и появляется возможность обращаться к нему на более низком уровне. Это дает возможности, которые были недостижимы ранее. API предоставляет всего лишь доступ к сырым данным, которые обрабатывал SDK, теперь можно оперировать при помощи wasm. Это открывает широкий простор для операций с данными, благодаря подгружаемым библиотекам из Интернет, не заботясь о продолжительной стандартизации SDK. В будущем у WebAssembly ожидаются такие нововведения как:\n•\tПолная поддержка многопоточности;\n•\tИнтеграция с DOM;\n•\tОптимизация хвостовой рекурсии;\n•\tМультипроцессорная поддержка;\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №7/2016 ISSN 2410-700X_\n•\tИнтеграция со сборщиком мусора;\nЭтот функционал достаточно сложно воспроизвести на JavaScript. Wasm разрабатывается для того, чтобы служить отличной платформой для поддержки языков с похожими характеристиками [3].\nWasm позволит воплотить в жизнь создание новых продуктов работающих в браузере, в таких направлениях как:\n•\tПродвинутые редакторы музыки/изображений/видео;\n•\tСистемы автоматизированного проектирования;\n•\tВысокопроизводительные игры;\n•\tСредства разработки;\nWebAssembly эта та технология к которой бы рано или поздно дошла эволюция. Технология, которая безусловно изменит web, открыв возможности для построения более технологичных web-приложений. Список использованной литературы:\n1.\tКомпилятор Emscripten достиг возможности собственной пересборки [Электронный ресурс] // OpenNET [Б. м. : б. и.] - URL: https://software.intel.com/ru-ru/articles/webassembly-an-initial-view (дата обращения: 17.07.2016).\n2.\tWebAssembly*: первый взгляд [Электронный ресурс] // software.intel.com [Б. м. : б. и.] : URL: https://software.intel.com/ru-ru/articles/webassembly-an-initial-view (дата обращения: 17.07.2016).\n3.\t7 Things You Should Know About WebAssembly [Электронный ресурс] // Auth0 [Б. м. : б. и.] - URL: https://auth0.com/blog/2015/10/14/7-things-you-should-know-about-web-assembly/ (дата обращения: 17.07.2016).\n© Артамошкин М.С., 2016\nУДК 3054\nДоброва Наталья Васильевна\nучитель математики МБОУ «Подсинская СШ» Россия, Республика Хакасия, с. Подсинее E-mail: kulumaevanv@mail.ru\nРЕШЕНИЕ ЗАДАЧ ПО ГОТОВЫМ ЧЕРТЕЖАМ - ОДНО ИЗ ЭФФЕКТИВНЫХ СРЕДСТВ УСВОЕНИЯ И ЗАКРЕПЛЕНИЯ ТЕОРЕТИЧЕСКОГО МАТЕРИАЛА ПО ГЕОМЕТРИИ\nАннотация\nПри решении геометрических задач многие учащиеся сталкиваются с трудностями: ученику иногда легче решить задачу, чем сделать к ней рисунок. Решение задач по готовым чертежам способствует активизации мыслительной деятельности учащихся, развивает речь, логику рассуждений, учит делать правильное выводы; дает возможность учителю повторить значительно больший объем материала, затратив при этом минимум времени. Изучена проблема решения геометрических задач по готовым чертежам.\nКлючевые слова\nГеометрия, готовый чертеж, устные упражнения, логическое мышление.\nКакие задачи по математике считаются самими трудными? Думаю, что большинство учеников и педагогов ответят, что геометрические. Так как для решения типовых алгебраических задач применяются алгоритмы решения и проблемы, которые возникают при их решении, носят в основном вычислительный характер. А при решении геометрических задач нет единых алгоритмов и большинство ребят сталкиваются с трудностями. С чего начинать? Как решать? На что опираться? Надо знать аксиомы, а из большого списка теорем уметь выбирать необходимую, это сделать не так просто.\n",
    "download_url": "https://cyberleninka.ru/article/n/webassembly-novyy-standart-kotoryy-izmenit-web/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/umenshenie-nagruzki-na-server-sredstvami-cms-drupal",
    "slug": "umenshenie-nagruzki-na-server-sredstvami-cms-drupal",
    "title": "Уменьшение нагрузки на сервер средствами CMS Drupal",
    "abstract_description": "В этой статье проведено описание и анализ: простых методов уменьшение (нейтрализации) серверной нагрузки, методов оптимизации Drupal на основе встроенных и дополнительно установленных модулей, оптимизации конфигурации и обслуживания Drupal, а также оптимизации работы сервера. Проведено тестирование прямых SQL запросов и запросов при помощи Drupal Database API на реально разработанном сайте с использованием взаимодействия XML и PHP. Отображения результатов исследования было реализовано на страницах разработанного сайта с использованием графического и статистического представления.",
    "full_text_body": "\n\n\n\n\uFEFFУМЕНЬШЕНИЕ НАГРУЗКИ НА СЕРВЕР СРЕДСТВАМИ CMS DRUPAL\nСацык В.О.\nкандидат сельскохозяйственных наук факультет компьютерных наук и информационных технологий Луцкий национальный технический университет, г. Луцк, Украина\nСмолянкин О.А. ассистент\nфакультет компьютерных наук и информационных технологий Луцкий национальный технический университет, г. Луцк, Украина\nГрудецький Р.Я. старший преподаватель факультет компьютерных наук и информационных технологий Луцкий национальный технический университет, г. Луцк, Украина\nDECREASE OF LOAD ON SERVER BY MEANS OF CMS DRUPAL\nSatsyk V.O.\nCandidate of Agricultural Sciences Faculty of Computer Science and Information Technology Lutsk National Technical University, Lutsk, Ukraine\nSmolyankin O.A.\nassistant\nFaculty of Computer Science and Information Technology Lutsk National Technical University, Lutsk, Ukraine\nGrudetsky R. Y. Senior Lecturer\nFaculty of Computer Science and Information Technology Lutsk National Technical University, Lutsk, Ukraine\nАННОТАЦИЯ\nВ этой статье проведено описание и анализ: простых методов уменьшение (нейтрализации) серверной нагрузки, методов оптимизации Drupal на основе встроенных и дополнительно установленных модулей, оптимизации конфигурации и обслуживания Drupal, а также оптимизации работы сервера. Проведено тестирование прямых SQL запросов и запросов при помощи Drupal Database API на реально разработанном сайте с использованием взаимодействия XML и PHP. Отображения результатов исследования было реализовано на страницах разработанного сайта с использованием графического и статистического представления.\nABSTRACT\nThis article contain description and analyze of simple methods for reducing (neutralizing) server load, optimization of Drupal CMS based on embedded and additionally installed modules, optimizing Drupal CMS configuration and maintenance, and optimizing server performance. We tested direct SQL queries and queries with the Drupal Database API on a really developed site using the interaction of XML and PHP. Research results was implemented on the developed site pages with using a graphical and statistical presentation.\nКлючевые слова: методы уменьшения серверного нагрузки: оптимизация Drupal, прямые SQL запросы, запросы Drupal Database API.\nKeywords: server load reduction methods: Drupal optimization, direct SQL queries, Drupal Database API queries.\nПостановка проблемы. Как известно, скорость работы веб-сайтов является лимитирующим фактором, влияющим как на ранжирование ресурсов в поисковой выдаче, так и на поведение пользователей. Наблюдается довольно высокая конкуренция среди множества сайтов одинаковых тематик. Период социальной консолидации интеллектуальных ресурсов остается пока, не проявленным. Остается единственное направление - совершенствование технических возможностей используемых инструментов работы. В нашем случае инструментария уменьшения нагрузки на сервер.\nКак сообщает источник [1], время загруженности страниц сайта отражается на финансовых показателях. Так для ресурса amazon.com, задержка всего в 100 мс. привела к уменьшению доходов на 1%. Тогда как, сокращение времени загрузки страницы Google Maps и уменьшении ее объема данных с 100Кб до 70-80Кб, привело к росту трафика на 10% в первую неделю, и еще на 25% - в течение следующих трех недель.\nВместе с тем, по информации того же ресурса, 47% пользователей надеются на то, что время загрузки страницы не превышает 2-х секунд. Всего лишь одна дополнительная секунда при загрузке\nстраницы приводит к снижению количества их просмотра на 11% и уменьшение комфортности работы посетителей на 16%.\nТо есть, приведенные выше, короткие сообщения свидетельствуют о архиважность и актуальность тематики инструментария уменьшения нагрузки на сервер.\nВ частности наша публикация акцентирует внимание направлении минимизации серверного нагрузки средствами CMS Drupal\nАнализ последних исследований и публика-ций.Как показывает экспресс анализ последних исследований и публикаций по данной тематике, литературные источники представляют разные пути решения поставленной проблемы.\nТак по сообщению Коцюбы А.Ю., Цяпича Я.П., Лавренчук С.В. [2], решение в данной ситуации - это использование асинхронной обработки запросов на сервере. Базируется реализация такого подхода на использовании неблокирующий архитектуры, построенной на событийно-ориентированной парадигме «evented I / O», применяя платформу «Node.js».\nНа сайте http://www.drupal.ru/node/125608 [3] сообщается о важности скорости сайтов разработанных на базе CMS Drupal и предлагаются соответствующие шаги по ее увеличение за счет включения встроенного кэширования и агрегации, включения кэширования содержания представлений, включения функции Boost, выключение модулей РНР Filtr и Update Manager, или уменьшение вообще количества модулей.\nО надежности, безопасность, универсальность, гибкость, быстродействие, простоту поддержки и легкость изменения дизайна сайтов созданных на базе CMS Drupal, можно ознакомиться по ссылке http://www.addinfo.com.ua/stat/2160 stat.html [4].\nО возможностях которые предлагает CMS Drupal и ее поддержку, достаточно подробно описано на сайте: http://webstudio2u.net/ua/site-develop/185-drupal.html [5].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nУже ранее, мы в своих работах [6] также обсуждали данную тему. В последней публикации в частности речь шла об эффективности простых методов нейтрализации уменьшения серверного нагрузки и использования различных режимов кэширования на основе встроенных модулей Drupal. В данной публикации приведены рекомендации по результативности дополнительно устанавливаемых модулей: Authcache и Cache Router; настройки конфигурации и обслуживания Drupal и собственно функции настройки сервера.\nПостановка задачи. Проведенный анализ публикаций по данной проблематике показывает, что CMS Drupal достаточно популярной системой управления контентом. Попытки веб-разработчиков обеспечить своей системе универсальность, пластичность и повышенную функциональность по сравнению с конкурентами, приводит к увеличению нагрузки на сервер и уменьшения его быстродействия. В большинстве случаев, данная проблема\nрешается выбором специализированных дорогостоящих хостингов путем выделения серверов или нескольких серверов.\nНаша работа - представление научной общественности и практическим разработчикам результативно-действенных, относительно простых и бесплатных путей уменьшения нагрузки на сервер для уже существующих сайтов и сайтов, находящихся в стадии разработки на базе CMS Drupal.\nДля логически-системного раскрытия данного вопроса необходимо решить ряд пошаговых задач, а именно:\n•\tразработать веб сайт средствами CMS Drupal о взаимодействии XML и PHP;\n•\tпровести анализ, тестирование созданного сайта, по объемам, скорости обработанной информации разнообразным набором инструментария: простыми методами (нейтрализации) различными путями модификации собственно Drupal (на основе встроенных и устанавливаемых модулей, конфигурации и обслуживания Drupal) и прямых SQL запросов.\n•\tсформировать практически применяемые выводы и предложения по минимизации серверной нагрузки.\nОбъект исследования: процесс изменения серверного нагрузки в зависимости от используемых средств запроса к базе данных.\nПредмет исследования: практически-действующие средства уменьшения серверного нагрузки на основе простых методов (нейтрализации), методов оптимизации Drupal, прямых SQL запросов и Drupal Database API.\nОсновная часть (решение задачи). Простые методы (нейтрализации) снижение нагрузки на сервер\nПод серверной нагрузкой в данной работе мы подразумеваем: уровень использования оперативной памяти сервером; нагрузки на процессор (процессорное время, или время обработки информации процессором), а также нагрузки на Интернет канал. Исходя из этого наша задача сводится к минимизации трех составляющих параметра нагрузки.\nДля обеспечения рельефности показателей исследуемых параметров будем проводить расчет входной нагрузки в 100 условных пунктах.\nКак показывает практика, на среднестатистическом сайте посетители создают нагрузку в размере около 10% от общего, другие ресурсы съедают боты (поисковые и другие). По отношению к ботам следует проводить соответствующие процедуры по их нейтрализации. И в первую очередь, необходимо исключить попадание на сайт «плохих», бесполезных и вредных ботов.\nОпределение главного зеркала.\nОсновная масса сайтов доступна по двум адресам - с «www» и без. Большинство ботов, за редким исключением, считают, что это два разных сайты и загружают сайт по два раза. Наша задача - решить который URL сайта оставлять, а с какой сделать 301 редирект на главное зеркало.\nНапример перейдем по ссылке типа: http ://webmaster.yandex. ru/check. xml?hostname=ww\nw.test.com и если видим, что: сайт является зеркалом test.com, значит главным зеркалом будем делать домен test.com, а www.test.com с помощью .htaccess сделаем 301 редирект. Если вы хотите, чтобы главным доменом был сайт без WWW, то в .htaccess который лежит у вас в корне (если он там не лежит, то создайте) вводим следующее:\nRewriteEngine on RewriteCond %{HTTP_HOST} Awww. test. com$ [NC] RewriteRule %*)$ http://test.com/$ 1 [R=301,L].\nВследствие данного шага, адрес с WWW и все SEO показатели достаточно быстро «перекле-ються» на вид без WWW.\nВ том случае, если главным доменом будет домен с WWW - то в .htaccess необходимо писать:\nRewriteEngine on RewriteCond %{HTTP_HOST} Atest.com$ [NC] RewriteRule %*)$ http://www. test.com/$ 1 [R=301,L].\nТакая принудительная «склейка» зеркал ощутимо понижает посещаемость сайта ботами, в среднем это снимает 20 пунктов нагрузки с сайта.\nФайл robots.txt\nВ файл Robots.txt следует обязательно прописать главный домен. Для всех без исключения ботов, закрыть от индексации все бесполезные страницы (часто это страницы списка пользователей, внутренние дубликаты страниц, поиск по сайту, страницы тегов, pda и print версии сайта и т.п.). Если таких \"мусорных\" страниц на сайте много - то и нагрузка снизится также до 10 пунктов.\n1менний бан\nДостаточно действенный способ, с помощью .htaccess блокировать полностью доступ к сайту ботам по их имени, который используется на предупреждение посещение ботами. Для этого в .htaccess прописывается:\n## Блокировка по USER AGENT: RewriteCond %{HTTP_USER_AGENT} MJ12bot [OR]\nRewriteCond %{HTTP_ USER_A GENT} Java [OR]\nRewriteCond %{HTTP_ USER_A GENT} Njuice-Bot [OR].....\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n......RewriteCond %{HTTP_ USER_A GENT}\nZeus\nRewriteRule % *)$ - [F,L].\nТакже в этот список можно добавить боты: bingbot, msnbot, Slurp, для русскоязычных сайтов, трафика почти нет, а Yahoo (Slurp) создает огромною нагрузку, так как очень активный и агрессивный. Даже без блокировки Yahoo и Bing - этот способ уменьшает посещаемость ботами примерно на 4Q условных пунктов.\nБлокировка по IP\nЗдесь необходимо ввести логи активности IP адресов или анализировать серверные логи, и банить IP-адреса безымянные активные боты, в основном это парсеры (автоматические воры контента и т.п.) и в большинстве случаев их IP принадлежат хостингу провайдера. В случае выявления активного IP, смотрим whois ip адрес, например http://whois.domaintools.com/83.222.14.3 и если там явно указан хостинг - смело баним всю подсеть через .htaccess (каждую IP досрочно в виде: deny from\n83.222. 14.). Очень много таких неизвестных ботов - парсеров, а также спам-ботов уходит из русскоязычных хостингов, также Китая, Турции и т.п., в странах третьего мира, можно банить сразу всю подсеть. После таких периодических банов удается снизить ботову активность и обеспечить более 10 пунктов снижения серверного нагрузки.\nБан примитивных самопишущих ботов Такие боты имеют знаковое отличие - у них ничего не написано в HTTP_USER_AGENT и HTTP_REFERER. В том случае, если оба условия верны - блокируем.\nПрописать условие необходимо в любой части кода до вызова любых других процессов (подключение к БД, вызов конфигурации и т.д.). Средствами языка программирования PHP, это выглядит следующим образом:\nif ($_SERVER[\"HTTP_REFERER\"] == \" AND $_SERVER[\"HTTP_USER_AGENT\"] == '') {die('Bad bot');}\nБлокировка примитивных самопишущих ботов обеспечивает до 10 пунктов снижения серверной нагрузки.\nОптимизация DRUPAL (модификация системы для улучшения ее эффективности и уменьшения нагрузки на сервер как такового)\nDrupal - довольно распространенная CMS и это отложило на ней свой отпечаток - базовой пакет Drupal не является готовым решением для определения типа вида сайта, а служит фундаментом для его создания. В связи с этим при создании того или иного сайта на основе стандартного пакета Drupal используют большое количество готовых дополнительных модулей и тем оформления для Drupal, или разрабатываются новые модули и темы специально для создаваемого сайта. «Завершающим аккордом» по созданию сайта является его оптимизация, которую можно разбить на основных 4 шага: •встроенная оптимизация Drupal; •оптимизация Drupal дополнительно установленными модулями;\n•оптимизация конфигурации и обслуживания Drupal;\n•оптимизация работы сервера. Рассмотрим более подробно каждый из этих шагов.\nВстроенная оптимизация Drupal.\nС целью уменьшения серверной нагрузки, в первую очередь стоит отключить все неиспользуемые модули. Это сделает невозможным выполнение кодирования этих модулей при генерации страницы перед отправкой ее браузеру пользователя. Примером такого модуля является Statistics. Вместо статистики выдаваемой данным модулем, рекомендуется использовать статистику Google Analytics.\nИспользование встроенного кэширования Drupal.\nИспользование встроенного кэширования Drupal позволяет кэшировать информацию, изъятую из базы данных, а также информацию, которая получена при обработке удаленной информации с PHP.\nКэширования системы меню фильтров форматов ввода, переменных администрирования (например название сайта) и настроек модуля - выполняется автоматически. Все остальные параметры кэширования можно настроить на странице: Управление -> Производительность. На данной странице можно настроить: компрессию страниц, кэширование блоков, оптимизацию CSS и JavaScript файлов.\nКэширование страниц в режиме - нормальный. В данном режиме кэширования страниц, в случае просмотра впервые (анонимным, незарегистрированным в системе пользователем) проводится сохранение сгенерированной страницы в кэш. В дальнейшем при просмотре данной страницы (анонимным пользователем) она подтягивается с кэша уже сгенерированной, что значительно ускоряет работу Drupal.\nПри включении кэширования страницы в режиме - агрессивный, в случае генерации страницы пропускается загрузки и выгрузки включенных модулей, поэтому часть модулей могут работать некорректно либо не работать вовсе.\nНастройка минимального времени жизни кэша страницы для анонимных пользователей.\nДанный параметр определяет, через какое время после кэширования страницы, проводится проверка на обновление содержания данной страницы. В случае обновления, кэш данной страницы очищается. То есть, если администратор сайта изменил содержание страницы, он его видит сразу, в то время как анонимные пользователи, только через минимальный промежуток времени существования кэша.\nВключение компрессии страницы, для сохранения сжатого кэша страниц и для передачи страницы браузера пользователя в сжатом виде, если он поддерживает компрессию gzip. Компрессия производится с помощью библиотеки zlib установленной как расширение в PHP.\nВключение кэширования блоков. Принцип работы кэширования блоков аналогичный принципу работы кэширования страниц. Для супер - пользователя (первого зарегистрированного пользователя при установке Drupal, его id равен 1) блоки никогда не кэшируются.\nВключение оптимизации CSS и JavaScript файлов. Это уменьшит их размер и количество обращений к серверу при загрузке страницы в браузер. Все CSS и JavaScript файлы собираются в один файл (свой файл для CSS и свой - для Java Script). Что уменьшает количество обращений к серверу при загрузке страницы.\nОптимизация Drupal дополнительно установленными модулями\nУстановка модуля Authenticated User Page Caching (Authcache).\nДанный модуль позволяет управлять страницы, как для анонимных пользователей, так и для аутентифицированых («залогинованых») пользователей более качественно по сравнению со встроенным кэшированием Drupal. Установка данного мо-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nдуля, предусматривает перенастройки динамического контента на страницах (например вывод имени аутентифицированого пользователя).\nAuthcache сохраняет каждый кэш страницы отдельно для каждого пользователя или роли. Кэш хранится в базе данных, или в вмонтированной среде кэширования (memcahed, APC, и т.д.). Кэширование версии страницы для аутентифицированых пользователей (кроме супер - пользователя) передаются с помощью AJAX, за счет чего достигается достаточно быстрое отображение страницы в браузере. В случае браузерного отключения JavaScript в аутентифицированого пользователя страница формируется с самого начала (сервер БД) что занимает большое количество времени, и при перезагрузке страницы скорость ее загрузки останется постоянной. В то время как при использовании Authcache на некоторых серверах скорость загрузки страницы уменьшается до 1 миллисекунды.\nЕсли необходимо управлять страницами исключительно для анонимных пользователей (без аутентифицирования), рекомендуется установить модуль Cache Router. Данный модуль находится в основе модуля Authcache и управляет страницами лучше встроенного кэширования Drupal.\nПосле проведения действий приведенных выше, страницы создаваемого сайта будут передаваться серверу браузеру пользователя в сжатом виде, а вот CSS и JavaScript нет. Исправить это можно установив модули CSS Gzip и JavaScript Aggregator.\nОптимизация конфигурации и обслуживания Drupal\nУменьшение времени хранения пользовательских сеансов.\nТак как Drupal сохраняет пользовательские сеансы в своей базе данных, то сокращение времени их хранения разгрузит базу данных, особенно, если на сайт заходит тысячи пользователей в день. По умолчанию сеансы хранятся 55 часов, лучше всего уменьшить время их хранения до 24 часов. Для этого на сервере в папке / sites / default в файле settings.php\tизменим\tстроку\nini_set('session.gc_maxlifetime', 200000); на: ini_set('session.gc_maxlifetime', 86400); //24 часа.\nТакже на этом файле можно сократить время жизни кэшированных страниц сеансов до 24 часов, изменяя строку: ini_set('session.cache_expire', 200000); на ini_set('session.cache_expire', 1440); // 24 часа (в минутах)\nНа последок в этом файле можно изменить время хранения cookie в браузере пользователя, сократив\tего\tдо\t24\tчасов: ini_set('session.cookie_lifetime', 86400); // 24 години (в секундах)\nЕсли установить время хранения cookie в браузере пользователя равным 0 - то cookie будет удаляться сразу же после закрытия Интернет браузера пользователем.\nСокращение количества сообщений протоколирования работы сайта, которые хранятся в базе данных. На странице «Управление -> Отчеты и со-\nобщения -> Отчеты в базе данных», нужно выставить необходимый максимум отчетов которые хранятся в базе данных. Так как эти отчеты полезны для просмотра попыток взлома сайта, поэтому минимум, который можно выбрать, это 100 записей. Посмотреть эти отчеты можно перейдя на страницу «Управление -> Последние записи, в системном журнале».\nНастройка выполнения регулярных процедур (задачи cron), так как при их выполнении очищаются журналы записей сообщений протоколирования работы сайта, устаревшие записи кэша и другие статистические данные. Самым простым способом настройки автоматического запуска регулярных процедур является установка модуля -Poormanscron, в котором необходимо установить интервал запусков Cron.\nВ составе Drupal есть модуль Throttle, который выполняет оценку количества посетителей сайта и отключает некоторые функциональные возможности, если достигнуто порог установлен администратором. На странице настройки данного модуля проводится указание минимального количества анонимных посетителей и минимальное количество зарегистрированных пользователей для включения ограничения функционала сайта для них.\nОптимизация работы сервера\nСервер сайта может работать под управлением различных операционных систем: Windows, Linux, FreeBSD. Настройка работы сервера будет проводиться в соответствии с каждой операционной системой индивидуально, так как установление eAccelerator в Windows и Linux существенно отличаются.\nРассмотрим только основные, наиболее значимые рекомендации по оптимизации работы сервера.\neAccelerator является PHP-акселератором, основное назначение которого является кэширование бинарного представителя кода.\nРекомендуется установить Web-сервер nginx и настроить его работу с Web-сервером Apache так, чтобы информацию о странице (url, alias, мета данные и т.д.) отдавал браузеру Apache, а статический контент (CSS, JavaScript, фото и т.д.) nginx. Или полностью заменить Web-сервер Apache, Web-сер-вером nginx.\nОсуществить перемещение содержимого файлов .htaccess в главный файл конфигурации Apache - httpd.conf (в зависимости от используемой операционной системы), обеспечивает ускорение их обработки web-сервером. После чего, необходимо запретить поиск файлов .htaccess в пределах корневого каталога web-сервера, установив\nAllowOverride в None. Несмотря на то, что некоторые модули внутри своих каталогов содержат .htaccess файлы, следует осторожно работать с данным видом оптимизации, особенно при переносе содержания всех .htaccess файлов в httpd.conf, не пропуская ни один .htaccess файл.\nУстановить на сервере три типа систем:\n•\tанализа лог файлов (например AWstats);\n•\tмониторинга производительности сервера (например Munin);\n•\tучета сетевого трафика (например Vnstat)\nВключить кэш MySQL и установить его размер равным 64 мегабайт. Слишком малый размер кэша - малоэффективен, особенно большой размер кэша приводит к тому, что поиск нужной информации в кэше занимает большой промежуток времени. Поэтому рекомендуется поэкспериментировать с размером кэша, на каждом конкретном сервере и подобрать его оптимальный размер.\nРезультаты сравнительного тестирования прямых SQL запросов и Drupal Database API\nВ работе XML и PHP можно выделить два основных направления по уменьшению нагрузки на сервер: во время парсинга данных (обработка данных с файла XML с помощью PHP скрипта) и при записи обработанных данных в БД. Для работы с БД в системе Drupal разработана Drupal Database API, определенный стандарт в зависимости от поставщика, уровень абстракции для доступа к серверам баз данных.\nУровень абстракции БД позволяет выполнить один программный код на различных СУБД. Гибкий уровень абстракции позволяет легко работать с различными типами баз данных, например MySQL или PGSQL. Он максимально сохраняет синтаксис и мощность SQL, меняя отдельные параметры запросов для разных типов баз сохраняя основные элементы безопасности неизменными.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТаким образом, при взаимодействии XML и PHP, по минимизации серверного нагрузки, мы детализируем второй метод: «во время записи обработанных данных в БД», так как метод уменьшения нагрузки «во время парсинга данных» (обработка данных с файла XML с помощью PHP скрипта ) есть достаточно трудоемким, время- ресурсо- и финансово затратным.\nДля занесения информации в БД в Drupal принято использовать Drupal Database API, стандартный подход которым пользуются на практике.\nРезультаты проведенного сравнительного тестирования прямых SQL запросов и Drupal Database API показано в таблице 1.\nТаблица 1\nРезультаты сравнительного тестирования прямых SQL запросов та Drupal Database API_\n№\tНазвание функции\tРезультаты запросов\n/п\t\t//прямой SQL\t//Drupal\n11\tПростой запрос выборки NID I TITLE С таблицы NODE, де NID >= 5\tSelect n.nid, n.title from node n where n.nid >= 5\t$query = db_select('node', 'n'); $query->fields('n', array('nid', 'title')); $query->condition('n.nid', 5, '>='); $result = $query->execute();\n22\tПолучение количества записей в таблице NODE, где NID > 10\tSelect count (*)from node n where n.nid >10\t$query = db_select('node', 'n'); $query->fields('n'); $query->condition('n.nid', 10, '>'); $result = $query->execute ()->rowCount();\n33\tЗапрос с одним логическим оператором AND и оператором LIKE\tSelect n.nid, n.title from node n where n.nid >= 5 AND n.tile LIKE 'Chapter %\t$query = db_select('node', 'n'); $query->fields('n', array('nid', 'title')); $query->condition('n.nid', 5, '>='); $query->condition('n.title', 'Chapter0/«', 'LIKE'); $result = $query->execute();\n44\tЗапрос с использованием логического оператора OR\tSelect n.nid, n.title from node n where n.nid = 5 OR n.nid =20\t$query = db_select('node', 'n'); $query->fields('n', array('nid', 'title')); $or = db_or(); $or->condition('n.nid', 10); $or->condition('n.nid', 20); $query->condition($or); $result = $query->execute();\n55\tИспользование DB_Insert () для добавления записей\tInsert Into node (title, uid, type) Values ('New node', 1, 'article')\tdb_insert('node') ->fields(array( 'title' => 'New node', 'uid' => 1, 'type' => 'article',)) ->execute();\n66\tИспользование DB_Update () для обновления записей\tUpdatet node Set title = 'Updated', changed = 1363104629 where nid = 1\t$query = db_update('node'); $query->fields(array( 'title' => 'Updated', 'changed' => REQUEST_TIME,)); $query->condition('nid', 1); $num updated =$query->execute();\n77\tИспользование DB_Delete () для удаления записей\tDelete From node where nid > 10\t$query = db_delete('node'); $query->condition('nid', 10, '>'); $num_deleted = $query->execute();\nКак видно из результатов проведенного тестирования прямые SQL запросы во всех семи случаях в объемном отношении значительно меньше по сравнению с Drupal Database API.\nС целью обеспечения проведения экспериментальной части нами был разработан сайт (http://dp.rocksolid.com.ua/).\nБлок поиска осуществляется по коду аэропорта (3-х значного кода).\nОсновной информационный блок составляет 3592 аэропорты, который выгружается из XML файла.\nЗагрузка XML файлов в БД и их обработку осуществлялось на основе системы данных поиска аэропорта (рис. 1). Данная закладка также отображает информацию последней загрузки:\n•количество элементов приложенных к БД; •объем элементов приложенных к БД; •время обработки прямым SQL запросом; •время обработки через стандартную функцию которую использует Drupal «db_insert».\nВ данном случае было загружено различными методами всего 3592 элементы. Размер файла составляет 447,9 Кб; время обработки прямым SQL запросом составляет 1,88 секунды, тогда как по запросу Drupal db_insert 3,32 секунды.\nЕсли представить данные результаты в процентном отношении, то, время обработки прямым SQL запросом уменьшено на 55% по сравнению с Drupal db_insert запросом.\nРисунок 1.\nИнформационное сообщение об объемах и ходе проведенных загрузок в закладке «Отгрузка XML»\nЭто достаточно наглядно продемонстрировано в графическом отображении, рисунок 2, (в закладке «Отгрузка XML»).\nТакая результативность объясняется прохождением процедуры верификации до момента прямого SQL запроса, тогда как Drupal Database API в обязательном порядке будет проводить необходимые шаги по обработке данных, а именно:\n•скрытие в интерфейсе информации о прямых запросах в БД;\n•проведение предварительной работы по обработке данных (сериализация, приведения типов и т.д.);\n•проведение работы по защите от возможных ошибок в запросе.\nСериализация, которую выполняет Drupal Database API - процесс перевода любой структуры данных в соответствующую последовательность битов. Обратной операцией к сериализации является операция десериализации (структурирование) - восстановление первоначального состояния структуры данных с битовой последовательности.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСтоит заметить, что для проведения прямых SQL запросов нужно обладать дополнительными навыками и умениями в программирование на языке SQL, тогда как для проведения записи в БД\nобработанных данных через Drupal Database API достаточно знаний языка программирования РНР.\nПредполагается, что процедура верификации проводится в ручном режиме и является обязательным для всех иностранных сайтов, в то время как на территории бывшего СНГ она (верификация) отсутствует.\nВерификация - это проверка, способ подтверждения с помощью доказательства каких ни будь теоретических положений, алгоритмов, программ и процедур путем их сопоставления с опытными (эталонными или эмпирическими) данными, алгоритмами и программами.\nДругими словами можно сделать вывод, что преимущество Drupal Database API в данном случае (при наличии процедуры верификации) становится его недостатком. Так как этот набор функций при его использовании тратит время на сериализацию данных для обеспечения безопасности и предотвращения посторонних SQL инъекций. В нашем случае мы имеем верифицированы данные, не требующие сериализации, поэтому использование прямых SQL запросов бесспорно уменьшают нагрузку на сервер, так как время обработки полученных данных меньше, что и подтверждается графиками запечатленными на рисунке 2.\nРисунок 2. Графическое отображение информационного сообщения об объемах и ходе проведенных\nзагрузок в закладке «ОтгрузкаXML».\nЦифровые показатели становятся более рельефными в том случае, когда мы проведем увеличение входных данных в 10, 100 и 1000 раз.\nЕсли провести простое математическое моделирование, результаты которого отражаются в той же закладке, при увеличении входных данных в 10 раз, благодаря прямому SQL запросу, сервер находится под нагрузкой на 14,4 секунды (в 100 раз в 144 секунд) - меньше по сравнению с Drupal db_insert запросу, рисунок 3.\nПри увеличении входных данных в 1000 раз размер файла будет составлять 437,4 Мб, время обработки по прямому SQL запросу - 31,3 минуты, тогда как время обработки Drupal db_insert соответствии 55,3хвилины.\nИ в этом случае, благодаря прямому SQL запросу, сервер находится под нагрузкой меньше на 24 мин по сравнению с Drupal db_insert:, что является весьма существенным в современных информационных системах.\nРисунок 3 Математическое моделирование увеличение входных данных в 10, 100 и 1000 раз.\nОсновные результаты и выводы. Как видим применение простых методов снижения серверного нагрузки: определение главного зеркала; файл robots.txt; именной бан; блокировка по IP; бан примитивных самопишущих ботов есть достаточно эффективными, так как в общей сумме уменьшают серверные нагрузки до 90 пунктов. В то же время стоит отметить, что результативность применения вышеприведенной процедур повышается с увеличением страниц на сайте, срока существования и большей его «раскрутки».\nПодробно описано четыре шага оптимизации работы Drupal: встроенная оптимизация Drupal; оптимизация Drupal дополнительно установленными модулями; оптимизация конфигурации и обслуживания Drupal; оптимизация работы сервера.\nКак видно из результатов проведенного тестирования прямые SQL запросы во всех семи случаях в объемном отношении значительно меньше по сравнению со стандартной функцией, которую использует Drupal «db_insert».\nДля занесения информации в базу данных, было загружено различными способами 3592 элементы, размер файла составил 437,4 Мб. Время обработки по прямому SQL запросу на 55% меньше по сравнению с Drupal db_insert, так как прямой SQL запрос осуществляется - 31,3 минуты, тогда как время обработки Drupal db_insert соответствии 55,3 минуты.\nЛитература\n1.\thttps://promodo.ua/ua/blog/keshuvannya-storinok-optimizatsiva-zavantazhennva.html.\n2.\tКоцюба А.Ю., Цяпыч Я.П., Лавренчук С.В. О методике оптимизации отказоустойчивости веб-серверов на одновременное количество запросов. Научный журнал «компьютерно-интегрированные: образование, наука, производство» Луцк, 2016. Выпуск № 24-25. С. 37-41.\n3.\thttp://www.drupal.ru/node/125608\n4.\thttp://www.addinfo.com.ua/stat/2160 stat.h\ntml\n5.\thttp://webstudio2u.net/ua/site-develop/185-drupal.html\n6.\tСацык В.А., Гарлинський А.И. Практические методы уменьшения нагрузки на сервер функционирующих и новосозданных сайтов на базе CMS Drupal. // Международная научно-практическая конференция «Актуальные проблемы автоматизации и управления». 2016. Выпуск №4. С. 53-59.\n7.\tОсновы анализа спектра [Электронный ресурс] // Юнитест. Измерительное оборудование. 2001. URL: http: www.unitest.com/theory/spectrum-1.html. (дата обращения 12.11.16)\n8.\tPython 3.6.0 documentation [Электронный ресурс] // Python Software Foundation. 2017. URL: https: docs.python.org/3 (дата обращения 04.01.17).\n",
    "download_url": "https://cyberleninka.ru/article/n/umenshenie-nagruzki-na-server-sredstvami-cms-drupal/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/optimizatsiya-proizvoditelnosti-veb-interfeysa-prilozheniya-nsuts-sredstvami-dinamicheskogo-html",
    "slug": "optimizatsiya-proizvoditelnosti-veb-interfeysa-prilozheniya-nsuts-sredstvami-dinamicheskogo-html",
    "title": "Оптимизация производительности веб-интерфейса приложения NSUts средствами динамического html",
    "abstract_description": "Статья посвящена применению технологий AJAX/AJAJ для оптимизации производительности автоматизированной системы тестирования навыков программирования NSUts. Приводятся сравнительные данные (пропускная способность, среднее время отклика и др.) нагрузочного тестирования веб-приложения традиционной архитектуры и функционально аналогичного приложения на основе AJAX/AJAJ.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.051\nЕ. Н. Боженкова 1 2, Д. В. Иртегов 1, Я. С. Колбин 1\n1 Новосибирский государственный университет ул. Пирогова, 2, Новосибирск, 630090, Россия\n2 Институт систем информатики им. А. П. Ершова СО РАН пр. Акад. Лаврентьева, 6, Новосибирск, 630090, Россия\nbozhenko@iis.nsk.su, fat@nsu.ru, ykolbin@gmail.com\nОПТИМИЗАЦИЯ ПРОИЗВОДИТЕЛЬНОСТИ ВЕБ-ИНТЕРФЕЙСА ПРИЛОЖЕНИЯ NSUTS СРЕДСТВАМИ ДИНАМИЧЕСКОГО HTML\nСтатья посвящена применению технологий AJAX/AJAJ для оптимизации производительности автоматизированной системы тестирования навыков программирования NSUts. Приводятся сравнительные данные (пропускная способность, среднее время отклика и др.) нагрузочного тестирования веб-приложения традиционной архитектуры и функционально аналогичного приложения на основе AJAX/AJAJ.\nКлючевые слова: AJAX, AJAJ, динамический HTML, производительность веб-приложения.\nВведение\nЗа последние годы Интернет стал важной платформой для получения данных и запуска приложений, такие приложения легкодоступны и не зависят от места, где его собираются использовать. Поэтому пользователи начали отдавать предпочтение веб-приложениям по сравнению с традиционными настольными приложениями. Быстрый рост сети, в качестве платформы приложений, повысил и уровень приложений. Они имеют насыщенные и динамичные пользовательские интерфейсы, где работа в режиме реального времени стала нормой [1].\nК сожалению, архитектуры существующих веб-серверов, веб-браузеров и протоколов HTTP ориентированы на другую модель взаимодействия пользователей с сервером, которая плохо совместима с взаимодействием в реальном времени. Механизмы кэширования, заложенные в действующих стандартах HTTP 1, неявно предполагают, что большинство веб-ресурсов представляют собой редко меняющееся содержимое.\nИспользование таких страниц для организации взаимодействия большого количества пользователей в реальном времени выявляет неожиданные узкие места в используемых стеках программного обеспечения. В частности, параметром, ограничивающим реальную производительность приложения, может оказаться количество нитей веб-сервера [2] 2.\nОдним из путей обхода таких узких мест является переход к клиент-серверной архитектуре на основе динамического HTML, так называемой архитектуре AJAX/AJAJ (Asynchronous\n1\tHypertext Transfer Protocol - HTTP/1.1. URL: http://www.w3.org/Protocols/rfc2616/rfc2616.html (дата обращения 11.12.2014).\n2\tConfiguring Apache for Maximum Performance. URL: http://www.howtoforge.com/configuring_apache_ for_maximum_performance (дата обращения 11.12.2014).\nБоженкова Е. Н, Иртегов Д. В., Колбин Я. С. Оптимизация производительности веб-интерфейса приложения NSUts средствами динамического HTML // Вестн. Новосиб. гос. ун-та. Серия: Информационные технологии. 2015. Т. 13, вып. 2. С. 13-21.\nISSN 1818-7900. Вестник НГУ. Серия: Информационные технологии. 2015. Том 13, выпуск 2 © Е. Н. Боженкова, Д. В. Иртегов, Я. С. Колбин, 2015\nJavaScript and XML/JSON) [3]. Это позволяет уменьшить объем данных, передаваемых сервером при каждом запросе, улучшить время реакции приложения и повысить его пропускную способность под высокими нагрузками.\nВ статье рассматривается применение технологии AJAJ для оптимизации производительности веб-приложения, рассчитанного на взаимодействие большого количества пользователей в реальном времени. Сначала описывается приложение для автоматизированного контроля навыков программирования NSUts и проблемы с производительностью под большими нагрузками. Далее приводятся соображения, по которым технология AJAX/AJAJ могла бы решить обнаруженные проблемы. Затем описывается прототип NSUts 2.0, в котором AJAJ используется для реализации функций, создающих больше всего проблем с точки зрения производительности. В заключение приводятся данные нагрузочного тестирования оригинального приложения и прототипа NSUts 2.0.\nСистема NSUts и ее производительность\nРассмотрим приложение NSUts (автоматизированная система тестирования, [4]). Во время некоторых мероприятий, например при проведении интернет-тура Открытой Всесибирской олимпиады им. И. В. Поттосина или школьных олимпиад, в системе регистрируется несколько сотен участников. Кроме того, во время таких мероприятий к системе подключаются сотни болельщиков. Многие из этих пользователей подключены по медленным каналам с большими задержками: ADSL или даже модем 56K в удаленных населенных пунктах, GPRS.\nПоскольку и болельщики, и участники, и жюри хотят видеть картину событий (рейтинг, очередь тестирования) в режиме, близком к реальному времени, они очень часто перезагружают страницы приложения. В худшем случае может получаться, что каждый из пользователей генерирует несколько запросов на перезагрузку в секунду.\nПри нормальной работе механизмов кэширования HTTP это не приводило бы к перекачке страницы при каждой перезагрузке, потому что в большинстве случаев изменений на странице нет. При запросе на перезагрузку браузер отправляет на сервер запрос HEAD, сравнивает временной штамп локальной копии страницы со временем модификации страницы на сервере и не перекачивает страницу, если эти штампы совпадают 3. Кроме того, между браузером и сервером можно добавить дополнительные кэширующие прокси, так называемые веб-ускорители, которые позволят избежать запуска скриптов на основном веб-сервере при каждом обращении.\nВ случае приложения NSUts эти механизмы так работать не могут. Во-первых, все интересные пользователю страницы генерируются серверными скриптами, т. е. в соответствии со стандартом HTML они должны снабжаться полями HTTP-заголовка Pragma: no-cache или Cache-Control: no-cache, т. е. браузер, в соответствии со стандартом, не имеет права их кэши-ровать.\nЭту проблему можно было бы решить путем установки и соответствующей настройки кэша (NGINX, Varnish и / или memcached) на стороне сервера. Но в системе NSUts каждый авторизованный пользователь видит свой набор данных: свою очередь тестирования, ответы на свои вопросы, разные версии рейтинга при замораживании [4; 5], поэтому кэширование на стороне сервера оказалось малоэффективным [2].\nТипичная страница веб-интерфейса NSUts (рис. 1) после упаковки имеет размер от 2 до 6 килобайт, что, казалось бы, немного. Но почти каждая перезагрузка страницы пользователем приводит к полноценной перегенерации этой страницы с запуском скриптов, обращениями к базе данных и т. д. Сотни пользователей, перезагружающих страницы несколько раз в секунду, обеспечивают загрузку, измеряемую тысячами обращений в секунду, что переводит приложение в разряд высоконагруженных.\n3 Hypertext Transfer Protocol - HTTP/1.1.\nРис. 1. Список участников олимпиады в системе NSUts 1.3\nНаблюдение за поведением веб-сервера под такой нагрузкой позволило выявить проблему, с которой часто сталкиваются высоконагруженные веб-приложения [6; 7]. Когда пользователи осуществляют доступ через локальную сеть или широкополосной Интернет, передача генерируемых скриптом данных происходит быстрее, чем их генерация, т. е. производительность сервера в целом оказывается ограничена мощностью его процессора и производительностью его дисковой подсистемы.\nНо когда часть пользователей работают через медленные каналы с большими задержками, узким местом оказывается передача данных. При этом нить Apache с интерпретатором Perl оказывается занята на гораздо большее время, чем нужно для исполнения скрипта, и настоящим узким местом оказывается количество нитей сервера.\nСерверные скрипты приложения работают в однопоточном режиме. Для работы каждого экземпляра интерпретатора Perl создается отдельная нить сервера Apache 4. При этом каждая нить сервера с интерпретатором требует около 10-15 мегабайт, так что увеличение количества нитей приводит к резкому росту потребления ОЗУ 5.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПроблема усугубляется тем, что используемая в NSUts библиотека для работы с MySQL Apache::DBI имеет известные проблемы при работе в многопоточной версии Apache2 и требует создания не нити, а процесса на каждый экземпляр сервера 6. Кроме того, каждая нить занимает соединение с базой данных и требует соответствующего увеличения лимитов сервера СУБД.\nДля проведения Всесибирской олимпиады были эмпирически подобраны параметры сервера Apache, которые позволяли бы обработать ожидаемое количество пользователей и при которых достигалось бы приемлемое время загрузки страниц. Увеличением максимального количества серверных процессов до 150 (по сравнению с 20 по умолчанию) удалось избежать неконтролируемого роста задержки при обработке пользовательских запросов, но даже в таких условиях время обработки запросов 1 000 пользователей может достигать нескольких секунд [2]. Потребление оперативной памяти при нагрузочном тестировании с такими настройками могло достигать 7 гигабайт (указано общее потребление физического ОЗУ для серверов Apache и MySQL).\n4\tmod_perl: Performance Considerations Under Different MPMs. http://perl.apache.Org/docs/2.0/user/performance/ mpm.html (дата обращения 11.12.2014).\n5\tConfiguring Apache for Maximum Performance.\n6\tmod_perl: Performance Considerations Under Different MPMs.\nСтандартными решениями для данной проблемы являются либо повышение эффективности кэширования, либо уменьшение объема передаваемых данных в каждой клиентской сессии [6; 7]. Как было показано, резервы для улучшения эффективности кэширования в рамках существующей архитектуры NSUts очень ограниченны. Это ставит вопрос о пересмотре архитектуры.\nТехнологии AJAX/AJAJ\nВ веб-приложениях нового поколения, таких как Gmail или Facebook, широко используются технологии снижения объема передаваемых данных, основанные на динамическом HTML.\nИдея состоит в том, что клиент использует приложение на JavaScript, которое запрашивает с сервера только данные (в случае страницы просмотра очереди NSUts - содержимое очереди), а затем форматирует эти данные в соответствии с заложенными в код приложения стилями и форматами. Таким образом, информация о формате передается в составе кода приложения или в виде отдельных статических веб-ресурсов. Поскольку ни код, ни эти ресурсы не изменяются во время работы приложения, они могут эффективно кэшироваться как на клиенте, так и на промежуточных прокси-серверах. Сами данные могут быть представлены в компактном формате, и их размер может быть уменьшен на порядок по сравнению с форматированной HTML-страницей.\nЕстественным развитием данного подхода может быть передача не всех данных, а только изменений с момента последнего обновления страницы. Так, вместо передачи всего состояния очереди тестирования можно передавать только последние изменения, которые, как правило, затрагивают только последнюю отправленную на тестирование задачу. Это могло бы уменьшить объем передаваемых данных еще на порядок.\nВ первых поколениях приложений такого типа для представления данных использовался XML, откуда происходит одно из названий данной технологии - AJAX (Asynchronous JavaScript and XML) [8]. В последние годы для передачи данных чаще используется формат JSON (JavaScript Object Notation) 7, поскольку он компактнее XML и его проще разбирать и генерировать. Для обозначения приложений, использующих JSON, иногда используется аббревиатура AJAJ (Asynchronous JavaScript And JSON), но часто их также описывают как AJAX, ведь общий подход к построению приложения в обоих вариантах подхода одинаков.\nТаким образом, вместо приложения, в котором вся работа, как по выборке данных, так и по их отображению и форматированию, происходит на сервере, получаем компонентное приложение, в котором клиент выполняет значительную часть работы. Принципы хорошей разработки таких приложений формулируются следующим образом:\n1)\tсостояние приложения должно сохраняться на стороне клиента;\n2)\tклиентское приложение использует серверную часть только как поставщика данных;\n3)\tсерверное приложение предоставляет внешний интерфейс (API) и не должно делать никаких предположений относительно клиентов, использующих его [7; 8].\nПрименение этих принципов приводит к разделению приложения на две автономные части: RESTful веб-сервис [9] и одностраничное веб-приложение с JavaScript, которое использует этот сервис.\nВ результате клиентская часть приложения загружается один раз и в ходе использования только дозапрашивает данные от серверной части приложения, без полной перезагрузки всего содержимого после каждого действия. Это улучшает поведение приложения под большими нагрузками и, как будет показано позже, может резко снизить потребление вычислительных ресурсов сервером. Так как серверная часть не хранит сессию пользователя, появляется возможность горизонтально масштабировать серверную часть, увеличивая количество серверов. Поскольку серверная часть только передает данные в простом формате, это облегчает адаптацию приложения для поддержки разных браузеров и открывает возможность под-\n7 The JavaScript Object Notation (JSON) Data Interchange Format. URL: http://www.rfc-editor.org/rfc/rfc7159.txt (дата обращения 11.12.2014).\nдержки клиентов, вообще не являющихся браузерами, например, приложений для мобильных устройств.\nОписание прототипа NSUts 2.0\nДля исследования целесообразности переработки NSUts под описанную выше архитектуру был разработан прототип NSUts 2.0. Поэтому перед принятием такого решения необходимо его обосновать, NSUts разрабатывалась много лет и имеет достаточно сложную функциональность, переписывание ее полностью с нуля несет достаточно большие риски.\nПрототип использует ту же СУБД MySQL 5 и ту же модель данных, что и эксплуатируемая версия NSUts 1.3. Сохранение модели данных позволяет обеспечить чистоту сравнения с NSUts 2.0, а также использовать для нагрузочных тестов снимки состояния СУБД эксплуатируемой версии системы с большими объемами реальных данных.\nСерверная часть приложения была переписана на PHP с применением фреймворка Laravel, что позволило обойти упомянутые выше проблемы взаимодействия Apache::DBI с многопоточной конфигурацией Apache.\nВ прототипе разработаны только версии страниц, перезагрузка которых создает наибольшую часть нагрузки во время крупных соревнований, а именно страницы очереди тестирования, списка участников (рис. 2) и рейтинга. Поскольку новая и существующая версия системы используют одну и ту же СУБД, возможна поэтапная миграция приложения на новую архитектуру, когда часть функциональности реализуется старыми скриптами на Perl, а часть - новыми страницами на основе динамического HTML.\nНовости\nКоманда\nСдать задачу\nРезультаты\nРейтинг\nВопросы\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nУчастники\nПомощь\nПечать\nОлимпиада\nТур\nСписок участников\nНазвание команды\nJury\nJury Jury Jury All Tor One НГТУ1\nNovosibirsk STU 1\nZulcom\nDebuggers\nhronos\nDanya\nNovosibirsk STU 2\nГород\nНовосибирск\nНовосибирск\nНовосибирск\nНовосибирск\nНовосибирск\nНовосибирск\nВолгоград\nСтаврополь\nСанкт-Петербург\nНовосибирск\nУниверситет/ школа\nНГУ\nИГУ\nИГУ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНГТУ\nНГТУ\nШКОЛА 12\nВолгГТУ\nЦод Поиск\nСПбГПУ\nНГТУ\n10 25 50 100\nРис. 2. Список участников олимпиады в системе NSUts 2.0\nИспользование существующей модели данных ограничило возможности оптимизации архитектуры приложения. Так, в этой модели данных не предусмотрено временных штампов для некоторых типов изменений. Поэтому во многих случаях сервер не может определить, какие данные были изменены с момента последнего пользовательского запроса, и вынужден каждый раз пересылать все данные (например, все состояние очереди). Тем не менее, как покажут результаты сравнения производительности, даже такая архитектура дает значительный выигрыш по сравнению с используемой версией N8^8 1.3.\nСравнение производительности систем\nДля нагрузочного тестирования использовалась следующая аппаратная конфигурация сервера: Intel Xeon X566G, 12GB RAM, 4GGB RAID5 storage, HP Smart Array G6 1GB.\nИзмерения проводились для трех программных конфигураций сервера.\n1.\tNSUts 1.3: веб-сервер Apache 2.2.22, модуль для взаимодействия Apache с Perl mod-perl 2.G.7, язык выполнения серверных сценариев Perl 5.14.2, СУБД MySQL 5.5.4G.\n2.\tNSUts 2.G: веб-сервер Apache 2.2.22, модуль для взаимодействия Apache с PHP modphp 5.4.35, язык выполнения серверных сценариев PHP 5.4.35, СУБД MySQL 5.5.4G.\n3.\tNSUts 2.G-fpm: веб-сервер Nginx 1.2.1, FastCGI менеджер процессов PHP-FPM 5.4.35, СУБД MySQL 5.5.4G.\nРезультаты были получены с использованием приложения для нагрузочного тестирования Apache JMeter S. Данный инструмент написан на языке Java и работает на всех платформах, для которых есть реализация JVM. Он позволяет генерировать большое количество запросов с различных компьютеров и контролировать процесс с одного из них, использовать механизмы авторизации и поддержки сессий виртуальных пользователей, проводить тестирование не только по HTTP-протоколу.\nДля тестирования использовалась страница со списком участников олимпиады, где их общее количество менялось от теста к тесту. Для выборки данных при тестировании не использовался постраничный вывод данных, поддерживаемый только в NSUts 2.G. В обеих версиях системы в каждом тесте передавался полный список участников.\nКоличество виртуальных пользователей, генерируемых инструментом для нагрузочного тестирования JMeter, было зафиксировано на значении 15G, время каждого теста составляя-ло SG секунд. Под пропускной способностью подразумевается отношение общего количества запросов к времени теста, а среднее время отклика - это среднее арифметическое времени отклика для каждого запроса.\nНа рис. 3, 4 представлены результаты нагрузочного тестирования вышеописанных конфигураций NSUts, где показана зависимость пропускной способности и времени отклика от количества участников в олимпиаде.\nПропускная способность и среднее время отклика для NSUts 2.G существенно превосходят соответствующие значения для NSUts 1.3, показатели улучшились вплоть до 1G раз. Результаты NSUts 2.G и NSUts 2.G-fpm отличаются несущественно, но использование FastCGI-менеджера процессов позволило уменьшить потребление памяти до 5 раз (см. таблицу) при тех же показателях производительности.\nОбъем потребляемой памяти для различных версий систем\nВерсия системы\tМаксимальный объем потребляемой памяти, Мб\nNSUts 1.3\t7 GSS\nNSUts 2.G\t3 61G\nNSUts 2.G-fpm\t759\nS Apache JMeter™. URL: http://jmeter.apache.org/ (дата обращения 11.12.2G14).\nРис. 3. Сравнение пропускной способности\nРис. 4. Сравнение среднего времени отклика\nРис. 5. Сравнение среднего объема передаваемых данных\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИспользование более простой структуры в формате JSON позволило существенно сократить объем передаваемых данных за счет отсутствия HTML-форматирования страницы (рис. 5).\nЗаключение\nВ статье рассмотрены проблемы производительности веб-интерфейса автоматизированной системы тестирования навыков программирования NSUts.\nДля увеличения количества обслуживаемых пользователей и уменьшения времени ожидания на запросы была оценена целесообразность перехода к клиент-серверной архитектуре на основе динамического HTML. В экспериментальном прототипе были разработаны версии страниц, время перезагрузки которых наиболее критично в период крупных соревнований, а именно страницы очереди тестирования, списка участников и рейтинга.\nПриведенные в статье данные нагрузочного тестирования веб-приложения традиционной архитектуры по сравнению с AJAX показывают, что переход к AJAX может повысить производительность и снизить потребление ресурсов сервером в разы и даже на порядки.\nСписок литературы\n1.\tKuuskeri J. Experiences on a Design Approach for Interactive Web Applications // Proceedings of the 2nd USENIX conference on Web application development. 2011. Р. 87.\n2.\tКолбин Я. С. Нагрузочное тестирование автоматической системы проверки навыков программирования NSUTS // Материалы 51-й Междунар. науч. студ. конф. «Студент и научно-технический прогресс». Информационные технологии. 2013. С. 178.\n3.\tБотыгин И. А., Каликин К. А. Исследование методов увеличения производительности Web-приложений // Изв. Том. политехн. ун-та. 2008. Т. 312, № 5. С. 109-114.\n4.\tБоженкова Е. Н., Иртегов Д. В., Киров А. В., Нестеренко Т. В., Чурина Т. Г. Автоматизированная система тестирования NSUts: Требования и разработка прототипа // Вестн. Ново-сиб. гос. ун-та. Серия: Информационные технологии. 2010. Т. 8, вып. 4. С. 46-53.\n5.\tЧерненок С. А. Обеспечение безопасности системы автоматизированного тестирования программных приложений // Материалы 50-й юбилейной Междунар. науч. студ. конф. «Студент и научно-технический прогресс». Информационные технологии. 2012. C. 63.\n6.\tSouders S. High performance web sites. 1st ed. O'Reilly Media, 2007.\n7.\tSouders S. Even Faster Web Sites: Performance Best Practices for Web Developers. 1st ed. O'Reilly Media, 2009.\n8.\tМаклафлинБ. Изучаем Ajax. СПб.: Питер, 2008.\n9.\tFielding R. Architectural Styles and the Design of Network-based Software Architectures. Doctoral dissertation, University of California, Irvine, 2000.\nМатериал поступил в редколлегию 30.12.2014\nE. N. Bozhenkova 1 2, D. V. Irtegov \\ Ya. S. Kolbin 1\n1 Novosibirsk State University, 2 Pirogov Str., Novosibirsk, 630090, Russian Federation\n2 A. P. Ershov Institute of Informatics Systems SB RAN, 6Acad. Lavrentjev Ave., Novosibirsk, 630090, Russian Federation\nbozhenko@iis.nsk.su, fat@nsu.ru, ykolbin@gmail.com\nPERFORMANCE OPTIMIZATION OF NSUTS WEB APPLICATION INTERFACE\nBY USING DYNAMIC HTML\nThe paper is devoted to using of AJAX/AJAJ for performance optimization of automated testing system NSUts. Results of load testing (channel capacity, response time and others) the traditional web application versus its analogue with using AJAX/AJAJ are given.\nKeywords: AJAX, AJAJ, dynamic HTML, web application performance.\nReferences\n1.\tKuuskeri J. Experiences on a Design Approach for Interactive Web Applications. Proceedings of the 2nd USENIX conference on Web application development, 2011, p. 87.\n2.\tKolbin Ya. S. Load testing of automatic testing system for checking programming skills NSUTS. Proceedings of the 51st international students scientific conference «Students and progress in science and technology». Information technologies, 2013, p. 178. (In Russ.)\n3.\tBotygin I. A., Kalikin K. A. Investigation of methods to increase Web-applications performance. Bulletin of the Tomsk Polytechnic University, 2008, vol. 312, no. 5, p. 109-114. (In Russ.)\n4.\tBozhenkova E. N., Irtegov D. V., Kirov A. V., Nesterenko T. V., Churina T. G. Automated testing system NSUts: requirements and the development of prototype. Vestnik of Novosibirsk State University. Series: Information Technologies, 2010, vol. 8, no. 4, p. 46-53. (In Russ.)\n5.\tChernenok S. A. Securing automatic testing system of software applications. Proceedings of the 50th international students scientific conference «Students and progress in science and technology». Information technologies, 2012, p. 63. (In Russ.)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n6.\tSouders S. High performance web sites. 1st edition. O'Reilly Media, 2007.\n7.\tSouders S. Even Faster Web Sites: Performance Best Practices for Web Developers. 1st edition. O'Reilly Media, 2009.\n8.\tMcLaughlin B. Head Rush Ajax. 1st edition. O'Reilly Media, 2006.\n9.\tFielding R. Architectural Styles and the Design of Network-based Software Architectures. Doctoral dissertation, University of California, Irvine, 2000.\n",
    "download_url": "https://cyberleninka.ru/article/n/optimizatsiya-proizvoditelnosti-veb-interfeysa-prilozheniya-nsuts-sredstvami-dinamicheskogo-html/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/osteklenie-zdaniy-energoeffektivnost-i-mikroklimat",
    "slug": "osteklenie-zdaniy-energoeffektivnost-i-mikroklimat",
    "title": "Остекление зданий: энергоэффективность и микроклимат",
    "abstract_description": "В статье рассматривается остекление зданий, их энергоэффективность и микроклимат.",
    "full_text_body": "\n\n\n\n\uFEFFРис. 3. Интерфейс программы Литература\n1.\tКузьмин С. З. Цифровая обработка радиолокационной информации. М.: Книга по Требованию, 2012. 398 с.\n2.\tШвачкин А. М. Особенности построения БРЛС для многофункциональных боевых вертолетов. ФАЗОТРОН-НИИ, 2011. № 4.\n3.\tОбработка изображений в геоинформационных системах: учеб. пособие / В. К. Злобин, В. В. Еремеев, А. Е. Кузнецов. Рязан. гос. радиотехн. ун-т. Рязань, 2006. 264 с.\n4.\tКлочко В. К., Ермаков А. А. Алгоритмы фильтрации и сегментации трехмерных радиолокационных изображений поверхности. Автометрия, 2002. № 5.\nОстекление зданий: энергоэффективность и микроклимат\nТатаринова Р. Е.\nТатаринова Раиса Егоровна / ТаШгтоуа Ятза Egorovna - студент, Инженерно-технический институт, Северо-Восточный федеральный университет им. М. К. Аммосова, г. Якутск\nАннотация: в статье рассматривается остекление зданий, их энергоэффективность и микроклимат.\nКлючевые слова: остекление, мансардные окна, естественное освещение, теплообмен, энергоэффективность.\nЗа полувековой период в массовом строительстве жилых и общественных зданий в России применялись окна и остекленные наружные двери с деревянными переплетами и двойным остеклением, которое в настоящее время не соответствует новым теплотехническим требованиям. Тотальная стандартизация миллионов окон существующей застройки также свидетельствует о безликости и однообразии архитектуры зданий.\nЦель современного подхода к развитию светопрозрачных ограждений заключается в укреплении нормативной базы проектирования и сертификации, совершенствовании конструкций и технологий, развитии предприятий, обеспечивающих широкое применение окон, имеющих нормативный уровень теплозащиты, высокое качество для архитектурной выразительности зданий как в новом строительстве, так и при проведении реконструкции.\nВ настоящее время отечественными производителями организован выпуск современных переплетов из ПВХ-профилей, дерева, алюминия, дерево-алюминия для энергоэффективных окон, его объем по разным оценкам составляет от 2 до 3 млн м2.\nОднако, при условии ежегодной замены или модернизации остекления в существующих жилых зданиях в количестве 5% в год и установке энергоэффективных окон в 50 % вновь строящихся жилых зданиях, потенциал рынка Российской Федерации по применению энергосберегающих светопрозрачных ограждений должен возрасти примерно в 7 раз. При этом потребность в топливе должна снизиться на 660 тысяч т. у. т. за один отопительный период. В период первого нефтяного кризиса в 1973 году правительства многих стран приняли абсолютно беспрецедентные программы энергосбережения [3, с. 146].\nНапример, в США суммы, выделенные на разработку новых способов экономии энергии, использование нетрадиционных и возобновляемых ее источников, были сопоставимы с расходами на осуществление высадки астронавтов на Луну.\nВ течение очень короткого времени, за 3 -4 года, были разработаны принципиально новые стекла с теплоотражающими покрытиями. Это позволило в 1980-х годах начать промышленное производство стекол, стоимость которых первоначально составляла около 80 долларов США за 1 м2. Сегодня, когда такие стекла устанавливаются более, чем в 80% всех окон за рубежом, их стоимость снизилась до 5-6 долларов [1, с. 157].\nСозданы:\n-\tЭлектрохромные стекла, получаемые путем напыления в магнетронных установках.\n-\tГреющиеся стекла, позволяющие сократить теплопотери и обеспечить очистку окон от снега (Дания, Финляндия, Норвегия, Канада). Кстати, в покрытии Старого гостиного двора в Москве установлено 12 тыс. м2 таких стекол.\nМассовое применение стеклопакетов в зарубежных странах началось в 1970-х годах. В настоящее время изготавливаются вакуумные стеклопакеты, практически исключающие конвективную составляющую теплопотерь. Наибольшие изменения за последнее время произошли с металлическими: алюминиевыми и стальными оконными профилями.\nНачата активная разработка профилей из композитивных материалов, например, 40% опилок, 60% ПВХ, остальное специальные добавки.\nТеплотехнические свойства окон, изготавливаемых из композитов, не уступают древесине. В нашей стране существует достаточное количество современных производств. Действуют Борский завод, крупные заводы по производству теплоотражающего стекла: «Прогресс» в Саратове и «Завод архитектурного стекла» в Санкт-Петербурге, ряд небольших производителей теплоотражающего стекла.\nВ Москве выпускается фирмой «Квадропарк» теплоотражающая полимерная пленка, которая может быть установлена в стеклопакеты в качестве теплового зеркала. Фирма «Метробор» в Санкт-Петербурге начала выпуск стеклопакетов с тепловым зеркалом по американской технологии. Саратовский «Карат» осуществляет выпуск конечного продукта. Один из конверсионных институтов разработал и в настоящее время заканчивает отладку технологии для массового производства вакуумных стеклопакетов. Особое место в объеме оконной продукции занимают мансардные окна при устройстве мансард как при реконструкции зданий, так и при новом строительстве.\nКонструктивно и эксплуатационно мансардные и вертикальные окна являются совершенно различными изделиями. Вертикальные окна применяются только для установки в вертикальные стены, их изготовляют многие предприятия, зачастую не всегда стандартизированные, мансардные окна ВЕЛЮКС устанавливаются в наклонные крыши с углами от 15 до 90 градусов. Изобретателем мансардных окон является датский инженер Виллум Канн Расмуссен, который основал фирму ВЕЛЮКС - производителя мансардных окон на протяжении 60 лет.\nМансардное окно, встроенное в конструкцию крыши, подвергается гораздо более сильным природно-климатическим воздействиям, чем вертикальное окно. Поэтому конструкция мансардного окна, в отличие от вертикального окна, требует многих дополнительных конструктивных особенностей.\nПрежде всего, это относится к непосредственному воздействию ветра. Помимо нагрузки от ветра, мансардное окно подвергается сильному воздействию ливневых вод, попадающих непосредственно на окна и стекающих по крыше.\nОсобая конструкция оклада ВЕЛЮКС позволяет сделать соединение окна с кровлей водонепроницаемым.\nПомимо воздействия ветра и дождя, мансардные окна подвергаются сильным температурным воздействиям. Вертикальные окна, в зависимости от ориентации дома, одновременно не освещаются солнцем и в некоторой степени защищены оконными нишами. Наружная поверхность мансардного окна находится под сильным воздействием солнечных лучей, поэтому для них имеются специальные материалы и конструктивные приспособления, обеспечивающие надежную эксплуатацию окон.\nВ современных постройках высокая плотность стыков в светопрозрачных ограждениях предопределяет необходимость системы проветривания. При оснащении вертикальными окнами эта система не выходит за рамки проветривания путем открывания окон или форточки на определенное время. Такая система не позволяет достигнуть эффективных результатов без создания разности давлений в помещении с помощью устройства сквозняков. Для мансардных окон ВЕЛЮКС наиболее характерным является способ проветривания с помощью конвективного теплообмена, создаваемого горизонтально расположенной створкой окна.\nТакое проветривание наиболее эффективно и может быть короче по времени в отличие от вертикального окна, где потоки теплого и холодного воздуха соприкасаются и проветривание затягивается. Существует конструкция мансардных окон ВЕЛЮКС, которые оснащены клапаном продолжительной вентиляции. Этот клапан может находиться в открытом состоянии, когда окно полностью закрыто.\nВсе мансардные окна ВЕЛЮКС оснащены однокамерным стеклопакетом, в котором внутреннее стекло имеет теплоотражающее покрытие со стороны, обращенной внутрь стеклопакета, при этом камера стеклопакета заполнена инертным газом, аргоном. Такая конструкция стеклопакета обеспечивает теплозащиту помещения посредством отражения обратно в помещение теплового потока.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПри установке в скатной крыше мансардные окна имеют за счет солнечной радиации более высокие показатели по теплоэффективности, что вызывает необходимость учета этих показателей в практике проектирования и строительства [2, с. 174].\nРасчеты показывают, что увеличение потока тепла от солнечной радиации через мансардное окно составляет 19 %, что и оценивает его теплоэффективность [4, с. 281].\nЭто дает возможность применять мансардные окна в районах с расчетным значением ГСОП большим, чем нормированное сопротивление теплопередаче данного мансардного окна, или учитывать увеличение потока тепла при расчете потребности тепла для помещений [2, c. 174].\nЛитература\n1.\tТехнический регламент строительства STR 2.01.09, 2005 «Энергетическая эффективность зданий. Сертификация энергетической эффективности». 157 с.\n2.\tОптимизация площади остекления административного здания в зависимости от затрат энергии на освещение и охлаждение. [Текст] / V. Sasnauskaite, E. Juodis // Молодые энергетики, 2007: ежегодная конференция аспирантов и молодых ученых. Каунас. Литовский энергетический институт, 7 июня 2007. ISSN 18227554 (CD). 174 с.\n3.\tЕстественное и искусственное освещение рабочих мест. Предельные значения освещения и общие требования к измерениям». 146 с.\n4.\tТехнический регламент строительства STR 2.05.20:2006 «Окна и наружные двери». 281 с.\nПрограммная платформа Node.js. Долгов А. Н.1, Нуруллин Р. Ю.2\n'Долгов Антон Николаевич /Dolgov Anton Nikolaevich - студент;\n2Нуруллин Роман Юрьевич /Nurullin Roman Yurievich - студент, кафедра систем автоматического управления и контроля, факультет интеллектуальных технических систем, Национальный исследовательский университет Московский институт электронной техники, г. Зеленоград\nАннотация: в данной статье рассматриваются основные теоретические сведения об инструменте программирования на языке JavaScript, платформе Node.js. Здесь приведены определения, принципы и механизмы работы, исторические сведения, а также описаны сравнения Node.js с другими платформами, некоторые преимущества инструмента и недостатки. На примере микроконтроллера Iskra JS продемонстрирована работа простейшей программы на Node.js. Далее приведено небольшое описание среды разработки на Node.js. Кроме того, описывается важность внедрения данной технологии в современную IT-индустрию. Ключевые слова: Node.js, JavaScript, микроконтроллер.\nNode.js - платформа, основанная на языке программирования JavaScript движке V8, и предлагающая асинхронное API для работы с сетью и диском. Node.js добавляет возможность JavaScript взаимодействовать с устройствами ввода-вывода через свой API (написанный на C++), подключать другие внешние библиотеки, написанные на разных языках, обеспечивая вызовы к ним из JavaScript-кода. Node.js применяется преимущественно на сервере, выполняя роль веб-сервера, но есть возможность разрабатывать на Node.js и десктопные оконные приложения (при помощи NW.js, AppJS или Electron для Linux, Windows и Mac OS) [1]. Таким образом, Node.js превращает JavaScript из узкоспециализированного языка в язык программирования общего назначения. Одной из интересных особенностей, представляемых нам данной платформой, является возможность программировать некоторые модели микроконтроллеров.\nNode.js был создан Райаном Далом (Ryan Dahl) в 2009 году. Что же такого сделал Райан? Почему именно Node.js получил такое большое признание, ведь на самом деле до него существовали другие попытки сделать тоже самое? Ответ на данный вопрос весьма очевиден. Node.js был создан на основе виртуальной машины V8, изначально разработанной компанией Google для браузера Chrome. Node.js разработан с целью интерпретации JavaScript на любой платформе. Простыми словами, данный инструмент умеет выполнять написанный программистом код. И не просто умеет - Node.js делает это хорошо. Он работает очень быстро, поддерживает практически все возможности последних версий JavaScript, а также довольно экономно расходует память. Есть несколько причин, почему многие веб-разработчики отдают предпочтение Node.js. Веб-разработчики, могут применять на сервере язык JavaScript, который изначально был задуман для реализации на клиентской стороне разработки. Таким образом, получается, что программист может применять один и тот же код и на клиентской стороне, и на серверной. Для программирования оконных приложений и микрокотроллеров наиболее\n",
    "download_url": "https://cyberleninka.ru/article/n/osteklenie-zdaniy-energoeffektivnost-i-mikroklimat/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razlichiya-bootstrap4-i-bootstrap5-pri-razrabotke-web-saytov",
    "slug": "razlichiya-bootstrap4-i-bootstrap5-pri-razrabotke-web-saytov",
    "title": "РАЗЛИЧИЯ BOOTSTRAP4 И BOOTSTRAP5 ПРИ РАЗРАБОТКЕ WEB-САЙТОВ",
    "abstract_description": "Статья посвящена Фреймворку Bootstrap. В ней описываются особенности выбора данного Фреймворка, а так же приводится описание крупного обновления Bootstrap5. В статье рассмотрены основные различия Bootstrap4 и Bootstrap5.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004\nКлюев Михаил Владимирович Klyev Mikhail Vladimirovich\nСтудент Student\nКубанского Государственного Технического Университета\nKuban State Technical University\nПоздняков Евгений Александрович Pozdnyakov Evgeny Alexandrovich\nСтудент Student\nКубанского Государственного Технического Университета\nKuban State Technical University\nРАЗЛИЧИЯ BOOTSTRAP4 И BOOTSTRAP5 ПРИ РАЗРАБОТКЕ WEB-САЙТОВ\nDIFFERENCES IN BOOTSTRAP4 AND BOOTSTRAP5 WHEN DEVELOPING WEB SITES\nАннотация: Статья посвящена Фреймворку Bootstrap. В ней описываются особенности выбора данного Фреймворка, а так же приводится описание крупного обновления Bootstrap5. В статье рассмотрены основные различия Bootstrap4 и Bootstrap5.\nAbstract: This article is dedicated to the Bootstrap Framework. It describes the specifics of choosing this Framework, as well as a description of a major Bootstrap5 update. This article covers the main differences between Bootstrap4 and Bootstrap5.\nКлючевые слова: Web-сайт, Framework, Bootstrap 4, Bootstrap 5.\nKey words: Website, Framework, Bootstrap 4, Bootstrap 5.\nЧто такое Bootstrap? Bootstrap является открытым исходным кодом и бесплатной платформой HTML, CSS и JS, используемой веб-разработчиками для быстрого создания адаптивных веб-проектов и приложений.\nОсновная область применения - разработка интерфейсов и интерфейсов. Среди таких систем (Foundation, UIkit, Semantic UI.) Bootstrap является наиболее популярным.\nПочему Bootstrap так популярен? Это потому, что он позволяет настраивать сайты во много раз быстрее, чем с «чистым» CSS и JavaScript. И в нашем мире время - самый ценный ресурс. Также его популярность связана с доступностью. Он заключается в том, что даже новичок может создавать качественные макеты для разработчиков, что было бы трудно сделать без глубоких знаний веб-технологий и достаточной практики. Bootstrap использует несколько важных глобальных стилей и настроек при использовании, которые почти исключительно направлены на нормализацию стилей в браузерах. Основными компонентами веб-платформы Bootstrap являются: классы форматирования текста, компоненты создания кнопок, различные формы на странице, горизонтальные и вертикальные меню навигации, ползунки, раскрывающиеся списки, аккордеоны, модалисты, рабочие столы и другие элементы интерфейса, вспомогательные классы решения проблем, чаще всего встречается веб-разработчиками\nПреимущества выбора платформы Bootstrap:\nвысокая скорость создания высококачественного пользовательского макета даже разработчиками новых веб-сайтов\nправильное отображение и работа веб-сайта во всех браузерах и операционных системах, поддерживаемых этой платформой\nвозможность настройки проекта, это достигается путем изменения переменных SCSS и использования комбинаций Bootstrap\nналичие обширных библиотек и доступа, большого количества статей, работ и видеоматериалов; всё это при желании позволяет достигнут искомый результат и хорошо разобраться в Фреймворке [3].\nНо, как и у всех веб-платформ Bootstrap имеет минусы, которые с каждым обновлением уменьшаются, что приводит к стабильной и комфортной работе при разработке веб приложений. Основными минусами исследуемой платформы стали:\n-\tбольший размер конечных файлов CSS и JavaScript, чем если бы они были написаны специально для этого проекта на чистом CSS и JavaScript (это связано с тем, что стили и код JavaScript содержат много всего, а большинству веб-сайтов нужна только та или иная часть).\n-\tиспользование Bootstrap для настройки веб-сайтов, которые потребуют много переписывания кода CSS и JavaScript (простая настройка переменных Bootstrap здесь обязательна).\nПервый недостаток не так важен, тем более что его можно несколько «выровнять», если мы выполним независимую композицию проекта из исходного кода и включим только эти компоненты. В этом случае код для этого кадра будет намного меньше. Но второй недостаток требует много времени, чтобы начать уже свободную разработку.\nПри использовании веб-инфраструктуры Bootstrap 4 можно сразу заметить, что более старые версии Bootstrap накладывают ограничение на поле содержимого. Большинству экспертов это кажется раздражающим. Теперь эта проблема была решена.\nСброс CSS еще далек и теперь называется новой перезагрузкой в новой версии Bootstrap.\nПерезапуск основан на нормализации. Он избегает margin-top, использует наследование, блок rem и собственную композицию шрифтов для оптимальной визуализации текста.\nПроцесс редактирования улучшен по сравнению с предыдущими версиями, главным образом потому, что он влияет на структуру блоков на странице. Разработчики изменили структуру этой части каркаса, что в основном коснулось мобильных экранов. До этого, однако, он очень хорошо работал над загрузкой мобильных телефонов и планшетов, но теперь песни больше ориентированы на разные мобильные устройства.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНовые параметры настройки шаблона. Вам не нужно создавать отдельный файл темы, чтобы изменить стиль элемента сейчас. Все, что вам нужно сделать,\nэто изменить переменные в файле Sass по своему вкусу, и вы получите обновленный вид для всех элементов в составном файле. Например, вы можете представить тени, градиенты, закругленные углы, анимацию. Ранее вы создали свой собственный сброс, чтобы удалить закругленные углы с кнопок, а иногда использовали их! Важно, но теперь вам просто нужно изменить переменные в Sass. Ранее можно было изменить дизайн по умолчанию непосредственно в исходном коде, и CSS был перестроен, но теперь эти переменные специально собраны в отдельные файлы, поэтому анализировать и исследовать исходный код будет намного проще [2].\nЕще одним заметным и приятным изменение стало то, что было улучшено пиксельное изображение, а точнее переработано на размеры rem и em, а так же был переработан поиск документации и его улучшения. Почти все руководство было переписано с примерами и исходным кодом. Поиск документации также работает быстро, хотя с такой структурой документа это не имеет большого\nПредварительно скомпилированный Bootstrap 4\nКак только скомпилированная версия Bootstrap 4 будет загружена, извлеките ZIP-файл, и вы увидите следующую структуру файлов / каталогов (рисунок 1).\nсмысла\nbootstrap/\n[ ess/\n|-bootstrap-grid.ess\n|-bootstrap-grid.css.map\n|-bootstrap-grid.min.css\n|-bootstrap-grid.min.css.map\n|-bootstrap-reboot.css\n|-bootstrap-reboot.css.map\n|-bootstrap-reboot.min.css\n|-bootstrap-reboot.min.css.map\n|-bootstrap.css\n|-bootstrap.css.map\n|-bootstrap.min.css\n| I-bootstrap.min.css.map\nI-]s/\n|-bootstrap, bundle.js\n|-bootstrap.bundle.js.map\n|-bootstrap.bundle.min.js\n|-bootstrap.bundle.min.js.map\n|-bootstrap.js\n|-bootstrap.js.map\n|-bootstrap.min.js\nbootstrap.min.js.map\nРисунок 1. Файловая структура при компилировании файла\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКак видите, есть скомпилированные CSS и JS (bootstrap. *), А также скомпилированные и минимизированные CSS и JS (bootstrap.min. *).\nЕсли вы скачали исходный код Bootstrap 4, структура файла будет выглядеть следующим образом (рисунок 2).\nРисунок 2. Bootstrap 4 Исходный код\nФайлы вjs / и scss /являются исходным кодом для Bootstrap CSS и JavaScript.\nПапка dist / включает все, что перечислено в разделе предварительно скомпилированных загрузок выше.\nДокументы / examples / , содержит исходный код документации Bootstrap и примеры использования Bootstrap.\nКакие существенные ошибки и изменения bootstrap4 были исправленные и переработаны в bootstrap5\nУдаление jQuery\njQuery - это библиотека, которая предлагает широкие функциональные возможности для классического веб-скрипта, который эффективен практически во всех требованиях по разработке сайтов. Его масштабируемая структура позволяет получать доступ к элементам в документе без написания большого количества JavaScript, изменять внешний вид вашего контента на веб-сайте, который используется разработчиками для устранения пробелов во всех браузерах, изменять содержимое документа, реагировать на взаимодействие с пользователем, получать информацию с сервера без обновления страница с AJAX, добавить анимацию на сайт, упростить общие задачи JavaScript .\nАдаптивные размеры шрифтов\nBootstrap 5 по умолчанию разрешает адаптивный размер шрифта, который автоматически изменяет размер обложки в соответствии с отображением пользователя с помощью механизма RFS или адаптивного размера шрифта.\nВ зависимости от хранилища RFS RFS - это механизм определения размера, который изначально был разработан для изменения размера шрифта. RFS предлагает возможность изменять практически любое значение для любого свойства CSS, используя такие единицы, как ребро, отступы, радиус границы или теневое поле [1].\nЭто механизм, основанный на процессе предварительной или постпроцессорной обработки, который автоматически рассчитывает соответствующие размеры шрифта в соответствии с размером экрана пользователя или поля обзора. Он работает на известных препроцессорах или пост процессорных инструментах, таких как Sass, Less, Stylus или PostCSS.\nОтказаться от поддержки Internet Explorer 10 и 11\nОсновное и самое существенное изменение было то, что команда Bootstrap решила отказаться от поддержки Internet Explorer 10 и 11, что является очень продуманных ходом, потому что Internet Explorer очень сильно ограничивает работу платформы, увеличивает время отклика программы и всяческие ее перегружает.\nОптимизация Navbar\nКомпонент Bootstrap Navbar является основной частью программы Bootstrap и используется постоянно. В предыдущих версиях Bootstrap вам приходилось создавать приличный набор тегов, чтобы он работал. Однако в Bootstrap 4 они упростили это с помощью HTML-элемента nav или div и неупорядоченного списка. Класс navbar является классом по умолчанию и всегда должен присутствовать в компоненте.\nBootstrap 4 по умолчанию использовал встроенный блок в параметрах отображения, но он был удален в Bootstrap 5. Они также использовали аббревиатуру\nаббревиатуры и удалили марку, которая обязательно использовала контейнеры в полосах navbar. Кроме того, в раскрывающемся меню «темный класс» они также вводят темный раскрывающийся список, который можно перетаскивать на черном фоне, который обычно отображается с помощью раскрывающихся панелей на панели навигации [4].\nНа основе вышеперечисленных исследований можно сделать вывод.\nОдин из разочаровывающих впечатлений разработчика - переосмысление базового HTML, CSS и JavaScript для каждого проекта. Хотя некоторые предпочитают писать свой собственный код, все же имеет смысл просто использовать существующий Фреймворк, такой как Bootstrap.\nВо всех системах Bootstrap 5 все новые обновляются и появляются в Bootstrap 5, в котором можно с убедительным утверждением сказать, что команда Bootstrap сделает огромные шаги, чтобы счастье могло быть легким, лживым и быстрым для разработчиков.\nБиблиографический список:\n1.\tФ.А. Перепелица Эффективная разработка веб-сайтов. Bootstrap Учебное пособие СПб, 2017. С. 247-273.\n2.\tИТ Блог. Администрирование серверов на основе Linux (Ubuntu, Debian, CentOS, openSUSE) // Учебное пособие по framework Bootstrap [Электронныйресурс]: исследование, проведенное PwC. - M. - 2019. - Режим доступа: https://andreyex.ru/uchebnoe-posobie-po-framework-bootstrap/ (дата обращения 20.07.2020).\n3.\tИсследование, проведенное Copyright © 2020 Rudebox Design [Электронный ресурс] - Режим доступа: https://www.rudebox.org.ua/bootstrap-5-what-is-new-and-release-date. (дата обращения 21.07.2020).\n4.\tОбновление Bootstrap 5 и генератор статических сайтов Hugo /. Web разработка [Электронный ресурс] - Режим доступа: http://tods-blog.com.ua/web-development/bootstrap5-hugo.\n",
    "download_url": "https://cyberleninka.ru/article/n/razlichiya-bootstrap4-i-bootstrap5-pri-razrabotke-web-saytov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/rol-yazykov-programmirovaniya-v-sovremennyh-smartfonah",
    "slug": "rol-yazykov-programmirovaniya-v-sovremennyh-smartfonah",
    "title": "Роль языков программирования в современных смартфонах",
    "abstract_description": "В данной статье рассматриваются основные языки программирования, сравнение их между собой и значение их в нашей жизни и современных смартфонах.",
    "full_text_body": "\n\n\n\n\uFEFFЭЛЕКТРОННЫЙ НАУЧНЫЙ ЖУРНАЛ «APRЮRI. CЕРИЯ: ЕСТЕСТВЕННЫЕ И ТЕХНИЧЕСКИЕ НАУКИ»\nУДК 004\n№ 2 2016\nРОЛЬ ЯЗЫКОВ ПРОГРАММИРОВАНИЯ В СОВРЕМЕННЫХ СМАРТФОНАХ\nШилова Яна Владимировна\nстудент\nКосенков Алексей Александрович\nстудент\nМордовский государственный университет, Саранск\nАннотация. В данной статье рассматриваются основные языки программирования, сравнение их между собой и значение их в нашей жизни и современных смартфонах.\nКлючевые слова: смартфон; языки программирования; программирование; инженер.\nROLE OF LANGUAGES OF PROGRAMMING IN MODERN SMARTPHONES\nShilova Yana Vladimirovna\nstudent\nKosenkov Alexey Aleksandrovich\nstudent\nMordovian state university, Saransk\nAbstract. In this article the main languages of programming, their comparison among themselves and value them in our life and modern smartphones are considered.\nKey words: smartphone; programming languages; programming; engineer.\nНа протяжении всей своей истории человечество стремилось развиваться. Это привело к тому, что современное общество уже не может представить свою жизнь без сотовых телефонов, компьютеров и других технических устройств. Но мало кто задумывался над тем, как утроен современный смартфон?\nСмартфон (англ. smartphone - умный телефон) - мобильный телефон, дополненный функциональностью карманного персонального компьютера.\nИдеи объединения функциональности сотового телефона и карманного персонального компьютера появились практически сразу после появления первых карманных персональных компьютеров в начале 1990-х годов. Первой подобной попыткой считается телефон IBM Simon, впервые представленный публике в качестве концепта 23ноября 1992 года компанией IBM.\nВ современной жизни, можно пользоваться все возможными функциями в смартфонах. Например, мы можем не только передавать голос, но и пользоваться другими услугами, самая популярной из которых-передача коротких текстовых сообщений - SMS (Short Message Service). Это двунаправленный сервис позволяющий передавать текстовое сообщение с одного сотового телефона на другой. Так же мы можем спокойно выходить в интернет, скачивать все возможные приложения. За этими элементарными действиями стоят трудоемкие разработки инженеров - программистов.\nДля того, чтобы разработать какую-либо программу, инженеры-программисты используют различные языки программирования. Различают языки высокого и низкого уровня. Отметим преимущества и недостатки Ассемблера.\nПреимущества:\n• создаются эффективные и компактные программы, поскольку разработчик получает доступ ко всем возможностям процессора.\n2\nНедостатки [1]:\n•\tпрограммист, работающий с языками низкого уровня, должен быть высокой квалификации, хорошо понимать устройство микропроцессорной системы, для которой создается программа. Так, если программа создается для компьютера, нужно знать устройство компьютера, а так же устройство и особенности работы его процессора;\n•\tрезультирующая программа не может быть перенесена на компьютер или устройство с другим типом процессора;\n•\tзначительное время разработки больших и сложных программ. Язык Ассемблера используется для создания драйверов оборудования и ядра операционной системы.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТак же рассмотрим несколько современных языков программирования высокого уровня, к которым можно отнести:\n•\tJava;\n•\tКобол;\n•\tPython;\n•\tC;\n•\tC++;\n•\tC#;\n•\tAda;\n•\tObjective C;\n•\tJavaScript;\n•\tDelphi.\nЯзыки высокого уровня ориентированы не на систему команд, а на систему операторов, что позволяет писать большие и сложные программы.\nНапример, язык C, являющийся одним из самых популярных языков программирования, широко используется для разработки программного обеспечения. Область применения данного языка включает в себя со-\nздание операционных систем, драйверов устройств, разнообразных прикладных программ приложений для встраиваемых систем, высокопроизводительных серверов, а также развлекательных приложений (игр) [2].\nЯзыки высокого уровня используют так же при изучении различных учебных курсов [3].\nНапример, язык Ада используется для автоматизации задач управления устройствами.\nRedMor* 0114 Ргодгзтямпд Language Rarfcngs\nRgpMrRata«Wtof<fRt|ecsi\nРис. 1. Языковый рейтинг RedMonk за 2015 год\nЕсли взять в рассмотрение всем известный формат передачи сообщений MMS (Multimedia Messaging Service - Сервис Мультимедийных Сообщений), который в отличие от SMS, позволяет отправлять с сотового телефона не только текст, но и различную мультимедиа информацию,\nнапример звукозаписи, фотографии и даже видеоклипы, то для их написания чаще всего используется язык Java.\nOct 2015\tOct 2014\tChange\tProgramming Language\tRatings\tChange\n1\t2\tА\tJava\t19.543%\t+6.04%\n2\t1\tV\tC\t16.19D%\t-1.47%\n3\t4\tА\tC++\t5.749%\t+o.as%\n4\t5\tА\tc#\t4.325%\t43.08%\n5\tе\tА\tPython\t4.512%\t+218%\n6\t7\tА\tPHP\t2.561%\t-0.38%\n7\t13\tА\tVisual Basic .NET\t2.462%\t+0.71%\n8\t12\t\tJavaScript\t2.292%\t+0.52%\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n9\t9\t\tPerl\t2.247%\t43.13%\n10\t16\tÄ\tRuby\t1.825%\t43.70%\n11\t11\t\tDelphi/Object Pascal\t1.637%\t-0.18%\n12\t31\tА\tAssembly language\t1.573%\t+1.16%\n13\t14\tА\tVisual Basic\t1.515%\t-0.05%\n14\t3\t¥\tObjective-C\t1.419%\t-3.68%\n15\t19\tÄ\tSwift\t1.277%\t+0.52%\n16\t2D\tÄ\tPascal\t1.194%\t+0.47%\n17\t27\tА\tMATLAB\t1.159%\t+0.55%\n18\t23\t\tPUSQL\t1.067%\t+0.39%\n19\t29\t\tOpenEdge ABL\t1.040%\t+0.53%\n20\t15\t¥\tR\t0.991%\t-0.53%\nРис. 2. Языковый рейтинг TIOBE за 2016 год\nВеб-программисты занимающиеся разработкой сайтов используют HTML, Java, JavaScript, VBScript.\nЧаще всего для программирования смартфонов используется язык программирования JavaScript. Это можно увидеть из языкового рейтинга RedMonk за 2015 год определяющий популярность с помощью анализа активности [4].\nРезультаты:\n•\tJavaScript;\n•\tJava;\n•\tPHP;\n•\tPython;\n•\tC#;\n•\tC++;\n•\tRuby;\n•\tC;\n•\tObjective-C.\nТак же можем посмотреть языковой рейтинг TIOBE за 2016 год определяющий популярность с помощью анализа активности (рис. 2).\nИз перечисленных языков практически все имеют С-подобный синтаксис.\nРазработчики и операторы предлагают нам все больше и больше дополнительных услуг.\nНикого не удивит возможность подключения телефона к персональному компьютеру.\nДелая выводы по статье, хочется особенно подчеркнуть, что роль языков программирования в современных смартфонах очень велика. Пользуясь многими приложениями, выходя в интернет, загружая музыку, отправляя SMS, мы не задумываемся об этом.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСписок использованных источников\n1.\tАлександров Э.Э., Афонин В. В. Введение в программирование на языке С. Саранск: Изд-во Мордов. ун-та, 2009. 316 с.\n2.\tАлександров Э.Э., Афонин В.В. Программирование на языке С в Microsoft Visual Studio 2010. Саранск: Изд-во Мордов. ун-та 2010. 426 с.\n3.\tАфонин В.В., Никулин В.В. Методы моделирования и оптимизации с параметрами на языке С/С++ и MATLAB: в 2 ч. Саранск: Изд-во Мордов. ун-та, 2015. 184 с.\n4.\tРежим доступа: http://redmonk.com/sogrady/ 2015/01/14/language-rankings-1-15\n5.\tРежим доступа: https://ru.wikipedia.org/wiki/Смартфон\n",
    "download_url": "https://cyberleninka.ru/article/n/rol-yazykov-programmirovaniya-v-sovremennyh-smartfonah/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/primenenie-sredstv-open-source-dlya-vizualizatsii-standartizirovannyh-meditsinskih-dannyh",
    "slug": "primenenie-sredstv-open-source-dlya-vizualizatsii-standartizirovannyh-meditsinskih-dannyh",
    "title": "Применение средств open source для визуализации стандартизированных медицинских данных",
    "abstract_description": "Актуальность работы обусловлена потребностью использования гибких и тривиальных программных средств для визуализации стандартизированных медицинских данных. Цель работы: Используя средства open source реализовать представление стандартизированных медицинских данных, структура которых регламентирована стандартом ISO 13606. Методы: Для структурирования медицинских данных был использован стандарт клинической информации ISO 13606, который описывает структуру данных для передачи их между различными медицинскими информационными системами. Для преобразования данных в стандартный формат был применен канонический подход, при котором данные из различных систем преобразовывались к архетипной модели ISO 13606. JavaScript библиотеки с открытым программным кодом (open source). Среда разработки MS Visual Studio. Результаты: Для работы с имеющимся набором медицинских архетипов была разработана информационная модель, описанная на языке XML. Используя open source библиотеки JavaScript, были построены диаграмма показателей инсулина и уровня сахара в крови пациента, а также динамическая диаграмма, определяющая уровень сахара в крови пациента. Выводы: Применяя средства open source (библиотек JavaScript), разработчик получает многообразие готовых решений в виде шаблонов, используя которые реализуются гибкие и тривиальные способы графического представления медицинских данных.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.22\nПРИМЕНЕНИЕ СРЕДСТВ OPEN SOURCE ДЛЯ ВИЗУАЛИЗАЦИИ СТАНДАРТИЗИРОВАННЫХ МЕДИЦИНСКИХ ДАННЫХ\nКопаница Георгий Дмитриевич,\nканд. техн. наук, доцент кафедры оптимизации систем управления Института кибернетики Томского политехнического университета, Россия, 634050, г. Томск, пр. Ленина, д. 30; доцент Томского Государственного архитектурно-строительного университета, Россия, 634003, г. Томск, пл. Соляная, д. 2. E-mail: georgy.kopanitsa@gmail.com\nТараник Максим Алексеевич,\nаспирант кафедры оптимизации систем управления Института кибернетики\nТомского политехнического университета, Россия, 634050, г. Томск, пр. Ленина, д. 30. E-mail: taranik@tpu.ru\nАктуальность работы обусловлена потребностью использования гибких и тривиальных программных средств для визуализации стандартизированных медицинских данных.\nЦель работы: Используя средства open source реализовать представление стандартизированных медицинских данных, структура которых регламентирована стандартом ISO 13606.\nМетоды: Для структурирования медицинских данных был использован стандарт клинической информации ISO 13606, который описывает структуру данных для передачи их между различными медицинскими информационными системами. Для преобразования данных в стандартный формат был применен канонический подход, при котором данные из различных систем преобразовывались кархетипной модели ISO 13606. JavaScript библиотеки с открытым программным кодом (open source). Среда разработки MS Visual Studio.\nРезультаты: Для работы с имеющимся набором медицинских архетипов была разработана информационная модель, описанная на языке XML Используя open source библиотеки JavaScript, были построены диаграмма показателей инсулина и уровня сахара в крови пациента, а также динамическая диаграмма, определяющая уровень сахара в крови пациента.\nВыводы: Применяя средства open source (библиотек JavaScript), разработчик получает многообразие готовых решений в виде шаблонов, используя которые реализуются гибкие и тривиальные способы графического представления медицинских данных.\nКлючевые слова:\nOpen source, визуализация, архетипы, JavaScript, ISO 13606.\nВведение\nОдним из наиболее важных аспектов при работе с персональными медицинскими записями (ПМЗ) является пользовательский интерфейс. Разработка простых и удобных средств отображения клинического статуса пациента особенно актуальна при наблюдении за пациентами в престарелом возрасте. Такие средства реализуются в рамках подхода ALL (Ambient Assisted Living). В основе данного подхода лежит концепция, предполагающая разработку интеллектуальных систем для обработки данных, полученных при помощи различных сенсорных устройств, объединенных в сеть и расположенных по всему периметру дома наблюдаемого пациента [1-5]. Также подход AAL направлен на разработку специальных средств, таких как социальные сети (social networking) [6] и вебсервисы, позволяющие пациенту удаленно взаимодействовать с медицинским персоналом [7]. Для формирования полного и развернутого представления о клиническом статусе пациента необходимы данные из различных источников. Таким образом, данный подход требует стандартизации хранимых данных.\nСтандарты хранения клинических данных не дают ответа на вопрос о представлении медицин-\nской информации пользователю [8-12]. Эта проблема стала следствием ранее проведенных исследований, направленных на разработку методов визуализации стандартизированных медицинских данных [13]. Одним из таких стандартов является стандарт ISO 13606, позволяющий описывать медицинские документы любой сложности. Однако сами медицинские концепции, описываемые архетипом, являются семантически несвязными. Таким образом, если пользователь хочет определить референтный интервал для поля с физической величиной (Physical Quantity, PQ), это будет обработано системой только в том случае, если она заведомо знает, что референтный интервал должен быть связан с определенным полем архетипа. Решением данной проблемы может быть разработка модели верхнего уровня, которая будет дополнять собой модель данных стандарта ISO 13606 [14].\nПри использовании стандартизированных медицинских данных разработка графического пользовательского интерфейса требует дополнительных существенных временных и финансовых затрат для его реализации. Таким образом, пользовательский интерфейс разрабатывается под конкретные EHR (Electronic Healthcare Records) системы [15]. Одним из способов представления стандартизиро-\nванных медицинских данных является применение средств open source, использующих библиотеки JavaScript [16, 17]. В качестве хранилища информации для работы с данными библиотеками обычно выступают файлы с расширением JBOS или csv. Однако стандартизированные медицинские данные представлены в формате XML [8, 18-20].\nЦелью настоящей статьи является исследование средств open source на предмет их использования для визуализации стандартизированных медицинских данных. В соответствие с целью был обозначен следующий ряд задач:\n•\tОпределить существующие средства open source для решения задачи представления медицинских данных.\n•\tРазработать инструментарий для визуализации клинических архетипов, основанных на стандарте ISO 13606.\n•\tОсуществить проверку разработанного инструмента визуализации стандартизированных медицинских данных на клинических результатах наблюдения за пациентом с сахарным диабетом.\nМетоды и материалы\nДля проведения исследования был определен набор медицинских данных пациента с сахарным диабетом, полученных из [21-23]. Данный набор был сформирован медицинскими работниками посредством автоматизированного фиксирования соответствующих клинических показателей в различные периоды времени наблюдения за пациентом. Для настоящего исследования полученный набор данных был представлен в виде совокупности архетипов, структура которых определена стандартом ISO 13606 [18]. Данная структура представлена в виде XML файла, хранящего данные из разнородных источников. Также такой формат необходим для сохранения семантики при\nпередаче данных между различными EHR системами. Для преобразования данных в требуемый формат используется канонический подход, предусматривающий преобразование данных из модели информационной системы в каноническую модель для обмена клинической информацией. Последняя модель является архетипной моделью стандарта ISO 13606 [10]. Для определения характеристик визуализации медицинских данных была разработана информационная модель (ИМ) [22], представляющая собой XML схему. Используемые в проекте библиотеки JQuery [16, 17] применялись для построения статических и динамических диаграмм с целью определения корреляции между уровнем сахара в крови и инсулином в различные периоды наблюдения: ежедневный, еженедельный и ежемесячный. В качестве среды разработки интерфейса использовалась MS Visual Studio, полученные результаты визуализации были отображены с применением браузера Mozila Firefox.\nРезультаты\nИспользуемая совокупность медицинских данных была определена как соответствующая совокупность архетипов, которая позволяет совершать обмен данной медицинской информацией между пользователями. Определенные архетипы представляют собой совокупность XML файлов. Настоящие медицинские данные, необходимые для представления пользователю в графическом виде, были получены из различных EHR систем. Различные данные, представленные различными архетипами, были объединены в группы. Характеристики визуализации медицинских данных, описанные в ИМ, определяют тип диаграмм, а также другие свойства конечного графического представления пользователю. Применяя соответствующий шаблон для отображения данных, результатом визуализации становится сгенерированная HTML стра-\nУровень\nмодели\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nISO 13606 Модель архетипов\nВизуальная модель\nУровень\nсущности\nАрхетипы\nВизуальные\nсущности\nУровень\nданных\nМедицинские\nданные\nУровень\nинфтерфейса\nГрафический интерфейс\nРис. 1. Процесс визуализации медицинских данных\nJava script шаблоны\nница с диаграммой, за построение которой отвечают библиотеки JavaScript. На рис. 1 представлен процесс модельного преобразования, обеспечивающий графическое отображение медицинских данных пользователю.\nВизуальная модель (Visual model) основана на архетипной модели стандарта ISO 13606. Уровень сущности (Instance layer) содержит архетипы, а также информационную модель представления данных (Visual Medical Concept). На уровне данных (Data layer) происходит связь файлов ИМ (Visual Medical Concept) с файлами XML, содержащими медицинские данные. На следующем уровне представления медицинских данных применяются JavaScript шаблоны для графического отображения диаграмм. Результаты настоящей работы представлены на рис. 2-5. Данные диаграммы отображают динамику изменения различных зафиксированных клинических параметров пациента в различное время. Диаграмма на рис. 2 демонстрирует совокупность различных параметров, опреде-\nленных различными архетипами, но содержащихся в одном медицинском документе. Данные архетипы описывают различные показания инсулина пациента: регулярный инсулин (regular insulin), инсулин НПХ (NPH insulin), а также содержания сахара в крови (Glucose).\nНа шаблоне, изображенном на рис. 3, также представлены данные, характеризующие динамику изменения уровня сахара в крови пациента, однако он позволяет масштабировать необходимые части диаграммы для более детального просмотра.\nГибкость применяемых шаблонов позволяет отображать необходимые медицинские данные в любой форме. Таким образом, модифицировав одни из представленных выше шаблонов, были получены графики, изображенные на рис. 4, 5. На рис. 4 показана динамика изменения уровня сахара в крови пациента (Glucose) а также пульса (Pulse). Более того, на данном графике отображен нормальный интервал первого показателя (Glucose norm).\nНа заключительной диаграмме (рис. 5) представлены такие показатели, как уровень сахара в крови (Glucose) с нормальным интервалом, артериальное давление (Pressure) и пульс (Pulse). Крайняя точка линии артериального давления, наиболее близкая к оси абсцисс, характеризует нижнюю планку показателя. Планка верхней границы давления отображена точкой максимально отдаленной от оси абсцисс.\nПрактическая реализация представленных выше клинических диаграмм была выполнена с применением открытой графической библиотеки D3JS [16]. Одним из наиболее важных достоинств использования данной библиотеки является ассоциативный набор тегов, отвечающих за соответствующие блоки представленной диаграммы. Так, например, диаграмма, изображенная на рис. 1, имеет такие блоки, как графическая область, блок\nграфиков, шкала глюкозы, шкала инсулина, шкала дат и легенда (рис. 6).\nОсновной элемент - графическая область - является контейнером и содержит весь набор остальных блоков, представленных как графические элементы, описанные на языке масштабируемой векторной графики (SVG). Данный элемент прикрепляется в body секции HTML документа с определенными параметрами (рис. 7).\nПредставленные на рис. 6 шкалы определяют значения для соответствующих показателей глюкозы и инсулина, представленных осью ординат, а также времени, значения которого расположены на оси абсцисс. Для добавления осей на диаграмму была использована следующая кодовая конструкция (рис. В, 9):\nДля построения соответствующих графиков на диаграмме применяются три различных метода\nGlucose\tPulse\tЦ\nРис. 4. Даграмма показателей пульста и уровня сахара в крови пациента\nGlucose Norm\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 5. Диаграмма показателей пульса, артериального давления и уровня сахара в крови пациента\nЛегенда\nРис. в. Блоки библиотеки D3JS иаг\n;vg\nect(\"body\").append{\"svg:svg\")\n.attr{\"width\", и + m[l] + m[3]) .attr{\"heightMj h + m[0] + m[2])\n.apperii\nd{'\nsvg: g\n)\n.attr{\"transform\"}\nРис. 7. Код элемента «графическая область>:\nsvg.append{\"svg:g\")\n1 translate(\" + m[3] +\n.attr(\"cl\nass\nу axis\n')\n.attr(\"transform\"j \"translate(\" + w + \",0)“) .са11(уАхІ5);\nРис. 8. Код добавления оси ординат\nsvg- append{\"svg:g\")\n.attr(\"class\" \"x axis .attr{\"transform\" .call(xAxis);\nРис. 9. Код добавления оси абсцисс\n)\n'translate (0/' + h + \")\")\n(рис. 10, 11), обрабатывающих хранящиеся данные. Для построения динамики изменения инсулина применяется гистограмма (bar chart), а для отображения динамики показателя глюкозы применяется кривая линия (curve line).\nОбласть легенды, представленная на рис. 1, также является SVG элементом, состоящим из элементов прямоугольника и текстового элемента. На рис. 12 представлен код добавления легенды для обозначения представленных гистограмм инсулина и графика изменения глюкозы пациента.\nОбсуждение\nПредставленный в настоящем исследовании подход, определяющий метод визуализации медицинских данных с применением графических библиотек JavaScript, несомненно, требует дальнейшего всестороннего изучения. Перспектива такого подхода заключается в удачном применении средств open source, определяющих графическое представление клинической информации для отображения медицинского документа, хранящегося в XML файле и определяющего содержание данно-\nvalues.forEach(function (d) {\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nd.Date = parse(d.Date); d.Insulin = +d.Insulin;}); x.domain([values[0].Date, values[values.length - l].Date]); y.domain([0, d3.max(values, function (d) { return d.Insulin; })]).nice(); svg.selectAll(\".data\")\n.data(data)\n.enter().append(\"line\")\n.attr(\"class\", \"bin\")\n.attr(\"xl\"j function (d) { return x(d.Date); }) .attr(\"x2\", function (d) { return x(d.Date); }) .attrC'yl\", h)\n.attr(\"y2\"j function (d) { return y(d.Insulin); });\nРис. 10. Код добавления гистограммы инсулина\nvar line = d3.svg.line()\n.interpolate(\"monotone\")\n.x(function (d) { return x(d.Date); })\n.y(function (d) { return y(d.Glucose); }); values-forEach(function (d) {\nd.Date = parse(d.Date); d.Glucose = +d.Glucose; }); x.domain([values[0].Date, values[values.length - l].Date]); y.domain([0j d3.max(values, function (d) { return d.Glucose; })]).nice();\nsvg.append(\"svg:clipPath\")\n.attr(\"id\"j \"clip\")\n.append(\"svg:rect\")\n,attr(\"width\", w)\n.attr(\"height\", h); svg.append(\"svg:path\")\n.attr(\"class\", \"line\")\n.attr(\"clip-path\", \"url(#clip)\")\n.attr(\"d\"j line(values));\nРис. 11. Код добавления кривой линии глюкозы Рис. 12. Код добавления области легенды\nго представления. В дальнейшем вышеописанный метод представления клинической информации может быть успешно применен в медицинских информационных, а также интеллектуальных медицинских системах, имеющих веб интерфейс и использующих стандартизированный подход к организации и хранению данных электронной истории болезни (ЭИБ) на основе формата ISO 13606. Так медицинский специалист сможет принимать эффективные клинические решения, основываясь на представленной динамике изменения медицинских показателей пациента, полученных лабораторными исследованиями или при проведении осмотров, с последующим занесением в ЭИБ. Помимо представленных в настоящей работе примеров визуализации динамики изменений таких показателей, как регулярный инсулин (regular insulin), инсулин ПНХ (NPH insulin), уровень сахара в крови (Glucose), пульс (Pulse), артериальное давление (Pressure), а также нормированных значений некоторых из них, также возможно представление интерфейса интерактивной ЭМК в целом. При реализации вышеприведенных примеров в качестве инструментов для создания графических представлений использовались разработки, представленные проектами «Data-Driven Documents» [16], а также «Flot» [17]. Также к подобным средствам можно отнести открытую библиотеку «Formatting Objects Processor» (FOP) [24]. Данная библиотека позволяет генерировать PDF документы с графическими представлениями медицинских данных в\nСПИСОК ЛИТЕРАТУРЫ\n1. Sousa F., Viola L., Ferreira L. et al. An ecosystem of products and systems for ambient intelligence - the AAL4ALL users perspective // Studies in health technology and informatics. - 2012. - № 177. -P. 263-271.\n2.\tMunoz A., Serrano E., Villa A. et al. An approach for representing sensor data to validate alerts in Ambient Assisted Living // Sensors. - 2012. - № 12 (5). - P. 6282-6306.\n3.\tFernandez-Llatas C., Garcia-Gomez J.M., Vicente J. et al. Behaviour patterns detection for persuasive design in Nursing Homes to help dementia patients // IEEE Engineering in Medicine and Biology Society: Annual International Conference. - Boston, Aug. 30 - Sept. 3, 2011. - P. 6413-6417.\n4.\tChen C., Haddad D., Selsky J. et al. Making sense of mobile health data: an open architecture to improve individual- and population-level health // Journal of medical Internet research. - 2012. -№ 14 (4). - P. 112-117.\n5.\tAquilano M., Cavallo F., Bonaccorsi M. et al. Ambient Assisted Living and ageing: Preliminary results of RITA project // IEEE Engineering in Medicine and Biology Society: Annual International Conference. - San Diego, Aug. 28 - Sept. 1, 2012. -P. 5823-5826.\n6.\tDemski H., Hildebrand C., Lopez Bolos J. et al. Technical requirements of a social networking platform for senior citizens // Studies in health technology and informatics. - 2012. - № 180. -P. 818-822.\n7.\tCascado D., Romero S.J., Hors S. et al. Virtual worlds to enhance Ambient-Assisted Living // IEEE Engineering in Medicine and Biology Society: Annual International Conference. - Buenos Aires, Aug. 31 - Sept. 4, 2010. - P. 212-215.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nформате «Scalable Vector Graphics» (SVG). Однако для работы совершения данных преобразований на платформе-NET в среде разработки MS Visual Studio необходима среда выполнения IKVM [25]. Данная среда также относится к компонентам open source. Описанный в настоящей работе метод был реализован для конкретных медицинских данных пациента с сахарным диабетом, применяемые для их визуализации шаблоны были настроены вручную.\nЗаключение\nПолученные решения способствуют реализации гибких и тривиальных способов графического представления медицинских данных. Используя библиотеки JavaScript, разработчик получает мощный инструмент для создания графических элементов. Дополнительным достоинством средств open source является многообразие уже разработанных шаблонов - готовых решений. При данном подходе разработчику необходимо внести минимальные коррективы в исходный код для получения соответствующего графического представления клинической информации. Результат такого представления является простым и информативным, что особенно важно для пациентов, в частности для пациентов в престарелом возрасте. Таким образом, использование средств open source позволит значительно снизить финансовые затраты при создании EHR систем, а также сократить время разработки пользовательского интерфейса.\n8.\tVeseli H., Kopanitsa G., Demski H. Standardized EHR interoperability - preliminary results of a German pilot project using the archetype methodology // Studies in health technology and informatics. - 2012. - № 180. - P. 646-650.\n9.\tModel driven development of clinical information sytems using openEHR / K. Atalag, H.Y. Yang, E. Tempero, J. Warren // Studies in health technology and informatics. - 2011. - № 169. -P. 849-853.\n10.\tCios K.J., Moore G.W. Uniqueness of medical data mining // Artificial intelligence in medicine. - 2002. - № 26 (1). - P. 1-24.\n11.\tVan der Linden H., Austin T., Talmon J. Generic screen representations for future-proof systems, is it possible? There is more to a GUI than meets the eye // Computer methods and programs in biomedicine. - 2009. - № 95 (3). - P. 213-226.\n12.\tGeneric screen representations for future proof systems - is it possible? Two-model approach to a generic GUI / H. van der Linden, T. Schuler, R. Chen, J. Talmon // Studies in health technology and informatics. - 2007. - № 129 (P. 2). - P. 1122-1126.\n13.\tFonseca T., Ribeiro C., Granja C. Vital signs in intensive care: automatic acquisition and consolidation into electronic patient records // Journal of medical systems. - 2009. - № 33 (1). -P. 47-57.\n14.\tRaghupathi W., Umar A. Upper-level ontologies for health information systems. Towards an archetype patterns approach // Methods of information in medicine. - 2011. - № 50 (3). -P. 285-295.\n15.\tUser interface of MUDR electronic health record / P. Hanzlicek, J. Spidlen, H. Heroutova, M. Nagy // International journal of medical informatics. - 2005. - № 74 (2). - P. 221-227.\n16.\tData-Driven Documents. URL: http://d3js.org/ (дата обращения: 15.02.2013).\n17.\tAttractive JavaScript plotting for jQuery. URL: http://www.flotcharts.org/ (дата обращения: 15.02.2013).\n18.\tRinner C., Kohler M., Hubner-Bloder G. et al. Creating ISO/EN 13606 archetypes based on clinical information needs // Studies in health technology and informatics. - 2011. - № 165. -P. 43-48.\n19.\tDuftschmid G., Wrba T., Rinner C. Extraction of standardized archetyped data from Electronic Health Record systems based on the Entity-Attribute-Value Model // International journal of medical informatics. - 2010. - № 79 (8). - P. 585-597.\n20.\tSemantic validation of standard-based electronic health record documents with W3C XML schema / C. Rinner, S. Janzek-Hawlat, S. Sibinovic, G. Duftschmid // Methods of information in medicine. - 2010. - № 49 (3). - P. 271-280.\n21.\tMola E. Patient empowerment, an additional characteristic of the European definitions of general practice/family medicine // The\nEuropean journal of general practice. - 2013. - М 19 (2). -P. 128-131.\n22.\tKopanitsa G. Standard based multiclient medical data visualization // Studies in health technology and informatics. - 2012. -М 180. - P. 199-203.\n23.\tUC Irvine Machine Learning Repository. URL: http://archi-ve.ics.uci.edu/ml/datasets/Diabetes (дата обращения: 10.02.2013).\n24.\tThe Apach FOP Project. URL:\thttp://\nxmlgraphics.apache.org/fop/ (дата обращения: 1Б.02.2013).\n2Б. IKVM.NET HomePage. URL: http://ikvm.net/ (дата обращения: 1Б.02.2013).\nПоступила 02.09.2013 г.\nUDC 004.22\nAPPLYING OPEN SOURCE DATA VISUALIZATION TOOLS TO STANDARD BASED MEDICAL DATA\nGeorgy D. Kopanitsa,\nCand. Sc., Tomsk Polytechnic University, 30, Lenin avenue, Tomsk, 634050, Russia; Tomsk State University of Architecture and Building, 2, Solyanaya sq., Tomsk, 634003, Russia. E-mail: georgy.kopanitsa@gmail.com\nMaksim A. Taranik,\nTomsk Polytechnic University, 30, Lenin avenue, Tomsk, 634050, Russia. E-mail: taranik@tpu.ru\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nThe urgency of the paper deals with the necessity of using flexible and simple software tools for standard-based medical data visualization. The aim of the study: to implement ISO 13606 standard-based medical data visualization using open source tools.\nThe methods: ISO 13606 is an archetype clinical standard. A canonical approach and Open source JavaScript libraries are used for data transformation. MS Visual Studio is the development environment.\nThe results: For working with medical set of archetypes the XML informational model was developed. Using open source JavaScript libraries the insulin and blood sugar and dynamic blood sugar diagrams were constructed.\nConclusion: Applying the open source tools (JavaScript libraries) a developer gains a variety of prepared solutions which realize flexible and simple methods for standard-based medical data representation.\nKey words:\nOpen source, visualization, archetypes, JavaScript, ISO 13606.\nREFERENCES\n1.\tSousa F., Viola L., Ferreira L. An ecosystem of products and systems for ambient intelligence - the AAL4ALL users perspective. Studies in health technology and informatics, 2012, no. 177, pp. 263-271.\n2.\tMunoz A., Serrano E., Villa A. An approach for representing sensor data to validate alerts in Ambient Assisted Living. Sensors, 2012, no. 12 (5), pp. 6282-6306.\n3.\tFernandez-Llatas C., Garcia-Gomez J.M., Vicente J. Behaviour patterns detection for persuasive design in Nursing Homes to help dementia patients. Annual International Conference of the IEEE Engineering in Medicine and Biology Society. Boston, Aug. 30 - Sept. 3, 2011. pp. 6413-6417.\n4. Chen C., Haddad D., Selsky J. Making sense of mobile health data: an open architecture to improve individual- and population-level health. Journal of medical Internet research, 2012, no. 14 (4), pp. 112-117.\n5.\tAquilano M., Cavallo F., Bonaccorsi M. Ambient Assisted Living and ageing: Preliminary results of RITA project. Annual Interna-\ntional Conference of the IEEE Engineering in Medicine and Biology Society. San Diego, Aug. 28 - Sept. 1, 2012. pp. 5823-5826.\n6.\tDemski H., Hildebrand C., Lopez Bolos J. Technical requirements of a social networking platform for senior citizens. Studies in health technology and informatics, 2012, no. 180, pp. 818-822.\n7.\tCascado D., Romero S.J., Hors S. Virtual worlds to enhance Ambient-Assisted Living. Annual International Conference of the IEEE Engineering in Medicine and Biology Society. Buenos Aires, Aug. 31 - Sept. 4, 2010. pp. 212-215.\n8.\tVeseli H., Kopanitsa G., Demski H. Standardized EHR interoperability - preliminary results of a German pilot project using the archetype methodology. Studies in health technology and informatics, 2012, no. 180, pp. 646-650.\n9.\tAtalag K., Yang H.Y., Tempero E., Warren J. Model driven development of clinical information sytems using openEHR. Studies in health technology and informatics, 2011, no. 169, pp. 849-853.\n10.\tCios K.J., Moore G.W. Uniqueness of medical data mining. Artificial intelligence in medicine, 2002, no. 26 (1), pp. 1-24.\n11.\tVan der Linden H., Austin T., Talmon J. Generic screen representations for future-proof systems, is it possible? There is more to a GUI than meets the eye. Computer methods and programs in biomedicine, 2009, no. 95 (3), pp. 213-226.\n12.\tVan der Linden H., Schuler T., Chen R., Talmon J. Generic screen representations for future proof systems - is it possible? Two-model approach to a generic GUI. Studies in health technology and informatics, 2007, no. 129 (P. 2), pp. 1122-1126.\n13.\tFonseca T., Ribeiro C., Granja C. Vital signs in intensive care: automatic acquisition and consolidation into electronic patient records. Journal of medical systems, 2009, no. 33 (1), pp. 47-57.\n14.\tRaghupathi W., Umar A. Upper-level ontologies for health information systems. Towards an archetype patterns approach. Methods of information in medicine, 2011, no. 50 (3), pp. 285-295.\n15.\tHanzlicek P., Spidlen J., Heroutova H., Nagy M. User interface of MUDR electronic health record. International journal of medical informatics, 2005, no. 74 (2), pp. 221-227.\n16.\tData-Driven Documents. Available at: http://d3js.org/ (accessed 15 February 2013).\n17.\tAttractive JavaScript plotting for jQuery. Available at: http://www.flotcharts.org/ (accessed 15 February 2013).\n18.\tRinner C., Kohler M., Hubner-Bloder G. Creating ISO/EN 13606 archetypes based on clinical information needs. Studies in health technology and informatics, 2011, no. 165, pp. 43-48.\n19.\tDuftschmid G., Wrba T., Rinner C. Extraction of standardized archetyped data from Electronic Health Record systems based on the Entity-Attribute-Value Model. International journal of medical informatics, 2010, no. 79 (8), pp. 585-597.\n20.\tRinner C., Janzek-Hawlat S., Sibinovic S., Duftschmid G. Semantic validation of standard-based electronic health record documents with W3C XML schema. Methods of information in medicine, 2010, no. 49 (3), pp. 271-280.\n21.\tMola E. Patient empowerment, an additional characteristic of the European definitions of general practice/family medicine. The European journal of general practice, 2013, no. 19 (2), pp. 128-131.\n22.\tKopanitsa G. Standard based multiclient medical data visualization. Studies in health technology and informatics, 2012, no. 180, pp. 199-203.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n23.\tUC Irvine Machine Learning Repository. Available at: http://archive.ics.uci.edu/ml/datasets/Diabetes (accessed 10 February 2013).\n24.\tThe Apache FOP Project. Available at:\thttp://\nxmlgraphics.apache.org/fop/ (accessed 15 February 2013).\n25.\tIKVM.NET Home Page. Available at: http://ikvm.net/ (accessed 15 February 2013).\n",
    "download_url": "https://cyberleninka.ru/article/n/primenenie-sredstv-open-source-dlya-vizualizatsii-standartizirovannyh-meditsinskih-dannyh/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/arhitektura-obmena-dannymi-bez-poter-v-piringovom-veb-prilozhenii-videokonferents-svyazi",
    "slug": "arhitektura-obmena-dannymi-bez-poter-v-piringovom-veb-prilozhenii-videokonferents-svyazi",
    "title": "Архитектура обмена данными без потерь в пиринговом веб-приложении видеоконференц-связи",
    "abstract_description": "Поднимается проблема соединения клиентов и передачи аудиои видеопотоков данных в пиринговых веб-приложениях видеоконференц-связи. При взаимодействии нескольких клиентских и серверной частей приложения видеоконференц-связи на основе протокола WebRTC возможна частичная или полная потеря «сигнальных» данных, препятствующая соединению клиентов. Предложенная архитектура передачи и хранения «сигнальных» данных на клиенте и сервере обеспечивает буферизацию и последующую обработку «сигнальных» данных, исключая их потерю и поддерживая взаимодействие между группами клиентов.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.724\nА.И. Савельев, М.В. Прищепа\nАрхитектура обмена данными без потерь в пиринговом веб-приложении видеоконференц-связи\nПоднимается проблема соединения клиентов и передачи аудио- и видеопотоков данных в пиринговых веб-приложениях видеоконференц-связи. При взаимодействии нескольких клиентских и серверной частей приложения видеоконференц-связи на основе протокола WebRTC возможна частичная или полная потеря «сигнальных» данных, препятствующая соединению клиентов. Предложенная архитектура передачи и хранения «сигнальных» данных на клиенте и сервере обеспечивает буферизацию и последующую обработку «сигнальных» данных, исключая их потерю и поддерживая взаимодействие между группами клиентов.\nКлючевые слова: пиринговые соединения, peer-to-peer протоколы, видеоконференц-связь, веб-приложения, передача мультимедийных данных.\nАнализ способов передачи данных в пиринговых веб-приложениях видеоконференцсвязи. В настоящее время, несмотря на большие темпы развития интернет-технологий, существует множество проблем, связанных с потоковой передачей видео- и аудиоинформации. Во многом эти проблемы возникают по причине недостаточной пропускной способности каналов связи. Поскольку системы видеосвязи требуют больших сетевых ресурсов даже для передачи видео между двумя участниками, то поддержка многопользовательских видеоконференций является крайне затруднительной задачей.\nСейчас сотни тысяч пользователей могут одновременно использовать пиринговые (peer-to-peer (P2P)) сети [1, 2]. Обычной практикой в Р2Р-системах потокового видео на сегодняшний день является объединение участников, просматривающих один и тот же контент в «рой» (swarm), и перераспределение частей видеоконтента исключительно между участниками этого роя. Для такой канально-изолированной структуры Р2Р-видеосистем характерны задержки переключения каналов и отставание воспроизведения контента, связанные с оттоком абонентов канала и дисбалансом числа принимающих и ретранслирующих узлов. В целом глобальные Р2Р-сети с канально-изолированной структурой в настоящее время имеют серьезные проблемы с производительностью, которые будут становиться все более серьезными с ростом числа пользователей каналов.\nКроме того, в сетях потоковых систем Р2Р существуют проблемы, связанные с задержками каналов коммутации и низкой производительностью систем для каналов с небольшим числом участников. В работе [3] для решения этих проблем предлагается многоканальная потоковая Р2Р платформа View-Upload Decoupling (VUD), разделяющая выполняемые пользователем операции загрузки и просмотра данных, а также совместного использования ресурсов перекрестных каналов. За счет этого, обеспечиваются стабильность для многоканальных систем и качественное распределение ресурсов сети. Кроме того, для повышения производительности передачи данных учитывается географическое местоположение клиентов сети, и связь устанавливается между наиболее близко расположенными пользователями, имеющих необходимые данные.\nВ работе [4] представлена архитектура многопользовательской распределенной пиринговой системы видеоконференций, в которой предполагается, что каждый участник может создавать, отправлять и получать видеосигнал в любой момент времени, но во время видеоконференции участник передает либо видеосигнал, создаваемый его устройством, либо ретранслирует принимаемый видеосигнал другому участнику. Таким образом, участник, который посылает свой собственный видеосигнал, не может действовать в качестве промежуточного узла для прохождения видеосигнала от другого партнера. Данная распределенная архитектура может быть использована для реализации видеоконференций системы Р2Р, чтобы позволить каждому участнику видеть другого участника. Архитектура данной системы видеоконференц-связи Р2Р определяется на основе так называемой «цепи». Конфигурация цепи во время сеанса связи формируется на основе конфигурационных (служебных) сообщений, рассылаемых между приложениями видеоконференц-связи участников.\nДля уменьшения объема данных, передаваемых в ходе видеоконференц-связи, в работе [5] используется автоматический способ определения текущего говорящего, и его потокам мультимедийных данных выставляется наибольший приоритет при передаче остальным участникам. Идентификация, диаризация дикторов, а также другие методы обработки речи и анализа лица человека широко применяются для автоматизации телекоммуникационных сервисов [6-8].\nВ работе [9] предложена «бессерверная» архитектура распределительного узла для передачи видео высокой четкости в многопользовательской системе видеоконференц-связи. В основе архитектуры заложен многопользовательский управляющий блок, интегрированный в клиентское приложение, который служит для установления множественных канальных соединений, кодирует и декодирует клиентские видеопотоки и распределяет видео другим участникам сеанса связи.\nПроизводительность способов передачи потокового видео в Р2Р-сетях зависит также от конфигурации самой сети, ее топологии, неоднородности сетевых ресурсов абонентов, пропускной способности их каналов связи [10]. В отличие от совместной загрузки файлов, где малая пропускная способность канала просто приводит к медленной загрузке, при передаче потокового видео низкая скорость подключения становится настоящей проблемой. Также остаются актуальными вопросы компрессии видеосигнала, позволяющей снизить загруженность канала без значительного увеличения нагрузки на устройство конечного пользователя при кодировании/декодировании сигнала.\nВ работах [11, 12] представлены полученные авторами результаты предварительных исследований по сокращению передаваемого объема данных между пользователями в приложениях видеоконференц-связи. Описаны алгоритмы и программные средства, позволившие провести оптимизацию разработанного кроссплатформенного приложения видеоконференц-связи на этапах создания и удаления аудио - и видеопотоков данных, их передачи от сервера к клиенту и обратно, создания цепочек потоков и их поиска на сервере. В ходе исследований были выполнены упрощение клиентской части приложения и реорганизация структуры серверной части приложения.\nНа основе предложенных принципов оптимизации способов обмена мультимедийными данными в приложении видеоконференц-связи была разработана новая пиринговая архитектура прямой передачи аудио- и видеоданных между клиентскими частями, представленная в следующем разделе. Затем описан процесс формирования клиентских веб-страниц и установления связи с сервером по протоколу WebSocket. В последнем разделе обсуждаются разработанные алгоритмы установления соединений между клиентами с использованием протокола WebRTC.\nОсновные элементы разработанной пиринговой архитектуры взаимодействия модулей веб-приложения видеоконференц-связи. Разработанная архитектура, представленная на рис. 1, позволяет предотвратить потерю «сигнальных» данных при соединении трех и более участников видеоконференц-связи. Основными структурными элементами архитектуры являются: 1 - клиентская часть приложения; 2 - серверная часть приложения; 3 - блок протоколов передачи данных. Клиентская часть подразделяется на две независимые составляющие - устройство пользователя и веб-страница. Устройство пользователя в приложении необходимо для создания аудио- и видеопотоков с камеры и микрофона, подключенных или являющихся частью устройства.\nПользовательг\nУстройство\nWeb-страница\nJavaScript\nПользователь!\nПользователь^\nWebSocket\nNode.js\nСервер\n3 I\n2\nБаза данных\nРис. 1. Разработанная архитектура обмена данными в приложении видеоконференц-связи\nВеб-страница клиентской части приложения состоит из классов, написанных на языке программирования JavaScript, необходимых для создания соединений с сервером и другими клиентами с помощью различных протоколов и обработки данных. Средства CSS и HTML служат для построения графического интерфейса, отображения данных и управления клиентской частью приложения. Средства JavaScript, использующиеся на веб-странице видеочата, включают в себя три различных типа инструкций, позволяющих организовать передачу данных по трем протоколам: WebRTC, Web-Socket и HTTP. Также средства JavaScript служат для захвата и обработки потоков данных с микрофона и видеокамеры.\nСледующим основным элементом архитектуры приложения является серверная часть, она выполняет несколько различных функций: формирование клиентской части приложения; регистрация клиента; авторизация клиента; обмен «сигнальными» данными между клиентами; создание комнат чата и работу с базой данных. Сам сервер работает на платформе Node.js, транслирующей JavaScript в машинный код, и имеет такую же асинхронную архитектуру, как и клиентская часть, разработанная средствами языка программирования JavaScript. База данных MongoDB, расположенная в серверной части приложения, имеет NoSQL-архитектуру, которая подходит для упрощения реализации серверной части. Взаимодействие с базой данных MongoDB происходит с помощью JavaScript и специальной библиотеки драйвера, предназначенной для этой базы данных.\nТретий элемент архитектуры, представленной на рис. 1, состоит из протоколов - HTTP, Web-Socket и WebRTC. Эти протоколы обеспечивают обмен данными на различных этапах работы приложения, с их помощью осуществляется создание соединения клиентских частей по протоколу WebRTC для передачи потоковых аудио - и видеоданных между ними. Существуют проблемы, возникающие при создании соединения, исходящие из асинхронной архитектуры приложения и протокола WebRTC, не предусматривающего стандартную реализацию соединения множества клиентов. Также необходимо отметить сложность процедуры установления связи между клиентами по протоколу WebRTC, требующую обмена «сигнальными» данными между ними и особого внимания при создании соединения.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ данной работе описано решение вышерассмотренной проблемы потери сигнальных данных при множественном соединении клиентов видеоконференц-связи с помощью внедрения новых алгоритмов взаимодействия клиентских и серверной частей и использования различных протоколов для организации обмена данными. Такая архитектура позволяет создать полноценное пиринговое приложение видеоконференц-связи, которое может работать в режиме группового чата. В следующем разделе рассмотрены основные протоколы и программные средства, использующиеся для создания клиентской веб-страницы и ее функционирования при проведении видеоконференции.\nПроцесс формирования клиентских веб-страниц и установления связи с сервером по протоколу WebSocket. Чтобы ясно представлять проблему потери «сигнальных» и предложенные в данном исследовании программно-алгоритмические решения данных, вначале рассмотрим основные этапы функционирования клиентской и серверной частей разработанного приложения видеоконференц-связи.\nКлиентская часть приложения начинает работу с формирования веб-страницы регистрации или авторизации, позволяющих взаимодействовать клиенту с сервером посредством отправления или получения данных по HTTP-протоколу.\nHTTP - это протокол прикладного уровня для передачи произвольных данных. Данный протокол используется в приложении для передачи клиенту графического интерфейса в виде html и сss данных, логики клиентской части приложения, написанной на языке программирования JavaScript, а также для обмена данными клиента с сервером, при регистрации и авторизации клиента с помощью технологии Ajax, позволяющей обмениваться данными с сервером по протоколу HTTP без перезагрузки веб-страницы.\nАвторизация клиента позволяет пользователю получить доступ к персональным данным и странице видеоконференц-связи. Для авторизации пользователь вводит данные в формы: логин и пароль. Затем происходит сбор данных из форм и отправка этих данных на сервер с помощью технологии Ajax. Далее сервер обрабатывает полученные данные: проверяет на соответствие определенному набору символов и на превышение максимального размера данных в запросе, выполняет поиск пары логин-пароль по базе данных. При успешном завершении всех операций сервер сформирует страницу видеоконференц-связи с пользовательскими данными и отправит ее по протоколу HTTP-клиенту. В случае несоответствия данных определенным требованиям или возникновения\nошибки сервер отправит клиенту информационное сообщение, способствующее устранению возникшей ситуации, используя протокол HTTP.\nРегистрация клиента, так же как и авторизация, предполагает заполнение форм данными и их отправку на сервер по протоколу HTTP. Далее сервер обрабатывает данные, присланные клиентом. В случае положительного результата обработки сервер сохранит все полученные данные в базе данных, проведет в автоматическом режиме регистрацию клиента, сформирует и отправит ответ на запрос клиента в виде страницы видеоконференц-связи с пользовательскими данными. В случае ошибочных данных сервер вернет уведомление об ошибке клиенту по протоколу HTTP.\nТаким образом, приложение использует HTTP-протокол для надежной передачи HTML, CSS и javascript данных между сервером и клиентом. Преимущество использования этого протокола в том, что он специально предназначен для передачи веб-страниц и их логики, а также хорошо поддерживается всеми существующими браузерами. Протокол HTTP имеет набор стандартных команд, среди которых есть две основные команды: «GET» и «POST», входящие в состав Ajax технологии, соответственно позволяющие осуществлять запросы на выдачу страниц к серверу и запрос на обмен различным типом данных между сервером и клиентом при авторизации или регистрации клиента.\nПосле получения клиентом веб-страницы видеоконференц-связи средствами JavaScript, создается сокет на клиенте, который устанавливает соединение с сервером с помощью протокола Web-Socket. WebSocket - это протокол полнодуплексной связи поверх TCP-соединения, предназначенный для обмена сообщениями между браузером и веб-сервером в режиме реального времени. Протокол WebSocket открывает сокеты на клиенте и сервере, позволяющие обмениваться любыми типами данных. В случае успешного соединения по протоколу WebSocket сервер создаст у себя сокет с данными клиента и начнет его авторизацию: попытается получить http cookie данные клиента, которые хранят необходимую информацию для авторизации, произведет распаковку cookie данных, попытается загрузить из базы данных сессию, соответствующую данным из http cookie, по загруженной сессии определит пользователя, принадлежащего сессии, привяжет пользовательские данные к сокету, создаст уникальный номер для сокета, сгенерирует и отправит событие «connection» внутри сервера. Если одно из действий при авторизации сокета сгенерирует ошибку, то сокет на сервере будет автоматически отключен и удален, а клиентский сокет получит сообщение о разрыве соединения. Событие «connection», возникающее на сервере, привязывает к сокету, созданному на сервере -«слушателей» событий, посылаемых сокетом клиента. Сокет клиента еще при его создании формирует набор «слушателей» событий, посылаемых сокетом сервера. Таким образом, устанавливается связь между клиентом и сервером через протокол WebSocket, которая позволяет им быстро обмениваться сообщениями различного типа, не требующими их идентификации, так как для каждого вида сообщений существует отдельный «слушатель».\nДанный протокол при построении архитектуры обмена данными позволяет достичь высокой скорости обмена информации и уменьшение нагрузки на клиента и сервер за счет отсутствия затрат на идентификацию данных. В разработанном приложении видеоконференц-связи протокол WebSocket играет важную роль - он занимается передачей «сигнальных» данных браузеров клиентов, которые позволяют создать соединение по протоколу WebRTC. Таким образом, данный протокол является основой для создания соединения по протоколу WebRTC и упрощает процесс передачи данных, необходимых для пирингового соединения.\nАлгоритмы установления соединений между клиентами по протоколу WebRTC. После установления связи с сервером по протоколу WebSocket для совершения видеозвонков пользователю необходимо включить видеокамеру и микрофон и дать к ним доступ браузеру. Браузер, получивший доступ к камере и микрофону пользователя, используя средства JavaScript, сформирует медиапотоки данных с подключенных устройств. Полученные аудио- и видеопотоки можно будет передать по протоколу WebRTC между браузерами клиентов напрямую. WebRTC - интернет-протокол, предназначенный для организации передачи потоковых данных между браузерами или другими поддерживающими его приложениями по технологии точка-точка. Для соединения двух клиентов по протоколу WebRTC необходим следующий набор JavaScript инструкций: создание пира для каждого из клиентов, назначение одного из клиентов как «вызывающего», назначение другого клиента как «отвечающего», формирование «сигнальных» данных, обмен «сигнальными» данными, завершение установки соединения.\nДля передачи «сигнальных» данных между клиентами используется сервер и протокол WebSocket. Ранее созданные сокеты в клиентской части приложения позволяют передавать «сигналь-\nные» данные по определенным каналам серверу, сервер в свою очередь транслирует эти данные другим клиентам, для которых они предназначены. Для соединения клиентов по протоколу WebRTC необходимо три типа данных: «call offer», «call answer» и «candidate». «Call offer» служит для инициализации сессии WebRTC, он формируется на одном из клиентов и с помощью WebSocket-протокола пересылается серверу, сервер в свою очередь передает данное сообщение «отвечаещему» клиенту. «Call offer» имеет формат SDP (Session Description Protocol). Сообщение SDP, передаваемое от одного узла другому, может указывать: адреса места назначения, служащие для медиа-потоков мультикастинг-адресами, номера UDP портов для отправителя и получателя, медиа-форматы (например, кодеки), применяющиеся во время сессии, время старта и остановки. Сообщение SDP используется для широковещательных сессий, например телевизионных, радиопрограмм или видеоконференций. Клиент, получивший wall offer», сформирует и отправит ответ по протоколу WebSocket в виде данных «call answer», которые также имеют формат SDP. Как только клиент, отправлявший wall offer», получит SDP-сообщение типа «call answer», между клиентами начнется обмен данными типа «candidate» по протоколу WebSocket. Данные типа «candidate» имеют формат -ICE (Interactive Connectivity Establishment) Candidate. Создание интерактивного подключения (ICE) -это метод, используемый в компьютерных сетях, включающий в себя передачу сетевых адресов (NATs) в таких интернет-приложениях, как ip-телефония (VoIP), приложениях пиринговой передачи данных (peer-to-peer communications), видеоприложениях, системах мгновенного обмена сообщениями (instant messaging ) и других интерактивных медиа-приложениях. Данные типа «candidate» используются для соединения клиентов, устанавливая путь между ними, по которому будут передаваться медиа-потоки. При успешном обмене данными типа «candidate» каждый из клиентов откроет канал для передачи различного типа данных по протоколу WebRTC, в том числе аудио- и видеопотоков.\nПротокол WebRTC имеет особенности, которые создают сложности при соединении пользователей: для создания соединения между клиентами требуется выполнить операцию «handshake», которая состоит из обмена различным типом «сигнальных» данных между браузерами, но одновременно клиент может устанавливать только одно соединение по протоколу WebRTC.\nДанная специфика протокола влечет за собой ряд проблем, при создании полноценной видеоконференц-связи. Проблемы возникают из-за асинхронной архитектуры приложения в ситуациях соединения одного клиента со множеством, множества с одним, множества со множеством. Такие ситуации приводят к нарушению алгоритма соединения - полной или частичной потере данных, требующихся для установления связи между клиентами. Чтобы решить сложившуюся проблему, было предложено несколько дополнительных подходов к построению архитектуры обмена данными в приложении: буферизация «сигнальных» данных протокола WebRTC на клиенте и сервере, объединение сокетов, соединяемых клиентов в «комнату» на сервере. «Комната» - это массив, находящийся на сервере, состоящий из нескольких сокетов, позволяющий обмениваться данными только с сокетами, находящимися в данном массиве. Таким образом, «комнаты» изолируют группы сокетов друг от друга, способствуя распространению данных только внутри определенных групп. Такие подходы помогают исключить потерю данных, позволяют создать все необходимые соединения между клиентами и управлять процессами соединения клиентов на различных этапах работы приложения. Далее рассмотрим алгоритмы, основанные на разработанных подходах, позволяющие создать соединение по протоколу WebRTC, контролировать обработку «сигнальных» данных, осуществлять буферизацию «сигнальных» данных и группировать сокеты клиентов в отдельные «комнаты».\nАлгоритм, представленный на рис. 2, описывает этап соединения клиентов до формирования «сигнальных» данных. Сначала «вызывающий» клиент подает запрос на сервер для соединения с «отвечающим» клиентом по протоколу WebSocket. Далее сервер производит поиск «отвечающего» клиента среди подключенных. Если клиента нет, то сервер завершит звонок «вызывающего» клиента, если «отвечающий» клиент найден, то ему отправляется запрос на соединение по протоколу WebSocket. «Отвечающий» клиент формирует и отправляет ответ на запрос. Если ответ отрицательный, то сервер завершает звонок «вызывающего» клиента, в случае положительного ответа сервер получит id сокетов «вызывающего» и «отвечающего» клиентов, по id сокетов найдет «комнату», в которых сокеты находятся в данный момент. После завершения данного алгоритма происходит создание и обработка буферов сокетов на сервере посредством алгоритма, изображенного на рис. 3.\nПосылается сообщение 4 start the call’ от вызывающего клиента\nПослать сообщение ‘answer the call’ серверу\nПолучить сокеты отвечающего и вызывающего клиентов\nПолучить сокеты из ‘комнат’, где находятся отвечающий и вызывающий клиенты\nРис. 2. Алгоритм подготовки клиентских частей перед формированием сигнальных данных\nПосле того как «комната», где находятся сокеты каждого из клиентов, получены, начинает работать алгоритм, представленный на рис. 3. Сначала извлекается сокет из «комнаты» «отвечающего» клиента, для него создается буфер для хранения сокетов, ожидающих соединения по протоколу WebRTC. Затем сокет из «комнаты» «отвечающего» клиента добавляет в уже существующий буфер -сокет, взятый из «комнаты» «вызывающего» клиента. Если взятый сокет из «комнаты» «вызывающего» клиента был не последним, то операция извлечения сокета из «комнаты» «вызывающего» клиента и его добавление в буфер повторяется со следующим сокетом из этой комнаты. После того как будет взят последний сокет из «комнаты» «вызывающего» клиента, сокет из «комнаты» «отвечающего» клиента отсоединяется от своей «комнаты» и добавляется в «комнату» «вызывающего» клиента.\nРис. 3. Алгоритм распределения сокетов и обработки их буферов на сервере\nДалее происходит вызов функции обработки буфера сокета, которая выполнит запрос на формирование сигнальных данных для всех клиентов, находящихся в очереди данного буфера. В конце алгоритма выполняется проверка на пустоту «комнаты» «отвечающего» клиента, если «комната» не пуста, то алгоритм повторит все действия с самого начала, в ином случае алгоритм считается завершенным. Как можно заметить, данный алгоритм добавляет в «комнату» «вызывающего» клиента клиентов из «комнаты» «отвечающего» клиента, и при каждом обращении к «комнате» «вызывающего» клиента в данном алгоритме «комната» должна увеличиваться. Но это не так по причине того, что перед началом алгоритма происходит дублирование всех пользователей из «комнаты» «вызывающего» клиента в отдельный массив, таким образом, алгоритм работает правильно, и каждый раз он использует не основную «комнату», а заранее подготовленный массив.\nАлгоритм, представленный на рис. 4, является общим для обработки запросов от сервера на формирование сигнальных данных «call offer» или на обработку пришедших от другого клиента сигнальных данных «call answer». В клиентской части приложения видеоконференц-связи существует два отдельных буфера для каждого типа данных.\nПриходящий запрос или «сигнальные» данные сначала добавляются в соответствующий им буфер. Затем происходит проверка обоих буферов, не обрабатывается ли один из них в данный момент. Если один из буферов занят обрабатывающей функцией, то алгоритм завершается, а новые данные в буфере будут обработаны позже. Если ни один из буферов не занят, они проверяются на\nпустоту. В случае если оба буфера пусты, клиент по протоколу WebSocket отправит серверу уведомление, что он готов получать новые данные для установления соединения с другими клиентами. Если какой-то из буферов содержит данные, то будут извлечены первые в очереди данные и обработаны соответствующим образом для установления подключения. Как только подключение будет установлено, алгоритм продолжит свою работу с места опроса занятости буфера.\nОтправить сообщение ‘буфер пуст’ на сервер\nСоздать новое подключение между клиентами по протоколу\nПодключение создано\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 4. Алгоритм работы с буфером данных на клиенте\nСтоит отметить, что сигнальные данные типа «candidate» не имеют специальных буферов для их хранения ни на клиенте, ни на сервере, так как их обработка происходит сразу же, как только клиент их получит. Во время обработки «сигнальных» данных типа «candidate» буферы, принадлежащие данным типа «call answer» или «call offer», в зависимости от ситуации обработки продолжают быть заняты обрабатывающей функцией. Таким образом, остальные данные типа «call answer» или «call offer» продолжают добавляться в буферы, не нарушая алгоритма соединения клиентов по протоколу WebRTC.\nТри приведенных выше алгоритма составляют одну из главных частей приложения, которая осуществляет создание видеоконференц-связи с другими пользователями посредством peer-to-peer протокола WebRTC. Алгоритмы позволяют контролировать асинхронную архитектуру клиентской и серверной частей приложения, осуществляя обработку данных по необходимости, препятствуя возникновению ситуаций перемешивания данных и прерывания выполняющихся соединений по протоколу WebRTC. Таким образом, в приложении достигается возможность создавать групповые видеоконференции и контролировать их состояние с помощью объединенных в «комнаты» клиентов на сервере.\nЗаключение. Предложенная архитектура обмена данными в приложении видеоконференцсвязи позволяет распределить каналы передачи данными по соответствующим протоколам и разделить задачи между ними. Так как изначально архитектура приложения видеоконференцсвязи является асинхронной, то были выполнены разработка и внедрение новых алгоритмов по управлению данными, необходимых для соединения клиентских приложений по протоколу WebRTC. В итоге было получено полноценное приложение видеоконференц-связи, способное производить групповые звонки и контролировать состояние клиентов, связанных в общие группы - «комнаты» на сервере во время проведения группового чата.\nСтоит отметить, что на данный момент существуют еще некоторые проблемы, ограничивающие использование протокола WebRTC на устройствах: 1) всего три браузера (Opera, Mozilla Firefox, Google Chrome) поддерживают данный протокол; 2) требуется наличие мощного процессора и достаточного количества памяти для обработки аудио - и видеопотоков данных. Кроме того, указанные браузеры не работают с графическими сопроцессорами, в результате нагружается основной процессор. Дальнейшие исследования будут направлены на упрощение способа передачи и улучшение обработки аудио - и видеоданных с использованием пиринговых связей для распределения нагрузки по обработке данных между клиентами.\nРабота выполнена при частичной финансовой поддержке РФФИ (проект № 13-08-0741-а).\nЛитература\n1.\tX. Hei, A measurement study of a large-scale P2P IPTV system / X. Hei, C. Liang, J. Liang et al. / IEEE Transactions on Multimedia, 2007.\n2.\tHei X. Inferring network-wide quality in P2P live streaming systems / X. Hei, J. Liang, Y. Liu, K.W. Ross / IEEE Journal on Selected Areas in Communications, 2007.\n3.\tDi Wu. Redesigning multi-channel P2P live video systems with View-Upload Decoupling / Di Wu, C. Liang, Y. Liu, K.W. Ross / Computer Networks. - 2010, №54. - P. 2007-2018.\n4.\tCivanlar M.R. et al. Peer-to-peer multipoint videoconferencing on the Internet // Signal Processing: Image Communication. - 2005, №20. - Р743-754.\n5.\tVolfin I. Dominant speaker identification for multipoint videoconferencing / I. Volfin, I.l Cohen / Computer Speech and Language. - 2013. - Vol. 27. - P. 895-910\n6.\tRonzhin A. Speaker Turn Detection Based on Multimodal Situation Analysis / А. Ronzhin, V. Budkov // Springer International Publishing Switzerland. M. Zelezny et al. (Eds.): SPEC0M-2013, LNAI 8113. - 2013. - Р 302-309.\n7.\tRonzhin A. PARAD-R: Speech Analysis Software for Meeting Support / A. Ronzhin, V. Budkov, I. Kipyatkova / In Proc. of the 9th International Conference on Information, Communications and Signal Processing ICICS-2013. Tainan, Taiwan. - 2013.\n8.\tRonzhin А. Context-Aware Mobile Applications for Communication in Intelligent Environment / A.L. Ronzhin, A.I. Saveliev, V.Yu. Budkov // Springer-Verlag Berlin Heidelberg, S. Andreev et al. (Eds.): NEW2AN/ruSMART-2012, LNCS 7469. - 2012. Р 307-315.\n9.\tMeshcheryakov R.V. Dialogue as a basis for construction of speech systems / Meshcheryakov R.V., Bondarenko V.P. // Cybernetics and Systems Analysis. - 2008. - Т. 44. № 2. - С. 175-184.\n10.\tБондаренко В.П. Обработка речевых сигналов в задачах идентификации / В.П. Бондаренко, А.А. Конев, РВ. Мещеряков / Изв. высш. учебных заведений. Физика. - 2006. - Т. 49, № 9. - С. 207.\n11.\tМещеряков Р.В. Структура систем синтеза и распознавания речи // Известия Томского политехнического университета. - 2009. - Т. 315, № 5. - С. 127-132.\n12.\tVishnu Monn. Software-based serverless endpoint video combiner architecture for high-definition multiparty video conferencing / Vishnu Monn Baskaran, Yoong Choon Chang, Jonathan Loo, KokSheik / Journal of Network and Computer Applications. - 2013. - Vol. 36. - Р. 336-352.\n13.\tRamzan N. et al. Video streaming over P2P networks: Challenges and opportunities // Signal Processing: Image Communication. - 2012. - № 27. - Р 401-411.\n14.\tСавельев А.И. Оптимизация алгоритмов распределения потоков мультимедийных данных между сервером и клиентом в приложениях видеоконференц-связи // Труды СПИИРАН. - 2013. -Вып. 31. - С. 61-79.\n15.\tRonzhin A.L. Context-Aware Mobile Applications for Communication in Intelligent Environment / A.L. Ronzhin, A.I. Saveliev, V.Yu. Budkov // Springer-Verlag Berlin Heidelberg, S. Andreev et al. (Eds.): NEW2AN/ruSMART. - 2012. - LNCS 7469. - Р 307-315.\nСавельев Антон Игоревич\nМл. науч. сотр. лаборатории речевых и многомодальных интерфейсов Санкт-Петербургского института информатики и автоматизации РАН (СПИИРАН)\nТел.: 8 (812) 328-70-81\nЭл. почта: saveliev@iias.spb.su\nПрищепа Мария Викторовна\nКанд. техн. наук, науч. сотр. лаборатории речевых и многомодальных интерфейсов СПИИРАН\nТел.: 8 (812) 328-70-81\nЭл. почта: prischepa@iias.spb.su\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nSaveliev A.I., Prischepa M.V.\nArchitecture of lossless data exchange in pear-to-pear web application of videoconference\nThe problem of client connection and audiovisual data transmission in pear-to-pear web application of videoconference are discussed. At the interaction of several clients and server parts of the videoconference application based on WebRTC protocol the partial or complete loss of signal data that hampers the client connection. The proposed architecture of data transmission and storage on client and server provides buffering and following processing of the signal data with the exception of their loss and support of interaction between client groups. Keywords: peer-to-peer connection, peer-to-peer protocols, videoconferencing, web applications, media stream distribution.\n",
    "download_url": "https://cyberleninka.ru/article/n/arhitektura-obmena-dannymi-bez-poter-v-piringovom-veb-prilozhenii-videokonferents-svyazi/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/avtomatizirovannaya-obuchayuschaya-sistema-na-osnove-gipertekstovyh-dokumentov-formata-ntml",
    "slug": "avtomatizirovannaya-obuchayuschaya-sistema-na-osnove-gipertekstovyh-dokumentov-formata-ntml",
    "title": "Автоматизированная обучающая система на основе гипертекстовых документов формата нтмl",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFМикропроцессорные системы мониторинга, диагностики и управления\nку на эти устройства приводит к необходимости постановки и решения оптимизационной задачи типа (1) - (6). При этом ограничения (2) - (6) отображают реальную специфику условий функционирования больших территориальных информационных сетей.\nВ заключении отметим, что оптимизационные задачи подобного рода (с похожей целевой функцией) возникали и ранее в различных областях науки и техники [2,3,4]. Например, в работе [2] близкая по смыслу постановка была использована для определения оптимального разбиения логической структуры базы данных на минимально связанные блоки. Похожие задачи рассмотрены в работе [3] для формирования системы программных имитаторов на испытаниях АСУ и в работе [4] при решении вопросов синтеза оптимальной логической структуры сетевой базы данных.\nОтличительные особенности настоящей работы заключаются в следующем. Во-первых, в формулировке оптимизационной задачи удалось компактно выразить целый ряд естественных условий, связанных с учетом требований оперативности, территориального размещения узлов, их функциональных отношений и т.д. Это позволило свести оптимизационную задачу к обычной форме, характерной для задач квадратичного псев-добулевого математического программирования. Во-вторых, возможность учета широкого круга факторов, имеющих значение в конкретных практических ситуациях, позволила распространить данную оптимизационную задачу на широкий круг сложных систем различного назначения, именуемых распределенными системами запросного типа.\nБИБЛИОГРАФИЧЕСКИЙ СПИСОК\n1.\tБелевцев А.М. Об оптимизации технологических процессов в распределенных системах запросного типа. Проектирование и технологии электронных средств. -Владимир. 2003. № 1.\n2.\tШаймарданов Р.Б. Моделирование и оптимизация проектирования структур баз данных. -М.: Радио и связь, 1984. -120с.\n3.\tДенисов Ю.Н., Киселев В.Д., Мягков В.Ю., Щербина А.М. Модели и методы решения задач проектирования и испытаний АСУ. -М.: Изд-во «Вооружение. Политика. Конверсия», 1997. -250 с.\n4.\tКульба В.В., Ковалевский С.С., Косяченко С.А.Ю Сиротюк В.О. Теоретические основы проектирования оптимальных структур распределенных баз данных. -М.: Сиптег, 1999. -660 с.\nВ.Е. Мереняшев, Е.О. Ткачук АВТОМАТИЗИРОВАННАЯ ОБУЧАЮЩАЯ СИСТЕМА НА ОСНОВЕ ГИПЕРТЕКСТОВЫХ ДОКУМЕНТОВ ФОРМАТА ffmL\nВ Ростовском военном институте ведется разработка автоматизированной обучающей системы (АОС), построенной на основе использования динамического НТМL (DНТМL и JavaScript). АОС состоит из управляющей оболочки и учебного материала, разбитого на разделы и темы.\nКаждая тема включает в себя несколько занятий, каждое из которых относится к одному из следующих типов:\n-\tтеоретический материал;\n-\tпримеры решения учебных задач;\n-\tтест;\n-\tкомпьютерный практикум (лабораторная работа);\n-\tзадачи и вопросы для самостоятельного решения.\nКроме графического и текстового представления учебного материала, предусмотрено использование аудиозаписей и анимированных рисунков. В состав базового программного обеспечения АОС для этого включено соответствующее программное обес-\nИзвестия ТРТУ\nТематический выпуск\nпечение. Управление переходом между занятиями обеспечивается управляющими HTML - страницами с использованием сценариев JavaScript.\nС целью упрощения процедуры наполнения АОС учебным материалом создано программное обеспечение, обеспечивающее создание структуры курса, подготовку тестов и компьютерных практикумов. В состав программного обеспечения входят редактор тестов закрытого типа, редактор графических тестов и менеджер структуры всего обучающего курса.\nРедактор тестов закрытого типа упрощает процесс создания общепринятых тестов выбора правильного ответа из предлагаемых альтернатив.\nМенеджер структуры курса позволяет по введенному учебному плану создавать заготовки компьютерных занятий и управляющих страниц, вести учет изменений и дополнений.\nРедактор графических тестов позволяет создавать тестовые задания, в которых обучающийся должен компоновать результат путем перетаскивания графических фрагментов. Особенностью данного редактора является то, что сам редактор представляет собой программу, предназначенную для работы в среде операционной системы Windows, а результирующая тестовая программа формируется в виде динамической интернет-страницы, которая может работать на любой ЭВМ, поддерживающей обработку DHTML и JavaScript.\nПредлагаемая АОС может быть использована на автономном компьютере в составе учебного компьютерного класса или в вычислительной сети (локальной, глобальной).\nИ.В.Штепа ОБРАЗНЫЙ ИНТЕРФЕЙС КЛИЕНТ-СЕРВЕРНЫХ СИСТЕМ\nСегодня Internet/Intranet технологии стали стандартом для разработки информационных систем (ИС) [1]. Как правило, информация внутри отдельной организации распределена по множеству компьютеров и является разнородной (текстовые, графические файлы, отчеты, сообщения электронной почты и др.). Возникает проблема организации доступа к распределенной, разнородной информации, решение которой возможно при создании корпоративной Intranet-сети, построенной на основе Internet-и WorldWideWeb-технологий. Доступ к корпоративной информации осуществляется посредствам ИС, функционирующих на внутренних серверах с поддержкой сервисов Internet, либо на удаленных Internet-серверах. Использование выделенных серверов баз данных и архитектуры клиент-сервер значительно расширяет функциональность ИС и повышает производительность системы.\nПри разработке ИС важной проблемой, требующей решения, является проектирование интерфейса пользователя. Интерфейс должен быть реализован в виде гипермедийных структур, функционирующих на клиентских машинах в стандартных Web-броузерах, с учетом основных психофизиологических факторов восприятия информации человеком.\nОсновой современных пользовательских интерфейсов являются такие навигационные структуры, как многоуровневые системы меню, тематические (или хронологические) каталоги, поисковые шаблоны, гипертекст, динамические карты-системы, лучевые иерархические структуры (ЛИС), интерактивные системы помощи [2]. Навигационные структуры в том или ином сочетании могут использоваться в иерархии электронных страниц ИС и должны удовлетворять следующим требованиям:\n",
    "download_url": "https://cyberleninka.ru/article/n/avtomatizirovannaya-obuchayuschaya-sistema-na-osnove-gipertekstovyh-dokumentov-formata-ntml/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/klassifikatsiya-vidov-prakticheskih-rabot-i-ih-sootnoshenie-s-professionalnymi-kompetentsiyami-pri-izuchenii-distsiplin-po-web",
    "slug": "klassifikatsiya-vidov-prakticheskih-rabot-i-ih-sootnoshenie-s-professionalnymi-kompetentsiyami-pri-izuchenii-distsiplin-po-web",
    "title": "Классификация видов практических работ и их соотношение с профессиональными компетенциями при изучении дисциплин по web-разработкам",
    "abstract_description": "Исследования в области подготовки IT-специалиста претерпевают различные подходы разрешения противоречий между ФГОС ВО, профессиональными стандартами и корпоративными стандартами, т. е. функционалом IT-должностей на предприятиях. Настоящее время характеризуется очень быстрой сменой как названия должностей, так и их функционала. Этому способствует бурное развитие инструментария разработок и технологических подходов, связанных с развитием сетевой инфраструктуры и методов оптимизации высоконагруженных сетей. В процессе обучения будущих бакалавров ИВТ необходимо ориентироваться на уровень знаний обучающихся на входе, и обучение базовым и инновационным подходам в разработке web-проектов построить таким образом, чтобы на выходе они знали и новые инструменты и технологии. Процесс обучения web-технологиям и проектированию требует поиска подходящих технологий и методик преподавания, ответов на актуальные и противоречивые вопросы: «Чему и как учить?», «Как учесть требования ФГОС ВО, профессиональных стандартов, корпоративных стандартов, которые порой противоречат друг другу?». В представленной статье рассмотрены некоторые результаты исследований в данном направлении.",
    "full_text_body": "\n\n\n\n\uFEFFструктуры и моделирование 2016. №2(38). С. 78-91\nУДК 378.147\nКЛАССИФИКАЦИЯ ВИДОВ ПРАКТИЧЕСКИХ РАБОТ И ИХ СООТНОШЕНИЕ С ПРОФЕССИОНАЛЬНЫМИ КОМПЕТЕНЦИЯМИ ПРИ ИЗУЧЕНИИ ДИСЦИПЛИН ПО WEB-РАЗРАБОТКАМ\nТ.Б. Казиахмедов\nк.п.н., доцент кафедры информатики и методики преподавания информатики,\ne-mail: ktofik@yandex.ru Т.В. Мосягина аспирант, e-mail: mt.skorp@yandex.ru\nНижневартовский государственный университет\nАннотация. Исследования в области подготовки IT-специалиста претерпевают различные подходы разрешения противоречий между ФГОС ВО, профессиональными стандартами и корпоративными стандартами, т. е. функционалом IT-должностей на предприятиях. Настоящее время характеризуется очень быстрой сменой как названия должностей, так и их функционала. Этому способствует бурное развитие инструментария разработок и технологических подходов, связанных с развитием сетевой инфраструктуры и методов оптимизации высоконагруженных сетей. В процессе обучения будущих бакалавров ИВТ необходимо ориентироваться на уровень знаний обучающихся на входе, и обучение базовым и инновационным подходам в разработке web-проектов построить таким образом, чтобы на выходе они знали и новые инструменты и технологии. Процесс обучения web-технологиям и проектированию требует поиска подходящих технологий и методик преподавания, ответов на актуальные и противоречивые вопросы: «Чему и как учить?», «Как учесть требования ФГОС ВО, профессиональных стандартов, корпоративных стандартов, которые порой противоречат друг другу?». В представленной статье рассмотрены некоторые результаты исследований в данном направлении.\nКлючевые слова: профессиональные стандарты, уровни компетенций, базовые знания и технологии в области Web, инновационные подходы в Web, междисциплинарные знания для web-проектирования, организация взаимодействия между приложениями, авторский программный комплекс обучения web-разработке.\nАнализ потребностей специалистов предприятий в области Web показывает, что должности на предприятиях и трудовые функции профессиональных стандартов часто противоречат стандарту ФГОС ВО. Установка, что вузы сами должны адаптировать образовательные программы под IT корпорации с учётом трудовых функций профессиональных стандартов не всегда просто реализуема,\nпричём не всегда и не по всем инженерным направлениям определены трудовые функции. Развитие инструментария разработки, методов и технологий организации сетей, информационных систем организации и хранения данных способствуют постоянной динамике функционального содержания 1Т профессий, да и изменению названия самих должностей. Мы часто слышим выражения, что сегодня «программисты» не нужны, причём, понимая под этим человека, владеющего только языком или средой разработки. Если говорить вкратце, то сегодня мы говорим о специалисте (бакалавре, магистре) в области 1Т, понимая под этим то, что он знает, умеет, применяет на практике:\nметоды выделения сущностей, построения логических и физических моделей этих сущностей в задачах автоматизации;\nстандарты и методику формирования технических заданий на проектирование ИС;\n•\tметоды моделирования информационных систем (ИС) — ролевую модель, функциональную модель, объектную модель;\n•\tархитектуру ЭВМ и компьютерных сетей, сетевые технологии, инфраструктуру компьютерных сетей, методы организации сетей; программное обеспечение ЭВМ и автоматизированных систем; технологии реализация ИС (клиент-серверная организация приложений, многозвенная информационная система с распределёнными данными, разные подходы в организации взаимодействия приложений и пользователя с приложениями (интерфейсы взаимодействия с приложениями), СОМ — технология, сервисная организация приложений);\nинструменты и среды разработки ИС и программных комплексов; методы тестирования ИС и программных комплексов; использование в информационных системах мобильных устройств; проблематику интеллектуализации информационных систем; робототехнические модули информационных систем и программных комплексов;\nстандарты разработки технической сопроводительной документации ИС и программных комплексов; методы обучения персонала; психологию коллектива разработчиков; и др.\nКонечно, на уровне бакалавра не ставится задача подготовки руководителя группы разработки, но, тем не менее, он имеет представление о функциональных обязанностях каждого члена группы разработки. Следовательно, сегодня мы выпускаем не программиста в старом понимании, а специалиста с достаточно широким набором знаний для 1Т индустрии. На корпоративном уровне мы имеем дело с конкретным программным обеспечение, с конкретной сетевой инфраструктурой, и часто в некоторых фирмах - с собственными программными разработками. Это не создаёт сегодня какую-то проблему, которая ставит под сомнение качество подготовки специалистов для 1Т индустрии, так как за счёт курсов по выбору мы можем внедрить и изучение корпоративных программных комплексов, и особенностей сетевой инфраструктуры.\nКогда мы говорим о Web, то обычно нам приходится ориентироваться на потребности региональных IT предприятий, да и других организаций. Рассмотрим, как обычно выстраиваются должности в области IT индустрии в нашем регионе.\nТестирование ПО:\n•\tпонимание сферы тестирования программных продуктов (методики, планы, отчёты, чек-листы, тест-кейсы);\n•\tзнание основ проектирования реляционных БД; умение писать SQL запросы (базовые/начальные знания);\n•\tпредставления основ проектирования ПО (понимание ЖЦПО); понимание и умение работать с технической документацией;\nзнание и опыт работы с компьютером на уровне продвинутого пользователя, умение работать в ОС семейства Windows;\n•\tбазовые знания объектно-ориентированного программирования; опыт в составлении и успешном применении тестовых сценариев; знание языков программирования C++ или Java, С#;\nопыт разработки программ;\n•\tопыт проектирования БД, знание языка SQL. Аналитик:\nопыт проектирования и документирования информационных систем, моделирования бизнес-процессов;\nзнание стандартов и нотаций визуализации и документирования (UML, IDEF, BPMN);\nзнание инструментов моделирования (IBM Rational Rose, ARIS Toolset, BPWin, MS Visio);\nзнание методологий разработки и внедрения программного обеспечения; опыт работы в области системного анализа (архитектуры, разработки ПО);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nтехнический английский; знание SQL;\n•\tопыт работы с web-сервисами (WSDL, XSD). Сопровождение ПО:\n•\tзнания в области Internet-технологий;\nбазовые знания телекоммуникации, протоколы TCPIP, HTTP, SMTP и т. д.;\n•\tзнания в области БД, СУБД Oracle, языка PL, SQL, SQL; навыки программирования;\nсистемный подход к решению поставленных задач; обучение пользователей основным методам работы с ПП. Инженер-программист:\nопыт работы с базами данных ( MS SQL, InterBase );\n•\tзнание 1С (сертификаты);\nTransact-SQL, PL/SQL для баз данных MSSQL и ORACLE;\n•\tASP/ASP.NET, web-дизайн;\nумение работать с отладчиком для поиска и фиксации ошибок;\n•\tзнание языков ООП, таких как С++, С#, Java, JavaScript; отличное знание и умение в составлении SQL запросов;\nотличное знание и умение в написании Функций, Триггеров, Хранимых процедур на языке T-SQL;\nпонимание взаимодействия приложений по модели клиент-сервер; практические навыки работы с Oracle, Delphi, Java;\nобязательное хорошее знание Java 5/В и популярных фреймворков (Spring Core, Web Services, ORM, сборщики проектов, желательно Maven); умение самостоятельно разобраться в чужом коде;\n•\tзнание SQL на уровне CRUD запросов;\nспособность грамотно составить документацию как по собственной выполненной работе, так и по принимаемым проектам; английский на уровне правильного понимания документации;\n•\tзнание языков программирования, MS SQL Server 2000/2005, VBA, Autolisp, AutoCAD 2012. Опыт внедрения и сопровождения ПО;\n•\tJava В, Java EE (JPA, WS); Spring Framework;\nStruts 2;\nJavaScript;\nOracle.\nВеб-программист:\n•\tЗнание Rails-подобных фреймворков: Symfony, Django, Zend;\n•\tпонимание принципов MVC;\nопыт работы с реляционными базами данных (Postgres, MySql), noSQL-решениями;\nпонимание PHP, умение разбираться в чужом коде при необходимости;\n•\tзнание HTML/CSS/JavaScript, AJAX, jQuery; опыт работы с БД MySQL;\n•\tопыт создания web-приложений на ASP.NET MVC;\n•\tзнание JavaScript/CoffeScript; знание SQL;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nопыт работы на С#, ADO (.NET), MS SQL 2005/200S (database design, T-SQL), NET Framework 2.0, 3.0, 3.5;\n•\tопыт работы в Visual Studio 2010 (знание C# 4.0) или выше;\n•\tопыт web-программирования на ASP.NET и Silverlight 4, JavaScript, jQuery, AJAX, HTML, CSS;\nопыт работы с Web-Services и WCF;\nопыт разработки запросов различной сложности на T-SQL, составление отчётов с использованием Microsoft SQL Reporting Services (SSRS); опыт настройки и использования Microsoft Reporting Service. опыт коммерческого программирования PHP;\nпонимание принципов и практический опыт объектно-ориентированного программирования;\nопыт оптимизации кода и запросов по производительности; дополнительное знание прочих языков программирования;\nопыт работы с git;\nпонимание методологий программирования: ООП, MVC, reactive;\n•\tуровень владения английским языком — средний и выше.\nСистемный администратор:\nопыт составления спецификаций комплексов серверов одного или нескольких основных производителей (Hewlett-Packard — предпочтительно, IBM, Dell);\nопыт проектирования, пусконаладки или самостоятельного администрирования операционных систем и серверных программных комплексов производства Microsoft Windows Server, Exchange, Forefront, SQL, дополнительный SharePoint или/и VMware vSphere;\n•\tчтение и понимание профильной технической документации на английском языке;\n•\tcерверные операционные системы семейства Microsoft Windows Server;\n•\tсистемы виртуализации VMWare, Citrix;\nпринципы подключения комплексов серверов в сети передачи данных на базе IP (технологиия teaming, virtual connect etc);\nархитектура и принципы построения вычислительных систем высокой готовности (отказоустойчивость); технологии резервного копирования; администрирование серверов (1C, MS SQL Server);\n•\tоптимизация производительности БД.\nРазработчик БД (Oracle):\nзнание основ программирования; опыт работы с СУБД Oracle; опыт работы с SQL;\nопыт разработки пользовательской документации; опыт тестирования приложений; опыт автоматизированного тестирования; понимание жизненного цикла разработки ПО;\n•\tразработка ПМИ и участие в приёмо-сдаточных испытаниях у Заказчика.\nКак видим из приведённых должностей, знание Web и интернет-технологий\nприсутствует практически везде. В тексте мы выделили эти компоненты курсивом. А если попытаться все это соотнести с рабочими функциями из профессиональных стандартов, то нам придётся взять эти функции из множества направлений. Это как бы первое противоречие, которое возникло потому, что сегодня нет единого реестра должностей и их функционала [2]. Обычно корпоративные требования не дают нам представления о том, как глубоко необходимо знание того или иного инструмента, технологии. А нам в вузе приходится обратить на это внимание. Таким образом, нам нужно построить систему обучения web-технологиям будущих бакалавров ИВТ с учётом корпоративных требований к знаниям IT-специалистов. Для этого мы предложили 5 уровней формирования соответствующих компетенций и связали их по возможности с рабочими функциями профессионального стандарта. Уровни компетенций нами обозначены следующим образом [1]:\n•\tбазовый (пороговый);\n•\tприкладной уровень;\n•\tсистемный уровень;\n•\tпрофессиональный уровень или междисциплинарный уровень;\n•\tпроблемный уровень.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБазовый (пороговый) уровень. Объектная модель web-страницы. HTML. Java Script. Вставка скриптов в HTML-документ. Алгоритмические конструкции языка Java Scrip, типы данных, функции преобразования типов. Серверные скрипты. Язык и технология PHP. Структура ASP документа. Директивы ASP страницы. Конструирование ASP страниц. Net языки и их использование в качестве языков web-разработки.\nПрикладной уровень:\nТаблицы каскадных стилей. Интерфейс web-страниц. Организация общения с сервером. Методы передачи данных на web-сервер. Элементы управления. Методы создания обработчиков событий. Работа с графикой, таблицами, видео и другими объектами. Обработка баз данных. СУБД MySQL. Система стандартных задач по освоению web-программирования.\nСистемный уровень.\nМетоды проектирования сайтов. Взаимодействие c офисными технологиями. Реализация основ реляционной алгебры через вложение структур. Взаимодействие 2 и более сайтов. Web-сервер. Основы клиент-серверных приложений на основе web-сервера. Разработка web-приложений средствами визуальных сред программирования. Включение в приложения web-страниц.\nПрофессиональный уровень.\nАдминистрирование серверов Apache, IIS. СУБД MySQL. Язык SQL. Обработка БД через web-страницу, провайдеры баз данных. Технология ASP. Серверные элементы. Управление базами данных. Разработка, тестирование, публикация. Wеб-сервисы и облачные технологии.\nПроблемный уровень.\nПередача данных из приложения в web-страницы и их публикация на сайте. Разработка серверов и клиентских приложений на основе различных протоколов. Использование Фреймворков. Управление базой данных, компонентами сайта. Тестирование, оптимизация времени загрузки ресурсов.\nПредлагаемый нами подход включает 5 видов учебной деятельности «Бакалавра ИВТ»:\n1)\tрешение частной задачи (метод погружения в знание);\n2)\tрешение общей задачи через решение частных компонентных проблем (понимание);\n3)\tразработка проекта как комплекса, т. е. использование междисциплинарных знаний (применение);\n4)\tпроектирование профессиональных сайтов с тестированием и внедрением (анализ);\n5)\tорганизация взаимодействия сайтов в сети. Публикация и тестирование сайта. Решение возникающих проблем (синтез).\nПричём при погружении в основы инструментов мы опираемся на знания обучающихся по другим дисциплинам. Рассмотрим примерные задания 1 вида. Задание:\nСоздайте функции, определяющие, являются ли два человека: сёстрами;\n•\tбратьями;\n•\tдедушкой и внуком (внучкой); дядей и племянником (племянницей); супругами;\n•\tродственниками.\nРазработать программу в виде сайта, функциональной программы, пролог-программы.\nJavaScript.\n<html> <head> </head> <body>\n<script type=\"text/javascript\">\n// - База и стандартные предикаты -----------------------------\nvar mans = [\"Иван\", \"Артём\", \"Саша\", \"Степан\", \"Кирилл\"]; var woms = [\"Наташа\",\"Маша\",\"Ира\"]; var mothers = {\n\"Ира\" : [\"Маша\",\"Наташа\",\"Степан\"], \"Наташа\" : [\"Артём\",\"Иван\"] };\nvar fathers = {\n\"Саша\" : [\"Иван\",\"Артём\"], \"Кирилл\" : [\"Ира\"]\n}\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nfunction man(value) {\nif(mans.includes(value)) return true; return false;\n}\nfunction wom(value) {\nif(woms.includes(value)) return true; return false;\n}\nfunction isSinglePoint(arr1, arr2) {\nfor(var i = 0; i<arr1.length; i++) {\nfor(var j = 0; j<arr2.length; j++) {\nif(arr1[i] == arr2[j]) {\nreturn true;\n}}}\nreturn false;\n}\nMaTeMaTHHecKue CTpyKTypu u Moge^upoBauue. 2016. №2(38)\t85\nfunction isFather(ft, ch) { if(fathers[ft]) {\nvar childs = fathers[ft]; return childs.inlcudes(ch);\n}\nreturn false;\n}\nfunction isMother(mt, ch) { if(mothers[mt]) {\nvar childs = mothers[mt]; return childs.inlcudes(ch);\n}\nreturn false;\n}\nfunction getMotherOf(ch) {\nfor (var k in mothers){\nif (mothers.hasOwnProperty(k)) { var arr = mothers[k]; if(arr.includes(ch)) { return k;\n}\n}\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n}\nreturn \"\";\n}\nfunction getFatherOf(ch) {\nfor (var k in fathers){\nif (fathers.hasOwnProperty(k)) { var arr = fathers[k]; if(arr.includes(ch)) { return k;\n}\n}\n}\nreturn \"\";\n// - flononHHTe^bHHe npeflHKaTti-\nfunction isSister(v1,v2) {\nreturn wom(vl) && wom(v2) && (getMotherOf(vl)\n}\ngetMotherOf(v2));\nfunction isBrother(v1,v2) {\nreturn man(vl) && man(v2) && (getMotherOf(vl)\n}\n== getMotherOf(v2));\nfunction isMarried(v1, v2) {\nreturn man(vl) && wom(v2)\n&& isSinglePoint(fathers[v1],mothers[v2]);\nfunction isRodstv(v1, v2) { if(isSister(v1,v2)) return true;\nelse {\nif(isBrother(v1,v2))\nreturn true; else {\nvar ml = getMotherOf(vl); var m2 = getMotherOf(v2);\nif(m1 != \"\" && m2!= \"\") { return m1==m2;\n}\n}\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n}\nreturn false;\nfunction isDyadya(v1, v2) { z = getMotherOf(v2);\nif(isRodstv(v1,z)) {\nreturn true;\n}\nreturn false;\n}\nfunction isDedushka(v1, v2) { var z = fathers[v1]; var z2 = mothers[getMotherOf(v2)]; if(!z)return false; if(!z2)return false;\nif(z.includes(getMotherOf(v2))) return true;\nreturn false;\n}\n// - Функции HTML страницы --------------------\nfunction printDB() {\n//Написать базу данных\nvar bd = \"Ира мать Наташи, Маши, Степана^^\"; bd+^'Наташа мать Артёма и Ивана^^\"; bd+^'Саша отец Ивана и Артёма^^\"; bd+=\"Кирилл отец Иры<Ьг>\";\nvar msg = ,<font color=\"green\"> ${bd} </font>,i-document.getElementById(\"div_Q\").innerHTML = msg;\n}\nfunction run() {\nvar v1 = document.myForm.varl.value; var v2 = document.myForm.var2.value; var result = isSister(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"Нет\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>\\-\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\nfunction run2() {\nvar vl = document.myForm.varl.value;\nvar v2 = document.myForm.var2.value;\nvar result = isBrother(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"Нет\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>\\-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\nfunction run3() {\nvar v1 = document.myForm.var1.value;\nvar v2 = document.myForm.var2.value;\nvar result = isDedushka(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"Нет\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>\\-\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\nfunction run4() {\nvar v1 = document.myForm.var1.value; var v2 = document.myForm.var2.value; var result = isDyadya(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"HeT\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>\\-\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\nfunction run5() {\nvar v1 = document.myForm.var1.value;\nvar v2 = document.myForm.var2.value;\nvar result = isMarried(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"HeT\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>,;\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\nfunction run6() {\nvar v1 = document.myForm.var1.value; var v2 = document.myForm.var2.value; var result = isRodstv(v1,v2);\nvar answer = (result === true) ? \"Да\" : \"HeT\";\nvar msg = ,<font color=\"blue\">OTBeT: ${answer}</font>,;\ndocument.getElementById(\"div_1\").innerHTML = msg;\n}\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n</script>\n<form name =\"myForm\" onload=\"printDB()\"> <Ь1>Лабораторная 1</h1>\n<Ь2>Создайте функции, определяющие являются ли два человека:<^2> <br>\n<b>Человек 1:</b>\n<input type=\"text\" name=\"var1\" size=6 maxlength=8> <br><br>\n<b>Человек 2: </b>\n<input type=\"text\" name=\"var2\" size=6 maxlength=8> <br><br>\n<input type = \"button\" name = \"button1\" value = \"Сёстрами\" onclick=\"run()\"><br><br> <input type = \"button\" name = \"button1\" value = \"Братьями\" onclick=\"run2()\"><br><br> <input type = \"button\" name = \"button1\"\nvalue = \"Дедушкой и внуком(внучкой)\" onclick=\"run3()\"><br><br> <input type = \"button\" name = \"button1\"\nvalue = \"Дядей и внуком(внучкой)\" onclick=\"run4()\"><br><br> <input type = \"button\" name = \"button1\" value = \"Супругами\" onclick=\"run5()\"><br><br> <input type = \"button\" name = \"button1\" value = \"Родственниками\" onclick=\"run6()\"><br><br> База данных:\n<div id=\"div_Q\"><script>printDB();</script></div> <br><br>\n<div id=\"div_1\"></div> <br><br> </form> </body> </html>\nТакие задания студенты имели при изучении основ логического программирования (Пролог) и функционального программирования (Лисп, Питон). Это даёт представление о том, что на самом деле возможности Java Script уникальны, что это вполне серьёзный высокоуровневый язык, который позволяет писать программы в логическом и функциональном стилях. Кроме того, такой подход даёт очень важное понимание по расположению и вызовам скриптов. Такой набор заданий с разными видами деятельности нами реализованы по HTML, PHP, MySQL, ASP.Net. Все материалы, среда выполнения сфокусиро-\nРис. 1. Результат выполнения программы в браузере\nваны в виде одного программного комплекса. Приведём некоторые скриншоты программного комплекса.\nРис. 2. Скриншот программного комплекса «Обучающий комплекс по web-проектированию»\nДанный программный комплекс содержит справочную информацию, методические приёмы и подходы к уровневому обучению бакалавров, систему тестирования, основанную на рабочих функциях профессионального стандарта и\nпрофессиональных компетенциях ФГОС ВО, интеллектуальный модуль, определяющий уровни профессиональных компетенций и предлагающий обучающемуся ту или иную сферу деятельности, а также предлагает углубление по необходимым разделам дисциплин по WEB. Сам программный комплекс адаптируется к любому направлению обучения. Он состоит из 4 модулей:\n1.\tРабочие функции и профессиональные компетенции.\n2.\tФормирование учебного материала.\n3.\tСистема контроля и самоконтроля.\n4.\tСистема логического вывода.\nПервый модуль позволяет адаптировать систему к любому направлению подготовки, по которому имеются рабочие функции профессионального стандарта. Модуль 2 позволяет сформировать учебно-методические материалы, соотнесённые с разными уровнями профессиональных компетенций (лекции, презентации, видео, задания, практикумы и т.д.). Самым трудно адаптируемым является система логического вывода. Это результат экспертного анализа и экспертных оценок. Разработанный нами программный комплекс апробирован в системе подготовки бакалавров ИВТ, сейчас идёт адаптация к другим инженерным и педагогическим направлениям.\nЛитература\n1.\tКазиахмедов Т.Б. Региональный и национальный аспекты обучения информатике: методология, методика, информационные ресурсы: Монография. Нижневартовск : Изд-во НГГУ, 2010. 143 с.\n2.\tКазиахмедов Т.Б. Опережающее обучение в области индустрии информационных технологий в условиях развивающейся экономики и перманентных реформ высшего образования: Педагогическая информатика. Издательство: Московский государственный гуманитарный университет им. М.А. Шолохова (Москва), ISSN: 2070-9013, 2014. С. 62-72.\nCLASSIFICATION OF JOB TYPES AND THEIR CORELATION WITH PROFESSIONAL COMPETENCES WHEN STUDUING DISCIPLINES ON THE BASIS OF WEB PROGRAMMES\nT.B. Kaziakhmedov\nPh.D. (Ped.), Associate Professor, e-mail: ktofik@yandex.ru T.V. Mosyagina Postgraduate Student, e-mail: mt.skorp@yandex.ru\nNizhnevartovsk State University\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nAbstract. Research in the field of IT specialists training uses various approaches to resolving conflicts between Federal State Standards of Higher Education (FGOS VO), professional and corporate standards, i.e. IT specialists' functions at enterprises. The present moment is characterized by very rapid changes both in job titles and the personnel functions. This happens because of rapid development of software tools and technological approaches connected with the development of network infrastructure and methods of high-load networks optimization. When training Bachelors of IT, it is necessary to take into consideration the students' initial level of knowledge. Teaching of basic and innovative principles in Web project development should be so planned that the students know both new Web design tools and technologies when graduating. It is urgent to find suitable techniques and methods as well as answers to the topical and controversial questions: \"What and how should we teach?\", \"How can we take into account the requirements of educational, professional and corporate standards which sometimes contradict each other?\" This paper presents some results of the authors' research in this area.\nKeywords: professional standards, levels of competences, basic knowledge and technologies in the field of Web, innovative approaches in Web, multidisciplinary knowledge for Web design, organization of applications interaction, proprietary technology of Web design training.\n",
    "download_url": "https://cyberleninka.ru/article/n/klassifikatsiya-vidov-prakticheskih-rabot-i-ih-sootnoshenie-s-professionalnymi-kompetentsiyami-pri-izuchenii-distsiplin-po-web/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/application-of-finite-automata-with-genetic-algorithms-in-javascript-for-determination-of-manpower-system-control",
    "slug": "application-of-finite-automata-with-genetic-algorithms-in-javascript-for-determination-of-manpower-system-control",
    "title": "Application of finite automata with genetic algorithms in JavaScript for determination of manpower system control",
    "abstract_description": "The strict hierarchical manpower system is modeled in the state space where the desired number of men in particular rank is determined by predefined trajectory function. The transition model is represented by the principles of System Dynamics where each rank is represented as the state element and transition as the flow. The basis for the model is the structure of the exponential delay chain with additional outflows from particular states. The strategy for achieving the desired states is determined by the application of the genetic algorithms which are implemented in JavaScript as well as the System Dynamics model. Parameter boundaries were taken into consideration which was determined according to the historical data. Predetermination of the desired system states by the set of exponential functions reduced the optimization burden. The optimization problem was defined as the minimization of the sum of quadratic difference between desired and actual states in all ranks for the observed time horizon. Time boundaries in considered optimization problem were not constant which contributes to the complexity of the addressed optimization task. The six state finite automaton code realization is described which prevents the oscillations in the strategies. The algorithm for integration of system dynamics model and genetic algorithm with finite automaton is described.",
    "full_text_body": "\n\n\n\n\uFEFFUDC 519.234\nVestnik SibGAU Vol. 16, No. 1, P. 153-158\nAPPLICATION OF FINITE AUTOMATA WITH GENETIC ALGORITHMS IN JAVASCRIPT FOR DETERMINATION OF MANPOWER SYSTEM CONTROL\nA. Skraba*, D. Kofjac, A. Znidarsic, C. Rozman, M. Maletic\nUniversity of Maribor, Faculty of Organizational Sciences Cybernetics & Decision Support Systems Laboratory Kidriceva cesta, 55a, Kranj, SI-4000, Slovenia *E-mail: andrej.skraba@fov.uni-mb.si\nThe strict hierarchical manpower system is modeled in the state space where the desired number of men in particular rank is determined by predefined trajectory function. The transition model is represented by the principles of System Dynamics where each rank is represented as the state element and transition as the flow. The basis for the model is the structure of the exponential delay chain with additional outflows from particular states. The strategy for achieving the desired states is determined by the application of the genetic algorithms which are implemented in JavaScript as well as the System Dynamics model. Parameter boundaries were taken into consideration which was determined according to the historical data. Predetermination of the desired system states by the set of exponential functions reduced the optimization burden. The optimization problem was defined as the minimization of the sum of quadratic difference between desired and actual states in all ranks for the observed time horizon. Time boundaries in considered optimization problem were not constant which contributes to the complexity of the addressed optimization task. The six state finite automaton code realization is described which prevents the oscillations in the strategies. The algorithm for integration of system dynamics model and genetic algorithm with finite automaton is described.\nKeywords: manpower system, finite automata, genetic algorithm.\nВестник СибГАУ Т. 16, № 1. С. 153-158\nПРИМЕНЕНИЕ КОНЕЧНЫХ АВТОМАТОВ С ГЕНЕТИЧЕСКИМИ АЛГОРИТМАМИ В JAVASCRIPT ДЛЯ ОПРЕДЕЛЕНИЯ УПРАВЛЕНИЯ ЧЕЛОВЕЧЕСКИМИ РЕСУРСАМИ\nA. Шкраба*, Д. Кофьяч, A. Жнидаршич, Ч. Розман, M. Малетич\nУниверситет Марибора, факультет организационный наук Лаборатория кибернетики и систем поддержки принятия решений Словения, SI-4000, Крань, ул. Кидричева 55a *E-mail: andrej.skraba@fov.uni-mb.si\nСтрого иерархическая система управления человеческими ресурсами моделируется в пространстве состояний, в котором требуемое число работников определенного ранга определятся функцией предписанной траектории. Модель переходов основана на принципах системной динамики, когда каждый ранг описывается как элемент пространства состояний, а каждый переход - как поток. Основой модели является структура цепи с экспоненциальным запаздыванием с аддитивными выходными потоками для некоторых состояний. Стратегия достижения требуемого состояния определяется применением генетических алгоритмов, реализованных на JavaScript, а также моделью системной динамики. Учитываются ограничения на параметры, определенные в соответствии с предысторией. Предопределение требуемых состояний системы множеством экспоненциальных функций снижает трудности оптимизации. Задача оптимизации определяется как минимизация суммы квадратичных разностей между требуемыми и реальными состояниями всех рангов на наблюдаемом горизонте времени. Временные ограничения в рассматриваемой оптимизационной задаче не являются постоянными величинами, что усложняет эту задачу. Описывается реализация кода конечного автомата с шестью состояниями, позволяющего избежать осцилляций в стратегиях управления. Описывается также алгоритм, интегрирующий модель системной динамики и генетический алгоритм с помощью конечного автомата.\nКлючевые слова: управление человеческими ресурсами, конечные автоматы, генетический алгоритм\nIntroduction. Controlling of hierarchical manpower system such as military is demanding task [1-6] since the control problem includes several stochastic variables which should be considered, such as time variant boundaries on recruitment, promotions, retirements and wastages. The paper describes the methodology which was developed for the Slovenian Army restructuring [1; 7] where the new numbers of officers in the highest eight ranks should be determined. Due to the new standards, the new ratio should be established between the number of officers and number of soldiers. The structure of the system is shown in fig. 1. The system is modelled as the cascading exponential delay with the outflows as the wastages, i. e. fluctuations from the army. The input u(t) to the system represents recruitment which influences the inflow R0 to the first element x1 which represents the level of the first rank (x1) members (lowest rank). According to the promotion factor r1 the transitions from rank x1 to rank x2 are made. The fluctuations from the rank x1 are determined by the number of the x1 rank members and the fluctuation factor a. Outflow element FA represents the wastage, i. e. the case where the member of the rank leaves the army. This structure is repeated arbitrarily however in our case eight ranks were considered. The system also does not allow for direct input to the particular rank x; the way to the higher ranks is only possible to the recruitment to the first rank, x1 therefore the system is strict hierarchical. In order to define the dynamics of the system the discrete state space is applied in the form x(k + 1) = Ax(k) + Bu(k) [1]. State vector x represents the number of men in particular rank whereas matrix of coefficients A represents promotion factors r and wastage factors f. The only input to the system is recruitment represented by the Bu(k) term in the discrete state space.\nIn order to restructure the army manpower system, the recruitments, promotions, wastages and retirement should be determined in such a way, that new, desired numbers of man in particular rank x are achieved in minimal time. The solutions should not exercise the oscillations since this would lead to the undesired adaptation of training facilities and number of instructors. Another limitation that should be considered, is that the number of recruitments, promotions, wastages and retirement should not deviate significantly from the average numbers in previous 10 years. The novelty of the approach is twofold, on one side, the manpower system is modelled by the System Dynamics methodology, which is easy to understand, on the other side, the model is integrated with the Finite Automata in order to avoid the undesired oscillations in the strategy. Besides, we have developed technical realization of the system in JavaScript which provides new opportunities to apply the developed algorithm in the cloud as well as in the embedded devices [8].\nMethodology description. For each rank x, the desired number of man is stated by the Human Resource department in the Slovenian army. This were only the final numbers of men that should be achieved in particular ranks x. Since the system is described by the model of exponential delay chain, it is anticipated, that the transitions will follow exponential functions. By anticipating the system response, the optimization burden could be reduced by the predetermination of the trajectories for states x. The response of the system will be exercised as the exponential approach to the goal values. By the determination of the desired response function one can\nreduce the optimization search space [9; 10]. In our case we defined the desired response by the function, describing the way in which the number of men in particular rank x should be reached. The following function has been defined:\nf (k ) = x, +\n(x0 ~ x )(k, - k) _ ki\npk\n(1)\nwhere x0, xi represent initial and final value of the state variable x, ki is terminal time; k is simulation time and p e [0,«] is importance factor which determines the rate by which the goal is reached. The optimization problem where we want to achieve the desired values, marked with z in the equation (2) considers the minimal distance to the desired values function defined by equation (1):\nmin J = V (z(k) - x(k))T G(z(k) - x(k))\nu,r,f k=1\n(2)\nsubject to\nu LB (k )\nrLB (k ) fLB (k )\n<\t%b (k),\n<\tfuB (k),\n(3)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n<\tu(k) < uub (k),\n<\tr(k )\n<\tf (k)\nwhere G is time-invariant diagonal matrix of weights reflecting the importance of holding deviations for rank n as small as possible; z(k) represents the goal trajectory of the system defined by equation (1); tq is terminal time; uLB (k) and uUB (k) vectors of lower and upper boundary for recruitment in rank x1, respectively; rLB (k) and rUB (k) vectors of lower and upper boundary for transitions r between ranks x, respectively (as well as output of the system from the last rank xn ); and fLB (k) and fUB (k ) vectors of lower and upper boundary for fluctuations, i. e. wastages from rank x, respectively. Note that all boundaries are time dependent, which increases the complexity of the addressed optimization problem.\nDescribed optimization problem should be augmented by the rule, that the gained strategy should not exercise undesired oscillations [1]. If, for example, the recruitment would oscillate e. g. between 0 and 1000 men/year this would mean, that one should adapt the recruitment facilities accordingly, which would not be desired. In order to get the proper strategies, not exercising the oscillations, the six state automaton A is defined which identifies the strategies with undesired oscillations in flows between state variables, where the set of states is\nS {Sq, Sj, S2, S3, S4,\nS5}, the comparison alphabet\nA = {g,e,l}, the initial state is i = S0 and the set of end states is T = {S0, Sj, S2, S3, S4}. The transition function of A , 8: S x A ^ S is defined by the table.\nSix state automation transition table\ng\tl\te\n^ So\tS1\tS2\tSo\n^ S1\tS1\tS3\tS1\n^ S2\tS4\tS2\tS2\n^ S3\tS5\tS3\tS3\n^ S4\tS4\tS5\tS4\n^ S5\tS5\tS5\tS5\nInput u(t)\npromotion ri\nRo\nXi\nr0\nrecruitment\nRi\nJ\nX2\nT\nFa\nJ\nГ2\n7N\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nX3\nFb\nJ\nГ3\n7N\nR3\nJ\nX4\nT\nFc\nJ\nГ4\n7N\ncanonical form\nwastage\nR\nR\n2\n4\nF\nD\nFig. 1. Structure of the System Dynamics model of manpower system\nfunction automaton(r) {\nvar t = 1; // starting value for t is set to 1 for (var i=0; i<r.length; i++) { // loop goes from 0 to string length\nif\t(t==1) { // at the starting case t=1 if (r[i+1] < r[i]) { // the value in the next step is lower than at present; going t = 2;\tdown\n} if (r[i+1] > r[i]) { // the value in the next step is higher than at present; going up t = 4; }\n} if 1\t(t == 2) { // if t=2, it means, that in the previous step we went down if (r[i+1] > r[i]) { // and at the next step, we went up t=3; }\n} if ( t\tt == 3 && r[i+1] < r[i]){//we went once down and once up and at the next step again = 0; break; // forbidden combination i.e. oscillation in the control strategy }\tdown\nif\t(t == 4) { // we went up in the previous step\nif t=5 }\t(r[i+1] < r[i]) { // and go down in the next step\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n} if (t == 5) { // if value is first up and then down if (r[i+1] > r[i]) { // and if we go up again at the next step t=0; // we get forbidden combination break; } 1\n} if from the beginning of the loop till the end no condition is fulfilled t does not change; meaning r[i+1] = r[i]\n} if (t==0) { t=10; // we 1\tset return value as 10, which is the multiplication factor\n} else {t=1;} return t; }\t// if there were no forbidden moves, the value of the return multiplication factor\tis 1\nFig. 2. Finite automata code realized in JavaScript\nThe described automaton in table A is defined by the following code in JavaScript, which is shown in fig. 2. All the possible states are checked by the set of conditional clauses. Description in the code provides the explanation of particular parts.\nRealization of the system is shown in the fig. 3 [11]. The system consists of the GA part as well as of simulation part. Initially, the reading of the values from the Graphical User Interface (GUI) is performed. The system main loop is started, following the conversion of decimal values to binary values since the algorithm works on the converted binary numbers. This is needed, since the parameters are from continuous number set. In the next step the computation of the Fitness Function (FF) is performed. The input vector for the simulation model is prepared and simulation is started for the prescribed number of simulation time steps. At each new simulation run the model is reset. After simulation stop time is reached, the results are either evaluated with FA in order to punish the oscillations or not, which is also one of the options. After the simulation is performed, the minimum and maximum in the population is determined. The fitness vector is then normalized in order to use it at the roulette wheel selection for the new population generation. The crossing of the genomes follows with the elitism selection in order to transfer the best solution to the next population. After the new matrix is formed the mutation is done. In the next step the output of the results is provided. The Main Loop then continues until the final number of steps in the optimization procedure is achieved. In the next step the elapsed time is printed out as well as results and corresponding graphs.\nFig. 4 shows example of the results comparing the desired trajectory and achieved solution for three ranks. The optimization was run with the population of size 10, mutation rate 0.01 with applied FA for 250 timesteps. The optimization time was 206s. The time could be significantly improved by the decreasing the size of the population, for example the run with the population size 3 would take 35s providing similar results however, the convergence of the optimization should also be considered.\nSince the mobile devices are limited in the processing power, we have investigated the influence of the population size to the convergence of the optimization procedure. We have applied three different sizes of population, 2, 5 and 10 and perform four optimization runs for each. Fig. 5 shows the average value of the fitness function for different population size. Value 0 would mean 0 deviation from the desired values. One can observe, that the population of size 5 or 10 provides approximately the same convergence however, the population of size 3 converges rather slowly.\nNevertheles, the average time of the optimization is significantly different; for Population of size 3 the optimization time is 36s, for Population of size 5, 116s and Population of size 10 228s. Therefore the smaller population size might lead to acceptable solutions quicker however, too small population would converge rather slowly.\nFig. 3. GA with included SD simulation model and optional FA for elimination of oscillatory solutions\nRealization of the optimization system. The prototype realization of the Sd manpower transition model with GA as well as finite automaton was done in JavaScript. The speed of the solution search depends on the mobile device applied which is satisfactory for the smaller problems. Important aspect here is, that the model with the optimization could easily be accessed and applied in the cloud. Fig. 6 shows actual screenshot of the realization of the Genetic Algorithm with Finite Automaton in JavaScritpt running on the mobile phone. One could observe the call of the code from the server meaning, that the same code could be distributed and used on any mobile device running JavaScript. This includes all modern mobile phones as well as other smart devices such as Smart TVs etc. This is convenient for the easy application of the system for the determination of manpower strategies with various simulation models [12-15] not only from the field of manpower management. There are also other benefits, for example possibility of development of parallel algorithm on embedded devices with the node.js technology [16]. Since the mobile devices are limited in processing power, the code could also be run on the server which would significantly improve the time performance of the system.\nFig. 4. Example of the results comparing the desired trajectory and achieved solution\nFig. 5. Results of the experiment with different population sizes (10 - left, 3 - right)\nFig. 6. Realisation of the Genetic Algorithm with Finite Automaton in JavaScritpt running in the browser\nConclusion. Application of the prescribed trajectory function provided the reduction of the optimization problem of searching for the proper strategy in hierarchical manpower system. Here we assumed the exponential approach to the desired states. The addition of the described finite automaton was efficient at the elimination of strategies that examined oscillations. The implementation of the model as well as genetic algorithm with finite automata was successfully performed in JavaScript providing several benefits at the implementation, especially possibility to easily run the same code on the server, in parallel or on the embedded devices. Performed experiments show that careful selection of the population size might lead to better time performance of optimization.\nDirections of the future research include an automation of the optimization procedure adjustment through the genetic algorithm self-configuration [17; 18] or the use of the swarm optimization cooperative method [19] as well as the automated identification of the dynamic system from the description of their state [20].\nReferences\n1.\tSkraba A., Kljajic M., Papler P., KofjaC D., Obed M. Determination of recruitment and transition strategies. Kybernetes. 2011, vol. 40, no. 9/10, p. 1503-1522.\n2.\tMehlman A. An approach to optimal recruitment and transition strategies for manpower systems using dynamic programming. Journal of Operational Research Society, 1980, vol. 31, no. 11, p. 1009-1015.\n3.\tSemenkin E., Semenkina M. Stochastic Models and Optimization Algorithms for Decision Support in Spacecraft Control Systems Preliminary Design. Informatics in Control, Automation and Robotics, Lecture Notes in Electrical Engineering. 2014, vol. 283, p 51-65, Springer-Verlag Berlin Heidelberg.\n4.\tAkhmedova S., Semenkin E. Co-operation of biology related algorithms. 2013 IEEE Congress on Evolutionary Computation, CEC 2013, p. 2207-2214.\n5.\tBavec B. Web Realization of Genetic Algorithms for Determination of Control Strategies on Hierarchical Manpower Model. Master Thesis. 2013.\n6.\tReeves G. R., Reid R. C. A. military reserve manpower planning model. Computers & Operations Research. 1999, vol. 26, p. 1231-1242.\n7.\tSkraba A., Kolozvari A., Kofjac D., Stojanovic R. (2014) Prototype of speech controlled cloud based wheelchair platform for disabled persons. IEEE Embedded Computing (MECO), 2014 3rd Mediterranean Conference on. DOI: 10.1109/MEC0.2014.6862683.\n8.\tNode.js. Available at: http://nodejs.org/ (Accesed: 7.11.2014).\n9.\tRozman C., Pazek K., Kljajic M., Bavec M., Turk J., Bavec F., Kofjac D., Skraba A. The dynamic simulation of organic farming development scenarios-A case study in Slovenia. Computers and Electronics in Agriculture. 2013, vol. 96, p. 163-172.\n10.\tSkraba A., Kljajic M., Kljajic M. B. The role of information feedback in the management group decision-making process applying system dynamics models. Group Decision and Negotiation. 2007, vol.16, no. 1, p. 77-95.\n11.\tSkraba A., Kljajic M., Leskovar R. Group exploration of system dynamics models - is there a place for a feedback loop in the decision process? System Dynamics Review. 2003, vol. 19, no. 3, p. 243-263.\n12.\tKljajic M., Bernik I., Skraba A. Simulation approach to decision assessment in enterprises. Simulation. 2000, vol. 75, no. 4, p. 199-210.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n13.\tGiles K. 2006. Where have all the soldiers gone? Russia's military plans versus demographic reality. CSRC, ISBN 1-905058-92-6.\n14.\tKilaz I., Onder A., Yanik M. Manpower Planning and Management in Cyber Defense. Proceedings of the 13 th European Conference on Cyber warefare and Security: ECCWS 2014. Eds.: Liaropoulos A., Tsihrintzis G. Academic Conferences Limited.\n15.\tArmenia S., Centra A., Cesarotti V., De Angelis A., Retrosi C. Military Workforce Dynamics and Planning in the Italian AirForce. Proceedings of the 30th International Conference of the System Dynamics Society, July 22-26, 2012, St. Gallen, Switzerland.\n16.\tSkulj D., Vehovar V., Stamfelj D. The modelling of manpower by Markov chains - a case study of the Slovenian armed forces. Informatica. 2008, vol. 32, no. 3, p. 289-291.\n17.\tSemenkin E., Semenkina M. Self-configuring genetic programming algorithm with modified uniform crossover. IEEE Congress on Evolutionary Computation (CEC 2012). 2012. P. 6256587.\n18.\tSemenkin E., Semenkina M. Self-configuring genetic algorithm with modified uniform crossover operator. Lecture Notes in Computer Science. LNCS 7331. Part 1. 2012, p. 414-421.\n19.\tAkhmedova S., Semenkin E. Co-operation of biology related algorithms. IEEE Congress on Evolutionary Computation (CEC 2013). 2013, p. 2207-2214.\n20.\tRyzhikov I., Semenkin E. Evolutionary strategies algorithm based approaches for the linear dynamic system identification. Lecture Notes in Computer Science. 2013, vol. 7824 LNCS, p. 477-484.\n© Skraba A., Kofjac D., Znidarsic A., Rozman C., Maletic M., 2015\n",
    "download_url": "https://cyberleninka.ru/article/n/application-of-finite-automata-with-genetic-algorithms-in-javascript-for-determination-of-manpower-system-control/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/opyt-podgotovki-studentov-v-uchebno-issledovatelskoy-laboratorii-mfti-intel",
    "slug": "opyt-podgotovki-studentov-v-uchebno-issledovatelskoy-laboratorii-mfti-intel",
    "title": "Опыт подготовки студентов в учебно-исследовательской лаборатории МФТИ-Интел",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFЮ.В. Байда1,2, М.В. Золотухин1,2, Н.Е. Косарев1,2, Е.С. Парамонов1,2, Г.С. Речистое1,2,\nА.И. Титов1,2, Б.В. Шурыгин2 1 Московский физико-технический институт (государственный университет)\n2 ЗАО «Интел А/О»\nОпыт подготовки студентов в учебно-исследовательской лаборатории\nМФТИ—Интел\nВведение. Учебно-исследовательская лаборатория МФТИ-Интел основана в Московском физико-техническом институте (государственном университете) в 2003 году в рамках совместной работы с российским отделением компании «Интел». Аналогичные по структуре, но с иными целями и задачами лаборатории существуют в МГУ им. М.В. Ломоносова, в Нижегородском государственном университете им. Н.И. Лобачевского, в университетах Сарова и Новосибирска [1].\nЛаборатория является своеобразным представительством на младших курсах одной из базовых кафедр факультета радиотехники и кибернетики — кафедры микропроцессорных технологий, руководство которой осуществляет известный российский учёный, член-корреспондент РАН Б.А. Бабаян.\nУчебный процесс в лаборатории построен следующим образом: студенты работают в проектных группах, занимаются исследованиями, изучают новые технологии и применяют полученные знания на практике. Научное руководство проектами осуществляют сотрудники компании «Интел», зачастую сами являющиеся выпускниками этой кафедры, которые делятся своим опытом, помогают участникам проектов в решении возникающих проблем. Таким образом, обеспечивается преемственность поколений.\nСтуденты получают необходимые базовые знания и опыт задолго до того, как они начинают работать в компании «Интел». Кроме того, основываясь на опыте своего участия в проектах лаборатории, студенты имеют возможность осознано сделать выбор направления своей будущей работы, которое будет соответствовать их стремлениям. Все это благоприятно влияет на будущую карьеру студента.\nПроекты лаборатории являются отражением тех направлений, которые развиваются в московском офисе компании «Интел». Одна из целей, для которых создавалась лаборатория, — подготовить студентов к практической работе в реальных проектах в будущем, когда они станут студентами кафедры микропроцессорных технологий. Студенты, успешно работающие в проектах лаборатории, имеют приоритет при зачислении на кафедру и на работу в компанию «Интел».\nЕжегодно обучение в лаборатории проходят 50-60 студентов 1-3 курсов. Из них примерно десять студентов в результате серьёзного конкурсного отбора принимаются для обучения на кафедру и на работу. Подобная практика позволила с нынешнего года принимать студентов на кафедру и на работу не с 4-го, а с 3-го курса. Деятельность лаборатории охватывает множество студентов МФТИ, значительно превышающее число принятых на кафедру. В будущем это должно определить их научно-техническую ориентацию и приверженность к идеям и к технике компании «Интел».\nРаспределение студентов на проекты. Каждый новый учебный год преподаватели, желающие проводить занятия в лаборатории, представляют свои проекты, тематика которых должна принадлежать одной из областей вычислительной техники: программно-аппаратная архитектура ЭВМ, производительность вычислений, алгоритмы обработки данных и др. Затем студенты выбирают, в каком из представленных проектов они хотят принимать участие. Кроме того, некоторые студенты, желая расширить свои знания и понять, какие задачи им более интересны, участвуют в нескольких проектах. Такие студенты сразу обращают на себя внимание руководителей проектов и быстрее становятся лидерами.\nКоличество, задачи и участники проектов могут меняться в начале каждого учебного года. В зависимости от успешности проекта в предыдущем году и наличия интереса у развивающих его руководителей он может быть продолжен и в следующем году.\nХод обучения. Взаимодействие преподавателей и студентов происходит несколькими способами. Во-первых, это традиционные лекции по материалу проекта, на которых студенты знакомятся с теоретическими основами области техники, к которой принадлежит их проект, а также со смежными проблемами. Во-вторых, это семинары, на которых обсуждаются текущие задачи и проблемы проекта. В-третьих, это традиционное для «взрослых» проектов взаимодействие через электронную почту, списки рассылки, записи в системах отслеживания ошибок, документирование проделанной работы в wiki-системах. В отличие от лекций и семинаров, проходящих раз в неделю, общение по сети Интернет проходит ежедневно, в удобное для преподавателей и студентов время, что позволяет много успеть сделать ещё до очередного очного занятия.\nКонтроль успеваемости проводится по совокупности нескольких параметров, в которые включаются: фактический вклад студентов в развитие проекта, результаты решения контрольных работ, посещаемость занятий.\nПроекты. В 2010/2011 учебном году занятия проходят в следующих проектах лаборатории.\nMDSP (Multimedia digital signal processor). Целью проекта [2] является реализация функционального и потактового симуляторов цифрового сигнального микропроцессора. Данный тип процессоров предназначен для выполнения задач цифровой обработки сигналов (англ. digital signal processing) — алгоритмов преобразования информации в режиме реального времени, нашедших широкое применение в областях распознавания речи и изображения, кодирования и декодирования звука, речевых и музыкальных синтезаторов и т.д.\nСтуденты этого направления занимаются проектированием и созданием двух симуляторов — функционального и потактового, а также приобретают необходимые знания в области архитектуры современных микропроцессоров.\nLHO (LLVM hosted optimizations). Проект посвящен разработке оптимизаций на основе компилятора LLVM [3]. Студенты изучают общие вопросы программирования, теоретические основы разработки компиляторов и выполняют практические задания. В течение первого семестра студенты знакомятся с языком C++ в объеме, необходимом для работы с LLVM. Также на лекциях рассматриваются основные структуры данных, применяемые в компиляторах, и устройство внутреннего представления LLVM. После этого подробно разбираются различные методы оптимизации кода. Параллельно с этим студенты выполняют практические задания по разработке структур данных и встраиванию собственного оптимизирующего прохода в инфраструктуру LLVM.\nВ течение следующих семестров студенты по заданию преподавателей разрабатывают различные оптимизации и также встраивают их в LLVM.\nICDV (Intel Compiler’s Dumps Viewer). Проект заключается в написании утилиты [4], позволяющей визуализировать графы внутреннего представления Intel C compiler. В процессе работы на примере данного компилятора студенты изучают, как устроено внутреннее представление современных промышленных компиляторов. Помимо изучения этой основной предметной области в рамках работы над проектом студенты изучают библиотеку Qt, а также приобретают навыки командной работы над задачами. В случае успешного завершения проекта созданная утилита в дальнейшем может быть использована при разработке компилятора Intel.\nWWB (Webworkers benchmarks). Проект по написанию набора тестов на языке JavaScript, максимально использующих вычислительные возможности современных процессоров. Целью его является поиск ресурсоёмких задач, допускающих распараллеливание их алгоритмов с моделью передачи сообщений (MPI), и их последующего моделирования с помощью расширения WebWorkers [5] для языка JavaScript.\nЗадачи этого исследования — познакомить студентов с устройством современных браузеров, а также интенсивное и глубокое экспериментирование с производительностью современных just-intime (JIT) компиляторов языка JavaScript.\nMM (Multimedia). Этот проект затрагивает изучение различных областей знаний о принципах работы алгоритмов кодирования видеоизображения и оценки их качества. В процессе лекций освещаются следующие темы: современные методы сравнения качества изображений, видеопотоков и кодеков; выявление — субъективное («на глаз»), а также объективное (уровень шума) — артефактов в видеопотоке. Знания, полученные на занятиях, позволят студентам научиться гра-\nмотно работать со статическим и видеоизображением, расширить свой кругозор в такой науке, как колориметрия, изучить принципы действия видеокодеков и методики их оценки. Также они научатся создавать программы, позволяющие объективно определять качество изображения.\nЛитература\n1.\tСписок студенческих лабораторий «Интел» в России. — http://www3.intel.com/cd/corporate/education/emea/rus/highered/student/373553.htm\n2.\tДомашняя страница проекта MDSP. — http://code.google.com/p/mdsp/\n3.\tChris Lattner, Vikram Adve. The LLVM Compiler Framework and Infrastructure Tutorial // LCPC’04 Mini Workshop on Compiler Research Infrastructures. — West Lafayette, Indiana, 2004.\n4.\tДомашняя страница проекта MIPT-Vis. — http://code.google.com/p/mipt-vis/\n5.\tIan Hickson. Web Workers Draft Recommendation 7 December 2010. — http://whatwg.org/ww\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n",
    "download_url": "https://cyberleninka.ru/article/n/opyt-podgotovki-studentov-v-uchebno-issledovatelskoy-laboratorii-mfti-intel/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/vybor-veb-steka-dlya-realizatsii-tsifrovoy-sredy-predostavleniya-transportnyh-uslug",
    "slug": "vybor-veb-steka-dlya-realizatsii-tsifrovoy-sredy-predostavleniya-transportnyh-uslug",
    "title": "Выбор веб-стека для реализации цифровой среды предоставления транспортных услуг",
    "abstract_description": "Переход транспорта на цифровые технологии требует создания целого ряда сервисов обеспечения перевозок. Их разработка ведется на основе современных веб-технологий. В данной статье рассматриваются основные стеки, используемые при разработке веб-приложений. Описаны компоненты веб-стеков, предназначенные для обработки данных на различных уровнях реализации приложений. Проводится анализ особенностей веб-стеков. Рассмотрены синхронный и асинхронный режимы обработки информации, производительность программ обработки информации на стороне сервера, используемые системы управления реляционными и NoSQL базами данных, серверные языки программирования. Описаны преимущества веб-стеков при разработке определенного вида приложений. Основное внимание уделено сравнению стеков, использующих язык PHP, и стеков на основе программной платформы Node. В результате анализа сделан вывод о преимуществе стека, использующего платформу Node, для реализации интегральной цифровой среды предоставления транспортных услуг.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.738.5\nВЫБОР ВЕБ-СТЕКА ДЛЯ РЕАЛИЗАЦИИ ЦИФРОВОЙ СРЕДЫ ПРЕДОСТАВЛЕНИЯ ТРАНСПОРТНЫХ УСЛУГ\nДавыдовский Михаил Альбинович,\nканд. техн. наук, доцент, доцент кафедры вычислительных систем, сетей и информационной безопасности, e-mail: madavidovsky@gmail.com, Институт управления и цифровых технологий, Российский университет транспорта (МИИТ), г. Москва\nПереход транспорта на цифровые технологии требует создания целого ряда сервисов обеспечения перевозок. Их разработка ведется на основе современных веб-технологий. В данной статье рассматриваются основные стеки, используемые при разработке веб-приложений. Описаны компоненты веб-стеков, предназначенные для обработки данных на различных уровнях реализации приложений. Проводится анализ особенностей веб-стеков. Рассмотрены синхронный и асинхронный режимы обработки информации, производительность программ обработки информации на стороне сервера, используемые системы управления реляционными и NoSQL базами данных, серверные языки программирования. Описаны преимущества веб-стеков при разработке определенного вида приложений. Основное внимание уделено сравнению стеков, использующих язык PHP, и стеков на основе программной платформы Node. В результате анализа сделан вывод о преимуществе стека, использующего платформу Node, для реализации интегральной цифровой среды предоставления транспортных услуг.\nКлючевые слова: цифровые технологии на транспорте, веб-технологии, веб-стеки, базы данных, серверные языки программирования, PHP, Node\nSELECTING A WEB STACK FOR IMPLEMENTATION OF A DIGITAL ENVIRONMENT FOR THE PROVISION OF TRANSPORT SERVICES\nDavydovskiy M.A.,\ncandidate of technical sciences, associate professor, associate professor department of computing systems,\nnetworks and information security, e-mail: madavidovsky@gmail.com, Institute of Management and Digital Technology, Russian University of Transport (MIIT), Moscow\nThe transition of transport to digital technology requires the creation of a number of transportation services. Their development is based on modern web technologies. This article discusses the main stacks used in developing web applications. The components of web stacks designed to process data at various levels of application implementation are described. The analysis offeatures of web stacks is carried out. The synchronous and asynchronous information processing modes, the performance of server-side information processing programs, the relational and NoSQL database management systems used, and server programming languages are considered. The advantages of web stacks for developing a certain type of application are described. The focus is on comparing stacks using the PHP language and stacks based on the Node software platform. As a result of the analysis, a conclusion was made about the advantage of the stack using the Node platform for implementing an integrated digital environment for providing transport services.\nKeywords: digital technologies in transport, web technologies, web stacks, databases, server programming languages, PHP, Node\nDOI 10.21777/2500-2112-2019-4-34-41\nВведение\nИспользование цифровых технологий на транспорте является в настоящий момент приоритетным направлением его развития. Интегральная цифровая среда предоставления транспортных услуг разрабатывается с целью обеспечения пользователей услугами компаний, перевозящих грузы, и компаний, выполняющих сопутствующие услуги, например, хранение грузов. Данная информационная система разрабатывается в рамках проекта создания «цифровой железной дороги» [2; 5] в ОАО «РЖД».\nДля реализации такого рода систем используется клиент-серверная архитектура обработки данных и веб-технологии. Клиент и сервер - это логические процессы, выполняющие обработку данных на удаленных друг от друга вычислительных устройствах. Основные функции системы реализуются на сервере, а доступ к ним осуществляется пользователями, как правило, с помощью веб-приложений либо приложений, установленных на мобильные устройства.\nДля работы сайта или приложения, доступного через интернет и работающего в браузере, необходим целый набор программ или программных пакетов, которые последовательно обрабатывают поток данных, циркулирующий между клиентом и сервером. Такой набор программ называют веб-стеком. Веб-стек включает ряд компонентов. Это операционная система, установленная на сервере, веб-сервер, система управления базами данных, серверный язык программирования. В стек не включается сам браузер (Google Chrome, FireFox, Internet Explorer, Safari и др.) и операционная система клиента, в которой работает браузер (Windows, Mac OS, Linux).\nСуществует достаточно большое количество стеков, используемых при разработке веб-приложений. Каждый из них имеет свои особенности и преимущества при реализации определенного класса приложений.\nКомпоненты веб-стека\nОперационная система, обычно это Windows или Linux, используется на сервере для выполнения всех программ.\nВеб-сервер, обычно это Apache или ngin^ обрабатывает запросы, посылаемые клиентом (браузером), на предоставление некоторой информации (контента). Этим контентом могут быть статические страницы, написанные на языке HTML, изображения, видео- и аудиоинформация. Контент может также формироваться динамически на основе информации, которая хранится в базе данных. Для формирования динамического контента используются серверные языки программирования. Динамический контент передается клиенту, либо в виде страниц на языке HTML, либо как некоторый набор данных в специальном формате, обычно JSON.\nСистема управления базами данных, обычно MySQL или MariaDB, используется для создания базы данных и поиска информации по запросам клиента. Применяются и другие системы управления базами данных, например, PostgreSQL, Microsoft SQL Server, Oracle, BigTable, MongoDB, Cassandra.\nСерверный язык программирования используется для написания программ на стороне сервера, которые обрабатывают запросы клиентов и формируют динамические страницы на основе информации, содержащейся в базе данных. Имеется большое количество скриптовых языков, например, PHP, JavaScript, Python, Ruby, Perl. Также могут быть использованы и компилируемые языки, например С++, C#, Java, Haskell.\nВеб-стеки\nLAMP стек [3; 7] использует операционную систему Linux (L), веб-сервер Apache (A), базу данных MySQL (M) и язык PHP (P) [10]. В настоящее время это самый популярный стек для разработки динамических сайтов и веб-приложений. Имеются следующие модификации этого стека:\n-\tLEMP стек вместо Apache использует ^тх;\n-\tLLMP стек вместо Apache использует lighttpd. Lighttpd - это быстрый защищенный веб-сервер, который работает как в операционной системе Linux, так и Microsoft Windows;\n-\tLAPP стек вместо MySQL использует PostgreSQL;\n-\tWAMP стек вместо Linux использует операционную систему Microsoft Windows;\n-\tXAMPP стек может работать как в Linux, так и в Windows и использует язык PHP или Perl.\nWISA стек использует только продукты фирмы Microsoft:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tоперационную систему Windows;\n-\tвеб-сервер Internet Information Services (IIS);\n-\tсистему управления базами данных Microsoft SQL Server;\n-\tплатформу для разработки веб-приложений ASP.NET.\nПлатформа ASP.NET позволяет писать код приложения на разных языках, входящих в комплект .NET Framework. Это языки: C#, VisualBasic.NET, J#, JScript.NET и др. Эта платформа использует технологию AJAX и шаблон проектирования MVC (Model-View-Controller), который позволяет разделить модель данных, внешнее представление и управление данными.\nMAMP стек - это стек, работающий в операционной системе macOS фирмы Apple. Этот стек включает веб-сервера Apache и ^тх, систему управления базами данных MySQL, языки программирования PHP, Perl и Python. Данный стек позволяет работать с системой управления контентом WordPress.\nСерверная платформа Node [9] использует скриптовый язык программирования JavaScript. Она не требует использования Apache или другого веб-сервера, т.к. выполняет его функции. Поэтому в названии стеков с этой платформой не указывается веб-сервер, а на первом месте стоит система управления базами данных.\nMEAN стек [7; 8] использует следующие программы:\n•\tMongoDB (M) - NoSQL-система управления базами данных, хранящая данные в формате «ключ-значение»;\n•\tExpress (E) - фреймворк для разработки серверной части веб-приложений на платформе Node [1]. Он является стандартным каркасом для разработки приложений на Node и содержит ряд методов, упрощающих код на Node;\n•\tAngularJS (A) - фреймворк для разработки клиентской части одностраничных веб-приложений на платформе Node. Он включает функции обработки данных JSON-формата, использует MVC-шаблон проектирования веб-приложения, позволяет разработать веб-приложение, которое переносит часть нагрузки по обработке данных со стороны сервера на сторону клиента;\n•\tNode (N) - платформа разработки серверных приложений.\nМодификациями стека MEAN являются:\n•\tMERN стек, в котором AngularJS заменен на React. React - библиотека на JavaScript для разработки пользовательских интерфейсов одностраничных и мобильных приложений;\n•\tMEEN стек, в котором AngularJS заменен на Ember.js. Ember.js - это фреймворк, предоставляющий каркас для разработки веб-приложений с использованием MVC-шаблона.\nJAMstack включает в себя такие компоненты, как JavaScript (J), API (A) и Markup (M). Это новая технология подготовки статических сайтов. JavaScript обеспечивает выполнение запросов пользователя, обрабатываемых на стороне клиента. Для реализации интерфейса пользователя может использоваться один из таких фреймворков, как Vue.js, React или Angular. Обработка на стороне сервера запросов клиента, формируемых с помощью программы на языке JavaSdipt, и все операции по взаимодействию с базой данных выполняются с помощью некоторого программного интерфейса (API). API может быть разработан применительно к конкретному сайту или, что наиболее часто, используются API, реализуемые сервисами, которые предоставляют сторонние компании.\nMarkup - это термин, означающий, что страницы сайта должны быть предварительно сформированы перед его развертыванием в сети. Это обычно делается с помощью генераторов статических сайтов (SSG, Static Site Generator). Например, можно воспользоваться генераторами Gatsby, Jekyll, Hugo, Heho или Nuxt. Также могут быть использованы инструменты разработки веб-приложений на стороне клиента (Frontend JavaScript module bundlers). Например, Parcel, Webpack, FuseBox, Browserify. Эти инструменты формируют страницу на стороне клиента с помощью программ на JavaScript.\nВ стандартном процессе доступа к странице сайта пользователь указывает адрес страницы и может передать также некоторую информацию, используемую для формирования запроса. Сервер обраба-\nтывает запрос клиента и на основе шаблона страницы и данных из базы формирует страницу с помощью программ, написанных, например, на языке PHP или JavaScript, а затем отсылает ее клиенту. Для выполнения указанных действий требуются хостинг, т.е. услуга по размещению на сервере ресурсов (шаблонов, кода, базы данных), необходимых для работы динамических сайтов. При использовании JAMstack нет необходимости в таком хостинге. Страницы заранее подготовлены, поэтому не требуется каждый раз при обращении к странице выполнять ее формирование. Сами страницы выкладываются в GitHub или на сервера для хранения файлов CDN. Однако, технология JAMstack не годится для случаев, когда требуется частое обновление содержимого страниц или формирование новых страниц, обновление информации в режиме реального времени, реализация интерактивных функций. Поэтому данная технология не может быть использована для реализации обработки данных в интегральной цифровой среде.\nСерверные технологии Node и PHP\nNode и PHP являются в настоящее время наиболее широко используемыми технологиями разработки серверной части веб-приложений.\nPHP - это язык программирования для создания динамических сайтов и веб-приложений. Помимо языка PHP для реализации серверной части потребуется также веб-сервер, принимающий запросы клиентов, поступающие через интернет, и посылающий им ответы. Таким веб-сервером обычно является Apache.\nNode - это серверная платформа для написания программ на языке программирования JavaScript. Node одновременно является и веб-сервером, поэтому для него не нужен Apache.\nPHP создал Расмус Лердорф (Rasmus Lerdorf) в 1995 году. PHP - это скриптовый язык с открытым исходным кодом для написания серверной части веб-приложений. Скрипты на PHP могут включать в себя не только код на PHP, но также фрагменты кода на CSS (таблицы стилей), HTML (язык гипертекстовой разметки), программы на JavaScript, которые выполняются браузером на клиентской стороне и даже просто текст. Этот язык используется в таких проектах, как Facebook, Wikipedia, Yahoo, WordPress.\nNode разработал Райан Даль (Ryan Dahl) в 2009 году. С появлением Node стала возможной разработка серверной части веб-приложений на языке JavaScript. Node - это приложение с открытым исходным кодом. Node является асинхронной управляемой событиями платформой с неблокирующими операциями ввода-вывода. Node позволяет разрабатывать быстрые и масштабируемые приложения. Он используется такими компаниями, как Microsoft, Uber, Netflix, Yahoo, LinkedIn и PayPal.\nNode основан на ядре JavaScript V8, разработанном для Google Chrome. К отличительным особенностям V8 относится прямая компиляция в машинный код и средства оптимизации, обеспечивающие высокую скорость работы Node.\nСравнение приложений\nPHP и Node имеют каждый свои преимущества [6]. PHP предпочтительнее Node при разработке приложений, которые не требуют частого взаимодействия между клиентом и сервером. Наилучшими вариантами приложений с PHP являются:\n-\tприложения, использующие стек программных средств LAMP;\n-\tсистемы управления контентом (например, Drupal и WordPress написаны на PHP);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tприложения, которые потребляют много процессорного времени. Например, научные приложения и программы прогноза погоды;\n-\tблоги и коммерческие приложения, для построения которых используются CMS;\n-\tфинансовые приложения.\nNode имеет преимущество при разработке следующих приложений:\n-\tприложения, использующие современную технологию Single Page Applications. Например, индивидуальные сайты;\n-\tприложения, управляемые данными (data-driven applications);\n-\tприложения, которые должны хорошо масштабироваться к увеличению нагрузки на приложения из-за поступления большого количества запросов от клиентов. Преимущество достигается за счет использования неблокирующих операций ввода-вывода и технологии обработки событий;\n-\tприложения, которые должны работать в реальном масштабе времени, например, чаты, системы потокового видео, навигационные системы;\n-\tприложения, использующие такие технологии, как Angular и React (программные стеки -MEAN и MERN).\nСпособ работы программы и скорость выполнения\nСуществует два способа работы программы: синхронный и асинхронный. В синхронном варианте программа выполняется последовательно, один оператор за другим оператором кода. Следующий оператор выполняется только по завершению выполнения предыдущего оператора. В асинхронном варианте несколько операторов программы могут выполняться в одно и то же время.\nПрограмма на PHP выполняется в синхронном режиме. Только некоторые приложения используют асинхронную технику. Если какая-то функция требует большого ресурса времени на выполнение, то следующий за ней оператор будет ждать ее выполнения. В результате клиент может долго ждать ответа на свой запрос.\nNode работает в асинхронном режиме. Операции выполняются параллельно. Нет необходимости ожидания выполнения функций. Поэтому программа на Node работает быстрее, чем программа на PHP.\nКод на PHP выглядит проще, т.к. не требует понимания таких понятий Node, как замыкания, callback функции, управление событиями.\nПроизводительность\nЯзык PHP и язык JavaScript, который используется в Node, являются интерпретируемыми языками.\nПри обращении клиента к серверу, написанном на PHP, запрос поступает сначала на веб-сервер, например, Apache. Он запускает интерпретатор PHP, который выполняет код на PHP.\nNode не требует использования веб-сервера. Хотя обычно Node работает совместно с фреймворком Express, но последний имеет небольшой набор быстро выполняемых функций.\nИнтерпретатор Node работает быстрее интерпретатора PHP, т.к. использует технологию Google Chrome V8. В большинстве тестов, представленных в [11], Node показывает лучшие результаты, чем PHP.\nДля обмена информацией между клиентом и сервером часто используется формат данных JSON. В PHP для работы с этим форматом данных используются функции json_encode и json_decode. В Node используются аналогичные функции JSON.stringify и JSON.parse, которые работают быстрее.\nПрограмма на PHP генерирует на сервере страницу на языке HTML и отправляет ее клиенту. На стороне клиента браузеру проще работать с чистым HTML кодом без использования JavaScript. С другой стороны, использование технологии AJAX позволяет формировать страницу на стороне клиента и пересылать только данные, а не всю страницу на HTML. Такая технология используется при разработке сайта с использованием Node. Данная технология требует пересылки меньшего объема данных между клиентом и сервером и поэтому работает быстрее.\nPHP использует стандартную клиент-серверную модель, в которой каждый запрос клиента на сервер инициирует новое приложение, устанавливает соединение с базой данных, извлекает из базы информацию для формирования HTML-кода. В Node нет необходимости инициализации приложения при каждом запросе. Можно использовать, например, один и тот же объект, работающий с базой данных, для разных запросов.\nPHP использует модель блокировок. При запросе к базе данных необходимо дождаться ответа, чтобы продолжить выполнение следующего кода программы. В Node нет необходимости ждать ответа.\nМожно создать функцию обратного вызова (callback), которая прослушивает процесс выполнения доступа к базе данных и выполнится после завершения этого процесса.\nPHP использует веб-сервер, который работает в многопоточном режиме. Для каждого соединения клиент-сервер создается один поток. Node работает в однопоточном режиме, что упрощает взаимодействие, однако требует разработки асинхронных приложений, что несколько труднее для программиста. В некоторых случаях возможно использовать веб-сервер и для работы с Node.\nРабота с базами данных\nВ большинстве случаев программа на PHP работает с реляционными базами данных. Это такие системы управления базами данных, как MySQL, MariaDB, Microsoft SQL Server, PostgreSQL, Oracle. Хотя программа на PHP может работать и с NoSQL базами данных [4], но на практике такие приложения встречаются редко.\nNode хорошо работает как с реляционными базами данных, так и с NoSQL базами данных. При этом предпочтение отдается базам данных NoSQL. Например, MongoDB, CouchDB, Apache Cassandra, Apache Ignite, YugabyteDB. Для работы с графами используются системы Neo4j, JanusGraph.\nСтеки разработки\nВ случае необходимости использовать разные приложения, написанные на разных языках программирования, и осуществлять взаимодействие между этими приложениями потребуются значительные усилия по написанию эффективного кода программы.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПрограмма на языке PHP вынуждена взаимодействовать с программами, написанными на разных языках. В большинстве случаев программа на PHP является частью стека LAMP (Linux, Apache Server, MySQL, PHP).\nNode обычно использует стек MEAN (MongoDB, Express, Angular, Node) или стек MERN (MongoDB, Express, React, Node). Для написания кода программы необходим только один язык JavaScript.\nСтек LAMP хорошо подходит для разработки приложения, работающего на одном сервере. Если возникает необходимость масштабирования приложения на несколько серверов, то преимущество имеют стеки MEAN и MERN.\nФреймворки\nNode использует различные фреймворки для разработки приложений. Это Derby, Express, Meteor, Sails и другие.\nPHP также использует фреймворки для облегчения и быстрой разработки веб-приложений. Они помогают создавать приложения на основе Agile технологии разработки программного обеспечения, создавать защищенные веб-приложения. Это такие фреймворки, как Laravel, Codeigniter, Symphony, CakePHP, FuelPHP, Phalcon.\nДля быстрой разработки приложений на PHP используются системы управления контентом (CMS - Content Management System) WordPress, Joomla, Drupal и другие.\nСтиль программирования\nСложно оценивать, на каком языке удобнее писать программы. Технология Node появилась позже, чем PHP, и ее использование только набирает обороты. Язык JavaScript по отношению к PHP выглядит более современным. В нем учтены недостатки, найденные в PHP. Например, в силу долгой истории, в PHP можно использовать несколько разных функций для выполнения одних и тех же действий. Этого нет в Node.\nВ PHP используется техника смешивания кода, когда в код на PHP легко могут быть встроены, например, части кода на HTML. Такая практика позволяет быстро писать код, но со временем код становится запутанным.\nВ Node и PHP используется современная технология разработки MVC.\nНадо отметить, что PHP постоянно развивается. В версию PHP 8 предполагается встроить JIT-компилятор, позволяющий получать код, выполняемый в виртуальной машине Zend VM, что увеличит скорость выполнения программ на PHP.\nNode также имеет преимущество в том, что как на клиенте, так и на сервере используется один и тот же язык программирования JavaScript.\nИспользование в существующих проектах\nСогласно данным W3Techs [12], в настоящее время для разработки серверной части сайтов PHP используется в подавляющем большинстве проектов (79 %). JavaScript же используется лишь в 0,7 % проектов. Это определяется тем, что Node более молодая технология.\nПримером успешного применения Node в проектах может служить платформа потокового видео Netflix. Переход от первоначального варианта проекта, сделанного на Java, на платформу Node, улучшил время загрузки Netflix на 70 %. Это время между обращением клиента к приложению Netflix и моментом, когда пользователь может начать с ним работать.\nСервис платежной системы PayPal был первоначально разработан на JSP (Java Server Pages). По мере развития популярности сервиса оплаты PayPal увеличивалось количество транзакций, которые нужно было успевать обрабатывать. В результате PayPal был переписан на Node.\nДругим примером является сервис заказа такси Uber. Благодаря Node сервис позволяет выполнять 2 миллиона вызовов удаленных процедур в секунду.\nПлатформа Node используется также в таких крупных проектах, как торговая платформа eBay, крупнейший мировой регистратор GoDaddy, социальная бизнес-сеть LinkedIn, сеть розничной торговли Walmart, поисковик и почтовый сервер Yahoo, платформа электронной коммерции Groupon, браузер Mozilla FireFox.\nПримечательным также является возможность разработки веб-приложения на платформе Node в облачной службе Microsoft Azure, несмотря на наличие собственного стека разработки веб-приложений WISA, использующего только продукты компании Microsoft.\nЗаключение\nКаждая из технологий Node и PHP имеет свои достоинства и недостатки. Поэтому выбор технологии существенным образом зависит от разрабатываемого приложения.\nИнтегральная цифровая среда предоставления транспортных услуг имеет следующие особенности:\n-\tнеобходимость обеспечения масштабируемости к изменению количества пользователей в системе;\n-\tчастый обмен информацией между клиентом и сервером в процессе поиска различных вариантов маршрутов;\n-\tвыполнение функций доступа к данным и функций расчета, требующих большого времени, наряду с запросами, время выполнения которых невелико;\n-\tтребования к скорости обработки информации на стороне сервера;\n-\tвыполнение параллельных алгоритмов обработки информации на стороне сервера и, как следствие, асинхронного выполнения программ;\n-\tиспользование NoSQL базы данных в виду большого объема данных.\nУчитывая перечисленные особенности, можно сделать вывод о предпочтительном использовании серверной платформы Node и стека MEAN (или его модификации в части базы данных) для реализации интегральной цифровой среды предоставления транспортных услуг.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСписок литературы\n1.\tБраун И. Веб-разработка с применением Node и Express. Полноценное использование стека JavaScript. - СПб.: Питер, 2017. - 336 с.\n2.\tКлейменов А.А. Проблемы и перспективы развития процессного подхода в области «Цифровой железной дороги». - М.: Modern Science. Научно-информационный издательский центр «Институт стратегических исследований». - 2019. - № 10-2. - С. 92-96.\n3.\tНиксон Р. Создаем динамические веб-сайты с помощью PHP, MySQL, JavaScript, CSS и HTML5. -СПб.: Питер, 2019. - 816 с.\n4.\tРедмонд Э., Уилсон Джим Р. Семь баз данных за семь недель. Введение в современные базы данных и идеологию NoSQL. - M.: ДМК Пресс, 2018. - 384 с.\n5.\tРябова В. Утвержден план перехода РЖД на «цифровую железную дорогу» [Электронный ресурс] // D-russia.ru. - 2019. - URL: http://www.d-russia.ru/utverzhdyon-plan-perehoda-rzhd-na-tsifrovuyu-zheleznuyu-dorogu.html (дата обращения: 09.01.2020).\n6.\tBuckler Craig. PHP vs Node.js [Электронный ресурс] // Sitepoint.com. - URL: https://www.sitepoint. com/sitepoint-smackdown-php-vs-node-js (дата обращения: 09.01.2020).\n7.\tLouridas Panos. Component Stacks for Enterprise Applications // IEEE Software. - 2016. - Vol. 33, is. 2. -P. 9З-98.\n8.\tMEAN.JS [Электронный ресурс]. - URL: http://www.meanjs.org (дата обращения: 09.01.2020).\n9.\tNODE [Электронный ресурс]. - URL: https://www.nodejs.org (дата обращения: 09.01.2020).\n10.\tPHP [Электронный ресурс]. - URL: https://www.php.net (дата обращения: 09.01.2020).\n11.\tPHP versus Node js fastest programs [Электронный ресурс] // Benchmarksgame-team.pages.net. - URL: https://www.benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/php-node.html (дата обращения: 09.01.2020).\n12.\tW3Techs [Электронный ресурс]. - URL: https://www.w3techs.com (дата обращения: 09.01.2020).\nReferences\n1.\tBraun I. Veb-razrabotka s primeneniem Node i Express. Polnocennoe ispol'zovanie steka JavaScript. -SPb.: Piter, 2017. - 336 s.\n2.\tKlejmenov A.A. Problemy i perspektivy razvitiya processnogo podhoda v oblasti «Cifrovoj zheleznoj dorogi». - M.: Modern Science. Nauchno-informacionnyj izdatel'skij centr «Institut strategicheskih issledovanij». - 2019. - № 10-2. - S. 92-96.\n3.\tNikson R. Sozdaem dinamicheskie veb-sajty s pomoshch'yu PHP, MySQL, JavaScript, CSS i HTML5. -SPb.: Piter, 2019. - 816 s.\n4.\tRedmond E., Uilson Dzhim R. Sem' baz dannyh za sem' nedel'. Vvedenie v sovremennye bazy dannyh i ideologiyu NoSQL. - M.: DMK Press, 2018. - 384 s.\n5.\tRyabova V. Utverzhden plan perekhoda RZHD na «cifrovuyu zheleznuyu dorogu» [Elektronnyj resurs] // D-russia.ru. - 2019. - URL: http://www.d-russia.ru/utverzhdyon-plan-perehoda-rzhd-na-tsifrovuyu-zheleznuyu-dorogu.html (data obrashcheniya: 09.01.2020).\n6.\tBuckler Craig. PHP vs Node.js [Elektronnyj resurs] // Sitepoint.com. - URL: https://www.sitepoint.com/ sitepoint-smackdown-php-vs-node-js (data obrashcheniya: 09.01.2020).\n7.\tLouridas Panos. Component Stacks for Enterprise Applications // IEEE Software. - 2016. - Vol. 33, is. 2. -P. 93-98.\n8.\tMEAN.JS [Elektronnyj resurs]. - URL: http://www.meanjs.org (data obrashcheniya: 09.01.2020).\n9.\tNODE [Elektronnyj resurs]. - URL: https://www.nodejs.org (data obrashcheniya: 09.01.2020).\n10.\tPHP [Elektronnyj resurs]. - URL: https://www.php.net (data obrashcheniya: 09.01.2020).\n11.\tPHP versus Node js fastest programs [Elektronnyj resurs] // Benchmarksgame-team.pages.net. - URL: https:// www.benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/php-node.html (data obrashcheniya: 09.01.2020).\n12.\tW3Techs [Elektronnyj resurs]. - URL: https://www.w3techs.com (data obrashcheniya: 09.01.2020).\n",
    "download_url": "https://cyberleninka.ru/article/n/vybor-veb-steka-dlya-realizatsii-tsifrovoy-sredy-predostavleniya-transportnyh-uslug/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/o-soderzhanii-uchebnogo-kursa-gibridnye-prilozheniya-dlya-mobilnyh-ustroystv",
    "slug": "o-soderzhanii-uchebnogo-kursa-gibridnye-prilozheniya-dlya-mobilnyh-ustroystv",
    "title": "О содержании учебного курса «Гибридные приложения для мобильных устройств»",
    "abstract_description": "В статье приводится краткое описание ИТ-технологий, лежащих в основе учебного курса, ориентированного на начинающих разработчиков гибридных мобильных приложений. Курс иллюстрирует основные возможности средств разработки в средах Visual Studio и WebMatrix с применением технологии Apache Cordova и неотъемлемых от неё HTML5, CSS3 и JavaScript. Рассмотрены технологии с ориентацией на платформы Microsoft: Windows и Windows Phone.",
    "full_text_body": "\n\n\n\n\uFEFFЕмельченков Е.П.1, Мунерман В.И.2, Самойлова Т.А.3\n1Смоленский государственный университет, г. Смоленск, заведующий кафедрой информатики, доцент, ypy 1101@ gmail . co m 2Смоленский государственный университет, г. Смоленск, доцент кафедры информатики,\nvimoon@gmail.com,\n3Смоленский государственный университет, г. Смоленск, доцент кафедры информатики,\ntatsam@hotbox. ru\nО содержании учебного курса «Гибридные приложения для мобильных устройств»\nКЛЮЧЕВЫЕ СЛОВА\nГибридное мобильное приложение, среда разработки, HTML5, Apache Cordova, Windows Phone, MVC, WCF, СУБД.\nАННОТАЦИЯ\nВ статье приводится краткое описание ИТ-технологий, лежащих в основе учебного курса, ориентированного на начинающих разработчиков гибридных мобильных приложений. Курс иллюстрирует основные возможности средств разработки в средах Visual Studio и WebMatrix с применением технологии Apache Cordova и неотъемлемых от неё HTML5, CSS3 и JavaScript. Рассмотрены технологии с ориентацией на платформы Microsoft: Windows и Windows Phone.\nИнформационные системы для мобильных устройств занимают большой сектор рынка всевозможных программ в области бизнес-аналитики и data mining. Поэтому актуально обучение студентов технологиям их создания. Cущность гибридных мобильных приложений составляет нативный мобильный виджет - несетевое приложение, имеющее доступ к ресурсам мобильного устройства (камера, акселерометр, компас, файловая система, контакты, локальная память и т.д.) и выполняющее обработку данных, периодически взаимодействуя с серверным веб-приложением [1]. Мобильные виджеты, создаваемые, главным образом, средствами языка HTML5, можно считать наиболее перспективными по следующим причинам:\n• Количество мобильных платформ в будущем будет только возрастать. Уже сейчас для обеспечения совместимости с максимальным количеством устройств, требуется создавать приложения для iPhone, Android, Palm Pre, Windows Phone, Symbian, Bada, а также приложение Java ME. Даже в этом случае невозможно охватить все мобильные платформы. Код, основанный на средствах HTML5, можно использовать для всех платформ.\n•\tУсловия рынка требуют быстрой реакции. Невозможно тратить месяцы на программирование своих мобильных клиентских приложений. Виджеты можно создавать достаточно быстро.\n•\tКаждый производитель мобильных устройств уже реализовал поддержку виджетов или аналогичной технологии, либо планирует реализовать такую поддержку в ближайшем будущем.\n•\tВиджет может послужить отличным дополнением к мобильному веб-приложению. Применив тот же код, что и версия мобильного приложения, виджет может предложить другие возможности, например, интеграцию с веб-сервисом.\n•\tВиджеты могут присутствовать на экране мобильного устройства постоянно, не требуя вызова браузера и ввода URL-адреса.\n•\tПри проектировании виджетов применяются широко известные технологии программирования (HTML, JavaScript, CSS и Ajax), для которых доступно большое количество технических ресурсов и подготовленных специалистов.\n•\tДля проектировании виджетов можно использовать библиотечные средства HTML5, не дожидаясь появления библиотечных средств для каждого нового мобильного устройства.\n•\tДостаточно легко выполняется перенос мобильных виджетов на платформу настольных виджетов и в обратном направлении.\n•\tВозможно распространение виджетов бесплатно или продажа их через магазины производителей устройств.\nВместе с тем применение данной технологии сопряжено с рядом проблем:\n1.\tОтладка требует больших усилий по сравнению с простыми мобильными или веб-приложениями.\n2.\tВиджет не является «родным» приложением, поэтому обеспечивает не лучшую производительность в сравнении с другими решениями.\n3.\tВиджеты не подходят для создания некоторых типов приложений (этот круг постоянно сужается, например, за счет использования игровых виджетов).\n4.\tВиджеты являются не простыми сайтами, а полноценными приложениями, включающими JavaScript. Применение хороших практик и приемов программирования при этом является обязательным.\n5.\tВ виджетах нельзя создавать трехмерные эффекты (или, по крайней мере, пока не рекомендуется из-за плохого быстродействия).\n6.\tВ настоящее время в виджетах сложно или невозможно реализовать процессы с интенсивной загрузкой процессора, такие как распознавание изображений, AR-решения или распознавание голоса. Согласно [2], гибридный мобильный виджет для бизнеса\nпредставляет собой хороший компромисс между:\n•\tдорогостоящим созданием уникального для каждой платформы приложения с возможностями доступа к встроенным аппаратным ресурсом;\n•\tдешевым вариантом создания веб-приложения, где отсутствует доступ к аппаратным ресурсам, но имеются неограниченные возможности доступа к данным большого объема.\nДля многих бизнес-сценариев предпочтительны варианты с виджетом, так как дополнительные усилия и расходы на создание уникальных приложений для каждой мобильной платформы могут перевесить все выгоды для бизнеса. Очевидно, что мобильные приложения для бизнеса будут и впредь набирать значимость по мере переноса вычислений с традиционных настольных ПК на разнообразные мобильные устройства.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ качестве ведущей технологии для гибридных приложений мобильных устройств целесообразно использовать open-source фреймворк Apache Cordova [3]. Этот фреймворк позволяет создавать приложения для мобильных устройств средствами HTML5, без основных языков программирования (C#, Java, Objective-C), под все мобильные операционные системы (Windows Phone, iOS, Android, Bada и т. д.). Нередко этот фреймвок, являющийся промежуточным слоем между средой выполнения мобильного приложения и JavaScript API, называют «оберточным» (wrapper) компонентом разработки мобильных приложений. Возможности Apache Cordova для доступа к ресурсам мобильного устройства при программировании виджетов основаны на API-функциях JavaScript, включенных в HTML5. В их состав входят такие JavaScript API-функий как HTML5 Audio, HTML5 Video, Canvas, localStorage, DeviceStorage API, Contacts API, Geolocation API, Mobile Connection API, WebSMS, WiFi Information API, Camera API. Разработчику предоставлены два способа их применения. Первый заключается в непосредственном использовании свойств и методов объектов из соответствующих JavaScript API-функций. Второй, более сложный для реализации программистом, - в употреблении готовых Cordova-плагинов посредством содержащихся в них объектов camera, storage, file, contacts, accelerometer, device, globalization и ряде других. Начиная с версии Cordova-3.0.0, соответствующие плагины входят в поставку отдельными zip-архивами, каждый из которых можно независимо от остальных добавить в проект по прилагаемым инструкциям. Примеры гибридных мобильных приложений, созданных на базе этого фреймворка, выложены на сайтах [4,5]. Компания Microsoft, развивающая стратегию разработки для Windows Phone, также поддерживает Cordova и HTML5 в сфере мобильных программ [6]. Microsoft стремится обеспечить программистам платформу, которая позволит им воспользоваться имеющимися навыками и технологиями для быстрого создания приложений.\nГлавный инструмент создания мобильных виджетов - это язык программирования JavaScript, представляющий собой сильнейшую составляющую спецификаций HTML5. Формально HTML5 определен организацией международных стандартов World Wide Web Consortium (W3C), он состоит из более 100 спецификаций, относящихся к веб-технологиям нового поколения. В настоящее время HTML5 - это шаг к созданию единого подхода к созданию веб-страниц для разных устройств, включая настольные компьютеры, мобильные смартфоны, телевизионные и игровые консоли. Такой подход называется принципом «единого Интернета» («One Web»). В некоторой степени, это возможно уже сейчас, однако полной реализации принципа единого Интернета в ближайшие несколько лет ожидать не следует. Необходимо учитывать, что при программировании мобильных приложений в качестве целевой платформы выступают устройства, очень сильно отличающиеся от настольных компьютеров. Одна из проблем состоит в том, что ситуации, в которых применяются мобильные устройства, зачастую в крайней степени отличаются от тех комфортабельных условий, в которых мы используем наши настольные компьютеры и даже ноутбуки и нетбуки. Поэтому обеспечение приемлемой функциональности в среде мобильного устройства требует некоторого учета их особенностей. HTML5 [7] облегчает создание приложений для мобильных устройств и относится к числу технологий, которые стимулируют развитие мобильных сервисов на основе облачных вычислений, предоставляя разработчикам следующие возможности:\n-\tтеги с описательными названиями, которые точно указывают, для содержания какого контента предназначены эти теги;\n-\tусовершенствованные сетевые коммуникации;\n-\tсущественно улучшенное хранение данных;\n-\tулучшенное извлечение хранящихся данных;\n-\tповышенная скорость сохранения и загрузки страниц;\n-\tподдержка CSS3 при управлении пользовательским интерфейсом, что обеспечивает контентную ориентированность HTML5;\n-\tулучшенная обработка форм в браузере;\n-\tAPI-интерфейс баз данных на основе SQL, позволяющий применять локальное хранилище на стороне клиента;\n-\tтеги canvas и video, позволяющие добавлять графические и видеоматериалы без установки сторонних подключаемых модулей;\n-\tспецификация API-интерфейса Geolocation, включающая геолокационные возможности смартфонов в интересах задействования облачных сервисов и приложений для мобильных устройств;\n-\tусовершенствованные формы, ослабляющие потребность в загрузке кода JavaScript, что обеспечивает более эффективную связь между мобильными устройствами и серверами doud-среды.\nФактически HTML5 является синонимом непрерывных инноваций:\nновые теги, новые методики и общая инфраструктура разработки, базирующаяся на взаимодействии новой разметки HTML5 с родственными технологиями CSS3 и JavaScript. В то время как HTML5-разметка остается каркасом мобильных гибридных приложений, разрабатываемых средствами фреймворка Apache Cordova, интеллектом, оживляющим большинство клиентских приложений (виджетов), является язык программирования JavaScript. Именно обновленный и усовершенствованный в настоящее время JavaScript стал тем языком, благодаря которому программисты могут предложить огромное количество новшеств и реализовать то, чего раньше попросту не существовало. Все это создает прочную основу для функционирования приложений, ориентированных на мобильных клиентов.\nТехнологии сохранения таких гибридных приложений включают как средства хранения локальных данных непосредственно на мобильном устройстве, так и средства доступа к данным на сервере. Сохранение данных в памяти мобильного устройства, например, в файле Cardova-приложения для Windows Phone (*.xap), стало возможным благодаря новой спецификации HTML5 - API Web Storage (веб-хранилище). Ориентируясь на особенности мобильных устройств, появление облачных вычислений и необходимость стандартизировать технологии и инновации, внедряемые в течение многих лет посредством встраиваемых модулей, разработчики HTML5 объединили в этой спецификации всю функциональность, позволяющую выполнять полноценные приложения на пользовательских компьютерах даже в отсутствие сетевого подключения. API Web Storage позволяет записывать наборы данных в память мобильного устройства и обращаться к ним так, как это делается в базах данных настольных приложений. Процессы сохранения и извлечения данных, поддерживаемые этим API, применимы в двух ситуациях: когда информация должна быть доступна только в течение работы приложения и когда ее необходимо сохранить надолго, до тех пор, пока пользователь сам не удалит ее.\nПри наличии в мобильном приложении данных значительного объема, они могут храниться на сервере, как и в случае обычных веб-приложений. Например, для них могут применяться различные модификации СУБД Microsoft SQL Server:\n•\tCompact - простая СУБД в виде одной библиотеки;\n•\tExpress - бесплатная полнофункциональная СУБД;\n•\tWeb, Standard, Enterprise - расширенные редакции с дополнительными возможностями.\nСледует отметить активную роль Microsoft в поддержке и развитии технологий создания гибридных приложений. Во-первых, в развитии стандарта HTML, работа над которым продолжается и окончательную версию 5.1 планируют утвердить к 2016 году. Во-вторых, Microsoft обеспечивает на мобильном устройстве реализацию HTML5 через браузер\nInternet Explorer, функционал которого аналогичен настольной версии. Помимо поддержки спецификаций HTML5 в браузере, еще в начале 2011 года Microsoft обновила два своих продукта - Visual Studio и WebMatrix [8], включив туда удобные инструменты для гибридных приложений. В пакеты обновлений был включен тип документов HTML5, а в Visual Studio включен шаблон проекта Apache Cordova, имеющий возможность представить мобильный виджет для Windows Phone в виде приложения. Далее приводятся технологии Microsoft, предназначенные для создания как клиентской, так и серверной составляющей гибридных приложений. При этом серверная часть может быть веб-приложением или веб-сервисом.\nWebMatrix - упрощенная среда создания мобильных и веб-приложений небольшой и средней сложности, принадлежит к классу систем управления контентом (Content Management System - CMS). Удобное средство создания гибридных мобильных приложений, которое с успехом применяют новички и профессионалы. Все функции этой среды направлены на то, чтобы сделать работу над проектом легкой и удобной. Она представляет собой конструктор, с помощью которого можно создавать и сопровождать проект (обновлять и добавлять материалы, заводить новые рубрики). В WebMatrix входят определённые готовые пункты, которые можно включить в сайт серверной части: новости, статьи, информация о фирме, контактные данные, прайс-лист и другие, которыми можно управлять в разделе администрирования сайта. WebMatrix предлагает разнообразные шаблоны для клиентской части, которые хорошо работают на мобильных устройствах. Они построены с учетом передового опыта для JQuery Mobile, HTML5 и CSS3. Среда JQuery Mobile, встроенная в WebMatrix и доступная редактору кода, является сенсорной средой создания веб-сайтов и мобильных приложений для популярных смартфонов и планшетов. При этом работу проекта можно тут же увидеть в эмуляторах мобильных устройств: Windows Phone, iPhone, iPad и т.п. С помощью готовых шаблонов, можно создать как клиентскую, так и серверную часть гибридного приложения в считанные минуты. Среда включает в себя компактную систему управления базами данных SQL Server Compact, которая полностью интегрируется с другими компонентами проекта. Если в мобильном приложении ожидается большое количество запросов, то можно с легкостью перенести свои данные на высокопроизводительную версию SQL Server. В состав среды входит функциональный редактор кода, редактор баз данных, система администрирования веб-сервера. Имеется система оптимизации для поисковых машин и многие другие функции. Таким образом, в одном удобном интерфейсе WebMatrix доступны все ключевые компоненты, необходимые для создания и развертывания гибридного приложения.\nVisual Studio - полноценная среда для создания приложений любой сложности, более сложная, чем WebMatrix. Клиентская часть гибридного приложения может быть сознана на основе шаблонов Apache Cordova или\nшаблона мобильного приложения WindowsPhone, который отлично интегрируется с веб-сервисами WCF. Основная технология для создания серверной части гибридных мобильных приложений - это ASP.NET (Active Server Page). ASP.NET [9] поддерживает несколько различных подходов для программирования серверных сценариев: WebForms - традиционный подход создания веб-приложений; MVC — подход, построенный на разделении данных, логики и интерфейса приложений, требует большего написания кода, чем WebForms; WCF (Windows Communication Foundation) -подход, основанный на веб-службах для распределенных приложений.\nФреймворк MVC - \"Модель-представление-контроллер\" (\"Model-viewcontroller\") давно нашел применение в программировании. Этот фреймворк зарекомендовал себя как удачная архитектура программного обеспечения. На данный момент MVC реализован в том или ином виде для большинства языков программирования. MVC - это представление приложения, которое отделяет логическую часть от визуальной.\nМодель ^odel) представляет собой структуру данных, набор классов, описывающих предметную область. Обычно модельные классы содержат функционал, помогающий извлекать, вставлять и обновлять информацию в базе данных.\nВид (view) - содержит HTML-разметку и контент, отправляемый в браузер. Это пользовательский интерфейс приложения.\nКонтроллер (controller) - набор классов, которые содержат бизнес-логику приложения, отвечая за то, что будет выдано пользователю при его запросе. Обеспечивает связь между пользователем и системой, обычно связь между View и Model.\nВ MVC4 мобильным устройствам уделяется большое внимание. В ASP.NET MVC 4 для мобильных устройств появились:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tшаблон проекта, рассчитанный только на мобильные браузеры;\n•\tметодика адаптивного рендеринга;\n•\tвозможность устанавливать компоненты: jQuery Mobile.\nАдаптивный рендеринг (adaptive rendering) - это процесс\nотображения страницы по-разному, в зависимости от возможностей целевого мобильного устройства, позволяет изменять стиль контента как угодно в зависимости от возможностей устройства. jQuery Mobile -библиотека с открытым исходным кодом, позволяющая создавать пользовательский интерфейс для мобильных устройств на основе Java Script.\nWCF — платформа корпорации Майкрософт нового поколения для построения безопасных распределенных интернет-систем. Предоставляет гибридным приложениям доступ к базам данных и другие функциональные возможности серверной части, которые вызваются мобильным клиентом без браузера.\nWeb Forms, MVC и WCF могут великолепно сосуществовать в пределах\nодного и того же гибридного приложения. По мнению специалистов Microsoft, для создания мобильных программ лучше подходит ASP.NET MVC, чем ASP.NET WebForms. Причинами проблемы с веб-формами ASP.NET для мобильных устройств является то, что в среде их разработки не всегда имеется полный контроль над HTML. Контроль может быть усилен с помощью адаптеров элементов управления, что приведет к дополнительной работе по адаптации страниц к небольшим мобильным экранам и увеличит время загрузки.\nСовременные проекты гибридных мобильных приложений могут устанавливать связь между мобильными устройствами и серверами cloud-среды (облаками). Для разработчиков iOS, Windows Phone, Android и мобильных HTML5-приложений Microsoft предлагает использовать мобильный сервис Windows Azure Mobile Services [10]. Мобильные разработчики, применяющие Windows Azure Mobile Services, получают единую инфраструктуру для всех своих мобильных приложений, содержащую:\n•\tреляционное хранилище табличных данных и файлов;\n•\tготовую настроенную платформу для создания и запуска серверного кода на базе JavaScript и Node.js (а вскоре и на базе .NET). Платформа позволяет писать скрипты для обработки событий таблиц реляционного хранилища (вставку данных, удаление, чтения и обновления данных).\nРабота со всеми элементами Windows Azure Mobile Services возможна посредством функций открытого и документированного API, что делает применение ее платформ весьма удобным.\nНа основе рассмотренных технологий авторы создали учебный курс [11] (по договору с ООО \"ИНТУИТ.РУ\" в рамках конкурса \"Разработка приложений для платформы Microsoft: Windows 8, Windows Phone, Windows Azure\"). Использование этого курса в процессе обучения программистов позволит готовить специалистов, способных решать различные сложные аналитические задачи, в том числе для таких современных направлений, как Data Mining и Business Intellegence.\nЛитература\n1.\tФиртман М. Веб-программирование для мобильных устройств. — ООО \"Рид Групп\", 2012\n2.\tШейн Ч. Разработка гибридных веб-приложений, способных использовать аппаратные средства мобильных устройст. // журнал MSDN Magazine, март 2012, URL: http://msdn.microsoft.com/ru-ru/magazine/hh852592.aspx\n3.\tОткрытое программное обеспечение Apache Cordova./ URL: http://cordova.apache.org/\n4.\tURL:http://www.icenium.com/cordova-phonegap-mobile-app-development/sample-apps\n5.\tURL:http:// phonejs.devexpress.com\n6.\tКолин Э. Разработка HTML5-приложений Windows Phone с применением Apache Cordova. // журнал MSDN Magazine, май 2012, URL:http://msdn.microsoft.com/ru-ru/magazine/hh975345.aspx\n7.\tСухов К. HTML5 — путеводитель по технологии. — ДМК Пресс, 2013\n8.\tКларк С. Введение в WebMatrix. .. URL: http://msdn.microsoft.com/ru-ru/magazine/gg983489.aspx\n9.\tВеб-сайты ASP.NET для мобильных устройств. .. URL: http://msdn.microsoft.com/ru-ru/library/ms178619.aspx\n10.\tОблачный бэкенд как сервис для Windows, Ios, Windows Phone, Android и мобильных HTML5-приложений. // URL: http://msdn.microsoft.com/ru-ru/dn271646.aspx\n11.\tСамойлова Т.А., Разработка гибридных приложений для мобильных устройств под Windows Phone/ // URL: http://www.intuit.ru/studies/courses/12574/1187/info\n",
    "download_url": "https://cyberleninka.ru/article/n/o-soderzhanii-uchebnogo-kursa-gibridnye-prilozheniya-dlya-mobilnyh-ustroystv/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/modeli-vysokoproizvoditelnoy-vizualizatsii-dlya-krossplatformennyh-vychislitelnyh-zadach-biofotoniki",
    "slug": "modeli-vysokoproizvoditelnoy-vizualizatsii-dlya-krossplatformennyh-vychislitelnyh-zadach-biofotoniki",
    "title": "Модели высокопроизводительной визуализации для кроссплатформенных вычислительных задач биофотоники",
    "abstract_description": "Биофотоника является разделом физики, который объединяет явления и методики, связанные с взаимодействием биологических объектов и света: испускание, поглощение, отражение, модификация и генерация электромагнитного излучения (света) в биологических молекулах, клетках, тканях, организмах и материалах и т.д. В работе рассмотрены высокопроизводительные и платформонезависимые подходы, используемые в современной компьютерной графике (растеризация, метод \"бросания лучей\", метод прямой и обратной трассировки лучей, метод излучательности) и проанализирована возможность их применения для моделирования процессов взаимодействия света с биологическими тканями. Наибольший интерес для моделирования представляют тепловые эффекты, диффузное отражение/рассеивание и процессы флуоресценции. Предложена собственная реализация метода обратной трассировки лучей с использованием клиент-серверной архитектуры и проведено оценочное тестирование производительности языка программирования JavaScript для решения вычислительных задач биофотоники.",
    "full_text_body": "\n\n\n\n\uFEFFМодели высокопроизводительной визуализации для кроссплатформенных вычислительных задач биофотоники\nПересунько Владимир Александрович\nсоискатель, Амурский государственный университет,\nvladimir.peresunko@gmail.com\nСетейкин Алексей Юрьевич,\nсоискатель, Амурский государственный университет Красников Илья Владимирович,\nсоискатель, Амурский государственный университет\nБиофотоника является разделом физики, который объединяет явления и методики, связанные с взаимодействием биологических объектов и света: испускание, поглощение, отражение, модификация и генерация электромагнитного излучения (света) в биологических молекулах, клетках, тканях, организмах и материалах и т.д. В работе рассмотрены высокопроизводительные и платформонеза-висимые подходы, используемые в современной компьютерной графике (растеризация, метод \"бросания лучей\", метод прямой и обратной трассировки лучей, метод излучательности) и проанализирована возможность их применения для моделирования процессов взаимодействия света с биологическими тканями. Наибольший интерес для моделирования представляют тепловые эффекты, диффузное отражение/рассеивание и процессы флуоресценции. Предложена собственная реализация метода обратной трассировки лучей с использованием клиент-серверной архитектуры и проведено оценочное тестирование производительности языка программирования JavaScript для решения вычислительных задач биофотоники. Ключевые слова. Биофотоника, метод прямой и обратной трассировки лучей, растеризация, метод излучательности, метод Монте-Карло, JavaScript\nВведение\nДля моделирования классических процессов взаимодействия света с биологическими материалами применяют ряд алгоритмов, основанных на методе трассировки лучей. Наиболее распространенными областями применения данных алгоритмов в биофо-тонике является имитационное моделирование оптических взаимодействий с биотканями: тепловые эффекты, диффузное отражение и рассеивание, процессы флуоресценции, что позволяет увеличивать точность и эффективность неинвазивных методов исследований тонких слоев кожи, слизистых оболочек, зубных и глазных тканей [10, 17].\nРазличные вариации метода трассировки лучей широко используются в компьютерной графике для визуализации (рендеринга) 3D сцен и являются базовыми для большинства графических алгоритмов [11,9]. Коммерческие разработки в области программного и аппаратного обеспечения для рендеринга изображений позволяют эффективно использовать данные методы на графических сопроцессорах (GPU) и добиваться значительного прироста производительности в сравнении с центральными процессорами (CPU).\nВ данной статье авторы попытались провести обзор существующих технологий высокопроизводительной визуализации и рассмотрели возможность их использования для имитационного моделирования в области биофотоники. Также рассмотрены вопросы кроссплатформенности данных решений и возможность проведения физических экспериментов с использованием мобильных устройств.\nУравнение рендеринга\nВ общем смысле процесс визуализации - это решение (с различной степенью точности) уравнения, описывающего распространение света в трехмерном пространстве. В математическом представлении уравнение рендеринга выглядит следующим образом [8]:\n¿0(х, Ш, X, £:) = Ье (х, Ш, X, £:)\n+ I /г(х,ы', «Д,£:)/,;(х, ш', ■'п\nгде X - длина волны света, Ь - время, Ш, X, Ь) - количество света заданной длины волны X, излучаемого в точке X вдоль направления\nШ за время Ь, Ье(х, Ш, X, Ь) - собственный излученный свет поверхности в той же точке и направлении, 4 ■■■ - интеграл излучений, пришедших в точку поверхности из пространства полусферы и\nотраженных поверхностью, ^(х, , Ш, X, Ь) -двунаправленная функция распределения отраже-\n1 1 О го А J=\n1 ГО\nm\nо\n£\n1\nО\n(О О\nо\nсч\nо н\nё\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n0 ш са\n1\n<\nса\n0\n1 I\nния, т.е. количество излучения, отражённого от Ш к\nШ в точке X, во время t, на длине волны X,\n¿¿(х,\t- длина волны X по входящему\nнаправление к точке X из направления ш' во время\nЬ, —ш' • П - поглощение входящего излучения по заданному углу.\nСледует отметить, что данное уравнение изотропно, однородно и линейно. Подынтегральная функция не задана аналитически, поэтому уравнение может быть решено только численно. Рассмотрим методы и алгоритмы решения уравнения рендеринга, которые применяются в современном программном и аппаратном обеспечении.\nСовременные подходы для решения уравнения рендеринга\nПрежде, чем будет получен цвет пикселя финального двухмерного изображения, необходимо над 30-моделью провести ряд преобразований, зависящих от положения объекта, источника света и камеры. Основными преобразованиями являются:\n•\tпреобразования в глобальной системе координат, отвечающие за различные трансформации объектов;\n•\tпреобразования в координатном пространстве камеры наблюдателя;\n•\tпреобразования перспективы.\nИтоговая 4x4 матрица преобразований координат и масштабирования выглядит следующим образом:\nЗ^-СОБу СОБ^\n—5уБту СОБ^\n5Х СОБ у БШ @ БШ а + 5Х БШ у СОБ а 5у СОБ у СОБ а — 5у БШ у БШ @ БШ а вх бШ у БШ а - вх СОБ у БШ р СОБ а 5у sin у sin р СОБ а + 5у sin а СОБ у 0 0\nБШ Р\tX\n—52СОБ^Б1па\tу\nсоб р соб а\tг\n0\t1\nгде 5\n- коэффициенты масштабирования на соответствующие оси; П., Д и у - углы, характеризующие вращения объекта.\nТочное решение уравнения рендеринга невозможно и нецелесообразно [8], т.к. потребует бесконечное количество времени и ресурсов. Рассмотрим более детально четыре наиболее популярных метода рендеринга (обсуждение данных методов относительно задачи моделирования распространения света в биологических материалах дано в следующем разделе).\nРастеризация - процесс преобразования векторного описания объекта (например, 30-модели) в набор пикселей. При этом используются два подхода [1]. Первый учитывает тот факт, что модель состоит из треугольников, поэтому при проецировании на плоскость достаточно выполнять преобразования над вершинами треугольника, а все промежуточные точки находить с помощью интерполяции. Второй подход заключается в том, чтобы построчно производить расчет сцены в соответствии со значениями координат, для чего все примитивы динамически сортируются, что позволяет не производить расчеты невидимых для наблюдателя поверхностей. Для более точного\nопределения оттенка используют метод затенения Гуро [7] или Фонга [13].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМетод «бросания лучей» широко используется в различных движках компьютерных игр, где скорость генерации изображения важнее качества и детализации [2,12]. Метод заключается в проведении луча света из точки наблюдения в направлении пикселя, цвет которого необходимо определить. Если луч пересекает какой-либо объект сцены, то его цвет изменяется в зависимости от геометрии сцены и источников освещения. Существует множество вариаций и комбинаций данного метода [12].\nОднако одной из особенностей данного метода является невозможность вычисления параметров лучей света, которые возникнут после того, когда луч пересечется с поверхностью. Поэтому невозможен точный рендеринг отражений, преломлений и естественных проекций теней [6].\nМетод трассировки лучей - самый трудоемкий алгоритм рендеринга, т.к. решает данную задачу перебором с как можно меньшей погрешностью результатов [8]. Проследить все лучи сцены не представляется возможным, поэтому в расчет берутся только те, которые участвуют в формировании конечного изображения. Метод прямой трассировки лучей отслеживает не лучи, непосредственно испущенные источником света, а воображаемые лучи, испущенные наблюдателем (объективом камеры). Поэтому данный способ не позволяет реализовать диффузное отражение, а учитывает только зеркальное отражение и преломление [8,12].\nРис. 1. Визуализация метода трассировки лучей\nСуществует метод обратной трассировки, который моделирует поведение лучей, испущенных непосредственно источником света. Данный способ является наиболее рессурсоемким и на практике используется только в комбинациях с другими методами (например, двунаправленная трассировка лучей [4]).\nМетодом излучательности моделируют диффузное взаимодействие света, который отражается не в одном направлении, а рассеивается в пространственную полусфера, освещая область вокруг точки падения. При этом цвет рассеянного света изменяется в соответствии с характеристиками поверхности [5]. В сочетании с методом трассировки лучей этот метод позволяет получать высокореалистичные изображения.\nДля расчетов используется метод конечных элементов, что позволяет получить только частное решение уравнения рендеринга. Но данный способ не позволяет рассчитывать такие оптические явления, как зеркальное отражение, преломление лучей, жесткие тени.\nПрименение современных алгоритмов рендеринга для задач биофотоники\nДля моделирования процессов распространения и поглощения света в биологических средах модель должна позволять учитывать следующие особенности [14]:\n•\tНаличие многократного рассеивания в биотканях, так как большинство биологических тканей являются сильно рассеивающими;\n•\tВозможность задания функции изменения физических характеристик среды (например, функции анизотропного рассеивания);\n•\tВозможность реализации многопроходного метода для расчетов систем с оптическими характеристиками, отличающимися на небольшую величину, и комбинации результатов;\n•\tВозможность аппаратной реализации на графических сопроцессорах (GPU).\nПроанализировав ряд методов и алгоритмов, применяемых в современном программном и аппаратном обеспечении для рендеринга изображений, мы выделили методы, комбинация которых наиболее близко удовлетворяет задачи моделирования процессов распространения света в однослойных и многослойных биологических тканях.\nМетод растеризации, очевидно, не подходит для задач моделирования распространения света, т.к. производит только математические преобразования над вершинами модели.\nМетод «бросания лучей» и прямой трассировки лучей ориентированы на высокую производительность в ущерб качеству рендеринга. Главной особенностью данных методов является то, что изображение формируется не на основе испущенного света, а на основе положения камеры наблюдателя [5, 8, 12]. Таким образом, становится невозможным оценить характеристики и поведение луча света, которые не принимает участие в формировании изображения. Эффекты отражения и преломления можно оценить в простейших случаях [5]. Диффузные эффекты данные алгоритмы не поддерживают, поэтому в чистом виде неприменимы к задачам биофотоники.\nМетод излучательности используется для имитации эффектов диффузного отражения и преломления. Несмотря на то, что он напрямую не моделирует поведение лучей света и используют для расчетов метод конечных элементов, в некоторых упрощенных моделях тканей он может быть применим, но только совместно с другими алгоритмами рендеринга [3].\nНаилучшее соотношение времени расчетов и качества результатов дает алгоритм обратной трассировки лучей на основе метода Монте-Карло, позволяя учитывать такие оптические эффекты как диффузное и зеркальное отражение, анизотропное рассеивание. Данный метод естественным образом поддерживает все типы поверхностей, включая произвольные сочетания диффузных и зеркальных свойств объектов [5,14]. Траектории фотонов рассчитываются для всех этапов существования: от момента испускания до поглощения или выхода за пределы сцены. Направление, в котором испускается фотон, и начальная точка испускания определяются стохастически согласно фотометрическому распределению энергии источника и его геометрии. При взаимодействии с элементами сцены он может быть поглощен, диф-\nфузно отражен (преломлен) с равномерной плотностью распределения, отражен (преломлен) в зеркальном направлении или согласно заданной плотности распределения. Метод не зависит от положения наблюдателя и не осуществляет генерацию изображения, а лишь предоставляет данные об освещенности для дальнейшего использования алгоритмами генерации изображений. Для задания нетривиальных оптических свойств может быть использована двунаправленная функция распределения отражения ^. Блок-схема простейшего алгоритма Монте-Карло приведена на рис. 2.\nРис. 2. Блок-схема моделирования методом Монте-Карло процессов распространения света (без изменения длины волны)\nАктуальность кроссплатформенных приложений для вычислительных задач биофотоники\nОсобенностью архитектуры современных информационных систем является ее распределенный характер. Такие информационные системы обеспечивают функциональность сервиса для различных типов клиентских приложений. Это означает, что вычислительные задачи и обработка данных производятся на удаленной серверной части, а на уровне пользователя производится лишь визуализация данных. Это позволяет делать приложения адаптивными к различным размерам экранов и независимыми от используемой операционной системы.\nРассмотрим на примере задачи распространения света в биологических тканях вопрос актуальность использования клиент-серверной архитектуры: на уровне сервера решается большая часть вычислительных задач с использованием GPU и обработка результатов, а на уровне клиента происходит ввод параметров и визуализация результатов. Данная схема позволяет получить следующие преимущества:\n•\tВозможность работать с данным методом на любой платформе (мобильные приложение, Linux, MacOS);\n•\tВозможность динамически менять количество ресурсов, использую модель облачных вычислений (например, Amazon Cloud Service)\n•\tМинимизация простоя оборудования и удельной стоимости вычислений\n1 1 О го А J=\n1 ГО\nm\nо\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ng\n1\nо\n(О\nо\nо\n(N\nО\nн\nSt\n0 ш са\n1\n<\nсо\n0\n1 I\nОдним из языков программирования, легко позволяющем организовать работу кроссплатформенных и клиент-серверных приложений, является JavaScript -прототипно-ориентированный сценарный язык программирования, который чаще всего используется в клиентской части веб-приложений. Кроме того, доступны реализации серверных приложений JavaScript, предназначенных для интерпретации кода на уровне сервера. JavaScript также используется для написания прикладного программного обеспечения и на настоящий момент по производительности практически не уступает компилируемым приложениям. Т.е. программы, написанные на языке C/C++, выполняются ненамного быстрее JavaScript кода [16].\nС помощью компилятора Emscripten была проведена оптимизация кода из C в JavaScript, написанного в рамках проекта MCML [15], являющегося стандартом «де-факто» среди приложений для моделирования методом Монте-Карло процессов распространения света в многослойных материалах. Процедура подобного преобразования позволяет с некоторыми доработками запускать код, написанный на языках аС++ на любой платформе, способной интерпретировать JavaScript. В качестве такой платформы был выбран браузер Google Chrome, т.к. в данный момент он обладает наибольшей производительностью выполнения JavaScript [16].\nДля имитации модели кожи использовались параметры, представленные в таблице 1.\nТаблица 1\nясняется это тем, что исходный код Google Chrome очень хорошо оптимизирован для использования GPU, в том числе для интерпретации JavaScript кода.\nТаблица 2\nСлой\tz, мкм\tn\tpa, мм-1\tps, мм-1\tg\nЭпидермис\t96\t1,34\t0,088\t90\t0,85\nПапиллярная дерма\t192\t1,39\t0,015\t18,7\t0,9\nДерма с поверхностным сплетением сосудов\t192\t1,4\t0,013\t35\t0,95\nРетикулярная дерма\t842\t1,39\t0,01\t19\t0,76\nДерма с глубинным сплетением сосудов\t576\t1,4\t0,011\t25\t0,95\nГиподерма\t16500\t1,44\t0,011\t13\t0,8\nгде: z - толщина слоя; n - относительный показатель преломления; pa - коэффициент поглощения; ps - коэффициент рассеивания; g - параметр анизотропии.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ таблице 2 приведена оценка производительности для различных операционных систем и архитектур. Тестирование проводилось для компилируемых и интерпретируемых прилоежний. Также была произведена оценка производительности при использование клиент-серверной архитектуры и использовании веб-интерфейса.\nБыло принято во внимание то, что стандартная функция генерации случайных чисел math.random() в разных браузерах реализована с помощью различных алгоритмов, поэтому для более однородного распределения результатов в разных браузерах был использован алгоритм генерации случайных чисел на основе чисел Мерсена [16].\nОчевидно, наибольшую производительность продемонстрировала компилируемая GPU-версия приложения, однако результаты исполнения в браузере Google Chrome опережают результаты компилируемого CPU-приложения, а использование клиент-серверной архитектуры приближает работу мобильный приложений в связке с GPU сервером к работе классических компилируемых CPU-приложений. Объ-\nПриложение, среда выполнения\t1 000 000 фотонов, среднее время исполнения программы, сек\t10 000 000 фотонов, среднее время исполнения программы, сек\nКомпилируемое MCML CPU (Windows 8, Intel Core i5)\t25\t257\nКомпилируемое MCML GPU (Windows 8, GeForce 840 M)\t0.8\t2.3\nИнтерпретируемое MCML CPU Windows 8, Google Chrome\t5\t14\nИнтерпретируемое MCML CPU iOS 7, iPad 4\t94\nВеб-интерфейс iPad 4 + Windows 8, Intel Core i5 (клиент-серверная архитектура)\t10\t35\nВеб-интерфейс Android 4.1 + Windows 8, Intel Core i5 (клиент-серверная архитектура)\t13\t44\nТаким образом, данная оценка позволяет судить о том, что различные варианты использования языка JavaScript (особенно в связке с компилируемыми приложениями) могут быть успешно использованы для решения вычислительных задач биофотоники. Кроме того, использование данного языка позволяет сделать научный процесс более интерактивным и работать с данными в режиме реального времени на большинстве доступных операционных системах.\nЛитература\n1.\tAbrash М. Graphics Programming Black Book. -The Coriolis Group, 1997;\n2.\tBoulos S. Notes on efficient ray tracing // SIGGRAPH ACM SIGGRAPH 2005 Courses. - 2005. -№ 10;\n3.\tDudka K. RRV - Radiosity Renderer and Visualizer, 2007.\n4.\tFoscari P. The Realtime Raytracing Realm // ACM Transactions on Graphics. - 2007.\n5.\tGlassner A. S. An Introduction to Ray Tracing -San Diego, 1989. - 327 p.;\n6.\tGoldstein, R. A., R. Nagel. 3-D visual simulation // Simulation. - 1971. - V.16, № 1. - P. 25-31;\n7.\tGouraud H. Continuous shading of curved surfaces // IEEE Transactions on Computers. - 1970. -C-20 (6). - P. 623-629;\n8.\tKajiya J. T. The rendering equation // ACM SIGGRAPH Computer Graphics. - 1986. - V. 20, № 4. -P. 143-150;\n9.\tMiller P., Kettner L. GPU Ray Tracing and Advanced Rendering Solutions // SIGGRAPH 2013\n10.Niemz\tM.H. Laser - Tissue Interactions: Fundamentals and Applications. - Berlin, 2003. - 308 p.\n11.Nguyen\tH. GPU Gems. NVIDIA Corporation, 2008.\n12.NVIDIA\tOptiX 3.7 Ray Tracing Engine Programming Guide. - NVIDIA Corporation, 2015. - 89 p.;\n13.Phong\tB. T. Illumination for computer generated pictures // Communications of ACM. - 1975. - V. 18, № 6. - P. 311-317;\n14.Szirmay-Kalos L. Monte Carlo Methods in Global Illumination - Photo-realistic Rendering with Randomization. - VDM Verlag Dr. Mueller e.K., 2008. -136 p.\n15.Wang,\tL-H, S.L. Jacques, L-Q Zheng. MCML -Monte Carlo modeling of photon transport in multi-layered tissues // Computer Methods and Programs in Biomedicine. - 1995 - V. 47. - P. 131-146.\n16.Zakai\tA., Nyman R. Gap between asm.js and native performance gets even narrower with float32 optimizations // Mozilla Blog - 2013.\n17.Голуб\tИ.Е., Малов А.Н., Сорокина Л.В., Неупо-коева А.В., Галиева О.П. Лазерные технологии в медицине: современные аспекты теории и применение. - Иркутск: ИГМУ, 2009.\nHigh-performance visual models for crossplatform computational\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nproblems of biophotonics Peresunko V.A., Seteinkin A.Yu., Krasnikov I.V.\nAmur State University\nBiophotonics is a branch of physics that unify phenomena and techniques associated with the interaction of biological objects and light: emission, absorption, reflection, modification and generation of electromagnetic radiation (light) in biological molecules, cells, tissues, organisms, materials etc. In the paper, we discuss the high performance and platform independent approaches used in modern computer graphics (rasterization, ray casting method, direct and back ray tracing method, radiosity). We analyzed the possibility to use these methods for the simulation of the interaction between light and biological materials. Thermal effects, diffuse reflection / dispersion processes and the fluorescence are more interested method for the simulation. We developed our own implementation of the back ray tracing method using a client-server architecture and conducted performance testing of JavaScript for computational problems in biophotonics. Keywords: Biophotonics, direct and back ray tracing, rasterization,\nradiosity, Monte Carlo method, JavaScript References\n1.\tAbrash M. Graphics Programming Black Book. - The Coriolis Group,\n1997;\n2.\tBoulos S. Notes on efficient ray tracing // SIGGRAPH ACM SIG-\nGRAPH 2005 Courses. - 2005. -№ 10;\n3.\tDudka K. RRV - Radiosity Renderer and Visualizer, 2007.\n4.\tFoscari P. The Realtime Raytracing Realm // ACM Transactions on\nGraphics. - 2007.\n5.\tGlassner AS An Introduction to Ray Tracing - San Diego, 1989. - 327 p\n6.\tGoldstein, R. A., R. Nagel. 3-D visual simulation // Simulation. - 1971. -\nV.16, № 1. - P. 25-31;\n7.\tGouraud H. Continuous shading of curved surfaces // IEEE Transac-\ntions on Computers. - 1970. - C-20 (6). - P. 623-629;\n8.\tKajiya JT The rendering equation // ACM SIGGRAPH Computer\nGraphics. - 1986. - V. 20, № 4. - P. 143-150;\n9.\tMiller P., Kettner L. GPU Ray Tracing and Advanced Rendering Solu-\ntions // SIGGRAPH 2013\n10.\tNiemz M.H. Laser - Tissue Interactions: Fundamentals and Applications. - Berlin, 2003. - 308 p.\n11.\tNguyen H. GPU Gems. NVIDIA Corporation, 2008.\n12.\tNVIDIA OptiX 3.7 Ray Tracing Engine Programming Guide. - NVID-IA Corporation, 2015. - 89 p .;\n13.\tPhong BT Illumination for computer generated pictures // Communications of ACM. - 1975. - V. 18, № 6. - P. 311-317;\n14.\tSzirmay-Kalos L. Monte Carlo Methods in Global Illumination - Photorealistic Rendering with Randomization. - VDM Verlag Dr. Mueller e.K., 2008. - 136 p.\n15.\tWang, L-H, S.L. Jacques, L-Q Zheng. MCML - Monte Carlo modeling of photon transport in multi-layered tissues // Computer Methods and Programs in Biomedicine. - 1995 - V. 47. - P. 131-146.\n16.\tZakai A., Nyman R. Gap between asm.js and native performance gets\neven narrower with float32 optimizations // Mozilla Blog - 2013.\n17.\tGolub IE, Malov AN, Larisa Sorokina, Neupokoeva AV Galiev OP Laser technologies in medicine: modern aspects of theo-Rhee and application. - Irkutsk ISMU 2009.\nI I О го А J=\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nI ГО\nm\nо\nSI\n1\nо\n(О\nо\n",
    "download_url": "https://cyberleninka.ru/article/n/modeli-vysokoproizvoditelnoy-vizualizatsii-dlya-krossplatformennyh-vychislitelnyh-zadach-biofotoniki/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/oblachnye-tehnologii-v-podderzhku-sovremennoy-sisteme-obrazovaniya",
    "slug": "oblachnye-tehnologii-v-podderzhku-sovremennoy-sisteme-obrazovaniya",
    "title": "Облачные технологии в поддержку современной системе образования",
    "abstract_description": "Рассматриваются информационные и коммуникационные технологии, облачные хранилища в системе образования.",
    "full_text_body": "\n\n\n\n\uFEFFПродолжение таблицы 1\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg tool region.png\t1\t54\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/maps-icon.png\t930\t41\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012bg top menu.png\t915\t37\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/title info.png\t868\t52\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/bg search box.png\t855\t58\nhttps\t//www.gosuslugi.ru/... /2012/slider-life-situations-item-bg.png\t771\t24\nhttps\t//www.gosuslugi.ru/pgu/htdocs/img/2012/html-bg.png\t675\t61\n4.\tСократить HTML.\nСжатие HTML-кода (в том числе встроенного кода JavaScript или CSS) позволяет сократить объем данных, чтобы ускорить загрузку и обработку.\nСжатие кода на ресурсе https://www.gosuslugi.ru/ позволит уменьшить его размер на 4,4 КБ (21 %).\n5.\tСократить JavaScript.\nСжатие кода JavaScript позволяет сократить объем данных, чтобы ускорить загрузку, обработку и выполнение. Предлагается сократить код JavaScript на ресурсе «https://www.gosuslugi.ru/pgu/htdocs/js/2012 /jquery. validate.js», чтобы уменьшить его размер на 3,4 КБ (33 %).\nВот главные направления, по которым возможно вести оптимизацию сайта Госуслуги РФ. Применение вышеперечисленных стратегий позволит значительно снизить время загрузки и повысить производительность сайта ЭГУ РФ, что в свою очередь будет способствовать увеличению количества пользователей.\nВ заключении необходимо отметить, что программирование является неотъемлемой частью написания сайта. На разработчиков сайтов возлагается ответственность не только за хороший интерфейс и визуализацию, но и за скоростные характеристики загрузки web-страницы. Выявить те или иные недостатки или причины, по которым скорость загрузки недостаточна, можно проведя тестирование сайта. Сеть Интернет может предложить множество бесплатных инструментов тестирования в режиме онлайн. С их помощью разработчики сайтов могут значительно упростить решение своих задач. Список использованной литературы:\n1.\tЭкономика фирмы. Учебник. Под ред. Иващенко Н.П. - М.: Проспект, 21 янв. 2016 г. - 408 с.\n2.\tЭкономика инноваций: [учебник для студентов высших учебных заведений, обучающихся в магистратуре по экономическим специальностям] / А. И. Базилевич [и др.]; под ред. В. Я. Горфинкеля. - М: ВУЗОВСКИЙ УЧЕБНИК, 2009 - 416 с.\n3.\tПоисковая оптимизация. Практическое руководство по продвижению сайта в Интернете. 3-е изд. Севастьянов Иван Олегович. Изд. дом Питер, 24 сент. 2015 г. - 272 с.\n4.\tКорпоративный веб-сайт на 100проц.: требуйте от сайта большего! Роман Овчинников. Изд. дом Питер, 26 мар. 2009 г. - 322 с.\n5.\tЗвоним через интернет. Экономим в 100 раз. Василий Леонов. Litres, 24 окт. 2014 г.\n6.\tСайт анализа скорости загрузки web-страниц: https://developers.google.com/speed/pagespeed/insights.\n7.\tСайт ЭГУ РФ: https://www.gosuslugi.ru.\n© Фандрова Л.П., Бурзянцева Е.Ю., 2016\nУДК 004\nФандрова Людмила Петровна, Галифанова Римма Ильмировна\nканд. техн. наук, доцент каф. УГАТУ, студентка УГАТУ, г.Уфа, РФ E-mail: fandrova@yandex.ru, rimma-nasibullina@rambler.ru\nОБЛАЧНЫЕ ТЕХНОЛОГИИ В ПОДДЕРЖКУ СОВРЕМЕННОЙ СИСТЕМЕ ОБРАЗОВАНИЯ\nАннотация\nРассматриваются информационные и коммуникационные технологии, облачные хранилища в\n_МЕЖДУНАРОДНЫЙ НАУЧНЫЙ ЖУРНАЛ «СИМВОЛ НАУКИ» №6/2016 ISSN 2410-700Х_\nсистеме образования.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКлючевые слова\nОбразование, инновация, информационные и коммуникационные технологии (ИКТ),\nИнтернет, облачное хранилище.\nНа сегодняшний день от уровня образованности людей существенно зависит качество жизни населения и уровень развития всей страны. Современный этап развития общества ставит перед российской системой образования целый ряд принципиально новых проблем, среди которых следует выделить необходимость повышения качества и доступности образования. Требования к качеству образования растут с каждым днем. Пока, в основном, действует метод коллективного обучения. Такие старые, традиционные методы обучения уже не дают высоких результатов. Необходимы инновации в образовании -нововведения, направленные на усовершенствование педагогического процесса и повышение его результативности, на основе искоренения традиционных, но утративших эффективность подходов.\nОдним из путей решения данной проблемы является информатизация образования на основе внедрения новых информационных технологий, связанных с развитием компьютерных средств и сетей телекоммуникаций. Эти новшества создают качественно новую информационно-образовательную среду как основу для развития и совершенствования системы образования [1, с.28-30].\nВ настоящее время применение инноваций является ключевым пунктом успешной педагогики и образования в целом. Любые инновации несомненно должны учитывать требования современного социума и развитие информационных технологий. Более подробно рассмотрим информационные и коммуникационные технологии (далее ИКТ) в процессе образования.\nИспользование ИКТ дает обществу возможность полностью автоматизировать труд, намного ускорить процесс поиска и передачи информации. Основой ИКТ являются информационно-телекоммуникационные системы, построенные на компьютерных средствах и представляющие собой информационные ресурсы и аппаратно-программные средства, обеспечивающие хранение, обработку и передачу информации на расстояние [2, с.33-36].\nПрименение современных ИКТ становится неотъемлемой частью в преподавании и обучении. Всегда традиционным источником получения знаний была книга. Сегодня же, когда гаджеты сменяют друг друга каждый день, книга ушла на второй план. При этом, обучающиеся имеют широкий доступ к необходимой информации. Примером успешного внедрения ИКТ в образование является Интернет.\nНа рисунках 1 и 2 показаны современные аппаратные и программные средства ИКТ, которые на сегодняшний день успешно применяются в современной системе образования, при этом, с каждым днем на рынке товаров и услуг появляется все больше новых инновационных решений для той или иной сферы.\nУстройства записи визуальной и звуковой информации\nУстройства манипулирования объектами на экране\nУстройства ввода текстовой информации\nРисунок 1 - Аппаратные средства ИКТ в образовании\nРисунок 2 - Программные средства ИКТ в образовании\nОдна из постоянных проблем российской системы образования связана с неравными возможностями получения качественного образования из-за географической отдаленности от образовательных центров. В решении этой проблемы на помощь приходит дистанционное обучение. В процессе дистанционного обучения вытекает следующая проблема - хранение важной информации, а также ее передача и обработка. На сегодняшний день решением данной проблемы могут послужить облачные технологии.\nОблачные технологии - это новая парадигма, предполагающая распределенную и удаленную обработку и хранение данных [3, с.907-909].\nРассмотрим недавно внедрившиеся облачные хранилища «Dropbox» и «Облако@MaiLRu», которые позволяют пользователям хранить свои данные на серверах в облаке и делиться ими с другими пользователями в Интернете.\n«Dropbox» - это облачное хранилище для самых различных файлов с разнообразными функциями. Стабильная версия данного сервиса вышла 16 декабря 2010 года. Разработчиком данного сервиса стал Дрю Хьюстон, который во время автобусной поездки взял с собой ноутбук, но забыл взять с собой флэш-карту. Эта проблема подтолкнула его к написанию данного приложения.\n«Облако@МаП^и» - облачное хранилище данных российской компании Mail.Ru Group. Позволяет хранить музыку, видео, изображения и другие файлы в облаке и синхронизировать данные на компьютерах, смартфонах или планшетах. Первое бета-тестирование облачного хранилища стартовало 26 августа 2013 года. По данным компании, на Россию приходится почти 65 % пользователей сервиса, ещё примерно 12 % - на Украину, около 8 % пользователей из Турции, 4 % - из Казахстана, 3 % - из Белоруссии.\nНесмотря на то, что ни один из этих сервисов не создавался специально для учебных целей - их можно с успехом применить на ниве образования. Хранение общих учебных материалов, обмен результатами вычислений или разработок при выполнении общего исследования, выдача заданий и проверка выполненных работ - вот далеко неполный перечень функций, который легко реализуем благодаря облачным технологиям. Наиболее полный перечень их возможностей и подбор необходимого функционала для конкретных целей можно выполнить, рассмотрев характеристики рассматриваемых облачных технологий (Таблица 1).\nТаблица 1\nОсновные характеристики облачных хранилищ\nОблако@Mail.Ru\tDropbox\nЗагрузка фотоснимков и видеороликов с телефона с помощью автосохранения файлов на облачный диск при работе с Wi-Fi.\tСинхронизация файлов любого размера или типа.\nПередача файлов и папок друзьям, коллегам и руководителям.\tСинхронизация Windows, Mac и Linux компьютеров.\nОтправка ссылок на всевозможные файлы из облака через SMS, электронное письмо или социальную сеть.\tАвтоматическая синхронизация при изменении файлов.\nУдобный просмотр документов, созданных в приложениях MS Office (Word, Exel, PowerPoint, PDF и др.)\tК разным папкам можно предоставлять разные уровни доступа (от публичного до персонального с ссылкой на файл). С файлами могут работать сразу несколько человек.\nПродолжение таблицы 1\nПриложение сервиса под iOS-устройства позволяет открывать видео и музыку без полной подгрузки файлов.\tDropbox позволяет синхронизировать файлы в Сети и через свои ПК автоматически.\nУправление файлами отовсюду - переименование, удаление, перемещение.\tРабота с файлами в Dropbox в автономном режиме.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСоздание общих каталогов с другими участниками для хранения общедоступных файлов.\tМгновенный просмотр чужих изменений и уведомления об этом.\nОнлайн-редактор документов.\tАвтоматическое резервное копирование файлов. Восстановление файлов и папок, а также предыдущих версий файлов.\nИнтеграция с почтой.\tРабота с документами через Office Online.\nВозможность просматривать видео, поддержка ^^ .т^у, .тр4, .mov и\tВеб-доступ к приложению и данным на всех типах устройств и систем. Копии файлов хранятся на защищённых серверах Dropbox.\nПодводя итог, можно сказать, что применение современных технологий в образовании создает благоприятные условия для формирования личности учащихся и отвечает запросам современного общества. С внедрением ИКТ в процесс обучения, прежде всего, необходимо отметить повышение интереса и мотивации учащихся, так как современные люди (особенно молодые) легко используют новые средства коммуникаций. На сегодняшний день, компьютер и новые компьютерные программы помогают повысить интерес к изучению любого предмета, так процесс усваивания материала идет намного эффективнее.\nСписок использованной литературы\n1.\tАлексеева, Л. Н. Инновационные технологии как ресурс эксперимента/ Л. Н. Алексеева// Учитель. -2004. - № 3. - с. 78.\n2.\tБычков, А. В. Инновационная культура/ А. В. Бычков// Профильная школа. - 2005. - № 6. - с. 83.\n3.\tЕмельянова О. А. Применение облачных технологий в образовании // Молодой ученый. - 2014. - №3. -С. 907-909.\n© Фандрова Л.П., Галифанова Р.И., 2016\nУДК 004.056\nЧерняков Петр Валерьевич\nстудент ДГТУ,\nДонской государственный технический университет (ДГТУ), г. Ростов-на-Дону, Российская Федерация E-mail: letronas@mail.ru\nАНАЛИЗ СОВМЕСТНОГО РЕШЕНИЯ DLP и IRM-СИСТЕМ\nАннотация\nВ работе описывается причина необходимости поиска совместного решения на основе DLP и IRM-систем. Рассмотрены преимущества каждого решения по защите от утечек информации, а также предложен вариант интеграции этих систем с целью улучшения уровня защиты от утечек информации. В итоге были получены преимущества от использования этой интеграции, которые делают новую систему уникальной и более приспособленной к разным видам потенциальных утечек.\nКлючевые слова\nИнформационная безопасность, защита от утечек информации, DLP-система, IRM-система, интеграция систем.\n",
    "download_url": "https://cyberleninka.ru/article/n/oblachnye-tehnologii-v-podderzhku-sovremennoy-sisteme-obrazovaniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sovremennye-freymvorki-dlya-razrabotki-web-prilozheniy",
    "slug": "sovremennye-freymvorki-dlya-razrabotki-web-prilozheniy",
    "title": "СОВРЕМЕННЫЕ ФРЕЙМВОРКИ ДЛЯ РАЗРАБОТКИ WEB-ПРИЛОЖЕНИЙ",
    "abstract_description": "В настоящее время активно развиваются технологии web-программирования. В статье выполнен обзор популярных фреймворков, технологий (MVC) и инструментов, предназначенных для разработки web-приложений с учетом современных стандартов. Дана характеристика архитектуры и типы фреймворков. Рассмотрены популярные серверные (Django, Python, Zend, PHP, JavaScript) и клиентские (Angular, React, Vue, Spring) фреймворки и языки программирования, с которыми они работают. Указаны достоинства и недостатки каждого из рассмотренных инструментальных средств.",
    "full_text_body": "\n\n\n\n\uFEFFСовременные фреймворки для разработки\nweb-приложений\nА. А. Байдыбеков, к.воен.н. P. Г. Гильванов, магистр И. А. Молодкин Петербургский государственный университет путей сообщения Императора Александра I Санкт-Петербург, Россия baydibekov98@gmail.com, gilvanov1950@mail.ru, molodkin@pgups.ru\nАннотация. В настоящее время активно развиваются технологии web-программирования. В статье выполнен обзор популярных фреймворков, технологий (MVC) и инструментов, предназначенных для разработки web-приложений с учетом современных стандартов. Дана характеристика архитектуры и типы фреймворков. Рассмотрены популярные серверные (Django, Python, Zend, PHP, JavaScript) и клиентские (Angular, React, Vue, Spring) фреймворки и языки программирования, с которыми они работают. Указаны достоинства и недостатки каждого из рассмотренных инструментальных средств.\nКлючевые слова web-технологии, фреймворк, разработка web-приложений, framework, MVC, Django, Python, Zend, PHP, Javascript, Angular, React, Vue, Spring.\nВведение\nВ современном мире сложно представить крупную компанию и организацию без собственного web-приложения или сайта. Вместе с интересом организаций растет количество библиотек и фреймворков, нацеленных на облегчение разработки высококачественных web-приложений. Фрейм-ворки сильно изменили мир программирования и стали неотъемлемой частью web-разработки, так как стандарты приложений постоянно модифицируются и, как следствие, растет сложность технологии. Использование готовых инструментов и библиотек, одобренных тысячами разработчиков по всему миру, является разумным подходом для создания многофункциональных и интерактивных web-приложений. Выбор фреймворка — задача не самая сложная, но при выборе следует учитывать их достоинства и недостатки.\nАрхитектура и типы фреймворков\nФреймворк (англ. Framework — «каркас», «структура») — это динамически пополняемая библиотека языка программирования, в которой собраны его базовые модули. Фреймворки создаются для упрощения процессов разработки приложений, сайтов, сервисов. Чтобы не писать модуль в приложении с нуля, гораздо проще обратиться к готовым шаблонам фреймворков, которые и формируют рабочую среду разработчика.\nАрхитектура почти всех фреймворков основана на декомпозиции нескольких отдельных слоев (приложения, модули и т. д.) проекта. Это означает, что можно расширять функциональность приложения исходя из потребностей и использовать измененную версию вместе с кодом фреймворка или задействовать сторонние приложения. Такая гибкость является одним из одним из ключевых преимуществ использования фреймворков [1].\nMVC (англ. Мойе1-¥1ем>-Соп1го11ег — «Модель-Представление-Контроллер») — концепция программирования, разделяющая классы на три группы, широко применяющаяся и при использовании фреймворков. Структура концепции представлена на рисунке 1.\nUpdates\n/\tModel\t>\n\\\t\t/\nManipulates\nРис. 1. Концепция MVC\nМодель содержит все данные и уровни бизнес-логики, ее правила и функции.\nПредставление отвечает за визуальное отображение данных, например: диаграммы, графики и т. д.\nКонтроллер просто трансформирует данные для команд предыдущих двух составляющих [2].\nУ фреймворков есть две основные функции: работа на серверной стороне (бэк-энд) и работа на клиентской стороне (фронт-энд). Клиентская часть — это в основном HTML, CSS и JavaScript и рассматривается она как способ представления информации пользователям. Серверная часть, как правило, является наиболее сложной и описывает всю бизнес-логику приложения. Веб-разработку серверной части можно выполнить на многих языках, таких как Java, Python, PHP и т. д.\nСерверные фреймворки\nПравила и архитектура таких фреймворков не дают возможности создать веб-приложение с богатым интерфейсом. Они ограничены в своей функциональности, однако все равно можно создавать простые страницы и разные формы. Также они могут формировать выходные данные и отвечать за безопасность в случае атак. Все это определенно может упростить процесс разработки. Сер-\nверные фреймворки в основном отвечают за отдельные, но критически важные части приложения, без которых оно не сможет нормально работать. Вот несколько самых популярных фреймворков и языки, с которыми они работают: Django — Python, Zend — PHP.\nDjango\nВысокоуровневый фреймворк, который является не только быстрым решением в веб-разработке, включающим все необходимое для качественного кода и прозрачного написания, но также и отличной платформой для работы с клиентурой того или иного бизнеса. Вместе с тем он удобен для разработчиков.\nВ Django реализован принцип DRY — Don't Repeat Yourself (рус. не повторяйся). То есть при использовании Django не нужно несколько раз переписывать один и тот же код. Фреймворк позволяет создавать сайт из компонентов. Благодаря этому сокращается время создания сайтов.\nФреймворк справляется с большим количеством задач и повышенными нагрузками. Его применяют для создания:\n•\tCRM-систем (Customer Relationship Management) — систем управления отношениями с клиентами);\n•\tCMS-систем (Content Management System) — систем управления содержимым (контентом) [3];\n•\tкоммуникационных платформ;\n•\tсервисов бронирования номеров;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tплатформ управления документооборотом [4].\nТакже Django подходит для создания алгоритмических\nгенераторов, платформ для электронных рассылок, систем верификации, систем фильтрации с динамическими правилами и сложными параметрами, платформ для анализа данных и сложных вычислений, машинного обучения.\nРеализовано объектно-реляционное отображение (Object-Relational Mapping, ORM), которое обеспечивает взаимодействие приложения с базами данных (БД). ORM автоматически передает данные из БД, например PostgreSQL или MySQL, в объекты, которые используются в коде приложения. включает механизмы предотвращения распространенных атак вроде SQL-инъекций (XSS, англ. Cross-Site Scripting — «межсайтовый скриптинг») и подделки межсайтовых запросов (CSRF, или XSRF, англ. Cross-Site Request Forgery) [4].\nDjango REST Framework, который часто сокращают до DRF, является библиотекой для построения программного интерфейса приложения, API (Application Programming Interface). Он имеет модульную и настраиваемую архитектуру, которая хорошо работает для создания как простых, так и сложных API. В DRF политики аутентификации и разрешений доступны «из коробки». Он поставляется с базовыми классами для CRUD-операций и встроенной утилитой для тестирования разрабатываемого API [5].\nПлюсы:\n•\tмасса библиотек, что позволяет не писать базовую функциональность, а только лишь импортировать необходимое;\n•\tподробная документация и дружелюбное сообщество, поэтому всегда гораздо проще найти уже готовые решения или получить помощь от сообщества;\n•\tDjango позволяет начать с малого и масштабироваться по мере необходимости.\nМинусы:\n•\tDjango не поддерживает WebSockets, поэтому он плохо подходит для работы в реальном времени;\n•\tготовые библиотеки часто снижают гибкость, Django является большим и монолитным фреймворком, и его компоненты развертываются совместно.\nZend\nZend Framework — это объектно-ориентированная среда веб-приложений с открытым исходным кодом, представляющая собой набор профессиональных пакетов на основе PHP, разработанная и поддерживаемая компанией Zend. Это набор классов, большинство которых не привязаны к друг другу, а значит, их можно использовать как по запчастям в других проектах, так и полностью. В данном каркасе есть все, что нужно в современном web-проекте. Данный фреймворк, как правило, больше всего используют при разработке крупных коммерческих проектов. Такие компании, как Google, Microsoft и StrikeIron, сотрудничают с Zend, предоставляя интерфейсы для веб-сервисов и других технологий, которые они хотят сделать доступными разработчикам Zend. Компания участвует в разработке ядра языка программирования PHP [6].\nФреймворк использует различные пакеты, используя Composer как часть своих менеджеров зависимостей пакетов. Некоторые из них: PHPUnit для тестирования всех пакетов, Travis CI для служб непрерывной интеграции. Zend Framework предоставляет пользователям поддержку MVC в сочетании с решением Front Controller. Zend Framework следует стандартам PHP-FIG и включает реализацию PSR-7 для интерфейсов HTTP-сообщений. Поддержка нескольких систем баз данных и поставщиков, включая Mari-aDB, MySQL, Oracle, IBM DB2, Microsoft SQL Server, PostgreSQL, SQLite и Informix Dynamic Server [7].\nС помощью служб удаленного вызова процедур (Remote Procedure Call, RPC) и REST (англ. Representational State Transfer — «передача состояния представления») Zend Apigility помогает разработчикам создавать и документировать API.\nZend Server обеспечивает улучшенную производительность для PHP, и особенно приложений Zend Framework, за счет ускорения кода операции и нескольких возможностей кэширования, а также включает средства мониторинга и диагностики приложений. Zend Studio является интегрированной средой разработки приложений (Integrated Development Environment, IDE), которая включает функции, специально предназначенные для упрощения работы с Zend Framework. Она обеспечивает MVC-представление, генерацию кода MVC на основе Zend_Tool (компонент Zend Framework), предоставляет средства форматирования, анализа и исправления кода, помощь по параметрам и многое другое [8].\nДостоинства:\n•\tотлично подходит для разработки коммерческих веб-приложений;\n•\tобъектно-ориентированный подход к разработке;\n•\tнесвязанные компоненты для повторного использования в проектах.\nНедостатки:\n•\tтяжеловесный и ресурсоемкий, так как предоставляет разработчику массу возможностей и функций;\n•\tне подходит для быстрой разработки проектов;\n•\tнедостаточно материалов для русскоязычного сегмента разработчиков.\nКлиентские фреймворки\nВ отличие от серверных клиентские фреймворки никак не связаны с логикой приложения. Этот тип фреймворков работает в браузере. С их помощью можно улучшить и внедрить новые пользовательские интерфейсы. Фронт-энд-фреймворки позволяют создавать разные анимации и одностраничные приложения. Все клиентские фреймвор-ки отличаются по функциональности и использованию. Рассмотрим подробно некоторые из них, использующие язык JavaScript.\nAngular\nAngular — фреймворк с открытым исходным кодом, разработанный и поддерживаемый Google. Инструмент дает все необходимое для создания и управления динамическими front-end страницами для веб-приложения. В Angular имеется служба $http, которая обеспечивает взаимодействие с удаленными HTTP-серверами с помощью XMLHttpRequest или JSONP [9]. При передаче объекта JavaScript на сервер он будет автоматически преобразован в строку JSON. После получения ответа служба также попытается преобразовать полученную строку JSON в JavaScript. Используя службу $http можно создать собственную службу с полным контролем над обработкой URL и данных.\nAngular создан для упрощения сложных процессов создания и управления JS-приложениями. Библиотека основана на обычном JS и HTML, поэтому Angular автоматически заботится о манипуляциях с DOM (англ. Document Object Model — объектная модель документа) и AJAX-запросах, которые в противном случае разработчикам пришлось бы писать самим. Инструмент предоставляет модульные строительные блоки кода JS, которые можно совмещать и тестировать. AngularJS можно быстро добавить на любую HTML-страницу с помощью простого тега. Благодаря поддержке TypeScript Angular является хорошим вариантом для разработки громоздких веб-приложений [10].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ Angular применяется двустороннее связывание: любые изменения в пользовательском интерфейсе сразу же отражаются на объектах приложения и наоборот. Фреймворк сам следит за событиями браузера, изменениями модели и действиями пользователя на странице, чтобы сразу обновлять нужные шаблоны. При этом в коде JavaScript не требуется хранить ссылки на DOM-элементы и явно ими манипулировать: просто описывается необходимый результат в терминах состояния модели и нет надобности использовать низкоуровневые конструкции.\nAngular входит в пакет серверного программного обеспечения (ПО) MEAN, который также включает MongoDB, Express.js и Node.js [11]. Поэтому он позволяет управлять front-end и back-end проекта с помощью JavaScript. В качестве альтернативы для back-end можно использовать фреймворк Ruby on Rails (RoR), написанный на языке программирования Ruby.\nФреймворк применяется в разработке мобильных и веб-приложений. В дополнение к стандартному использованию одностраничного приложения с соответствующей библиотекой, такой как, например, Universal, возможно создание многостраничной версии. Что касается мобильной разработки, Google предоставил пользователям специальную платформу Ionic, нацеленную на создание и поддержку Native- и Progressive-приложений.\nAngularJS построен по технике «functionality-first», поэтому фреймворк больше всего подходит для разработки сверху вниз. Модульная концепция AngularJS позволяет упростить разделение работы на разные команды в крупных проектах. В приоритете минимальное количество кода, поэтому приложения AngularJS, как правило, компактны и легки в редактировании.\nОсновные преимущества фреймворка Angular, повышающие скорость и производительность, — это синтаксис шаблона и интерфейс командной строки (Command Line Interface, CLI) для быстрого создания прототипов. Angular лучше всего подходит для написания одностраничных приложений, но его также используют и для разработки крупных корпоративных веб-приложений [12].\nПлюсы:\n•\tогромный информационный ресурс по изучению и обширное сообщество, предоставляющие программистам помощь при проектировании и разработке;\n•\tдекларативная парадигма программирования обеспечивает легковесность кода, что облегчает его чтение и поддержку;\n•\tвзаимозависимость функций, ввиду их связанности с компонентами и модулями;\n•\tразбивка на модули позволяет загружать только нужные службы и эффективно выполнять автоматическое тестирование.\nМинусы:\n•\tсложный язык программирования, несмотря на то, что Angular использует Typescript 2.4;\n•\tлишен гибкости при проектировании, так как очень «упрямый» и навязывает свою структуру разработчикам;\n•\tпоскольку Angular содержит интерактивные элементы встроенных страниц, страницы могут быть медленными;\n•\tинтеграционные ошибки, которые могут возникать при переходе от старой версии к новой.\nReact\nReactJS — это библиотека JavaScript, созданная Face-book в 2013 году, она превосходно подходит для создания масштабных веб-приложений, где данные могут меняться на регулярной основе.\nReact представил концепцию виртуального DOM, представляющий собой веб-страницы в браузере. React обладает собственным виртуальным DOM, который управляет фактическим DOM браузера и, так как он намного быстрее, чем DOM браузера, значительно повышает производительность. DOM React может создавать более 200 000 узлов в секунду, что превышает средний показатель узлов для большинства сайтов. Также он может воссоздавать изменения благодаря использованию алгоритма Diffing, который способен сократить вычисление разности от сложности O(n3) до O(n). DOM позволяет\nобъединять HTML-, XHTML- или XML-документы по определенным критериям, чаще всего в дерево, поэтому React отлично подходит для веб-браузеров при анализе разнообразных элементов веб-приложений [13].\nОдной из замечательных особенностей React является введение JSX (расширения программного языка JavaScript). Необходимо понимать: JSX — это не HTML и не JavaScript. Прелесть JSX заключается в том, что он помогает разработчику визуализировать содержимое страниц, на нем гораздо проще писать, чем на традиционном JavaScript [12].\nС точки зрения уровня сложности, React является одним из самых простых в освоении. Он основывается на легких языках программирования — достаточно вспомнить, как работает HTML. Не нужно глубоко изучать TypeScript, как в Angular, хватает поверхностных знаний. React приобрел известность благодаря архитектуре на основе компонентов, которую другие платформы начали использовать гораздо позднее. Такой структурный подход позволяет сравнительно быстро и просто создавать интерфейс. Стоит отметить, что библиотека направлена не только на создание пользовательского интерфейса одно-страничного веб-приложения (Single Page Application, SPA), но и на мобильную разработку.\nПлатформа React Native — это фреймворк, нацеленный на разработку кроссплатформенных высококачественных приложений для iOS и Android. Преимуществами данного инструмента являются разнообразие совместимых модулей (Browserify, RequireJS, ECMAScript 6 и другие), установленные компоненты, однонаправленный поток кода, библиотека Redux [14].\nПлюсы:\n•\tлегкий вес базы данных; процессы, происходящие со стороны пользователя, могут быть легко задействованы на сервере;\n•\tсвязывание между собой данных гарантирует неизменность родительских данных, дочерние элементы не могут изменять цепочку данных;\n•\tоткрытая библиотека данных ежедневно совершенствуется благодаря открытому исходном коду;\n•\tвысокий уровень гибкости и максимальная отзывчивость.\nМинусы:\n•\tотсутствие упорядоченной документации, сверхбыстрый обмен решениями в ReactJS не оставляет места для упорядочения документации, документы размещены немного хаотично;\n•\tслишком огромный выбор действий для решения определенных проблем — количество этих решений может сбить с толку;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tплохая кроссбраузерная поддержка.\nVue\nПо заявлению разработчиков, Vue — прогрессивный JavaScript-фреймворк для разработки пользовательского интерфейса. Отличительной чертой Vue от монструозных фреймворков является высокая степень адаптивности. Она заключается в ориентированности на уровень представления (View) и простоте интеграции других библиотек или в существующие проекты [15].\nVue позволяет разрабатывать сложные одностраничные приложения (SPA) за счет расширения HTML-атрибутов так называемыми директивами. Существуют как встроенные директивы, так и определяемые программистом.\nVue и рассмотренный ранее React очень похожи. Скорость работы обеих фреймворков очень высока, однако существуют некоторые нюансы функционирования Vue, на которые стоит обратить внимание.\nВ отличие от React, в котором изменение состояния компонента ведет к перерисовке всего поддерева этого компонента, Vue автоматически отслеживает зависимости компонентов. Такой подход позволяет системе точно знать, какие компоненты необходимо перерисовывать. Это устраняет необходимость целого класса оптимизаций.\nВ React все построено на JavaScript, Vue же охватывает классические веб-технологии и основывается на них.\nReact отличается сложностью изучения, поскольку для применения этого фреймворка необходимо владеть знаниями о JSX и ES2015+ и системах сборки. Все эти знания не являются обязательными для начала разработки на Vue [16].\nПо сравнению с Angular, Vue имеет слегка большую производительность [17].\nКак уже было сказано ранее, для работы с Angular требуется знание TypeScript. Применение TypeScript имеет свои преимущества, такие, как проверка статических типов, однако это ведет к увеличению накладных расходов. Vue предоставляет официальные декларации типов и официальный декоратор для тех, кто хочет использовать TypeScript вместе с Vue.\nAPI Angular содержит множество элементов и концепций, что требует большого времени для изучения. Все, что необходимо знать для работы с Vue — HTML и стандартный JavaScript.\nРазмер полнофункционального проекта с Vue (Vue Router + Vuex) значительно меньше, чем с Angular (~30 кБ против 65 кБ).\nВ отличие от Angular Vue позволяет использовать различные системы сборки, не ограничивая разработчиков в том, какую структуру использовать для приложения.\nРазработка фреймворка началась в июле 2013 года и активно продолжается до сих пор.\nSpring\nОдним из самых популярных фреймворков для Java Enterprise Edition является Spring, который позволяет разрабатывать надежные и высококачественные приложения для различных сфер применения [18].\nФреймворк Spring разработан Родом Джонсоном в 2003 году как ответ на сложную спецификацию J2EE и включил в себя следующие спецификации:\n-\tServlet API (JSR 340);\n-\tWebSocket API (JSR 356);\n-\tConcurrency Utilities (JSR 236);\n-\tJSON Binding API (JSR 367);\n-\tBean Validation (JSR 303);\n-\tJPA (JSR 338);\n-\tJMS (JSR 914).\nSpring также поддерживает внедрение зависимостей (Dependency injections) и общие аннотации (Common annotations), которые могут быть применены вместо характерных для фреймворка механизмов [19].\nДля работы с фреймворком версии 5.1 требуется JDK8+. Интегрирована поддержка JDK11 LTS, что обеспечивает полную совместимость с такими программами, как Tomcat 8 и 9, WebSphere 9 и т. д.\nСуществуют различные сценарии применения Spring как в больших серверных проектах, так и автономных приложениях, которые не требуют наличия облака.\nОткрытость исходного кода позволила привлечь к разработке фреймворка большое сообщество, которое непрерывно совершенствует его возможности и увеличивает сферу применения.\nФреймворк разделен примерно на 20 модулей, сгруппированных по назначению (рис. 2). При разработке приложений необходимо выбрать требуемые модули. Основу составляют модули контейнеров ядра (Core Container), которые включают конфигурационную модель и механизм внедрения зависимостей. Помимо этого, Spring предоставляет поддержку различных архитектур приложений, включая мессенджеры и веб. Также существует основанный на технологии сервлетов фреймворк Spring MVC WEB [20].\nРис. 2. Модули Spring\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nГруппа модулей доступа к данным и интеграции (Data Access/Integration) призвана облегчить работу с различными БД и API. Так, например, модуль JDBC (Java DataBase Connectivity) избавляет от необходимости рутинного написания кода для работы с базами данных и обработки специфичных для конкретной БД ошибок, а модуль JMS (Java Messaging Service) содержит инструменты для создания и получения сообщений.\nМодули Web предоставляют различные инструменты для работы с веб. Одноименный модуль позволяет организовать базовые веб-возможности, такие как загрузка файлов по частям, инициализация зависимостей в прослуши-вателях сервлетов и ориентированный на веб контекст приложений. Модуль сервлетов содержит реализацию веб-приложений по шаблону MVC, что позволяет интегрировать все в рамках одного фреймворка.\nПоддержка фреймворков для тестирования JUnit и TestNG обеспечивается модулем Test.\nSpring продолжает развиваться и разработчики внедряют в него новые возможности. Помимо самого фрейм-\nворка Spring существуют и другие проекты: Spring Boot, Spring Security, Spring Data, Spring Cloud, Spring Batch. Это создает целую экосистему для эффективной разработки ПО.\nЗаключение\nФреймворки для веб-разработки во многом похожи, даже если реализованы на разных языках программирования. Тем не менее каждый из перечисленных фреймвор-ков индивидуален. У них разные подходы, методы и поведение в разработке. Нельзя выбрать лучший фреймворк среди имеющихся, все зависит от того, с чем планируется работать [21-23]. Фреймворки имеют массу различных преимуществ и недостатков. Можно сравнить все функции и технологии, перечисленные в этой статье, чтобы было легче понять, какой из фреймворков лучше подходит для бизнеса или потребностей конкретного проекта, и сделать правильный выбор, наблюдая в итоге, как выбранные инструменты и библиотеки оказывают огромную помощь в работе.\nЛитература\n1.\tВеб-фреймворки: введение для новичков. — 02.08.2018 I Пер. с англ. // Tproger —типичный программист. URL: http:IItproger.ruItranslationsIweb-frameworks-how-to-get-started (дата обращения: 03.08.2020).\n2.\tФрэйн, Б. HTML5 и CSS3. Разработка сайтов для любых браузеров и устройств. Второе издание = Responsive Web Desigh with HTML5 and CSS3. Second Edition / Пер. с англ. Н. Вильчинского. — Санкт-Петербург: Питер, 2017. — 272 с. — (Библиотека программиста).\n3.\tДанжу, Д. Путь Python. Черный пояс по разработке, масштабированию, тестированию и развертыванию = Serious Python. Black-Belt Advice on Deployment, Scalability, Testing, and More / Пер. с англ. П. Ковалёва. — Санкт-Петербург: Питер, 2020. — 256 с. — (Библиотека программиста).\n4.\tФорсье, Д. Django. Разработка веб-приложений на Python / Д. Форсье, П. Биссекс, У. Чан; пер. с англ. А. Киселева. — Санкт-Петербург: Символ-плюс, 2009. — 456 с. — (Серия «High tech»).\n5.\tDjango: The Web framework for perfectionists with deadlines. URL: http:IIwww.djangoproject.com (дата обращения: 01.08.2020).\n6.\tZend Framework 3 // Zend Framework — Documentation. URL: http://framework.zend.com/learn (дата обращения: 28.07.2020).\n7.\tЗандстра, М. PHP: объекты, шаблоны и методики программирования. Пятое издание = PHP Objects, Patterns, and Practice / Пер. с англ. И. В. Берштейна; под ред. С. Г. Три-губ. — Санкт-Петербург: Диалектика, 2019. — 736 с.\n8.\tВасвани, В. Zend Framework. Разработка веб-приложений на PHP = Zend Framework: A Beginner's Guide / Пер. с англ. Р. Тетерина. — Санкт-Петербург: Питер, 2012. — 432 c. — (Библиотека программиста).\n9.\tРейсиг, Д. JavaScript. Профессиональные приемы программирования = Pro JavaScript™ Techniques / Пер. с англ. Н. Вильчинского. — Санкт-Петербург: Питер, 2008. — 352 c. — (Библиотека программиста).\n10.\tAngular. JavaScript-фреймворк // Habr.\nURL: http:IIhabr.com/ruIhubIangular (дата обращения: 04.08.2020).\n11.\tAngular. URL: http://angular.io (дата обращения: 04.08.2020).\n12.\tФайн, Я. Angular и TypeScript. Сайтостроение для профессионалов = Angular 2 Development with TypeScript / Я. Файн, А. Моисеев; пер. с англ. Н. Вильчинского, Е. Зазнобы. — Санкт-Петербург: Питер, 2018. — 464 с. — (Библиотека программиста).\n13.\tReact. JavaScript-библиотека для создания пользовательских интерфейсов. URL: http://ru.reactjs.org (дата обращения: 03.08.2020).\n14.\tСтефанов, С. React.js. Быстрый старт = React: Up & Running / Пер. с англ. Н. Вильчинского. — Санкт-Петербург: Питер, 2017. — 304 c. — (Серия «Бестселлеры O'Reilly»).\n15.\tVue.js — Introduction // Vue.js.\nURL: http://vuejs.org/v2/guide/index.html (дата обращения: 08.12.2020).\n16.\tVue.js — Comparison with Other Frameworks // Vue.js. URL: http://vuejs.org/v2/guide/comparison.html (дата обращения: 08.12.2020).\n17.\tResults for js web frameworks benchmark — round 4. Table Report — 12.09.2016 // Stefan_Krause.blog().\nURL : http://stefankrause.net/js-frameworks-benchmark4/ webdriver-ts/table.html (дата обращения: 08.12.2020).\n18.\tSpring Framework Overview. Version 5.3.2.\nURL: http://docs.spring.io/spring-framework/docs/current/ reference/html/overview.html (дата обращения: 08.12.2020).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n19.\tSpring 5 для профессионалов. Пятое издание = Spring 5. Fifth Edition / Ю. Козмина, P. Харроп, К. Шефер, К. Хо; пер. с англ. и ред. И. В. Берштейна. — Санкт-Петербург: Диалектика, 2019. — 1120 с.\n20.\tIntroduction to Spring Framework.\nURL : http://docs. spring. io/spring-framework/docs/3.0.x/ spring-framework-reference/html/overview.html (дата обращения: 08.12.2020).\n21.\tМещеряков, Е. В. Публикация баз данных в интернете: Практическое руководство / Е. В. Мещеряков, А. Д. Хо-моненко. — Санкт-Петербург: БХВ-Петербург, 2001. — 552 с. — (Серия «Мастер»).\n22.\tХомоненко, А. Д. Разработка web-приложений для работы с базами данных: Учебное пособие / А. Д. Хомо-ненко, В. В. Рогальчук, А. В. Тырва. — Санкт-Петербург: ПГУПС, 2012. — 87 с.\n23.\tРазработка приложений с Web-интерфейсом для работы с базами данных: Методические указания для студентов, обучающихся по направлениям «Информатика и вычислительная техника» и «Информационные системы и технологии» / Сост. В. В. Рогальчук, А. Д. Хомоненко. — Санкт-Петербург: ПГУПС, 2017. — 24 с.\nModern Frameworks for Web Development\nA. A. Baidybekov, PhD R. G. Gilvanov, Master of Science I. A. Molodkin Emperor Alexander I Petersburg State Transport University Saint Petersburg, Russia baydibekov98@gmail.com, gilvanov1950@mail.ru, molodkin@pgups.ru\nAbstract. Currently, web programming technologies are actively developing. The article provides an overview of popular frameworks, technologies (MVC) and tools designed for developing web applications taking into account modern standards. Characteristics of architecture and types of frameworks are given. Popular server-side (Django, Python, Zend, PHP, Javascript) and client-side (Angular, React, Vue, Spring) frameworks and programming languages with which they work are considered. The advantages and disadvantages of each considered tool are indicated.\nKeywords: web technologies, web application development, framework, MVC, Django, Python, Zend, PHP, Javascript, Angular, React.\nReferences\n1.\tWeb Frameworks: How To Get Started [Veb-freym-vorki: vvedenie dlya novichkov], Tproger. Published online at 02 Aug 2018.\nAvailable at: https://tproger.ru/translations/web-frameworks-how-to-get-started (accessed 03 Aug 2020).\n2.\tFrain B. Responsive Web Desigh with HTML5 and CSS3. Second Edition [HTML5 i CSS3. Razrabotka saytov dlya lyubykh brauzerov i ustroystv. Vtoroe izdanie]. St. Petersburg, Piter Publishing House, 2017, 272 p.\n3.\tDanjou J. Serious Python. Black-Belt Advice on Deployment, Scalability, Testing, and More [Put' Python. Cher-nyy poyas po razrabotke, masshtabirovaniyu, testirovaniyu i razvertyvaniyu]. St. Petersburg, Piter Publishing House, 2020, 256 p.\n4.\tForcier J., Bissex P., Chun W. Django. Python web development with Django [Django. Razrabotka veb-prilozheniy na Python]. St. Petersburg, Symbol Plus Publishing House, 2009, 456 p.\n5.\tDjango: The Web framework for perfectionists with deadlines. Available at: http://www.djangoproject.com (accessed 01 Aug 2020).\n6.\tZend Framework 3, Zend Framework — Documentation. Available at: http://framework.zend.com/learn (accessed 28 July 2020).\n7.\tZandstra M. PHP Objects, Patterns, and Practice [PHP: ob\"yekty, shablony i metodiki programmirovaniya]. St. Petersburg, Dialektika Publishers, 2019, 736 p.\n8.\tVaswani V. Zend Framework: A Beginner's Guide [Zend Framework. Razrabotka veb-prilozheniy na PHP]. St. Petersburg, Piter Publishing House, 2012, 432 p.\n9.\tResig J. Pro JavaScript™ Techniques [JavaScript. Pro-fessional'nye priemy programmirovaniya]. St. Petersburg, Piter Publishing House, 2008, 352 p.\n10.\tAngular. JavaScript framework [Angular. JavaScript-freymvork], Habr [Khabr]. Available at: http://habr.com/ru/ hub/angular (accessed 04 Aug 2020).\n11.\tAngular. Available at: http://angular.io (accessed 04 Aug 2020).\n12.\tFain Y., Moiseev A. Angular and TypeScript. Site building for professionals [Angular i TypeScript. Sayto-stroenie dlya professionalov]. St. Petersburg, Piter Publishing House, 2018, 464 p.\n13.\tReact. JavaScript library for creating user interfaces [React. JavaScript-biblioteka dlya sozdaniya pol'zovatel'skikh interfeysov]. Available at: http://ru.reactjs.org (accessed 04 Aug 2020).\n14.\tStefanov S. React: Up & Running [React.js. Bystryy start]. St. Petersburg, Piter Publishing House, 2017, 304 p.\n15.\tVue.js — Introduction, Vue.js.\nAvailable at: http://vuejs.org/v2/guide/index.html (accessed 08 Dec 2020).\n16.\tVue.js — Comparison with Other Frameworks, Vue.js. Available at: http://vuejs.org/v2/guide/comparison.html (accessed 08 Dec 2020).\n17.\tResults for js web frameworks benchmark — round 4. Table Report, Stefan_Krause.blog(). Published online at 12 September 2016. Available at: http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html (accessed 08 Dec 2020).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n18.\tSpring Framework Overview. Version 5.3.2. Available at: http://docs.spring.io/spring-framework/docs/ current/reference/html/overview.html (accessed 08 Dec 2020).\n19.\tCosmina I., Harrop R., Schaefer C., Ho C. Spring 5. Fifth Edition [Spring 5 dlya professionalov. Pyatoe izdanie]. St. Petersburg, Dialektika Publishers, 2019, 1120 p.\n20.\tIntroduction to Spring Framework.\nAvailable at: http://docs.spring.io/spring-framework/docs/ 3.0.x/spring-framework-reference/html/overview.html (accessed 08 Dec 2020).\n21.\tMeshcheryakov E. V., Khomonenko A. D. Publishing databases on the Internet [Publikatsiya baz dannykh v internete]. St. Petersburg, BHV-Peterburg, 2001, 552 p.\n22.\tKhomonenko A. D., Rogalchuk V. V., Tyrva A. V. Developing web applications for working with databases: Study guide [Razrabotka web-prilozheniy dlya raboty s baza-mi dannykh: Uchebnoe posobie]. Saint Petersburg, PSTU, 2012, 87 p.\n23.\tRogalchuk V. V., Khomonenko A. D. Development of Web-based applications for working with databases: Guidelines [Razrabotka prilozheniy s Web-interfeysom dlya raboty s bazami dannykh: Metodicheskie ukazaniya]. Saint Petersburg, PSTU, 2017, 24 p.\n",
    "download_url": "https://cyberleninka.ru/article/n/sovremennye-freymvorki-dlya-razrabotki-web-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-modulya-billingovoy-sistemy-dlya-vizualizatsii-tekstovyh-dannyh",
    "slug": "razrabotka-modulya-billingovoy-sistemy-dlya-vizualizatsii-tekstovyh-dannyh",
    "title": "Разработка модуля биллинговой системы для визуализации текстовых данных",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFРазработка модуля биллинговой системы для визуализации текстовых данных\nК.Е. Косоруков,\nстудент 5-го курса, специальность «Информационные системы и технологии»\nВ.Н. Шурыгин,\nк.т.н., доцент кафедры информационных систем\nВеб-сервисы за последние годы прочно вошли в интернетпространство, постепенно вытесняя обычные компьютерные программы. В настоящий момент перед разработчиками насыщенных интернетприложений (RIA - Rich Internet Applications) стоит проблема организации простых, но вместе с тем многофункциональных веб-интерфейсов, которые позволяют пользователю быстро освоиться в системе и выполнять с помощью нее повседневные задачи. Однако практика показывает, что чем больше веб-приложение приближается к своему оффлайн-прототипу, тем более ресурсоемкий и громоздкий код приходится писать разработчикам для придания интерфейсу стандартного вида, к которому привыкли пользователи операционных систем с графическим оконным менеджером. В свою очередь, это отрицательно сказывается на производительности как конечного решения, так и сотрудников фирмы, создавшей данный продукт. Из этого следует, что направлением деятельности команды разработчиков становится не только прямая обязанность - разработка технического задания, спецификаций и написание кода для решения конкретной задачи, но и выбор подходящего инструмента для минимизации затрат ресурсов, под которыми понимается, например, время выполнения различных действий (отклики) системы, оперативная и постоянная память компьютера, время разработки программистом дополнительной функциональности.\nВ настоящей статье описаны методы разработки на одном из многочисленных JavaScript-каркасов для решения этой проблемы на примере модуля биллинговой системы «Алант», созданной и развивающейся в компании «АВК-Коммьюникейшнз». Модуль позволяет\n26\nвизуализировать текстовые данные, которые накапливаются в базе данных за определенный срок и нуждаются в систематизации.\nExtJS - библиотека, написанная на языке JavaScript, задумывавшаяся изначально как расширение Yahoo UI Library, но со временем превратившаяся в отдельный проект. Имеет двойное лицензирование: есть возможность использовать как GPL v3, так и коммерческую лицензию компании Sencha. Основным ее направлением является создание клиент-серверных веб-приложений, похожих на desktop-приложения.\nФреймворк характеризуется наличием огромного числа компонентов, похожих на стандартные элементы управления систем с графическим оконным интерфейсом. Так, на рис. 1 показано небольшое приложение для чтения новостной ленты с использованием компонентов «панель закладок» (TabPanel), «таблица» (grid) и «дерево» (tree).\nI Feeds\nQl Add feed Qj Remove feed 0 Sencha Blog О Sencha Forums [3 Ajaxian\n| Sencha Blog |_________________________________\nffilQpen All @ Preview: Bottom * [ifel Summary ]\n'J* Announcing the HTML5 is Ready App Contest Winners\nPaul Kopadti\nDate\n2013/33/34 1:30 pm\nWow, we were impressed and amazed, and, frankly, a IWe overwhelmed by the entries to the HTMlS is Ready App Contest! We got hundreds of great submissions, so it took a bunch of work by myself, the other four judges, and our marketing team to whittle it down to manageable set of finals®, and then to have all the judges stack rank them to find the winners.\n^ Sencha Eclipse Plugin 2.0 New and Noteworthy\t2013/02/2S 9'28 Dm\nJustin Early\t^\t1 pm\nSencha Edipse Plugin is a full code assist and validation plugin for the popular Edpse IDE. With the plugin, you're able to get code assist for standard Sencha Touch (new in Sencha Edipse Plugin 1.1) and Ext JS types, as well as custom types that you define as a part of your project. In this artide, I will demonstrate the latest updates to this plugin.\nФ Using the Touch Scheduler Component Mats Bryntse\n2013/32/21 12:00 pm\nBryntum has been woikrg hard lately to port their Ext Sdteduler component over to the Sencha Toudi platform. In this post, they Introduce you to the new version and share some details of how they developed a cross framework extension for Sencha Touch and Ext JS.\nI ^ SenchaCon 2013 Registration How Open!\nPaulKopada\nit with 60+ sessions, a soaal e\n2013/32/19 8:31pm\nit each night and a full-day hackathon to dose out on a great week. Y\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЕУ View r new tab | ' # Go to post\nAnnouncing the HTML5 is Reddy App Contest Winners\tMar 4, 2013,1:30 prr\nby Paul Kopacki\nWow, we were impressed and amazed, and, frankly, a little overwhelmed by the entries to the HTML5 is Ready App Contest! We got hundreds of great submissions, so It took a bunch of work by myself, the other four judges, and our marketing team to winnow It down to manageable set of finalsts, and then to have all the judges stack rank them to find the winners. Гт pleased to say that though we did our judging entirely independently, we had three dear winners emerge when we added up the scores. Without further ado, here they are, with a few choice quotes from the judges on each:\nРис. 1. Пример приложения на каркасе ExtJS\n«Из коробки» разработчик получает сразу все необходимые инструменты, чтобы в кратчайшие сроки соорудить удобный и, что важно, кроссбраузерный пользовательский интерфейс. Имеются широкие возможности AJAX-коммуникации, в том числе:\n-\tавтоматическая сериализация и десериализация данных форм при передаче их на сервер;\n-\tдинамическая привязка хранилищ данных во время выполнения программы;\n-\tвстроенный шаблон Model-View-Controller, с помощью которого реализуется подгрузка необходимых программе компонентов,\n27\nотслеживание хода выполнения программы без ручных операций по установке и разбору заголовков запроса и ответа и многое другое.\nЗа высокую функциональность приходится платить объемом исходного кода: в последней доступной на сегодняшний день версии (4.1.3) он составляет около 500 килобайт, что заметно сказывается на скорости загрузки страницы.\nТипичный компонент (например, панель с закладками) описывается JavaScript-кодом; в основе каждого компонента лежит термин «конфигурационный объект». Это стандартный объект языка JavaScript, поля которого и их значения соответствуют таковым в документации ExtJS [1]. В листинге 1 приведен фрагмент исходного кода, реализующий компонент «окно»:\nExt.create('Ext.window.Window', { title: 'Hello', height: 200, width: 400, layout: 'fit', items: [{ xtype: 'grid', border: false,\ncolumns: [{header: 'World'}],\nstore: Ext.create('Ext.data.ArrayStore', {})\n}]\n}).show();\nЛистинг 1. Возможная реализация компонента «окно»\nФункция Ext.createQ является основой для создания любого компонента с помощью фреймворка ExtJS. Первым параметром в нее передается строковое представление типа объекта, который необходимо создать (в данном случае - окно), вторым - конфигурационный объект с параметрами данного компонента. В листинге 1 создается окно с заголовком «Hello» с высотой в 200 и шириной в 400 пикселей с применением макета типа «fit» (подробнее о нем можно прочитать в документации фреймворка [1]). В массиве items конфигурационного объекта показан еще один способ инициализации компонента, на сей раз без Ext.createQ, а только лишь самим конфигурационным объектом. Это не всегда удобно по причинам особенности языка JavaScript, но допустимо, если компонент достаточно прост. Свойство xtype в первом элементе массива items задает тип компонента через его псевдоним. В данном случае, это таблица. При объявлении данного элемента интерфейса необходимо задать хранилище (store) и столбцы (columns), которые будут отображаться в таблице из всех имеющихся в нем данных. Более под-\n28\nробное описание конфигурации элементов можно найти в официальной документации [1]. Результат выполнения листинга 1 показан на рис. 2.\nHello\t[х]\nWorld\nРис. 2. Результат выполнения листинга 1. Компонент «окно»\nс содержимым в виде компонента «таблица»\nПроблема, впоследствии решенная с применением ExtJS, возникла в одном из крупных существующих проектов, работающих на биллинговой информационной системе «Атлант». Существовавший ранее модуль визуализации текстовых данных, получаемых из базы, стал использовать нерационально большие временные ресурсы при очень маленьком задействовании физических ресурсов сервера. В результате более 80% времени при выполнении задачи сервер фактически простаивал, а СУБД оказалась занятой настолько, что клиенты ощущали значительные задержки при работе с системой. Так как данная функция используется часто, а клиентов даже в ночные часы не становится намного меньше, было решено оптимизировать алгоритмы работы модуля таким образом, чтобы найти компромисс между временем отклика системы и использованием ею серверных ресурсов. Математически данную проблему можно выразить графиком, показанным на рис. 3, а.\nСиний график p2(t) отражает желаемое течение процесса выполнения задачи, которой заведует модуль системы.\nКрасный p1(t) - фактическое.\nR - максимальная нагрузка на сервер в настоящее время.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nR2 - доля ресурсов сервера, которая будет задействована при выполнении задачи по желаемому сценарию.\nT— время выполнения задачи после оптимизации.\nЗадача оптимизации сводится к нахождению алгоритма работы модуля, который удовлетворял бы следующим требованиям:\n1. Время выполнения задачи Тне превышает рекомендуемое значение Tmax. Оценка верхней границы, Tmax, опирается на результаты исследований средней продолжительности пребывания пользователя на странице в ожидании ответа информационной системы [2].\n29\n2. R2 — минимально возможная доля ресурсов сервера, обеспечивающая время T — такова, что выделение большей, чем R2, доли не приводит к уменьшению затрачиваемого времени T, или же выигрыш во времени пренебрежимо мал, т. е. ск/ск ^ 0 при r> R2, где т(/) — функция зависимости времени от ресурсов (рис. 3, б).\nб\nРис. 3: a — проблема нерационального использования модулем ресурсов сервера; б— взаимосвязь объема выделенных ресурсов сервера и времени выполнения задачи\n30\nБыло предложено решение, основанное на использовании дочерних процессов модулем, которое схематически изображено на рис. 4.\nРис. 4. Возможное решение проблемы, представленной на рис. 3, а и 3, б\nВ локальной базе данных (SQLite) создается несколько таблиц, в которых сохраняются текстовые данные для визуализации, являющиеся счетами клиентов. Таким образом, обращение к удаленной главной базе происходит всего один раз, что освобождает ее ресурсы на большую часть времени работы модуля в отличие от прошлого решения, когда база опрашивалась с той же целью многократно на протяжении всего процесса.\nВведем некоторые понятия.\nКонвертер - процесс, непосредственно осуществляющий формирование документов по счетам.\nАгент - процесс, контролирующий процессы-конвертеры.\nВыгрузка - основной процесс, который распределяет задания по формированию документов из текстовой информации между конкретными агентами.\nОбщая схема работы следующая. В тот момент, когда администратору требуется запустить модуль в работу он заходит в его интерфейс, отмечает те данные, которые требуется визуализировать с помощью документов и нажимает кнопку запуска. Модуль выгружает из удаленной базы все необходимые записи в локальную базу и завершает работу с удаленным источником, освобождая его ресурсы. Следующим шагом управление передается главному процессу выгрузки. Он создает в системе несколько дочерних процессов, называемых агентами. В свою очередь, агенты аналогично создают определенное количество дочерних процессов-конвертеров, которые забирают порцию данных из локальной базы и формируют из них документ. Количество дочерних процессов агентов и конвертеров регулируется администратором системы,\n31\nчто позволяет подобрать их оптимальное соотношение исходя из свободных ресурсов сервера, доступных на момент запуска модуля. Модуль предусматривает также возможность сохранения проставленных позиций при выборе данных администратором. В виде блок-схемы этот обобщенный алгоритм представлен ниже, на рис. 5.\nРис. 5. Обобщенный алгоритм работы модуля\nИнтерфейс модуля написан на ExtJS. Он состоит из нескольких страниц с панелью с вкладками, с помощью которых можно создать новое задание, отследить статус работы отдельных процессов, посмотреть общую информацию по текущему главному процессу задания, а также выполнить поиск записей в журнале, который составляется по мере работы. Пример страницы интерфейса показан на рис. 6.\nОсновными элементами данной страницы являются:\nФильтр поиска клиентов, для которых нужно сформировать документы. Он включает в себя возможность выбора клиентов, у которых определенный юридический статус: физическое или юридическое лицо.\n32\nРис. 6. Страница интерфейса для создания нового задания\nТочка выставления - внутренняя системная метка, которой может управлять администратор системы применительно к каждому клиенту. Может быть OFF-NET и ON-NET.\nДепартаменты - имеется возможность выбора всех клиентов, которые принадлежат какому-либо подразделению или фирме. Управляется аналогично, администратором. Департаменты могут быть подчиненными друг другу (один департамент содержит много более мелких депараментов-филиалов), для поиска по ним необходимо проставить соответствующую галочку.\nОтчетный период - возможность задать временной промежуток, за который необходимо сформировать документы.\nСумма счета - состояние счета клиента.\nПосле нажатия на кнопку «Найти счета» формируется таблица «Документы», в которой показываются типы документов для визуализации, тип юридического статуса клиента, а также количество самих записей. При нажатии на «Сохранить по умолчанию» выбранные позиции сохраняются в удаленной базе с помощью поля в таблице типов документов. Если же администратор системы нажимает «Выгрузить», то\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n33\nмодуль запускает сформированное из выбранных типов документов и отфильтрованных клиентов задание, передавая управление серверной стороне.\nВнутреннее устройство части этой страницы (фильтр клиентов) представлено в листинге 2.\nabh.massexport.task.Filter = Ext.extend(Ext.form.FormPanel, { title: 'Фильтр', height: 230, makeltems: function(){ this.defaults = { width: 200\n};\nthis.items = [{\nxtype: 'base.form.ComboBox', makeStore: function(){\nthis.store = new Ext.data.ArrayStore({ fields: ['code', 'name'],\ndata: [[0, 'Bee'], [1, 'Физическое лицо'], [2,\n'Юридическое лицо']]\n})\n},\nvalueField: 'code', displayField: 'name', fieldLabel: 'Юридический статус', value: 0,\n},\n{\nxtype: 'checkboxgroup', fieldLabel: 'Сумма счета', width: 400, name: 'v_summ', items: [{\nboxLabel: 'положительная', name: 'v_possumm', inputValue: 1, checked: true\n}\n]\n}];\n},\n34\ninitComponent: function(){\nthis.makeItems();\nabh.massexport.task.Filter.superdass.initComponent.apply(this, arguments);\n}\n});\nExt.reg('abh.massexport.task.Filter', abh.massexport.task.Filter);\nЛистинг 2.Фильтр клиентов в интерфейсе создания нового\nзадания\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ ExtJS инициализация компонента начинается с метода initComponent, который позволяет предварительно выполнить необходимые действия до отображения конечного результата на экране. В нем необходимо вызвать конструктор родительского компонента с помощью метода %componentName%.apply() с массивом arguments [3]. В примере выше в этой функции объекта типа abh.massexport.task.Filter, унаследованного с помощью метода Ext.extend() от типа Ext.form.FormPanel (форма с полями), вызывается метод makeItems(), который создает дополнительные элементы, включенные в панель. В данном случае, это выпадающий список типа base.form.ComboBox, унаследованный от Ext.form.ComboBox точно таким же способом, как сама панель формы, но в отдельном файле, который подгружен во время исполнения скрипта из листинга 2. Метод makeStore() создает хранилище, как оно создавалось в листинге 1 для элемента типа «таблица». Свойство displayField позволяет установить поле хранилища, которое будет отображаться на экране в элементе выпадающего списка для каждой записи, а свойство valueField - поле, которое будет приниматься в качестве атрибута значения для каждого пункта списка. Свойство fieldLabel задает метку с пояснением назначения поля около его контейнера, а value - начальное значение, которое уже будет выбрано.\nЕще одним элементом панели формы является группа флажков (checkboxgroup). Через свойство xtype аналогично, как и для остальных компонентов, задается тип отображаемого элемента. Массив items в этой группе содержит элементы, каждый из которых является флажком. В качестве примера в листинге создается флажок с меткой «положительная сумма». На самом деле, в этот массив возможно включить любой другой элемент, но в таком случае нельзя будет предсказать поведение браузера при отображении панели с формой, так как каждый компонент в фреймворке имеет определенную область применения и проектирование нестандартных интерфейсов не приветствуется.\nТаким образом, подводя итоги, об ExtJS можно сказать следующее.\nВсе компоненты этого каркаса написаны единообразно. Достаточно освоить несколько базовых приемов создания компонентов, чтобы писать красивые интерфейсы.\n35\nExtJS освобождает программиста от забот с версткой макета: весь интерфейс создается с помощью языка JavaScript.\nОн прекрасно работает в связке с серверными языками, такими как PHP [4], что было опробовано при практической реализации модуля биллинговой системы.\nПроблема, рассмотренная в статье, на данный момент успешно решена с помощью реализации описанных алгоритмов. Сейчас модуль эффективно функционирует в составе проекта и может быть доработан исходя из пожеланий заказчика.\nБиблиографический список\n1.\tОфициальная документация фреймворка ExtJS v 4.1.3: http://docs.sencha.com/ext-js/4-1.\n2.\tStrickland A. Beginning PHP RIA Using ExtJS. - «aPress», 2012, ISBN 978-1-430-2-3309-1. - 350 c.\n3.\tПауэлл Т Ajax. Настольная книга программиста - М. : Эк-смо, 2009, ISBN 978-5-699-35337-8. - 720 c.\n4.\tОфициальная документация языка PHP: http://php.net.\n36\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-modulya-billingovoy-sistemy-dlya-vizualizatsii-tekstovyh-dannyh/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-modulya-avtomatizirovannoy-sistemy-raschetov-dlya-vizualizatsii-tekstovyh-dannyh",
    "slug": "razrabotka-modulya-avtomatizirovannoy-sistemy-raschetov-dlya-vizualizatsii-tekstovyh-dannyh",
    "title": "Разработка модуля автоматизированной системы расчетов для визуализации текстовых данных",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFРазработка модуля автоматизированной системы расчетов для визуализации текстовых данных\nК.Е. Косоруков,\nДЦис 5-1\nВеб-приложения за последнее время прочно вошли в онлайновый мир, постепенно вытесняя обычные компьютерные программы. В настоящий момент перед программистами насыщенных интернетприложений (RIA - Rich Internet Applications) возникает проблема создания простых, но одновременно многофункциональных веб-интерфейсов, позволяющих пользователю быстро выполнять их с помощью повседневные задачи и таким образом освоиться в системе, получая лишь положительные эмоции. Однако известно, что, чем больше вебприложение приближается к своему родоначальнику, - программе под определенную операционную систему - тем более ресурсоемкий и громоздкий код приходится писать разработчикам для придания интерфейсу стандартного вида, к которому пользователи операционных систем с оконным менеджером привыкали несколько лет, переходя таким же образом из текстового режима в графические оболочки. В свою очередь, это отрицательно сказывается на производительности как конечного решения, так и сотрудников фирмы, создавшей данный продукт. Основываясь на этом заключении, можно сказать, что направлением деятельности команды разработчиков становятся не только прямые обязанности, которыми являются разработка технического задания, стандартов кодирования и написание собственно кода для решения конкретной задачи, но и выбор оптимального средства для минимизации затрат ресурсов. Под последними понимается, например, время выполнения алгоритмов, по которым работает система, оперативная и постоянная память сервера, время проектирования и кодирования разработчиком дополнительной функциональности.\n53\nВ данной статье рассмотрены методы разработки на одном из популярных JavaScript-фреймворков для решения этой проблемы на примере модуля биллинговой системы «Алант», созданной и развивающейся в компании «АВК-Коммьюникейшнз». Модуль позволяет визуализировать текстовые данные, которые накапливаются в базе данных за определенный срок и нуждаются в систематизации.\nExtJS - библиотека, написанная на языке JavaScript, задумывавшаяся изначально как расширение Yahoo UI Library, но со временем превратившаяся в отдельный проект. Имеет двойное лицензирование: есть возможность использовать как GPL v3, так и коммерческую лицензию компании Sencha. Основным ее направлением является создание клиент-серверных веб-приложений, похожих на desktop-приложения.\nФреймворк характеризуется наличием огромного числа компонентов, похожих на стандартные элементы управления систем с графическим оконным интерфейсом. Так, на рис. 1 показано небольшое приложение для отображения текстовых данных в виде столбчатых диаграмм с использованием компонентов «кнопка» (Button), «диаграмма» (Chart) и «окно» (Window).\nПри подключении библиотеки разработчик получает сразу все необходимые инструменты, чтобы быстро соорудить удобный и, что\nРис. 1. Пример приложения, сделанного на фреймворке ExtJS\n54\nважно, независимый от браузера пользовательский интерфейс. Присутствует оболочка для AJAX-коммуникации в виде отдельного компонента, содержащая из возможностей в том числе:\n-\tавтоматическую распаковку и упаковку данных форм в форматы XML и JSON при передаче их на сервер;\n-\tдинамическое обновление хранилищ и коллекций данных во время выполнения сценария;\n-\tподдержку жестов для iOS-устройств;\n-\tшаблон проектирования Model-View-Controller, с помощью которого реализуется подгрузка необходимых программе компонентов (а также параллельно поддерживается определенный порядок разработки, стандарты кодирования), отслеживание хода выполнения программы без ручных операций по установке и разбору заголовков запроса и ответа и многое другое.\nЗа высокую функциональность разработчик платит объемом исходного кода: в последней доступной на сегодняшний день версии (4.2.1) он составляет около 500 килобайт, что заметно сказывается на скорости загрузки страницы.\nКаждый компонент (например, панель с закладками) описывается JavaScript-кодом; в основе каждого компонента лежит термин «конфигурационный объект». Это стандартный объект языка JavaScript, поля которого и их значения соответствуют таковым в документации ExtJS [2]. В листинге 1 приведен фрагмент исходного кода, реализующий компонент «окно»:\nExt.create('Ext.window.Window', {\ntitle: 'Hello',\nheight: 200,\nwidth: 400,\nlayout: 'vbox',\nitems: [{\nxtype: 'grid',\nborder: false,\ncolumns: [{header: 'World'}],\nstore: Ext.create('Ext.data.ArrayStore', {})\n}]\n}).show();\nЛистинг 1. Пример компонента «окно»\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРезультат выполнения вышенаписанного листинга показан\nна рис. 2.\n55\nHello\t0\nWorld\nРис. 2. Результат выполнения листинга 1. Компонент «окно» с содержимым в виде компонента «таблица»\nФункция Ext.createQ из листинга 1 является основой для создания любого компонента с помощью фреймворка ExtJS. Первым параметром в нее передается название типа объекта, который необходимо создать (в данном случае - окно), вторым - конфигурационный объект с параметрами данного компонента. Таким образом, ExtJS реализует парадигму наследования практически эмулируя классы, какие, например, существуют в C++ или в PHP. В листинге 1 создается окно с заголовком «Hello», с высотой в 200 и шириной в 400 пикселей с применением макета типа «vbox» (подробнее о нем можно прочитать в документации фреймворка [2]). В массиве items конфигурационного объекта показан еще один способ инициализации компонента, на сей раз без Ext.createQ, а только лишь самим конфигурационным объектом. Это не всегда удобно по причинам особенностей языка JavaScript, но допустимо, если компонент не будет в дальнейшем изменяться. Свойство xtype в первом элементе массива items задает название компонента через его псевдоним (в данном случае, таблица). При объявлении данного элемента интерфейса необходимо задать хранилище (store) и столбцы (columns), которые будут отображаться в таблице из всех имеющихся в нем данных. Более подробное описание конфигурации элементов можно найти в официальной документации [2].\nПроблема, впоследствии решенная с применением ExtJS, возникла в одном из крупных существующих проектов, работающих на биллинговой информационной системе «Атлант». Существовавший ранее модуль визуализации текстовых данных, получаемых из базы, стал использовать нерационально большие временные ресурсы при очень маленьком задействовании физических ресурсов сервера. В результате более 80% времени при выполнении задачи сервер фактически простаивал, а СУБД (Oracle 11g) оказалась занятой настолько, что клиенты ощу-\n56\nщали значительные задержки при работе с системой. Так как данная функция используется часто, а клиентов даже в ночные часы не становится намного меньше, было решено оптимизировать алгоритмы работы модуля таким образом, чтобы найти компромисс между временем отклика системы и использованием ею серверных ресурсов. Математически данную проблему можно выразить графиком, показанным на рис. 3а.\nРис. 3а. Проблема нерационального использования модулем ресурсов\nсервера\nГрафик p2(t) отражает желаемое течение процесса выполнения задачи, которой заведует модуль системы.\nГрафик p1(t) - фактическое.\nR - максимальная нагрузка на сервер в настоящее время.\nR2 - доля ресурсов сервера, которая будет задействована при выполнении задачи по желаемому сценарию.\nT- время выполнения задачи после оптимизации.\nЗадача оптимизации сводится к нахождению алгоритма работы модуля, который удовлетворял бы следующим требованиям:\n1.\tВремя выполнения задачи Тне превышает рекомендуемое значение Tmax. Оценка верхней границы, Tmax, опирается на результаты исследований средней продолжительности пребывания пользователя на странице в ожидании ответа информационной системы [4].\n2.\tR2 - минимально возможная доля ресурсов сервера, обеспечивающая время T, - такова, что выделение большей, чем R, доли не приводит к уменьшению затрачиваемого времени T, или же выигрыш во времени пренебрежимо мал, т. е. ск/ск ^ 0 при r> R2, где т(г) -функция зависимости времени от ресурсов (рис. 3б).\n57\n!\tI\tВыделенные\n;\t;\tресурсы г, %\nR,\tR,\t100\nРис. 36. Взаимосвязь объема выделенных ресурсов сервера и времени выполнения задачи\nБыло предложено решение, основанное на использовании дочерних процессов модулем, которое схематически изображено на рис. 4.\nРис. 4. Предложенное решение проблемы, представленной на рис. 3а и рис. 3 б\nВ локальной базе данных (SQLite) создается несколько таблиц, в которые сохраняются текстовые данные для визуализации, являющиеся счетами клиентов. Таким образом, обращение к удаленной главной базе (Oracle 11g) происходит всего один раз, что освобождает ее ресурсы на большую часть времени работы модуля в отличие от прошлого решения, когда база опрашивалась с той же целью многократно на протяжении всего процесса. ER-диаграмма локальной базы данных со связями и ключами для всех необходимых сущностей представлена на рис. 5.\n58\nW1\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n(О\nРис. Б. ER-диаграмма базы данных модуля визуализации со связями и ключами\nВведем некоторые понятия.\nКонвертер - процесс, непосредственно осуществляющий формирование документов по счетам.\nАгент - процесс, контролирующий процессы-конвертеры.\nВыгрузка - основной процесс, который распределяет задания по формированию документов из текстовой информации между конкретными агентами.\nОбщая схема работы следующая.\n1.\tНа первом этапе работы модуль предлагает пользователю (в данном случае, администратору системы) создать новое задание. С помощью фильтра (рис. 6) необходимо задать критерии выборки данных для визуализации. После нажатия на кнопку «Найти счета» под фильтром появляется таблица, которая содержит типы визуализируемых документов и найденное по заданным критериям количество записей в главной базе.\n2.\tДалее пользователь, проставив визуализируемые типы документов флажками, имеет возможность сохранить позиции последних, чтобы при создании следующего задания их не приходилось выбирать заново. Либо он нажимает сразу кнопку «Выгрузить N документов» и передает управление программе.\n3.\tПосле нажатия на «Выгрузить N документов» управление передается модулю визуализации. Первое, что он делает, - помещает все записи, которые попадают под критерии сформированного пользовательского фильтра, в отдельную базу данных, управляемую встраиваемой СУБД SQLite.\n4.\tДалее управление передается главному процессу выгрузки. Количество дочерних процессов-агентов, которое было задано администратором системы, создается именно на этом шаге. В базу данных, управляемую SQLite, помещается вся необходимая информация о созданных процессах, а также о самом процессе выгрузки.\n5.\tПроцессы-агенты аналогично создают дочерние процессы, которые называются процессами-конвертерами. Каждый конвертер занимается определенной порцией данных, которую получает из встраиваемой базы данных на SQLite.\n6.\tПроцесс-конвертер определяет, какому типу принадлежит документ, и на основе этого выбирает соответствующий вид конечного документа, после чего формирует файл из данных и помещает его в папку текущего задания. После завершения визуализации процесс, в случае отсутствия ошибок, благополучно завершается. Если происходит ошибка - она обязательно регистрируется в журнале событий.\n7.\tВсе три типа процессов регистрируют по ходу своей работы различные сообщения: информацию о ходе работы, ошибки, предупреждения.\n60\n8.\tПосле завершения каждого процесса родительский процесс (если он есть) отслеживает, не осталось ли в операционной системе «процессов-призраков». Если остались, то они завершаются принудительно, чтобы не расходовать системные ресурсы впустую.\n9.\tПри завершении очередного процесса родительский процесс, если он имеется, определяет, есть ли возможность запустить на место завершившегося новый процесс. Если есть, следует запуск. Это повторяется до тех пор, пока не кончатся все возможные незапущенные дочерние процессы для текущего родительского.\n10.\tПодмодуль завершает свою работу, когда завершается главный процесс задания, выгрузка. Далее следует оповещение пользователя, который может создать новое задание или завершить работу с подмодулем визуализации.\nИнтерфейс модуля написан на ExtJS. Он состоит из нескольких страниц с панелью с вкладками, с помощью которых можно создать новое задание, отследить статус работы отдельных процессов, посмотреть общую информацию по текущему главному процессу задания, а также выполнить поиск записей в журнале, который составляется по мере работы. Пример страницы интерфейса показан на рис. 6.\nРис. 6. Страница интерфейса для создания нового задания\n61\nОсновными элементами данной страницы являются:\n1.\tФильтр поиска клиентов, для которых нужно сформировать документы. Он включает в себя возможность выбора клиентов, у которых определенный юридический статус: физическое или юридическое лицо.\n2.\tТочка выставления - внутренняя системная метка, которой может управлять администратор системы применительно к каждому клиенту. Может быть OFF-NET и ON-NET.\n3.\tДепартаменты - имеется возможность выбора всех клиентов, которые принадлежат какому-либо подразделению или фирме. Управляется аналогично администратором. Департаменты могут быть подчиненными друг другу (один департамент содержит много более мелких депараментов-филиалов), для поиска по ним необходимо проставить соответствующую галочку.\n4.\tОтчетный период - возможность задать временной промежуток, за который необходимо сформировать документы.\n5.\tСумма счета - состояние счета клиента.\nПосле нажатия на кнопку «Найти счета» формируется таблица «Документы», в которой показываются типы документов для визуализации, тип юридического статуса клиента, а также количество самих записей. При нажатии на «Сохранить по умолчанию» выбранные позиции сохраняются в удаленной базе с помощью поля в таблице типов документов. Если же администратор системы нажимает «Выгрузить», то модуль запускает сформированное из выбранных типов документов и отфильтрованных клиентов задание, передавая управление серверной стороне.\nВнутреннее устройство части этой страницы (фильтр клиентов) представлено в листинге 2.\nabh.massexport.task.Filter = Ext.extend(Ext.form.FormPanel, { title: 'Фильтр', height: 230, makeltems: function(){ this.defaults = { width: 200\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n};\nthis.items = [{\nxtype: 'base.form.ComboBox', makeStore: function(){ this.store = new Ext.data.ArrayStore({ fields: ['code', 'name'],\ndata: [[0, 'Все'], [1, 'Физическое лицо'], [2, 'Юридическое\nлицо']]\n})\n},\n62\nvalueField: 'code', displayField: 'name', fieldLabel: 'Юридический статус', value: 0,\n},\n{\nxtype: 'checkboxgroup', fieldLabel: 'Сумма счета', width: 400, name: 'v_summ', items: [{\nboxLabel: 'положительная', name: 'v_possumm', inputValue: 1, checked: true\n}\n]\n}];\n},\ninitComponent: function(){ this.makeltemsQ;\nabh.massexport.task.Filter.superclass.initComponent.apply (this,\narguments);\n}\n});\nExt.reg('abh.massexport.task.Filter',\nabh.massexport.task.Filter);\nЛистинг 2. Фильтр клиентов в интерфейсе создания нового задания\nВ ExtJS инициализация компонента начинается с метода initComponent, который позволяет предварительно выполнить необходимые действия до отображения конечного результата на экране. В нем необходимо вызвать конструктор родительского компонента с помощью метода %componentName%.apply() с массивом arguments [3]. В примере выше, в этой функции объекта типа abh.massexport.task.Filter, унаследованного с помощью метода Ext.extend() от типа Ext.form.FormPanel (форма с полями), вызывается метод makeitemsQ, который создает дополнительные элементы, включенные в панель. В данном случае, это выпадающий список типа base.form.ComboBox, унаследованный от Ext.form.ComboBox точно таким же способом, как сама панель формы, но в отдельном файле, который подгружен во время\n63\nисполнения скрипта из листинга 2. Метод makeStore() создает хранилище, как оно создавалось в листинге 1 для элемента типа «таблица». Свойство displayField позволяет установить поле хранилища, которое будет отображаться на экране в элементе выпадающего списка для каждой записи, а свойство valueField - поле, которое будет приниматься в качестве атрибута значения для каждого пункта списка. Свойство fieldLabel задает метку с пояснением назначения поля около его контейнера, а value - начальное значение, которое уже будет выбрано.\nЕще одним элементом панели формы является группа флажков (checkboxgroup). Через свойство xtype аналогично, как и для остальных компонентов, задается тип отображаемого элемента. Массив items в этой группе содержит элементы, каждый из которых является флажком. В качестве примера в листинге создается флажок с меткой «положительная сумма». На самом деле, в этот массив возможно включить любой другой элемент, но в таком случае нельзя будет предсказать поведение браузера при отображении панели с формой, так как каждый компонент в фреймворке имеет определенную область применения и проектирование нестандартных интерфейсов не приветствуется.\nТаким образом, подводя итоги, об ExtJS можно сказать следующее.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tExtJS освобождает программиста от работ, связанны с версткой макета: весь интерфейс создается с помощью языка JavaScript и является полностью кроссбраузерным.\n2.\tВсе компоненты этого фреймворка написаны по одному принципу. Достаточно освоить несколько базовых приемов создания компонентов, чтобы делать понятные и практичные интерфейсы, не прибегая к помощи дизайнера.\n3.\tОн отлично работает в связке с серверными языками, такими, как PHP [3], что было опробовано при практической реализации модуля автоматизированной системы расчетов.\nПроблема, рассмотренная в статье, на данный момент успешно решена с помощью реализации описанных алгоритмов. Сейчас модуль эффективно функционирует в составе проекта и может быть доработан исходя из пожеланий заказчика.\nБиблиографический список\n1.\tПауэлл Т Ajax. Настольная книга программиста / Т. Пауэлл. - М. : Эксмо, 2009. - 720 c. ISBN 978-5-699-35337-8.\n2.\tОфициальная документация фреймворка ExtJS v 4.2.1: http://docs.sencha.com/ext-js/4-2.\n3.\tОфициальная документация языка PHP: http://php.net.\n4.\tStrickland A. Beginning PHP RIA Using ExtJS. - aPress, 2012. -350 c. ISBN 978-1-430-2-3309-1.\n64\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-modulya-avtomatizirovannoy-sistemy-raschetov-dlya-vizualizatsii-tekstovyh-dannyh/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/programmnyy-modul-dlya-upravleniya-predstavleniem-informatsii-v-sisteme-elektronnogo-obucheniya",
    "slug": "programmnyy-modul-dlya-upravleniya-predstavleniem-informatsii-v-sisteme-elektronnogo-obucheniya",
    "title": "Программный модуль для управления представлением информации в системе электронного обучения",
    "abstract_description": "В статье приводится результат исследования, направленного на выявление влияния размера шрифта представляемой информации на показатели работы с этой информацией. Построена математическая модель зависимости оптимального по критерию максимизации качества работы с информацией размера шрифта от показателей когнитивных процессов испытуемого. Предложен алгоритм работы системы электронного обучения с программным модулем, осуществляющим адаптацию параметров отображения текстовой информации на основе результатов психофизиологического тестирования обучаемого с целью максимизировать качество работы с информацией. Программный модуль реализован на языке",
    "full_text_body": "\n\n\n\n\uFEFFПрограммный модуль для управления представлением информации в системе электронного обучения\nВарнавский Александр Николаевич доцент, к.т.н., доцент кафедры автоматизации информационных и технологических\nпроцессов,\nРязанский государственный радиотехнический университет, ул. Гагарина, 59/1, г. Рязань, 390005, (4912)460343 varnavsky_alex@rambler.ru\nАннотация\nВ статье приводится результат исследования, направленного на выявление влияния размера шрифта представляемой информации на показатели работы с этой информацией. Построена математическая модель зависимости оптимального по критерию максимизации качества работы с информацией размера шрифта от показателей когнитивных процессов испытуемого. Предложен алгоритм работы системы электронного обучения с программным модулем, осуществляющим адаптацию параметров отображения текстовой информации на основе результатов психофизиологического тестирования обучаемого с целью максимизировать качество работы с информацией. Программный модуль реализован на языке JavaScript для системы дистанционного обучения Moodle. The article is the result of research aimed at identifying the impact of the font size of the information provided on the performance of this information. A mathematical model based on the criterion of maximizing the optimum quality of the information the font size on the performance of the test of cognitive processes. The algorithm of the e-learning system work with software module adapts the display parameters of text information on the basis of psycho-physiological testing the student in order to maximize the quality of work with the information is proposed. The software module is implemented in JavaScript for distance learning system Moodle.\nКлючевые слова\nсистема электронного обучения, показатели когнитивных процессов, производительность внимания, качество работы с текстом, оптимальный размер шрифта текста;\ne-learning, indicators of cognitive processes, performance focus, quality of work with text, the optimum size of the text font.\nВведение\nВ настоящее время системы электронного (дистанционного) обучения востребованы как средство поддержки заочной формы и самостоятельной работы студентов очной формы обучения [1]. Повысить эффективность таких систем можно путем использования интеллектуальных, адаптивных технологий [2], позволяющих реализовать персонификацию процесса обучения [3]. Например, в [4, 5] описывается, что учет индивидуальных способностей студента, его знаний и умений способен повысить эффективность учебного процесса. Поэтому актуальной является задача\nразработки методов, технологий и программных средств создания адаптивных систем дистанционного обучения, обеспечивающих персонифицированное обучение.\nИнтеллектуальные системы обучения\nВ результате применения технологий персонификации и адаптации создаются интеллектуальные обучающие системы. Основное назначение интеллектуальных систем обучения заключается в реализации адаптивных обучающих программ, позволяющих учесть текущий уровень знаний и навыков ученика, его динамику и текущую ситуацию обучения [6].\nПри разработке интеллектуальных систем обучения создается динамическая адаптивная обучающая среда, позволяющая осуществить эффективную диагностику ошибок обучаемого и существенно облегчить подготовку учебного материала [6].\nМногие современные отечественные и зарубежные исследователи занимаются развитием и совершенствованием интеллектуальных систем обучения. На сайте Восточно-Европейской Подгруппы Международного Форума \"Образовательные технологии и общество\" http://ifets.ieee.org/russian/ можно ознакомиться с переводом ряда зарубежных работ по этой проблематике [7].\nМожно выделить следующие основные модули интеллектуальных обучающих систем [например, 8, 9]:\n-\tбаза знаний, содержащая все учебные информационные и проверочные материалы;\n-\tмодуль обучения системы, содержащий правила обучения;\n-\tмодуль диагностики, осуществляющий оценку уровня знаний и навыков обучаемого;\n-\tмодуль модели обучаемого, осуществляющий учет индивидуальных особенностей обучаемого;\n-\tмодуль интерфейса, который отвечает за отображение и представление учебной информации в системе, а также осуществляет интерактивное взаимодействие пользователя с системой.\nВ большинстве интеллектуальных обучающих системах для реализации технологий адаптации используется оверлейная модель знаний обучаемого. Для этого создается модель предметной области обучения, представленная в виде сети концептов (понятий) учебной дисциплины. Оверлейная модель конкретного обучаемого заполняется некоторыми значениями, которые являются оценкой уровня знаний того или иного концепта. Анализ набора пар «концепт - значение» позволяет оценить уровень знаний обучаемого как по отдельным темам учебной дисциплины, так и в целом по курсу [9].\nВ работах [9, 10] описываются инструментальные средства проектирования интеллектуальных обучающих систем, использующие оверлейную модель знаний обучаемого. В таких средствах используется модель адаптивного управления процессом обучения серии МОНАП (Модель Обучения Навыкам Алгоритмической Природы). В [11] описано использование Байесовского подхода для идентификации (оценки) навыков/умений в процессе адаптивного управления обучением.\nПостроение адаптивной системы дистанционного обучения и контроля знаний EduPro и оценка эффективности ее использования описано в [8, 12].\nВ работе [13] рассмотрена возможность построения плагинов для популярной системы дистанционного обучения МооШе [14], позволяющих реализовать интеллектуальное управление процессом обучения с адаптивным построением структур учебных курсов. Для построения модели прохождения учебного курса использованы нечеткие сети Петри, а для классификации текущего уровня знаний ученика - нейросетевая модель. В результате происходит управление\nдоступностью тех или иных информационных и контрольных элементов курса. В [15] описан принцип построения оптимального набора учебно-тренировочных задач в зависимости от результатов оценки текущего уровня знаний обучаемого.\nИспользование анализа результатов тестирования для повышения эффективности системы МооШе описано в работе [16].\nРяд авторов указывает на то, что учет текущего психоэмоционального состояния обучаемого в процессе работы с системой электронного обучения способен повысить эффективность данного процесса. Например, в работе [17] предложено учитывать тип личности обучаемого (стрессово-устойчивый, инертный или психоастенический) для корректировки времени выполнения тестовых заданий.\nИз проведенного анализа литературы следует, что большинство работ, посвященных повышению эффективности систем интеллектуального обучения, направлены на улучшение базы знаний, модуля обучения системы, модуля диагностики и модуля модели обучаемого. При этом при построении модуля интерфейса открытыми остаются некоторые вопросы, связанные с влиянием работы данного модуля на процесс восприятия информации. Данный процесс является важным для обучения, поскольку непосредственно влияет на эффективность получения учебной информации, ее запоминание и усвоение.\nРабота направлена на повышение эффективности функционирования модуля визуализации, в качестве объекта управления выбран размер шрифта текста -основной параметр представляемой текстовой информации, а управление отображением осуществляется основе значений показателей когнитивных процессов обучаемого.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЦелью работы является разработка программного модуля (плагина) для системы электронного обучения по оптимизации представления учебной информации в зависимости от текущего состояния обучаемого.\nИспользование разрабатываемого плагина позволит повысить эффективность электронного обучения, в частности сократить время изучения материала без снижения качества восприятия информации.\nПедагогический дизайн текста\nВосприятие изучаемой информации зависит от ее представления [18]. Если говорить о том, как оптимизировать представление учебной информации на экране монитора, то можно выделить подход, называемый педагогическим дизайном [19] и используемый при проектировании учебного курса, его дизайна и интерфейса, создании учебных материалов.\nПедагогический дизайн текста предусматривает общие правила представления учебной информации, заключающиеся в наиболее грамотном и оптимальном расположении учебного материала на экране монитора. Эти правила касаются параметров шрифта, длины и ширины текста, использования заголовков и подзаголовков, списков и иллюстраций. Например, приведем некоторые правила, касающиеся шрифта текста: «Правильный шрифт - шрифт, который легко читается, воспринимается с экрана. Обычно рекомендуют прямой, без засечек, но часто используют различные варианты. Необходимо избегать стилей, которые отвлекают от собственно содержания текста. Для презентаций размер шрифта для заголовков не менее 24 пт, для текста не менее 18пт. Для текста web-страниц не менее 10 пт. Стили шрифтов не смешиваются. Прописные буквы использовать осторожно - т.к. хуже читаются». Использование таких правил способствует повышению эффективности восприятия и запоминания информации.\nОднако данные правила являются статическими и не привязаны к индивидуальным особенностям обучаемых, их психоэмоциональным состояниям и\nусловиям работы, т.е. не являются персонифицированными. В соответствии с этими правилами информация на страницах курса представляется в статическом, не персонифицированном виде и не зависит от того, как пользователи в данный момент воспринимают информацию, т.е. без учета их индивидуальных особенностей и когнитивных процессов.\nРабота направлена на то, чтобы решить существующую проблему статического представления информации в различных условиях и разработать способ и его программную реализацию для автоматической подстройки параметров отображения учебной информации в системе электронного обучения в зависимости от показателей когнитивных процессов обучаемого. При этом в качестве объекта управления выбран размер шрифта изучаемой информации - ключевой параметр пользовательского интерфейса систем электронного обучения.\nВыбор психофизиологических тестов для определения показателей когнитивных процессов\nВосприятие учебного материала и степень его усвоения зависит от значений показателей когнитивных процессов обучаемого. Поэтому в качестве критерия изменения размера шрифта могут быть выбраны текущие значения таких показателей.\nДля исследования влияния размера шрифта представляемой информации на показатели работы с этой информацией и построения математической модели зависимости оптимального размера шрифта от значений показателей когнитивных процессов испытуемого выберем два когнитивных процесса: память и внимание, которые являются основными процессами, обуславливающими восприятие информации и ее запоминание.\nПоказатели внимания и кратковременной памяти могут быть определены по результатам психофизиологического тестирования с использованием, например, корректурной пробы Бурдона-Анфимова [20] и теста на запоминание чисел [21]. Принцип выбора этих тестов - возможность определения необходимых показателей, их реализации и автоматизации проведения в системе электронного обучения.\nКорректурная проба Бурдона-Анфимова - методика, предназначенная для исследования устойчивости и продуктивности внимания, расчета индекса утомляемости, определения умственной работоспособности. Данная методика заключается в предъявлении испытуемому строчек из случайной последовательности букв русского алфавита, которые он должен последовательно просматривать и вычеркивать разными способами две заданные буквы. Результаты пробы оцениваются по количеству пропущенных знаков, по времени выполнения или по количеству просмотренных знаков [20].\nПо результатам корректурной пробы Бурдона-Анфимова определяются основные показатели внимания: уровень концентрации внимания Акв, показатель умственной работоспособности Аур, показатель производительности внимания Апв, качество работы Ак [20]:\nN М - (О + Р)\nА„ = 7 —^ •\t(Ч\nА. = ,\t(2)\nП\nА = N.\t<з,\n, ! О + Р\nА = 1--,\t(4)\nк\tN\nгде N - количество символов в проработанной испытуемым части корректурной пробы; / - время выполнения задания в секундах; М - общее количество зачеркнутых символов; О - количество ошибочно зачеркнутых символов;\n- количество правильно зачеркнутых символов; Р - количество пропущенных символов; п - количество символов, которые необходимо было вычеркнуть в просмотренной части корректурной пробы.\nДанные показатели характеризуют работу с текстовой информацией. Так показатель производительности внимания соответствует числу букв, просматриваемых в единицу времени, показатель умственной работоспособности -числу букв, просматриваемых в единицу времени, с учетом наличия ошибок. Показатель качества работы равен 1 при отсутствии ошибок и уменьшается при их появлении тем больше, чем больше число пропущенных и ошибочно вычеркнутых символов. Уровень концентрации внимания показывает долю верно зачеркнутых букв от общего числа символов, которые нужно было вычеркнуть.\nДля тестирования способностей кратковременной памяти выбран тест на запоминание чисел. Данный тест заключается в предъявлении испытуемому 10 различных двухзначных чисел, которые он должен воспроизвести по памяти после их просмотра в течение 30 секунд [21]. Коэффициент кратковременной памяти Кпам рассчитывается по формуле:\nК =К\t(5)\nпам 10 '\t^ '\nгде К - количество правильно воспроизведенных двухзначных чисел, 10 -число исходных чисел.\nПроведение серии экспериментов\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИсследование влияния размера шрифта представляемой информации на показатели работы с этой информацией и построение математической модели зависимости оптимального размера шрифта от показателей когнитивных процессов испытуемого осуществлялось на основе обработки экспериментальных данных, полученных в результате серии экспериментов.\n1. Метод проведения\na.\tУчастники. Участниками эксперимента являлись 30 студентов 3-5 курсов Рязанского государственного радиотехнического университета. Число лиц мужского пола - 15, женского - 15. Средний возраст участников составил 21,1 ± 0,8 год.\nb.\tМатериалы. Для проведения эксперимента использовались 4 вида бланков Бурдона-Анфимова, отличающиеся только размером шрифта букв - 10 пт., 12 пт., 14 пт., 16 пт. Также использовалась запись 10 двухзначных чисел.\nc.\tПроцедура исследования. Эксперименты проводились в первой половине дня в течение 3-х дней у групп по 8-12 человек. Поскольку ставилась задача построения математической модели зависимости оптимального размера шрифта только от показателей памяти и внимания испытуемого, то внешние условия у всех групп создавались одинаковыми. После проведение инструктажа и объяснения смысла эксперимента испытуемые проходили пробное тестирование на память и внимание. При этом испытуемым сообщили две буквы, которые они должны искать и вычеркивать в тестах на внимание, а также варианты их вычеркивания. Далее предъявлялась запись 10 двухзначных чисел и выполнялся тест на память. Затем раздавались бланки теста Бурдона-Анфимова, размер шрифта которых 10 пт., и\nиспытуемые в течение 5 мин выполняли данный тест. После 3-х минутного отдыха раздавались бланки теста Бурдона-Анфимова, размер шрифта которых 12 пт., и испытуемые также в течение 5 мин выполняли данный тест. Аналогично выполнялись тесты с размером шрифта 14 пт. и 16 пт.\n2. Полученные результаты\nДля каждого испытуемого по результатам выполнения корректурной пробы и теста на запоминание был сформирован набор следующих значений N М, О, Р, п, К.\nОбработка результатов эксперимента и построение математической модели\nПо результатам эксперимента на основе значений N, М, О, S, Р, n, K, полученных для каждого испытуемого, сформирован набор из 30 наблюдений со следующими переменными, рассчитанными по формулам (1)-(5):\nКпам; АквЪ АурЪ АпвЪ ARi при x-10; АКВ2, ^4ур2, ^пв2, Ar2 при x-12; ^4квэ, Аур3, АШ3, AR3 при x-14; Акв4, Аур4, Апв4, AR4 при x-16; где x - размер шрифта в тесте Бурдона-Анфимова.\nВ полученных результатах наблюдался разброс значений. Отметим, что задача направлена на создание модели для прогнозирования оптимального размера шрифта по показателям памяти и внимания. Поэтому значения показателей, полученные, например, после занятий или в вечернее время, когда в большинстве случаев значения показателей когнитивных процессов снижены, также могут использоваться для прогнозирования оптимального размера шрифта.\nОбработка результатов эксперимента осуществлялась в статистическом пакете R [22].\nR - это язык программирования и среда для статистических вычислений и графического анализа. У R есть ряд особенностей, позволяющих выделить ее среди других программ и сред [23].\n1.\tR - это бесплатная программа с открытым кодом, которая поддерживается большим и активным исследовательским сообществом по всему миру.\n2.\tR - это мощная статистическая программа, в которой реализованы все способы анализа данных.\n3.\tR имеет современные графические возможности, позволяя визуализировать сложные данные.\n4.\tR может импортировать данные из самых разнообразных источников.\n5.\tВ R можно реализовать любые нестандартные алгоритмы обработки данных и новые статистические методы.\n6.\tR работает на большинстве операционных системах, включая Windows, Unix и Mac OS X.\nЗа счет данных преимуществ для статистической обработки полученных в результате эксперимента данных и был выбран пакет R.\nНа первом этапе необходимо проверить гипотезу о том, оказывает ли размер шрифта статистически значимый эффект на величины рассматриваемых показателей внимания. Это сделаем с помощью дисперсионного анализа с повторными измерениями.\nПриведем результаты дисперсионного анализа для производительности внимания: F(3, 87) = 5.275, p < 0,01. Таким образом, различия в продуктивности внимания при разных размерах шрифта являются более выраженными, чем различия, обусловленные случайными причинами (р<0,01). Индивидуальные различия между\nиспытуемыми являются не более выраженными, чем различия, обусловленные случайными причинами. Соответственно, размер шрифта оказывает статистически значимое влияние на продуктивность внимания, которое определяет время работы с текстовой информацией.\nМодель зависимости оптимального размера шрифта от показателей когнитивных процессов построим с помощью регрессионного анализа полученных экспериментальных данных. Для этого в качестве критерия оптимизации может быть выбрано условие достижения максимального уровня качества работы, определяющее как объем проработанной информации, так и число ошибок. При этом в качестве зависимой переменной Т будет выступать размер шрифта, при котором была получена максимальная величина качества работы, а в качестве факторов -показатели когнитивных процессов, определяемые при некотором размере шрифта.\nНабор значений Т сформируем следующим образом. Для результатов эксперимента каждого испытуемого среди значений Адь АД2, АК3, АК4 выберем максимальное, и определим размер шрифта, соответствующий данному значению. Этот размер шрифта и будет искомой величиной Т.\nВ результате регрессионного анализа была получена модель Т = ао + *Акв1 + Я2^-Дур1 + а3^-Дпв1 + а4'Аш+ а5'Кпам с описательными статистиками: F(5, 24) = 3.664, р < 0,05, Я2 = 0.4329, Я2Асу = 0.3147.\nТаким образом, получена модель, которая позволяет прогнозировать оптимальный размер шрифта для получения максимального уровня качества работы с текстом по показателям внимания, определенных при размере шрифта текста 10 пт. В случае получения дробных значений размера шрифта, полученных по модели, необходимо провести его округление до ближайшего значения с точностью до 0,5.\nПовысить значения R2 и R2AdJ можно путем включения в модель составляющих, ответственных за попарное взаимодействие факторов. В таком случае может быть получена более полная модель вида:\nТ = а0 + а-Ав! + а2 'Аур1 + а3 А«1 + а4 'АЛ1 + а5 'Кпам +\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n(6)\n+ а6 'Акв1 ' Аур1 + а7 *Аур1 *АЛ1 + а8 'Апе\\ 'АЯ1\nс описательными статистиками: F(8, 21) = 4.703, р < 0,01, Я2 = 0.6418, Я2Асу = 0.5053.\nДля того чтобы определить на сколько значимо различается доля дисперсии, которая объясняется обеими моделями, применим дисперсионный анализ. В результате получено значение Б = 4.0827, р < 0.05. Значит доля дисперсии, которая объясняется полной моделью значимо больше, чем доля дисперсии, объясняемая урезанной моделью.\nАлгоритм работы системы электронного обучения, учитывающий полученные результаты исследования\nПредлагается следующий алгоритм работы системы электронного обучения со встроенным программным модулем, осуществляющим управление размером шрифта представляемой информации в зависимости от показателей когнитивных процессов обучаемого с целью максимизации качества работы с информацией.\n1.\tПосле входа пользователя в систему ему предлагается пройти тест Бурдона-Анфимова с размером шрифта 10 пт, а затем тест на запоминание.\n2.\tПо результатам прохождения данных тестов по формулам (1)-(5) происходит расчет значений показателей АквЬ Аур1, Апв1, Ак, Кпам.\n3.\tИсходя из полученных значений показателей внимания и памяти, по формуле (6) осуществляется расчет оптимального значения размера шрифта Т.\n4.\tВывод текстовой информации осуществляется с размером шрифта равным Т.\n5. Если изучение материала длится длительное время, то предлагается повторно пройти данные тесты с целью получения нового значения Т.\nРазработка программного модуля для системы электронного обучения\nНа основе предложенного алгоритма работы системы электронного обучения можно разработать программный модуль (плагин), осуществляющий управление размером шрифта представляемой информации в зависимости от показателей когнитивных процессов обучаемого с целью максимизации качества работы с информацией.\nПоскольку большинство систем дистанционного обучения (например, Moodle) осуществляют выдачу информации в формате разметки HTML, то программный код модуля может быть написан на прототипно-ориентированном языке программирования JavaScript.\nНа рис. 1 представлен внешний вид реализованного на JavaScript теста Бурдона-Анфимова. а на рис. 2 - тест на запоминание.\nПо букве \"Б\" нажимайте левой кнопкой мыши По букве11Ы\" нажимайте правой кнопкой мыши\nУ Н Ш ГЙ Л Н ПЕГЩР БЖЖЪ ЁЫЯЪВСШЬХМХЮУАНЙЁШДЙРЙШЪЁЩЪ\nЮДНЦЛХЗТЭЭЛЭКЪКЗПНЗПШЁСЩЭВОДЮАНТЯБУГСЩРЭЭЧНЗА\nТРЕХБЙЭЗБПЮЖНАЦШЭХЦЖХЁВВВДФЕДТФЕЕКЖЦЁМТЫУСВЁЪ\nСБХУПХЛЁЪГЪДНЩЛЗТННЕЖУЗЁОМИФПЫЖТПШКЪЬЦЗБЪЯБДЩ\nЗБЩАХЕХЕЙДДЛЩХИТЙЮЦЙЫЭЙДЧДКЯЬЩХЯУЭБЁБЁВИЧЁХЙЖ\nШКЪНЦХИЮПЮВХЁТООЦФЬКЮОФЩЬЧЮЧОЗКЭВЦЯЩЬПРЮТЙХ\nБМКЖПЭЦМВМДРЯОВАХФХИГРЙЙОФЮЯЯДКЭФЦПЗЭЁУРИГЮСВ\nМБВЩЧЧЬЕМЖЖНЮИГОТКЪФЪТУЯОВЪАЕУЮСЁТНБЭКЕЙЖГЙЭ\nЩЩИПЙГЫЬНМЖЗНЩГБЫДЪВРОЫЩШФАЙЕЧЦЕХГЮСЙНПННЫЕ\nЦЦЧЕЙТРШСЙМЯЁЦСДХЦГУЙИЙЧЗЬЩБИКВЁЕШТЁККФПЫННТКУ\nСАЬИЙЮЪРФЫСБКЩНМШРКТРЭИИОЕНЗМПЗЧСРЯПЕПЧЪГЪЕЦЕ\nЗЖЖЮЧГЗЛРЪФ\nЗавершить тестирование\nРис. 1. Вид реализованного на JavaScript теста Бурдона-Анфимова.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 2. Вид реализованного на JavaScript теста на запоминание.\nРабота программного модуля иллюстрируется рис. 3 и 4, где представлены результаты вывода информации для обучаемых, находящихся в разных функциональных состояниях.\nО\t\"Й\" I © Веб | cdo.rsreu.m/mod/book/view.php\nИнтегрированная логистическая поддержка про\nВыход Список пользователей Загрузить пользователей\nОглавление\nПонятое об Интегрированной логистической поддержке (ИЛИ)\nНастройки\nЕЮ\nт Управление книгой\nПечатать всю книгу Печатать только эту главу\nКнига2 \"Основы интегрированной логистической поддержки\"\nПонятие об Интегрированной логистической поддержке (ИЛП\nС общетехнических позиций проблема снижения затрат, связанных с поддержанием изделия в рг\n•\tобеспечение конструкторскими, технологическими и производственными мерами высокой на^\n•\tобеспечение ремонтопригодности и эксплуатационной технологичности изделия;\n•\tрациональная организация снабжения потребителей запасными частями, расходными матери\n•\tрациональная организация процессов технического обслуживания и ремонта (ТОиР) изделия.\nдокументацией;\n•\tорганизация своевременной подготовки и переподготовки персонала для эффективной экспт\nразработчики могут совершенствовать его конструкцию, а также средства и системы эксплуа\nИнтегрированная логистическая поддержка ИЛП (Integrated Logistic Support) - комплекс управпен постпроизводственных стадиях ЖЦ, именуемых во времени иногда «затратами на впадение»\nРис. 3. Представление информации обучаемому шрифтом 12 пт. в соответствие с его функциональным состоянием.\nЭ Ф\" -#fr I © Веб | cdo.rsreu.ry/mod/book/view.php\nИнтегрированная логистическая поддержка про\nВыход Список пользователей Загрузить пользователей\nКнига2 \"Основы интегрированной логистической поддержки\"\nОглавление\nИ нтегри раза н н ой\n(ИЛП)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПонятие об Интегрирование\nНастройки\nЕЮ\nг Управление книгой\n^ Печатать всю книгу Печатать только эту главу\nПонятие об Интегрированной логистической поддержке (ИЛП)\nС общетехнических позиций проблема снижения затрат, связанных с поддержан следующим аспектам:\n4 обеспечение конструкторскими, технологическими и производственными мерам\n•\tобеспечение ремонтопригодности и эксплуатационной технологичности изделия . рациональная организация снабжения потребителей запасными частями, расхс\n•\tрациональная организация процессов технического обслуживания и ремонта ( проведение;\n•\tобеспечение эксплуатационного, обслуживающего и ремонтного персонала а использования технической документацией;\n. организация своевременной подготовки и переподготовки персонала для эффе\n•\tсбор, обработка и анализ данных о фактических показателях надежности, рег\nРис. 4. Представление информации обучаемому шрифтом 14 пт. в соответствие с его функциональным состоянием.\nЗаключение\nНа эффективность электронного обучения влияет множество факторов, в том числе представление учебной информации на экране монитора. Но однозначно определить наиболее удачное и удобное для восприятия представление информации, невозможно, так как даже один и тот же человек в разные моменты времени, находясь в разных психоэмоциональных состояниях, воспринимает информацию неодинаково.\nВ работе проведено исследование влияния размера шрифта представляемой информации на показатели работы с этой информацией. Построена линейная математическая модель зависимости оптимального по критерию максимизации\nкачества работы с информацией от показателей когнитивных процессов испытуемого.\nДальнейшая работа в данном направлении предполагает проведение экспериментов с учетом большего числа факторов (например, цвета, межстрочного интервала, размера области экрана, на которой представлен текст и т.п.). Также интерес представляет формулировка критерия оптимизации представления информации не только на основе максимизации одного параметра работы с информацией, а на основе интегрального критерия.\nКроме того может быть рассмотрен более сложный процесс - понимание, включающий не только восприятие информации, но и ее осмысливание и анализ.\nРассмотренный алгоритм работы системы электронного обучения со встроенным программным модулем, осуществляющим управление размером шрифта представляемой информации в зависимости от показателей когнитивных процессов обучаемого на основе разработанной математической модели, может использоваться в любых системах, где есть возможность динамического изменения значений параметров выводимой информации. Программный модуль реализован на языке JavaScript и может быть встроен в систему дистанционного обучения Moodle, которая осуществляет выдачу информации в формате разметки HTML.\nПомимо систем электронного обучения результат работы может использоваться для оптимизации представления информации в интерактивных электронных технических руководствах, с которыми работают различные специалисты на постпроизводственных этапах жизненного цикла сложных наукоемких изделий.\nЛитература\n1.\tМаматов А. В., Немцев А.Н., Клепикова А.Г., Штифанов А.И. Методика применения дистанционных образовательных технологий преподавателями ВУЗа: учеб. пособие - Белгород: Изд-во БелГУ. - 2006. - 161 с.\n2.\tBrusilovsky P. Adaptive and Intelligent Web-based Educational Systems //International Journal of Artificial Intelligence in Education - 2003. - № 13. - P. 5561.\n3.\tWeber G. Elm-art: An adaptive versatile system for Web-based instruction. //International Journal of Artificial Intelligence in Education - 2001. - № 12. - P. 2328.\n4.\tСолонина А. Г. Концепция персонализированного обучения: моногр. - М.: Прометей - 1997. - 187 с.\n5.\tGonzalez C. M. A. Coaching Web-based collaborative learning based on problem solution differences and participation //International Journal of Artificial Intelligence in Education - 2003. - № 13 (2-4). - P. 121-126.\n6.\tRoger Nkambou Intelligent Tutoring Systems (Guest Editorial) //Educational technology & Society - 2010. - V. 13 -N 1. - С. 1-2. - ISSN 1436-4522.\n7.\tГалеев И.Х. Динамика развития международного электронного журнала «Образовательные технологии и общество» //Международный электронный журнал\t\"Образовательные\tтехнологии\tи\tобщество (EducationalTechnology&Society)\" - 2007. - V.10. - №1. - C.315-328. - ISSN 14364522. URL: http://ifets.ieee.org/russian/periodical/journal.html\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n8.\tФедорук П. И. Использование системы EduPRO для организации процесса адаптивного обучения //УСиМ - 2009. - № 4. - С. 68-73.\n9.\tГалеев И.Х. Проблемы и опыт проектирования ИОС //Международный электронный журнал \"Образовательные технологии и общество\n(EducationalTechnology&Society)\" - 2014. - T.17. - №4. - C.526-542. - ISSN 14364522. URL: http://ifets.ieee.org/russian/periodical/journal.html\n10.\tГалеев И.Х. Развитие адаптивных технологий обучения //Вестник Воронежского государственного университета. Серия: проблемы высшего образования - 2004.\n-\t№2 Июль-Декабрь - С. 76-83.\n11.\tГалеев И.Х. Модель управления процессом обучения в ИОС //Международный электронный журнал \"Образовательные технологии и общество (EducationalTechnology&Society)\" - 2010. - V.13. - №3. - C.285-292. - ISSN 14364522. URL: http ://ifets.ieee.org/russian/periodical/j ournal. html\n12.\tФедорук П. И. Исследование эффективности функционирования адаптивной системы дистанционного обучения EduPro //УСиМ - 2009. - № 6. - С. 42-47.\n13.\tЖивенков А. Н., Иванова О. Г. Формирование плагинов LMS Moodle для адаптивного построения структуры курса электронного обучения. //Научные ведомости. Серия «История. Политология. Экономика. Информатика» - 2010. -№ 19 (90). Выпуск 16/1. - С. 150-156.\n14.\tБелозубов А. В., Николаев Д. Г. Система дистанционного обучения Moodle: учеб.-метод. пособие - СПб. - 2007. - 48 с.\n15.\tЖивенков А.Н. Алгоритм построения оптимального набора учебно-тренировочных задач при создании обучающего портала //Моделирование систем и информационные технологии: межвуз. сб. науч. трудов - Воронеж. -2010. - Вып. 7. - 148-152 с.\n16.\tТолстобров А.П. Возможности анализа и повышения качества тестовых заданий при использовании сетевой системы управления обучения MOODLE //Вестник ВГУ - 2008. - №2 - 100-106 с.\n17.\tОпарина Н.М. Влияние психофизиологических характеристик обучаемых на эффективность их работы при использовании АСО //Педагогическая информатика - 2004. - №2. - С. 81-88.\n18.\tАндреев В.Н. Психологические аспекты представления информации на экране дисплея в автоматизированных обучающих системах: автореферат диссертации на соискание ученой степени кандидата психологических наук - СПб. - 1991.16 c.\n19.\tКурносова С.А. Педагогический дизайн: эксплицирование понятия //Международный журнал экспериментального образования - 2012. - №8. - С. 36-42.\n20.\tБруннер Е.Ю. Лучше, чем супервнимание. Методики диагностики и психокоррекции - Ростов-на-Дону: «Феникс». - 2006. - 316 с.\n21.\tКарелин А. Большая энциклопедия психологических тестов - Изд-во: «Эксмо». -2007. - 416 с.\n22.\tСтатистический анализ данных в системе R. Учебное пособие / А.Г. Буховец, П.В. Москалев, В.П. Богатова, Т.Я. Бирючинская; Под ред. проф. Буховца А.Г. -\n-\tВоронеж: ВГАУ. - 2010. -- 124 с.\n23.\tРоберт И. Кабаков R в действии. Анализ и визуализация данных в программе R / пер. с англ. Полины А. Волковой - М.: ДМК Пресс. - 2014. - 588 с.\n",
    "download_url": "https://cyberleninka.ru/article/n/programmnyy-modul-dlya-upravleniya-predstavleniem-informatsii-v-sisteme-elektronnogo-obucheniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sozdanie-informatsionno-analiticheskoy-sredy-dlya-upravleniya-transportnymi-potokami",
    "slug": "sozdanie-informatsionno-analiticheskoy-sredy-dlya-upravleniya-transportnymi-potokami",
    "title": "СОЗДАНИЕ ИНФОРМАЦИОННО-АНАЛИТИЧЕСКОЙ СРЕДЫ ДЛЯ УПРАВЛЕНИЯ ТРАНСПОРТНЫМИ ПОТОКАМИ",
    "abstract_description": "В работе представлен расчетный алгоритм для проектирования программного продукта, имитирующего дорожно-транспортную систему города. Имитационная мультиагентная модель движения потока автомобилей и расчетный алгоритм программно реализованы в виде интеллектуальной аналитической системы. Разработанный инструментарий компьютерного моделирования потоков в городской транспортной сети используется для оптимизации светофорного регулирования с целью устранения заторов в транспортных сетях.",
    "full_text_body": "\n\n\n\n\uFEFFНаучно-образовательный журнал для студентов и преподавателей «StudNet» №12/2020\nСОЗДАНИЕ ИНФОРМАЦИОННО-АНАЛИТИЧЕСКОЙ СРЕДЫ ДЛЯ УПРАВЛЕНИЯ ТРАНСПОРТНЫМИ ПОТОКАМИ\nCREATING AN INFORMATION AND ANALYTICAL ENVIRONMENT\nTO MANAGE TRAFFIC FLOWS\nУДК 004.942, 519.677\nКасаткина Екатерина Васильевна, к.ф.-м.н., доцент, Ижевский государственный технический университет им. М.Т. Калашникова, e.v.trushkova@gmail .com\nКетова Каролина Вячеславовна, д.ф.-м.н., профессор, Ижевский государственный технический университет им. М.Т. Калашникова, ketova_@mail.ru\nKasatkina E.V., doctor of physics and mathematics, associate professor; Ketova K.V., candidate of physics and mathematics, professor; Kalashnikov Izhevsk State Technical University named after M. T. Kalashnikov\nАннотация. В работе представлен расчетный алгоритм для проектирования программного продукта, имитирующего дорожно-транспортную систему города. Имитационная мультиагентная модель движения потока автомобилей и расчетный алгоритм программно реализованы в виде интеллектуальной аналитической системы. Разработанный инструментарий компьютерного моделирования потоков в городской транспортной сети используется для оптимизации светофорного регулирования с целью устранения заторов в транспортных сетях.\nSummary. The paper presents a computational algorithm for designing a software product that simulates the road transport system of the city. The simulation multi-\n1906\nagent model of the traffic flow of cars and the calculation algorithm are programmatically implemented in the form of an intelligent analytical system. The developed tools for computer modeling of traffic flows in the urban transport network are used to optimize traffic light regulation in order to eliminate congestion in transport networks.\nКлючевые слова: транспортный поток, имитационное моделирование, мультиагентная модель, информационно-аналитическая среда. Keywords: traffic flow, simulation, multi-agent model, information and analytical environment.\nВведение\nВ последние десятилетия в нашей стране количество автомобилей неуклонно растет. По данным, представленным на официальном сайте Госкомстата России в разделе «Транспорт» [1], за период 2000-2018 годы количество автомобилей в расчете на тысячу человек на российских дорогах увеличилось более чем в два раза (см. рис. 1). В 2018 году на тысячу россиян приходилось 293 легковых автомобиля, хотя десять лет назад этот показатель составлял 220 единиц; процент семей, имеющих автомобиль, составляет 51,2 % [1,2].\n300 280\n260\nVb\n| g 240 220 200 180 160 140 120\n5 р^\n¡5 =■ Й\n100\nJr _ jf\n-\n2000 2002 2004 2006 2008 2010 2012 2014 2016 2018\nГод\n1907\nРис. 1- Годовые показатели количества автомобилей в РФ за период 2000-2018 годы в расчете на 1000 человек населения\nВ этой связи актуальной становится проблема загруженности автомобильных дорог и организации городских транспортных потоков [3-5]. Для предупреждения возникновения сложных транспортных проблем на дорогах необходимо совершенствовать методологию и математические методы, применяемые для организации транспортных потоков [6-10].\nТемпы роста автомобилизации населения в разных регионах РФ коррелируют с темпами роста соответствующих социально-экономических показателей в этих регионах. Так, например, рост числа вновь выданных водительских удостоверений, а также количество проданных автомобилей за последние годы привели к увеличению автомобильного парка в Удмуртской Республике (УР), темпы роста которого в значительной степени превышают темпы строительства дорожных сетей. На рис. 2 изображены по имеющейся статистике темпы базисного прироста протяженности дорог, количества транспортных средств, стоящих на учете и количества новых водительских удостоверений по Удмуртской Республике (УР) относительно 2010 года [1].\n1908\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n60%\n50%\n40%\n2011\t2012\t2013\t2014\t2015\nЯ Протяженность дорог\t■ Кол-во ТС, стоящих на учете\nU Кол-во ВУ, выданных впервые\nРис. 2 - Темпы базисного прироста различных показателей инфраструктуры\nУР за период 2000-2018 годы\nВ настоящее время для устранения заторов на дорогах существует ряд способов [11], а именно: внедрение специальных инженерно-технических сооружений, строительство подземных и надземных пешеходных переходов, строительство многоуровневых развязок с полосами для торможения и разгона, уменьшение количества поворотов на дороге, реконструкция и расширение дорог, улучшение дорожного полотна, ввод интеллектуальных и автоматизированных систем управления светофорами.\nРешение задачи устранения заторов на дорогах при помощи светофорного регулирования требует применения математических методов моделирования движения транспортных потоков.\nОсновы математического моделирования закономерностей дорожного движения были заложены еще в 1910-1912 годах русским ученым, профессором Г. Д. Дубелиром в его книгах «Планировка городов» и «Городские улицы и мостовые» [12]. Позже работы по обобщению\n1909\nматематических исследований транспортных потоков и представления их в виде самостоятельного раздела прикладной математики продолжил американский ученый Ф. Хейт, издав в 1966 году труд «Математическая теория транспортных потоков» [13]. Дальнейшие исследования и разработки в этой области нашли отражение в работах многих зарубежных и отечественных ученых [12].\nРезультаты моделирования движения автотранспорта объективны и способствуют нахождению оптимального решения транспортных задач.\nТак, на примере дорожной системы города Екатеринбурга в 2008 году была реализована автоматическая система управления дорожным движением (АСУДД), оценка работы которой показала, что практическая эксплуатация интеллектуальных систем на дорогах позволяет повышать пропускную способность дорог в пределах от 15 % до 50 %, уменьшать аварийность на 20 - 40 % [14].\nВ России ведутся научно-исследовательские работы, направленные на изучение транспортных потоков и на разработку программного обеспечения [15]. Применяются новые подходы в области транспортных потоков, например, используется теория систем массового обслуживания для создания математической модели регулируемого перекрестка [16]. Новый интересный подход моделирования транспортных потоков предложил В. В. Семенов: переполненный поток принимается как начальное состояние дороги, а задача моделирования - перейти от заторного состояния к свободному [17].\nОсновная часть\nВ данной работе исследование потоков в городской транспортной сети будем осуществлять методами компьютерного имитационного моделирования [18]. В рамках создания информационно-аналитической среды для управления транспортными потоками будем использовать один из типов имитационного моделирования - агентное моделирование [19-25], при помощи которого возможен успешный анализ сложных адаптивных систем.\n1910\nПод агентом в агентном моделировании понимается элемент модели, который обладает набором свойств и функций (поведение, память, взаимосвязи), из взаимодействия агентов рождается обобщенное поведение всей системы в целом [24,25]. На сегодняшний день агентное моделирование является одним из передовых методов имитационного моделирования [21].\nУспех компьютерного имитационного моделирования является следствием применения во взаимосвязи методов математического моделирования и современных информационных технологий. Компьютерное имитационное моделирование транспортных потоков будем осуществлять с использованием методологии, частично представленной авторами в работах [26-29], где рассмотрен алгоритм оценки качества функционирования распределенной по территории транспортной системы теплоснабжения и реализованы методы оптимизации ее работы. Эти же подходы можно применить к моделированию и анализу дорожно-транспортной системы городской среды.\nАгентное моделирование позволяет создать информационно -аналитическую среду, с помощью которой возможно конструировать схемы дорожной сети, изменять параметры светофоров и отслеживать в реальном времени влияние этих изменений на пропускную способность на дорогах.\nРассмотрим элементы созданной авторами информационно-аналитической среды с использованием подходов агентного моделирования на примере одного из городов РФ - столицы Удмуртской Республики города Ижевска.\nСитуация на дороге зависит от многих параметров. К ним относятся и время суток, и день недели, и погодные условия. Карта города Ижевска с отображением пробок в часы пик представлена на рисунке 3.\n1911\nДорога свободна (25 кмч)\nСкорость снижена (до 15 км/ч)\nПробки (до К) км/ч)\nСильные пробки (до I КМ/'ч)\nРисунок 3 - Карта Ижевска с отображением пробок\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1912\nДля решения задачи управления транспортными потоками была разработана информационно-аналитическая среда, которая состоит из четырех базовых компонент (рисунок 4).\nРисунок 4 - Структура среды моделирования автотранспортных потоков\nПервый этап решения задачи - анализ входных потоков автомобилей. Под входным потоком подразумевается поток автомобилей, приезжающих кперекрестку по одной из полос. Необходимо установить закон распределения временных интервалов приезда автомобилей кперекрестку. Решение этой задачи позволит моделировать автомобильный поток, максимально приближенный к реальным условиям.\nВторой шаг - построение математической модели движения, перестроения и обгона автомобилей. Здесь необходимо аналитически описать законы, согласно которым происходит движение автомобиля, а также установить правила перестроения и обгона автомобилей.\nТретий шаг заключается в создании имитационной модели (компьютерной программы), которая строится на основе алгоритмов поведения автомобилей (математических формул и логических условий).\nНа четвертом шаге решается задача оптимизации светофорного регулирования на изолированном перекрестке.\nМатематическая модель движения отдельных автомобилей состоит из трех компонентов. Модель движения автомобилей, в которой скорость автомобиля\n1913\nзадается усредненными параметрами на выбранном участке. Модель перестроения и обгона позволяет водителям самостоятельно принимать решение о перестроении в более выгодную полосу движения. Модель реализована с помощью логических выражений. Генератор входного потока автомобилей формирует временные интервалы между созданием автомобилей случайным образом по показательному распределению.\nВ основе модели движения лежит граф, в котором дороги представляются ребрами, а перекрестки и изгибы дорог - вершинами графа. На каждом участке дороги задается средняя скорость движения автомобилей [V0]= м/с. На рисунке 5 представлена схема движения автомобиля по прямой на двумерной\nплоскости из точки А (x1 , y1) в точку B (x2, y2). -►\n(Wl)\nIV\n(ЗД2)\nРисунок 5 - Схема движения автомобиля по прямой на двумерной плоскости\nРасстояние S, которое проходит автомобиль, можно найти по формуле:\nS = V(x 1 - Х2 )2 +(У1 - У2 )2 ,\t(1)\nИнтенсивность движения автомобиля по осям с постоянной скоростью V0 = (V0 x ,V0 y) определим по формуле:\nVox = Vo cos a, Voy = Vo sin a.\t(2)\nКаждый автомобиль при необходимости может менять полосу движения, при этом проверяется возможность безопасного перестроения (рисунок 6).\n1914\n0(0\t\t)\nГРГ>——\t-гол\n1Р1\tг\t■ч\nШ\n1(0)1\nЮ1\tюи\nРисунок 6 - Перестроение автомобиля в правый ряд Как только расстояние 5 до впереди едущего автомобиля становится меньше допустимого, а также в процессе движения по участку дороги, предпринимается попытка сменить ряд. Сначала проверяется, можно ли перестроиться в левый ряд. Если нельзя, то проверяется возможность перестроиться в правый ряд. Исследованиями ускорения и торможения в макроскопической модели можно пренебречь и считать скорость автомобилей постоянной. Параметр\tзадает дистанцию безопасности, которая\nпроверяется перед перестроением автомобиля.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРеальный поток автомобилей имеет распределение, близкое к показательному распределению. Поэтому в имитационной модели временные интервалы между созданием автомобилей генерируются случайным образом по показательному распределению.\nДля моделирования случайного временного интервала - экспоненциально распределенной случайной величины воспользуемся методом обратной функции [30], также известным как метод инверсии.\nЧтобы найти возможное значение xi непрерывной случайной величины X, зная ее функцию распределения F(х), надо выбрать случайное число г,\n1915\nприравнять его функции распределения и решить относительно х{ полученное уравнение, то есть найти функцию, обратную к функции распределения [30]:\nР (х ) = Г\t(3)\nПрименим данный метод для генерации случайной величины по показательному закону. Функция показательного распределения:\n[0, х < 0;\nР (х Н » •\t(4)\n[1 - , х > 0\nРассмотрим случай х > 0 и применим случайное число т1 к функции показательного распределения Р (х{) = т{, получим:\nГ = 1 - е -Ях •\t(5)\nРешим уравнение (5) относительно х{:\nЛ,. = у ln(l - r).\t(6)\nСлучайное число ri заключено в интервале (0, l), следовательно, число (l - r) также является случайным и принадлежит интервалу (0, l). Иначе говоря, величины R и (l - R) распределены одинаково. Поэтому для отыскания значений х, можно воспользоваться более простой формулой:\n-1\nх = уln r,\t(7)\nгде r, - случайная величина, равномерно распределенная на отрезке (0, l); х{ -случайная величина, имеющая показательное распределение с параметром X.\nТаким образом, с использованием формулы (7) моделируется выборочная совокупность, составленная из временных интервалов между созданием автомобилей и имеющая показательное распределение.\nВ программе значение параметра r, генерируется с помощью встроенного датчика случайных чисел - функции Random, которая \"возвращает\"\n1916\nнепрерывную случайную величину, равномерно распределенную на отрезке (0,1).\nC помощью параметра [ X ]=авт./ч задается интенсивность входного потока автомобилей, приезжающих к перекрестку по одному из направлений. (рисунок 7).\n_I I I\nI Г\nна перекрестке\nПростейшим (пуассоновским) называют поток событий, который обладает свойствами стационарности, отсутствия последствий и ординарности [31]. В городских условиях при плотных транспортных потоках и влиянии регулируемых пересечений транспортный поток может распределяться по закону, отличному от пуассоновского [32]. Например, рекомендуется описывать распределение скоростей движения и интервалов между автомобилями в потоках в городах синтенсивностью более 600 авт./ч на полосу нормальным распределением случайной величины [33].\nВ ходе выполнения работы были выполнены исследования, цель которых -проверить, является ли входной поток автомобилей на улично-дорожной сети простейшим потоком.\nДля выполнения поставленной задачи были изучены транспортные потоки на двух перекрестках Ижевска [34,35]. Объектом исследования являлся временной интервал между подъезжающими кперекрестку автомобилями. Подготовка и обработка исходных данных для математического\nЛ\tо о о о |\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nГ|\nРисунок 7 - Входной поток автомобилей\n1917\nмоделирования автомобильных транспортных систем была осуществлена с применением методов математической статистики [36].\nВ модели учитываются сигналы светофора по отдельным направлениям движения. Подъезжая к перекрестку, движение регулируется светофором в каждом направлении, это позволяет создать более реалистичную имитацию на тех перекрестках, где светофорное регулирование разделено по секциям. При переезде через перекресток автомобиль выбирает направление движения. Выбор обуславливается полосой движения, а также вероятностными характеристиками р^, которые задаются для каждой полосы в текущем\nнаправлении движения. Также задаются индексы дороги, на которую будет совершен маневр. Возможные маневры автомобилей при переезде через перекресток продемонстрированы на рисунке 8.\nРисунок 8 - Маневры автомобилей на перекрестке\nВ настоящее время существует готовые программы по визуализации имитационных моделей транспортных потоков, но не всегда их можно подстроить под разработанную модель. Для визуализации подобной модели\n1918\nможно использовать растровую или векторную графику. Поддержка взаимодействия с обоими типами график реализована на языке JavaScript [37,38]. Данный язык используется как встраиваемый язык для программного доступа к объектам приложения, а также веб-сайтов для придания интерактивности. Сравнив целевое применение, а также возможности и особенности, была выбрана растровая графика в рамках решения задачи по созданию программного комплекса для имитационного моделирования.\nОбщий принцип моделирования: на карте выполняется построение дорог с определенным количеством полос, учитывается длина и ширина проезжей части. На перекрестках устанавливаются светофоры. В определенных местах на карте устанавливаются генераторы - источники автомобильного потока, которые имитируют места рождения транспортного потока\nАвтомобили движутся с постоянной скоростью. Через равные промежутки времени каждое автотранспортное средство перемещается в заданном направлении, если его движению не препятствует другой автомобиль или стоп-линия. В модели учитываются сигналы светофора по отдельным направлениям движения. Подъезжая к перекрестку, движение регулируется светофором в каждом направлении, это позволяет создать более реалистичную имитацию на тех перекрестках, где светофорное регулирование разделено по секциям.\nЗаключение\nРазработан расчетный алгоритм для проектирования программного продукта, имитирующего транспортную систему, с учетом движения автомобилей по полосам и их поведения на перекрестках.\nИмитационная мультиагентная модель и расчетный алгоритм программно реализованы в виде интеллектуальной аналитической системы, которая включает также базу данных, спроектированную в среде СУБД MS SQL, и модуль визуализации.\n1919\nРазработанный инструментарий компьютерного моделирования потоков в\nгородской транспортной сети планируется использовать для оптимизации\nсветофорного регулирования с целью устранения заторов в транспортных\nсетях.\nСписок использованных источников\n1.\tИнформационный сайт Госкомстата России. Транспорт. URL: https://rosstatgov.ru/folder/23455?prmt=1 (дата обращения 23.12.2020).\n2.\tКнязева И.С. Статистическое изучение процесса автомобилизации населения РФ // Международный научный журнал «Символ науки». 2017. № 04-1. С. 109-111.\n3.\tКузьмич С.И., Федина Т.О. Транспортные проблемы современных городов и моделирование загрузки улично-дорожной сети // Известия Тульского государственного университета. Технические науки. 2008. № 3. С. 159-166.\n4.\tКасаткина Е.В. Статистическое исследование дорожно-транспортной обстановки в Удмуртской Республике // Вестник ИжГТУ имени М.Т. Калашникова. 2017. Т. 20. № 1. С. 53-59.\n5.\tАнохин Б.Б., Чванов В.В. Основные тенденции автомобилизации населения и их учет в программах развития автомобильных дорог // Транспорт Российской Федерации. 2007. № 9. С. 42-46.\n6.\tРумянцев Е. А., Драгунов А. Ф. Необходимость разработки оценок уровня организации дорожного движения // Современные технологии. Системный анализ. Моделирование / Изд-во: Иркутский государственный университет путей сообщения. 2012. № 2 (34). С. 227229.\n7.\tАгуреев И.Е., Пышный В.А., Швецов В.И. Моделирование загрузки улично-дорожной сети г. Тулы // Известия ТулГУ. Технические науки. 2013. Вып. 6. Ч. 2. С. 127-139. DOI 10.21685/2307-4205-2017-3-15\n8.\tВласов А.А. Теория транспортных потоков: монография / А.А. Власов.\n1920\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПенза: ПГУАС. 2014. 124 с.\n9.\tЕлинек Й., Высока Я. О подходах в моделировании транспортной динамики // Вестник АГТУ. Серия: Управление, вычислительная техника и информатика. 2014. № 1. С. 121-129.\n10.\tАхмадинуров М.М, Завалищин Д.С, Тимофеева Г.А. Математические модели управления транспортными потоками // Монография. Екатеринбург: Изд-во УрГУПС. 2011. 120 с.\n11.\tАндреев К.П., Кулик С.Н., Терентьев В.В. Мероприятия по улучшению улично-дорожной сети // Новая наука: Проблемы и перспективы. 2016. №2 115-2. С. 156-159.\n12.\tКлинковштейнГ. И., Афанасьев М. Б. Организация дорожного движения: учеб. для вузов. 5-е изд. // М.: Транспорт. 2001. 247 с.\n13.\tХейт Ф. Математическая теория транспортных потоков // М.: Мир. 1966. 248 с.\n14.\tКоновалов А. АСУДД идет // Эксперт-Урал. № 15. 2008. С. 20-22.\n15.\tБекмагамбетов М.М., Кочетков А.В. Анализ современных программных средств транспортного моделирования // Журнал автомобильных инженеров. 2012. № 6 (77). С. 25-34.\n16.\tТимофеева Г. А., Завалищин Д. С. Математическая модель регулируемого перекрестка // Транспорт Урала. 2008. № 2 (17). C. 92-97.\n17.\tСеменов В. В. Математическое моделирование транспортных потоков мегаполиса // Препринты института прикладной математики им. М. В. Келдыша РАН, М. 2004. № 34. С. 1-38.\n18.\tСтрогалев В.П., Толкачева И.О. Имитационное моделирование. // М.: МГТУ им. Н.Э. Баумана, 2008. 280 с.\n19.\tОстроух А.В., Николаев А.Б Интеллектуальные системы в науке и производстве // Saarbrucken, Germany: Palmarium Academic Publishing, 2012. 312 p. DOI: 978-3-659-98006-0.\n20.\tMacal C., North M. Tutorial on Agent-Based Modelling and Simulation //\n1921\nJournal of Simulation. 2010. Vol. 4. P. 151-162.\n21.\tЛебедюк Э.А. Агентное моделирование: состояние и перспективы // Вестник Российского экономического университета имени Г.В. Плеханова. 2017. № 6 (96). С. 155-162.\n22.\tМелихова О.А., Вепринцева О.В., Чумичев В.С. и др. Понятие агента в системах искусственного интеллекта // Технические науки - от теории к практике. 2015. № 53. С. 44-51.\n23.\tGalan J. Errors and Artefacts in Agent-Based Modelling // Journal of Artificial Societies and Social Simulation. 2008. Vol. 12. № 1.\n24.\tТарасов В.Б. Агенты, многоагентные системы, виртуальные сообщества: стратегическое направление в информатике и искусственном интеллекте // Новости искусственного интеллекта. 1998. № 2. С. 5-63.\n25.\tИвашкин Ю.А. Мультиагентное имитационное моделирование больших систем: учеб. пособие / Ю. А. Ивашкин. М.: МГУПБ. 2008. 230 с.\n26.\tРусяк И.Г., Преснухин В.К., Кетова К.В., Королев С.А., Трушкова Е.В. Разработка концепции топливообеспечения распределенной региональной системы теплоснабжения местными возобновляемыми видами топлива // Энергобезопасность и энергосбережение. 2010. № 5. С. 14-20.\n27.\tКетова К.В., Трушкова Е.В., Кривенков Р.Ю. Применение кластерного анализа для решения задачи оптимального распределения топливно-энергетических ресурсов // Интеллектуальные системы в производстве. 2010. № 2 (16). С. 207-213.\n28.\tКетова К.В., Трушкова Е.В. Решение логистической задачи топливоснабжения распределенной региональной системы теплоснабжения // Компьютерные исследования и моделирование. 2012. Т. 4. № 2. С. 451-470.\n29.\tРусяк И.Г., Кетова К.В., Королев С.А., Трушкова Е.В. Логистика топливоснабжения региона возобновляемыми видами топлива,\n1922\nполучаемыми из древесного сырья. На примере Удмуртской Республики / Министерство образования и науки Российской Федерации, Федеральное государственное бюджетное образовательное учреждение высшего профессионального образования «Ижевский государственный технический университет». Ижевск, 2011.\n30.\tГмурман В.Е. Теория вероятностей и математическая статистика // Учеб. пособие для вузов. М.: Высшая школа. 2003. 479 с.\n31.\tВентцельЕ. С., Овчаров Л.А. Прикладные задачи теории вероятностей. М.: Радио и связь. 1972. 416 с.\n32.\tМартяхин Д.С. Расчет пропускной способности городских транспортных развязок // Сб. научн. тр. 8-й Международн. научн.-техн. конф. по безопасности дорожного движения. СПб: Изд-во СПбГАСУ. 2008. С. 234238.\n33.\tДрю Д. Теория транспортных потоков и управление ими. // М.: Транспорт. 1972. 424 с.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n34.\tКасаткина Е.В. Моделирование транспортных потоков на примере дорожной системы одного из районов города Ижевска // E-Scio. 2020. № 10 (49). С. 86-93.\n35.\tКасаткина Е.В. Разработка и тестирование генетического алгоритма для решения задачи маршрутизации // Прикладная информатика. 2018. Т. 13. № 5 (77). С. 32-43.\n36.\tАгуреев И.Е., Митюгин В.А., Пышный В.А. Подготовка и обработка исходных данных для математического моделирования автомобильных транспортных систем // Известия ТулГУ. Технические науки. 2014. Вып. 6. С. 119-127.\n37.\tФлэнаган Д. JavaScript // Изд-во Вильямс. 2019. 320 с.\n38.\tБраун Э. Learning JavaScript: JavaScript Essentials for Modern Application Development // Изд-во Альфа-книга. 2017. 368 с.\n1923\nList of sources used\n1.\tInformation site of the state statistics Committee of Russia. Transport. URL: https://rosstat.gov.ru/folder/23455?print=1 (date accessed 23.12.2020).\n2.\tKnyazeva I. S. Statistical study of the process of motorization of the population of the Russian Federation // International scientific journal «Symbol of science». 2017. № 04-1. Pp. 109-111.\n3.\tKuzmich S. I., Fedina T. O. Transport problems of modern cities and modeling of loading of the road network // Proceedings of the Tula state University. Technical Sciences. 2008. № 3. Pp. 159-166.\n4.\tKasatkina E. V. statisticheskoe Issledovanie dorozhno-transportnoy situatsii V Udmurt Republic // Vestnik IzhGTU named after M. T. Kalashnikov. 2017. T. 20. № 1. Pp. 53-59.\n5.\tAnokhin B. B., Chvanov V. V. The Main trends of motorization of the population and their account in the programs of development of highways. // Transport of the Russian Federation. 2007. № 9. Pp. 42-46.\n6.\tRumyantsev E. A., Dragunov A. F. the Need to develop estimates of the level of road traffic organization // Modern technologies. System analysis. Modeling / Publishing house: Irkutsk state University of railway engineering. 2012. № 2 (34). Pp. 227-229.\n7.\tAgureev I. E., Pyshny V. A., Shvetsov V. I. Modeling of loading of the street and road network of Tula // News Of Tulsu. Technical sciences. 2013. Issue 6. Part. 2. Pp. 127-139. DOI 10.21685/2307-4205-2017-3-15\n8.\tVlasov A. A. Theory of transport flows: monograph / A. A. Vlasov. Penza: PGAS/ 2014. 124 p. 2014. 124 p.\n9.\tJelinek J., High Ya. On approaches to the modeling of traffic dynamics // Bulletin of AGTU. Series: Management, computer engineering and computer science. 2014. № 1. Pp. 121-129.\n10.\tAkhmadinurov M. M., Zavalishchin D. S., Timofeeva G. A. Mathematical models of traffic flow control. Ekaterinburg: publishing house of USURT.\n1924\n2011. 120 p.\n11.\tAndreev K. P., Kulik S. N., Terentyev V. V. Measures to improve the street and road network / / Novaya Nauka: Problemy I perspektivy. 2016. № 115-2. Pp. 156-159.\n12.\tKlinkovshtein G. I., Afanasyev M. B. Organization of road traffic: textbook. for higher education institutions. 5th ed. / / Moscow: Transport. 2001. 247 p.\n13.\tHaight F. Mathematical theory of transport flows / / Moscow: Mir. 1966. 248 p.\n14.\tKonovalov A. of ATMs is // Expert-Ural. № 15. 2008. Pp. 20-22.\n15.\tBekmagambetov M. M., Kochetkov A.V. Analysis of modern software tools for transport modeling / / Journal of automotive engineers. 2012. №2 6 (77). Pp. 25-34.\n16.\tTimofeeva G.A., Zavalishchin D.S. Mathematical model of a regulated intersection // Transport Of The Urals. 2008. № 2 (17). Pp. 92-97.\n17.\tSemenov V.V. Mathematical modeling of transport flows of megapolis / / preprints of the Keldysh Institute of applied mathematics of the Russian Academy of Sciences, Moscow. 2004. № 34. Pp. 1-38.\n18.\tStrogalev V. P., Tolkacheva I. O. Simulation modeling. // Moscow: Bauman Moscow state technical University. 2008. 280 p.\n19.\tOstroukh A.V., Nikolaev A. B. Intellectual systems in science and production // Saarbrucken, Germany: Palmarium Academic Publishing, 2012. 312 p. DOI: 978-3-659-98006-0.\n20.\tMacal C., North M. Tutorial on Agent-Based Modelling and Simulation // Journal of Simulation. 2010. Vol. 4. Pp. 151-162.\n21.\tLebedyuk E. A. Agent modeling: state and prospects // Bulletin of the Plekhanov Russian University of Economics. 2017. № 6 (96). Pp. 155-162.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n22.\tMelikhova O. A., Veprintseva O. V., Chumichev V. S. et al. The concept of an agent in artificial intelligence systems // Technical Sciences - from theory to practice. 2015. № 53. Pp. 44-51.\n1925\n23.\tGalan J. Errors and Artefacts in Agent-Based Modelling // Journal of Artificial Societies and Social Simulation. 2008. Vol. 12. № 1.\n24.\tTarasov V. B. Agents, multi-agent systems, virtual communities: strategic direction in Informatics and artificial intelligence / / News of artificial intelligence. 1998. № 2. Pp. 5-63.\n25.\tIvashkin Yu. a. multi-Agent simulation of large systems: textbook. a manual / Y. A. Ivashkin. M.: MGUPB. 2008. 230 p.\n26.\tRusyak I.G., Presnukhin V.K., Ketova K.V., Korolev S.A., Trushkova E.V. Development of the concept of fuel supply for a distributed regional heat supply system with local renewable fuels // Energy security and energy saving. 2010. № 5. Pp. 14-20.\n27.\tKetova K.V., Trushkova E.V., Krivenkov R.Yu. Application of cluster analysis for solving the problem of optimal distribution of fuel and energy resources // Intelligent systems in production. 2010. № 2 (16). Pp. 207-213.\n28.\tKetova K. V., Trushkova E. V. Solution of the logistic problem of fuel supply for a distributed regional heat supply system. 2012. Vol. 4. № 2. Pp. 451-470.\n29.\tRusyak I.G., Ketova K.V., Korolev S.A., Trushkova E.V. logistics of fuel supply to the region with renewable fuels obtained from wood raw materials. On the example of the Udmurt Republic / Ministry of education and science of the Russian Federation, Federal state budgetary educational institution of higher professional education «Izhevsk state technical University». Izhevsk, 2011.\n30.\tGmurman V. E. Probability theory and mathematical statistics // Textbook for universities. Moscow: Higher school. 2003. 479 p.\n31.\tWentzel E.S., Ovcharov L.A. Applied problems of probability theory. 1972. 416 p.\n32.\tMartyakhin D. S. Calculation of the capacity of urban transport interchanges / / SB. nauchn. Tr. 8-y mezhdunarodn. nauchn. tehn. Conf. on road safety. St. Petersburg: Spbgasu publishing House. 2008. Pp. 234-238.\n1926\n33.\tDrew D. The Theory of traffic flows and management. // M.: Transport. 1972. 424 p.\n34.\tKasatkina E.V. Modeling of transport flows on the example of the road system of one of the districts of the city of Izhevsk / / E-Scio. 2020. № 10 (49). Pp. 8693.\n35.\tKasatkina E.V. Development and testing of a genetic algorithm for solving the routing problem // Applied Computer Science. 2018. Vol. 13. №2 5 (77). Pp. 3243.\n36.\tAgureev I. E., Mityugin V. A., Pyshny V. A. Preparation and processing of initial data for mathematical modeling of automobile transport systems // News Of TulSU. Technical sciences. 2014. Issue 6. Pp. 119-127.\n37.\tFlanagan D. JavaScript // Williams publishing house. 2019. 320 p.\n38.\tBrown E. Learning JavaScript: JavaScript Essentials for Modern Application Development // Alpha-book publishing house. 2017. 368 p.\n1927\n",
    "download_url": "https://cyberleninka.ru/article/n/sozdanie-informatsionno-analiticheskoy-sredy-dlya-upravleniya-transportnymi-potokami/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sravnitelnyy-analiz-tehnologiy-sozdaniya-web-saytov",
    "slug": "sravnitelnyy-analiz-tehnologiy-sozdaniya-web-saytov",
    "title": "Сравнительный анализ технологий создания Web-сайтов",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFсвыше 5 лет в одной должности работают 17% работников, свыше 10 лет и выше - 18%.\nКоллектив характеризуется своеобразными факторами удовлетворенности производственной деятельностью:\nРанжирование факторов выглядит следующим образом: Общение - 44%\nХороший коллектив - 60% Хороший руководитель - 50%, Данные подтверждают результаты опросов по оценочным листам: приоритетными мотиваторами являются не направленность на производительный и эффективный труд, а общение, личностный фактор, досуговый подход к восприятию своего труда.\nВ то же время отношение к работе более сдержанное и менее романтичное:\nДля подавляющего большинства работников труд это не источник самореализации, а необ-\nходимость (40%) или средство обеспечения жизни (51%).\nНе имея должностных инструкций во многих отделах и службах, или весьма поверхностно зная их содержание, подавляющее большинство (60%) отметило соответствие своей работы предписаниям должностных инструкций. И только 2,5% отметило их несоответствие.\nСредний балл уровня удовлетворенности трудом в целом составляет 3,5 балла по 5-балльной шкале.\nСредняя оценка личностных и деловых качеств первых руководителей в диапазоне от 4 до 4,3 баллов по 5-ти балльной шкале.\nРезультаты документального анализа верифицировались при аттестационном собеседовании, целью которого было не только оценить деятельность работника, но и озвучить рекомендации аттестационной комиссии на год,\nсоздавая механизм \"управления по целям\".\nРоль первого этапа наиболее значима, так как он главным образом, определял качественные параметры новой организационной структуры, определил основные задачи кадровой политики и стратегии, основные направления совершенствования системы мотивации управленческого труда.\nПоследующие этапы- представляют собой комплекс организационных мер, которые должны будут осуществляться планомерно и последовательно, на основе анализа результатов внедрения нововведений. Но уже начало преобразований внушает определенный оптимизм, так как уже сейчас наблюдается активизация управленческой мысли, формируется творческий климат, появляются новые мотивационные рычаги для соотнесения понятий заработная и заработанная плата.\nКОРОТКО ОБ АВТОРАХ -----------------------------------------------------------------------------------------\nИгнатская Л.Я. - старший преподаватель Воркутинского горного института Филиала Санкт-Петербургского горного института им. Г.В. Плеханова (технического университета).\nВерчук О.В. - член Совета директоров ОАО \"Шахта Воргашорская\".\nСмирнов А.В. - директор ОАО \"Шахта Воргашорская\".\n© Е.И. Петровичев, 2003\nYAK 622.338\nЕ.И. Петровичев\nСРАВНИТЕЛЬНЫЙ АНАЛИЗ ТЕХНОЛОГИЙ СОЗААНИЯ WEB-САЙТОВ\nШашоящее время задачи создания В^^Ъбслуживания\tсобственного\nШвБ-сайта являются насущными и для персональных пользователей INTERNET, и, тем более, для фирм и организаций. Если дело ограничивается несколькими ШЕБ-страничками, носящими чисто рекламный характер, то вопрос выбора инструментария для их создания не актуален - это вопрос профессионального дизайнера, которому заказана разработка сайта, либо личных пристрастий начинающего ШЕБ-дизайнера.\nЕсли же корпоративный сайт достаточно сложен, непрерывно развивается и совершенствуется, наполняется количественно и качественно новым содержанием, то вопрос выбора инструментария для его пополнения и поддержки чрезвычайно важен. Уход от этой проблемы передачей поддержки сайта коммерческой профессиональной организации не всегда целесообразен, особенно в случае функционирования сайта в рамках INTRANET - частной корпоративной сети предприятия. Здесь воз-\nникают проблемы в решении задач оперативности, защиты конфиденциальной информации, учета специфики корпоративной информации, создания интерактивных мультимедийных систем обучения персонала в предметной области и т.д. Как обычно, все проблемы могут быть сняты при наличии в штате сотрудников обслуживания корпоративной сети программиста достаточного уровня квалификации в области WEB-программирования (DHTML, XML, JAVA, PERL...), однако, это - рискованная стратегия. Практика показывает, что обычно при прекращении полномочий такого сотрудника систему придется переписывать заново. Таким образом, проблема вновь сводится к выбору некоторой стандартной, общепринятой визуальной технологии WEB-дизайна, обеспечивающей преемственность решений.\nУчитывая повсеместное распространение операционных систем фирмы Microsoft (Windows всех поколений) и тот факт, что фирма включила в состав системы свой продукт Front Page, представляется естественным обращение многих WEB- дизайнеров к этому программному продукту -авторизированной среде визуального программирования, тем более, что в технологии Microsoft имеются собственные средства организации и поддержки информационного сервера и публикации сайтов. В среде дизайнеров существует довольно распространенное мнение, что «визуальный редактор и профессиональный дизайнер -вещи несовместимые, причем доказывать это пользователям Front Page бесполезно: понимание вреда визуальных редакторов приходит с опытом». При этом не отрицается, что визуальные редакторы - естественный инструментарий штатного вебмастера фирмы для поддержки корпоративного сайта. Это мнение имеет реальное основание: через несколько месяцев работы с проектом FrontPage не поможет разобраться с обновлениями сайта; кроме того, известна ограниченная совместимость HTML -кода, сгенерированного Front Page и написанного вручную.\nFront Page - очень удобная в работе, чисто визуальная среда проектирования сайта (в принципе, можно не иметь никакого представления об HTML-программировании). Интерфейс и инструментарий - привычные, и процесс освоения технологии создания простых страничек легок и быстр. Внедрение дополнительных объектов на WEB- страницы несложен и естественен в среде «родной» операционной системы и ее СОМ-технологии. Нет проблем в интерпретации созданного кода браузером Internet Explorer. Однако следует учитывать, что Front Page не ориентирован на создание и, тем более, редактирование в авторизированной среде сложных мультимедийных и интерактивных страниц (да еще и с компонентами виртуальных технологий). Подразумевается владение дизайнером навыками работы с графическими и аудио редакторами, анимационными пакетами, системами видеомонтажа и т.д. и т.п. Часто выбор соответствующих пакетов бывает дос-\nтаточно случайным, без учета согласованности финальной продукции и потерь времени в освоении многочисленных непривычных разнотипных пользовательских сред.\nДальнейший анализ будет проводиться с точки зрения эффективности поддержки и обслуживания достаточно сложных и развивающихся корпоративных сайтов. В связи с этим, не отрицается польза или необходимость владения дизайнером (администратором) рядом языков WEB программирования. Однако ключевым вопросом, все-таки, является ориентация на использование какой-либо базовой, интегрированной WEB-технологии. С этой точки зрения заслуживают внимание две наиболее распространенных и тщательно продуманных технологии:\tMacro-\nmedia и Adobe. Эти технологии не ориентированы исключительно на WEB, но имеют в своем составе полнофункциональные интегрированные комплексы для WEB-дизайна. Исходя из задач WEB-дизайна, головной программой технологии является DreamWeaver\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tвизуальная среда создания WEB-сайтов и WEB-приложений. Инструментарий чрезвычайно широк, продуман и прост в использовании. Эффективность разработки поддерживается наличием в составе системы сервера ColdFusion. При использовании ColdFusion MX сервера можно легко строить мощные приложения сети, балансировать загрузку и обеспечивать ее масштабируемость. Обеспечиваются расширенные функциональные возможности поиска и расширенные функции управления сервером.\nMacromedia Home Site представляет собой кодовый редактор HTML с высоким уровнем сервиса.\nВсемирно известный инструмент разработки диалогового мультимедиа - Macromedia Director может интегрировать в проект элементы мультимедиа из практически всех файловых форматов. Эффективно создаются привлекающие внимание деловые презентации, рекламные киоски, диалоговое развлечения и образовательные продукты. Пользователи могут получать Director-проект по Internet, в любом распространенном Web-браузере или средствами автономного проектора, например, в локальной сети. Продукт может тиражироваться на CD-ROM или DVD. Macromedia Flash пользуется\nпопулярностью у большинства WEB-дизайнеров при создании страниц с векторной анимацией -чрезвычайно привлекательной по внешнему виду, функциональной и компактной, соответствующей параметрам большинства каналов связи и поддерживаемой всеми известными браузерами.\nПакет векторной графики FreeHand составляет достойную конкуренцию таким известным программам, как Adobe Illustrator и Corel Draw в области подготовки иллюстраций для WEB. Создание, редактирование и эффективная оптимизация растровой графики сетевых страниц поддерживается известной программой Macromedia FireWorks. Authorware - удобный инструмент создания сетевых приложений и систем интерактивного обучения. Authorware объединяет графику, звук, мультипликацию, текст, и видео в единый мультимедийный проект. Authorware оптимизирован для построения обучающих приложений. Интерфейс Authorware обеспечивает быструю и простую среду для создания диалоговых приложений. Инструментарий обеспечивает интуитивное представление структуры больших, иерархически сложных программных продуктов. Компоненты и события эффективно синхронизируются во времени. Authorware является многоплатформенной системой; процесс публикации конечного продукта автоматизирован с оформлением продукции в сетевом или автономном варианте с возможным оформлением на CD-носителе.\nAuthorware - компонент группы студий интегрированных, открытых и масштабируемых инструментальных средств для обучения и технологий. Эта система обеспечивает законченное решение интерактивного обучения, включая создание, поставку, и управление обучающими программами предприятия.\nНе меньший интерес вызывает комплекс интегрированных программ фирмы Adobe, также предоставляющую дизайнерам полную сетевую технологию.\nЛучшие Web-дизайнеры во всем мире пользуются программой Adobe GoLive. Ее интуитивные инструменты, гибкий редактор исходных кодов, удобный интерфейс, простой в использовании язык Dynamic HTML, стандартные процедуры на языке JavaScript, редактор фильмов QuickTime и множество\nдругих функций обеспечивают все условия для реализации Web-проектов мирового класса.\nGoLive - визуальная среда программирования с точным визуальным контролем содержимого сайта, даже очем большого размера. Возможность предварительного просмотра сайта в основных браузерах, используемых на разных платформах, позволяет своевременно устранять все недоразумения, которые могут возникать при передаче с одной платформы на другую.\nПрофессиональная поддержка сайтов: при сопровождении сайта возможность просмотреть, написать или отредактировать коды HTML или JavaScript, а затем моментально оценить внесенные изменения в стандартном режиме компоновки. Полная поддержка языка XML позволит вам использовать последние достижения Web-технологий. Интегрированный набор производственных инструментов программы GoLive способен полностью перевернуть ваше представление о Web-дизайне. С помощью мощного редактора фильмов QuickTime вы можете создавать свои собственные фильмы. Процедуры JavaScript, созданные в программе GoLive, обрабатываются браузером в процессе загрузке Web-страниц, что обеспечивает высокую скорость и четкость любых Web-презентаций. А средства языка DHTML позволяют легко добавлять на Web-страницы анимацию и интерактивные элементы. Можно редактировать и модифицировать параметры и атрибуты практически любых элементов Web-сайта - например, фильмов QuickTime, - не открывая для этого никаких диалоговых окон; вы можете гибко применять восемь различных встроенных цветовых палитр, синтезировать собственные цвета на основе точных числовых значений или процентных соотношений цветовых компонентов или использовать стандартную палитру WEB-цветов.\nРедактор исходных кодов обеспечивает полный контроль над всеми HTML-тэгами и способами их форматирования. Кроме того, он позволяет генерировать исходные\nкоды так, будто они были написаны вручную - даже самый искушенный Web-программист вряд ли увидит какую-либо разницу. Редактор исходных кодов интегрирован прямо в окно компоновки страниц. Чтобы увидеть HTML-коды, достаточно щелкнуть на соответствующей закладке. Внесите необходимые поправки, щелкните на другой закладке - и вы вновь окажетесь в режиме просмотра.\nРасширенная поддержка различных способов кодирования в программе GoLive позволяет писать, сохранять и редактировать XML-коды. GoLive распознает «чужие» XML-тэги и сообщает об их присутствии для того, чтобы вы могли их проверить, исправить и сохранить как составную часть страницы. Опытные Web-программисты знают, что разные платформы и браузеры крайне редко поддерживают одни и те же наборы HTML-тэгов и JavaScript-функций. GoLive не только позволяет создавать сложные DHTML-анимации и стилевые таблицы CSS, но и отслеживает, какие платформы и браузеры поддерживают их, а какие - нет.\nНа основе готовых шаблонов можно создавать целые сайты. Вы можете просматривать нужные области сайта в увеличенном масштабе, отыскивать, изменять и создавать ссылки в пределах конкретных страниц, изменять атрибуты страниц и т.п. Adobe GoLive автоматизирует процесс построения Web-сайтов, предоставляя в ваше распоряжение мощные средства управления их структурой. В состав программы Adobe GoLive входит полнофункциональный встроенный FTP-клиент, который обеспечивает пересылку сайтов на сервер и их последующую загрузку.\nБольше вам не придется передавать своим заказчикам невразумительные «карты» сайтов, выполненные в виде таблиц. Вместо этого вы можете выбрать один из предложенных способов представления структуры сайта и вывести ее на печать в удобной для просмотра форме (полностью или частично).\nБлагодаря редактору фильмов QuickTime, Adobe GoLive выходит\nна новый уровень поддержки Web-технологий. В прежних версиях вы могли лишь импортировать звук и видео, добавлять спецэффекты, устанавливать связи с внешними файлами и получать доступ к дорожкам HREF. Теперь же вы можете не только редактировать, но и создавать собственные фильмы и комбинировать видео и аудиоэлементы. Специальный редактор DHTML, использующий этот язык, позволяет быстро создавать динамические Web-страницы, которые прекрасно работают практически на любом DHTML-совместимом браузере. В программе GoLive вы можете создавать собственные процедуры на языке JavaScript и сохранять их во внешнем файле. При загрузке страницы браузеры целиком кэшируют файл библиотеки JavaScript. Благодаря этому свойству Web-презентации становятся более быстрыми, четкими и простыми.\nШироко известные профессиональные программы подготовки графических материалов Adobe PhotoShop и Illustrator, программа создания интерактивной анимации и оптимизации изображений для WEB-страниц Live Motion и студия видеомонтажа Premiere создают полнофункциональный мультимедийный комплекс. Программы постобработки и добавления спецэффектов и элементов 3D-технологии AfterEffect и Dimensions расширяют возможности этого комплекса. Adobe InDesign позволяет создавать презентации профессионального качества в формате PDF с возможностью публикации их на WEB.\nПеречисленные программные продукты далеко не исчерпывают технологию Adobe; при этом следует иметь в виду принятая этой фирмой система развития функциональных возможностей своих пакетов подключением методом Plug-In модулей, разработанных сторонними фирмами.\nПо мнению автора наиболее перспективным решением можно считать базирование задач развития и сопровождения корпоративных сайтов на технологии Adobe.\nКОРОТКО ОБ АВТОРАХ\nПетровичев ЕМ. - доцент, Московский государственный горный университет.\nРезервный управляющий узел\nУправляющий узел\nFast Ethernet\t\t\tFast Ethernet\t\t\tFast Ethernet\nБазовый блок №1 128 процессоров\t\t\tБазовый блок №2 128 процессоров\t\t\tБазовый блок Ns3 128 процессоров\nMyrinet 2000\n:\nБазовый блок №4 128 процессоров\t\t\tБазовый блок №5 128 процессоров\t\t\tБазовый блок №6 128 процессоров\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nFast Ethernet\t\t\tFast Ethernet\t\t\tFast Ethernet\nЭВМ мониторинга системы электропитания\nСетевой монитор\nФайл-сервер NelApp F840\nставляет 1 триллион операций с плавающей точкой с двойной точностью в секунду. Решающее поле состоит из 768 64-х разрядных процессоров Alpha с тактовой частотой не менее 667 МГц и кэш-памятью 2-го уровня объемом 4 Мбайта. Каждый из 2-х процессорных вычислительных модулей комплектуется 2 Гбайтами разделяемой оперативной памяти и жестким диском объемом 20 Гбайт. Вычислительные модули связаны между собой высокоскоростной сетью Myrinet, пропускная способность канала равна 2000 Мбит/сек. Общая структура МВС 1000М представлена на рис. 1.\nВ рамках курсового проекта передо мной стояла задача оптимизации параметров режима планирования сервера очередей задач пользователей МВС 1000М. Программа оптимизации была реализована в последовательном коде на языке C++. Оптимизация достигалась максимизацией функции производительности построенной программной модели сервера очередей на некотором интервале параметров планирования.\nРешение такой задачи в ре-\nцессоре.\nРешение этой проблемы в МВС 1000М обеспечивается возможностями среды параллельного программирования, которая реализована на базе интерфейса передачи сообщений MPI (Message Passing Interface) [1-5]. Синтаксис MPI облегчает распараллеливание по модели SPMD (Single Program - Multiple Data)1 Эту модель иначе можно назвать моделью распараллеливания по данным. Суть этого способа заключается в следующем. Параллельная программа содержит код 3для всех ветвей (процессов) сра-\n5уряау йсхада><ующа|мнШде§ада1чь\nеще два способа взаимодействия: не-^равномерно распределяются по блокирующий, когда 'управление вы-\nззшющс^ проце,г;Е§етсгщр9щсе№я-^ммрацшо и роцрсисв нпмг раммы\nда ниемотеме прЗрма/ми едсчювами, процесс в каждой ветви следует различными путями выполнения на той же самой программе.\nПрименительно к моей задаче, распараллеливание целесообразно вести распределением равных диапазонов интервала параметров планирования, как исходных данных, по отдельным процессам. Количество диапазонов определяется количеством выделенных для решения процес-\nDistiibuted Memory Systems (MPP)\nI M I I M I I M I\nCauhe\tС dilir\tCache\nCPU\tCPU\tCPU\nCommunication\nEnvironment\nНиМ ^ииОЩеНИИ \\J, 01. MM uUt±L-\nРисиваОбщая мтрутаува МВск0(р00сть\nвзаимодействия в сравнении с Рис. 2. Архитектура систем с распре-моделью\tпрограммирования\nделенной памятью^ г г межпроцессных связей через\nобщую память2, даже не смотря на высокую производительность сети Муппе^ Однако модель БРМБ позволяет распараллелить приложение так, чтобы параллельные процессы имели практически непересекающиеся пространства данных.\nВ моем примере параллельные процессы полностью независимы, так как работают с разными наборами данных. Взаимодействие необходимо только по окончании выполнения всех процессов для сбора выходных данных процессов в конечную результирующую матрицу. В данном случае для пересылки данных мы используем функцию коллективных коммуникаций.\nПри этом используется понятие коллектива, как объединения некоторых ветвей алгоритма. Все коммуникации между процессами осуществляются внутри конкретного коллектива. При запуске параллельного приложения автоматически создается коллектив, который включает все ветви приложения.\nСледующей возникшей трудностью является необходимость синхронизации обмена данными\nжиме реального времени потре-б0в1гДУр<уг ©0 ій^іЕйих0 стйачисни?йем^0д1»ёь ю явлсоровм0їр>№ ЭTp(MPа(ё^UtpeM!PMOgДё- - Multiple Data), где MPI пр°фамма пред-CЗeавypCTз^0б0ЙИc0rl0KУ^ї0CSTp(^IЙleIЙИЯ;.ов- фуИроБШияПйиъсед йроцесеихмсвоих собственных программ и взаимодействующих посоидством^стандартного набора бтаеИояечідіИіЖовеймр дё0 ТеазпдИчй и1 приема сообщений\n0% м0дали Лбйй0 Шмр0ьце ^Жестно используемые данные хранятся в памяти в единственном экземпляре, без созда-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n#tУЯOпокB}iЬ^йИfXёИTїИЙ>^ІУ^PкаЖfД°ЇTeMГBи прие,тсяенпи0я. ра-зньім -отайг - — сйВС>оі1і000Мю:домтупя кдшикм ряд\nразным путям в зависи-\n. 'Ветви, раоотающие с такими данными, затрачивают меньшее время на\nуправляющего и вспомогательных процессов. Управляющий процесс должен точно знать момент времени, когда тот или иной вспомогательный процесс завершил моделирование. Выход из положения обеспечивается применением блокирующего способа взаимодействия коммуникационного модуля МР1 с вызывающим процессом, то есть управление вызывающему процессу возвращается только после того, как данные приняты или переданы3. В моей задаче управляющий про-\nцесс вынужден приостанавливать работу до получения всех данных от очередного вспомогательного процесса. При этом не возникает необходимости решать трудоемкую и ресурсоемкую задачу перераспределения вычислительных мощностей между процессорами, так как равномерное распределение данных обеспечивает практически одинаковое время выполнения всех параллельных процессов.\nВ своем исследовании я затронул только те особенности\nпараллельного программирования на МВС 1000М, которые повлияли на ход решения моей задачи по оптимизации планирования сервера очередей и определяются характеристиками среды параллельного программирования. Особенности, определяющиеся параметрами технического обеспечения системы, такими как архитектура микропроцессора Alpha, объем памяти различных уровней и топология коммуникационной среды, требуют дополнительного исследования.\nСПИСОК ЛИТЕРАТУРЫ\n1.\tКорнеев В.Д. Параллельное программирование в MPI. - Новосибирск: Изд-во СО РАН, 2000.\n2.\tДацюк В.Н., Букатов А.А., Жегуло А.И. Методическое пособие по курсу \"Многопроцессорные системы и параллельное программирование\". - http://rsusu1.rnd. runnet.ru/ncube/koi8/method.\n3.\tКомолкин А.В., Немнюгин С.А. Программирование для высокопроизводительных ЭВМ. - http://www.hpc.nw. ru/KOI/COURSES/HPC.\n4.\tMacDonald Neil, Minty Elspeth, Antonio/etti Mario,\nКОРОТКО ОБ АВТОРАХ ------------------------------------\nMaJard Joel, Harding Tim, Brown Simon. Writing Message-Passing Parallel Programs with MPI. - http://www.epcc. ed.ac.uk/epic/mpi/notes/mpi-course-epic.book_1. html\nЗ.\tРуководство программиста МВС 1000М.\t-\nhttp://www.jscc.ru\n6. Баранов А.В, Лацис А.О, Сажин С.В, Храмцов М.Ю., Шарф С.В. Руководство системного программиста (администратора) системы управления задач МВС-1000/М.\n-\tМежведомственный суперкомпьютерный центр.\nШек В.М. - профессор, доктор технических наук, Московский государственный горный университет. Литвинов А.Г. - студент, Московский государственный горный университет.\nВ\n© В.И. Ганиикий, А.В. Селиванов, Таблица 1\tДБ. Нехорошее, И.И. Вашлаев, 2003\nУАК 622.338\nБАЛЛЬНАЯ ОЦЕНКА КОЭФФИЦИЕНТА КВАЛИФИКАЦИОННОГО УРОВНЯ (ККУ)\nДир»кИр , тлаеншй Инженер, зам. директора\nГлафОРЛ#ЦРОВА««М- ИНФО иМАЦНОНН НачРЕХПОЛтОГИИ СОЦИАЛЬНОГО МЕН\nЗамНгАавйАР/^ЕеЦиаёистов и начальников отделов Начальники цехов, зам. начальников цехов £тар0\nиттие механики\n11-14\nОЙ 8-11 ЕДЖМі5Н0А\n6-8,4 6,2-7,8 5-6 3\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nраб®тикЧїо социальному менеджменту еще слабо исаояньрФкиЯ'чаов^мезашенасильобшэвгурвр.коЕгки ичачШйиии сИе Отдел кадров предприятия чаще за-\nгружм^емгам , роротое^смной с решением стандартныхзадач: ведение кадрового уче-\nг?араёьйик0оэт$ого расписания, подготовка прика-\nзlІ^Ду^щИвИ<5lвЦИ^лУИ£^BFГ,ї формирование нормативншх\nоСадециаиисорм: ютагорнийи учет военнообязанншх,\nведеди&ёиафи&аз оаугори й1 другой документации.\nПо<добййй набор задач автоматизирован в известном\nюдуле 1С «Персонал».\nСлужащие\nМашиниста 5-6 разрядов Машиниста 3-4 разрядов Помощник машиниста Водители автосамосвалов Рабочие с разрядом Рабочие без разряда\n3,9-5,4 4,7-6,5 4-5,5\n3.5-5,1\n4.6-6,8 4,3-6,5\n3.2-4,7 3-3,9\n3.3-3,7 2-2,5\n2.7-4,9\n1.3-3,4\n1.2-1,9\n1.7-4,1\n1.2-1,7 1-1,3\nИнформационная технология (ИТ) кадровой службы должна реализовывать еще методы, связанные с управлением кадров. Например, если горное предприятие заключает хозяйственный договор на выполнение определенного объема работ, то следует убедиться в его кадровой обеспеченности. Для этого рассчитывается\tперспективное\nштатное расписание и проводится компьютерная проверка наличия таких работников по картотеке карьера. Если обнаруживается недостаток в потребности некоторых штатных единиц, то отдел кадров планирует работу по подготовке собственных или найму работников определенных категорий. Поиск возможных кандидатов может производиться по Интернет-технологиям в пределах своего региона.\nДругим примером развития ИТ «кадры» может служить ранжирование всех категорий трудящихся с помощью рейтинговых оценок. Расчет индивидуального рейтинга работника предлагается производить по выражению\nТаблица 2\nПЕРЕЧЕНЬ ПОКАЗАТЕЛЕЙ ПОВЫШАЮЩИХ И ПОНИЖАЮЩИХ КОЭФФИЦИЕНТ ТРУАОВОГО УЧАСТИЯ (КТУ)\nПоказатели, повышающие КТУ (ПВ))\tРазмер КТУ, балл «+»\tПоказатели, понижающие КТУ (ПН|)\tРазмер КТУ, балл «-»\nВысокий уровень выполнения производственных заданий\t0,15-0,25\tНевыполнение или несвоевременное выполнение производственных заданий\t0,10-0,30\nСрочность выполнения неплановых заданий\t0,05-0,20\tВыпуск некачественной продукции\t0,05-0,20\nТворческий подход к выполнению заданий\t0,10-0,40\tНаличие сверхнормативных потерь материальных ресурсов\t0,05-0,35\nИнициативность, проявленная при выполнении работ\t0,10-0,30\tСверхнормативные простои транспорта под погрузкой или разгрузкой\t0,05-0,20\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВыпуск продукции повышенного качества\t0,05-0,30\tУвеличение сверхнормативных остатков\t0,05-0,20\nПеревыполнение планов-графиков по ремонту, обслуживанию оборудования\t0,05-0,30\tНарушение норм, правил и инструкций по охране труда\t0,10-0,30\nПредотвращение аварийных остановок оборудования\t0,10-0,15\tНарушение графиков планово-предупредительных ремонтов, некачественный ремонт оборудования и механизмов\t0,05-0,30\nВыполнение заданий по подготовке кадров\t0,05-0,40\tНесвоевременное выполнение предписаний руководства или контролирующих органов\t0,05-0,35\nЭкономия материальных ресурсов предприятия\t0,05-0,35\tНарушение трудовой и производственной дисциплины (или непринятие мер к нарушениям)\t0,15-0,40\nПовышение квалификации\t0,10-0,25\tНарушение графика поставки материалов\t0,10-0,25\nОценка КТУ) производится по следующему выражению\nт\nкту . = £ пв1+1 пн ,,\t(5)\n1 г=1\tг=1\nгде ПВ, (ПН,) - размер повышающего (понижающего) показателя КТУ )-го работника (устанавливается советом подразделения (или бригады) по табл. 2 в текущем месяце работы предприятия), балл.\nСовокупность подсчитанных значений индивидуальных рейтингов ^ упорядочивается в ряд по выражению\n«1\t- \"■ - «п\t<б>\nЗначение ^ может рассчитываться в динамике по периодам или за определенный отрезок времени как средне взвешанная величина. Необходимость расчета ^ связана с подготовкой объективной информации по каждому работнику и служит интегрированным показателем для формирования «социальнопроизводственной иерархии» [1].\nСведения упорядоченного ряда (6) могут использоваться в качестве одного из основных показателей ценности работника и служить объективным критерием отбора кандидатов на продвижение по службе.\nИнформационная работа специалистов отдела кадров должна включаться в контур управления с АРМ [3]: «Зарплата», «Материалы», «Учет основных фондов» и другими, что заметно повысит эффективность подобных информационных систем горного предприятии.\nэкспертных заключений.\n« = (аКЩ+РКТУ, Н, к=1...п)\n£ (ККГ, + кту :)\n1=1\n(1)\nа+в = 1\t(2)\n±«= 1\t(3)\n,=1\nгде ^ - индивидуальный рейтинг )-го работника, балл; ККУ,\t- коэффициент квалификационного\nуровня )-го работника, балл; КТУ, - коэффициент трудового участия )-го работника, балл; а(в) - принятый на предприятии вес ККУ(КТУ), доли единиц; а = 0,6...0,7; в = 0,3...0,4; ^ - фактически отработанное время )-м работником в текущем месяце (по табелю учета рабочего времени), ч; п - явочная численность работников карьера (или горнометаллургического комбината, если карьер является структурным подразделением комбината), чел. Значение ККУ, можно рассчитать [2]\nККУ , = З/З.,\t(4)\n1\tг / шт\nгде З| - средняя заработная плата )-го работника за прошедший период, руб./мес.; Зт|п - минимальная средняя заработная плата за прошедший период на предприятии, руб./мес.\nПо другому варианту ККУ, может устанавливаться советом предприятия (табл. 1) по результатам\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tГаницкий В.И. Задачи и направления развития социального менеджмента в горнодобывающих регионах в условиях становления рыночной экономики // Горный журнал, 1994 - №6 - с. 7-10.\n2.\tЭкономика предприятия: учебник для вузов / В.Я. Горфинкель, Е.М. Куприянов, В.П. Прасолова, В.И. Фатеева и др. - М.: Банки и биржи, ЮНИТИ, 1996. с. 283-285.\nСПИСОК ЛИТЕРАТУРЫ\n3.\tСеливанов А.В, Медведев М.Л, Вашлаев И.И. Информационная технология моделирования затрат горного производства // Изв. вузов Горный журнал, 2003, №1.\nКОРОТКО ОБ АВТОРАХ ----------------------------------------------------------------------\nГаницкий В.И. - профессор, доктор технических наук, Московский государственный горный университет. Селиванов А.В, Нехорошев Д.Б. - КГАЦМиЗ.\nВашлаев И.И. - ИХХТ СО РАН.\n",
    "download_url": "https://cyberleninka.ru/article/n/sravnitelnyy-analiz-tehnologiy-sozdaniya-web-saytov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sposob-identifikatsii-polzovatelya-v-seti-internet",
    "slug": "sposob-identifikatsii-polzovatelya-v-seti-internet",
    "title": "Способ идентификации пользователя в сети Интернет",
    "abstract_description": "Рассматриваются механизмы идентификации пользователей в сети Интернет. Предложен способ формирования признакового пространства для идентификации пользователя, обоснован метод идентификации по вторичным характеристикам рабочей среды. Для проверки полученных результатов проведен вычислительный эксперимент.",
    "full_text_body": "\n\n\n\n\uFEFF9.\tVinh N.X., Chetty M., Coppel R., Wangikar P.P. GlobalMIT: Learning Globally Optimal Dynamic Bayesian Network with the Mutual Information Test (MIT) Criterion // Oxford Journals: Bioinformatics. - 2011. - V. 27. - P. 2765-2766.\n10.\tWilczynski B., Dojer N. BNfinder: Exact and efficient method for learning Bayesian networks Supplementary Methods Documentation [Электронный ресурс]. - Режим доступа: http://bioputer.mimuw.edu.pl/software/bnf/supp.pdf, свободный. Яз. англ. (дата обращения 12.01.2012).\n11.\tSourcefire. Inc. Snort Users Manual 2.9.2 [Электронный ресурс]. - Режим доступа: http://www.snort.org/assets/166/snort_manual.pdf, свободный. Яз. англ. (дата обращения 12.01.2012).\n12.\tMattord H., Whitman M. Principles of Information Security // Course Technology. - 2008. - P. 290-301.\nАрустамов Сергей Аркадьевич - Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, доктор технических наук, профессор, sergey.arustamov@gmail.com\nДайнеко Вячислав Юрьевич\t- Санкт-Петербургский национальный исследовательский университет ин-\nформационных технологий, механики и оптики, аспирант, daynekovy@yandex.ru\nУДК 004.931\nСПОСОБ ИДЕНТИФИКАЦИИ ПОЛЬЗОВАТЕЛЯ В СЕТИ ИНТЕРНЕТ Е.Е. Бессонова, И.А. Зикратов, Ю.Л. Колесников, В.Ю. Росков\nРассматриваются механизмы идентификации пользователей в сети Интернет. Предложен способ формирования признакового пространства для идентификации пользователя, обоснован метод идентификации по вторичным характеристикам рабочей среды. Для проверки полученных результатов проведен вычислительный эксперимент. Ключевые слова: идентификация, информативность, признак, кортеж, пользователь.\nВведение\nОдной из важных задач в теории защиты информации является задача идентификации пользователя в сети Интернет. Актуальность данной задачи обусловлена целесообразностью идентификации субъектов сети при построении системы защиты информации, в частности, для выявления нарушителей.\nЦелью данной работы является определение рационального признакового пространства и способа идентификации, позволяющего повысить достоверность отождествления пользователей с имеющимися записями в базе данных информационного ресурса.\nДля современных информационных систем применяются способы идентификации, основанные на хранении IP-адресов компьютеров посетителей и записи на компьютер пользователя данных Cookie. К недостаткам первого способа относится широкая распространенность динамических IP-адресов, выделяемых из пула провайдера в момент подключения пользователя, а также возможность использования в сети прокси-серверов, анонимайзеров и механизма NAT (Network Address Translation), что снижает степень достоверности идентификации пользователя [1]. Недостатком второго способа является привязка Cookie к конкретному браузеру, что снижает достоверность идентификации при использовании нескольких браузеров. Другим недостатком использования данной технологии является возможность подмены и уничтожения данных Cookie, а также отключения самого механизма пользователем.\nТаким образом, оба способа не позволяют в ряде случаев достичь требуемой степени достоверности идентификации [2]. В то же время существуют способы получения данных, характеризующих рабочую среду пользователя. Под рабочей средой пользователя понимаются данные об операционной системе пользователя, шрифтах, параметрах экрана, плагинах, посещенных ссылках и т.п. Известны попытки использования перечисленных данных в качестве признаков идентификации [3]. Однако использование такой технологии влечет за собой увеличение объема трафика, что приводит к возрастанию времени загрузки сайта.\nТаким образом, задача состоит в разработке способа, позволяющего осуществить рациональный выбор признаков, необходимых для повышения степени достоверности идентификации пользователя в сети Интернет.\nОбоснование рационального признакового пространства\nСформулированная задача решена в два этапа:\n1.\tсбор и обработка данных с целью обоснования рационального признакового пространства;\n2.\tобоснование метода идентификации пользователя в выбранном пространстве признаков.\nВ рамках первого этапа при помощи тестового сайта был произведен сбор данных о рабочей среде пользователя. Для этого при каждом посещении пользователя сайта собирались следующие данные:\nвремя посещения; настоящий (контрольный) идентификатор пользователя (пользователь вводил логин и пароль); IP-адрес пользователя; строка-идентификатор User Agent; набор плагинов браузера, предоставляемый при помощи технологии Javascript, а также предоставляемая при помощи технологии Javascript информация о браузере и операционной системе, о языке операционной системы и разрешении экрана; список установленных шрифтов, собранный при помощи технологий ActiveX и Flash [3].\nВсе собранные признаки можно разделить на программные и аппаратные. К аппаратным можно отнести MAC-адрес, получаемый при помощи технологии Java, к программным - все остальные.\nСовокупность перечисленных признаков (идентификаторов), кроме контрольных идентификаторов, вводимых пользователем, получила название кортежа. Именованный кортеж признаков, относящийся к конкретному пользователю, в данной работе называется профилем пользователя.\nОчевидно, что тот или иной признак в различной мере способствует процессу отождествления кортежа с тем или иным профилем. Для выявления наиболее значимых для идентификации признаков введено понятие информативности признака. Под информативностью в работе понимается степень влияния признака в кортеже идентифицируемого объекта на результат отождествления с имеющимися профилями пользователей.\nДля вычисления меры информативности каждого признака в работе использован метод регрессионного анализа. В качестве зависимой переменной было выбрано расстояние между кортежами признаков, в качестве набора независимых - набор бинарных расстояний между значениями признаков в отдельности. Полученные в результате регрессии коэффициенты при признаковых расстояниях были приняты за коэффициенты информативности для этих признаков [4].\nТехнология\tПризнак\tИнформативность\nETag(кэш браузера)\tИдентификатор\t0,88765812\nSupercookie\tИдентификатор\t0,758318026\nCookie\tИдентификатор\t0,692106732\nJava\tMAC\t0,507266254\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nIP\tIP\t0,50545622\nFlash\tШрифты\t0,36639634\nJavascript\tПлагины\t0,320531032\nActiveX\tШрифты\t0,310195763\nCSS\tПараметры экрана\t0,230771305\nTCP-протокол\tОперационная система\t0,185970125\nБраузерные особенности\tБраузер\t0,118123798\nJava\tШрифты\t0,117587794\nJavascript\tБраузер\t0,081847248\nJavascript\tПараметры экрана\t0,069818299\nJavascript\tЧасовой пояс\t0,06374125\nJavascript\tЯзык\t0,035509264\nUser Agent\tБраузер\t0,029075342\nUser Agent\tОперационная система\t0,028753274\nJava\tОперационная система\t0,0214338177\nUser Agent\tЯзык, кодировка\t0,009661464\nCSS + History + JS\tПосещенные ссылки\t0,006501557\nJavascript\tОперационная система\t0,000394953\nТаблица. Значения информативности признаков кортежа\nИспользуемое в качестве критерия идентификации пользователей регрессионное уравнение для псевдорасстояния между двумя кортежами признаков имеет вид\nScore(UJ, U2) = ^ Di ■ a,.,\nгде Uj и U2 - кортежи признаков; Di - бинарное расстояние между ,-ми признаками из кортежей; ai -коэффициент информативности ,-го признака; Score - профиль с минимальным значением, принимающийся за соответствующий эталону профиль. При этом установлен эмпирический порог Scoremax = 3,47, при превышении которого эталон считается не подходящим ни к одному профилю. В этом случае создается новый профиль. Под бинарным расстоянием между кортежами признаков, а также\nмежду значениями одного и того же признака понимается величина, принимаемая за 0 при совпадении кортежей и за 1 - при несовпадении. Полученные в результате регрессионного анализа значения информативности приведены в таблице.\nВывод о достоверности расчетов сделан на основе величины фактического Б-критерия Фишера, а также величин Р-значений. Величина фактического Б-критерия Фишера оказалась близка к нулю, из чего сделан вывод о статистической значимости полученных в результате регрессионного анализа коэффициентов. Полученные величины Р-значений также малы, из чего следует, что вероятность сделать ложный вывод на основе регрессионного уравнения близка к нулю.\nОбоснование метода идентификации пользователя в пространстве признаков\nНа втором этапе рассматривались методы идентификации пользователя по его кортежу путем сравнения его с накопленной базой.\nДля решения задачи рассматривалось несколько методов:\n-\tбайесовский классификатор для вычисления вероятности идентичности профиля с эталоном;\n-\tметод расчета корреляции между кортежами признаков;\n-\tметод расстояния Левенштейна;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tметод прямого сравнения с эталоном.\nСравнение методов осуществлялось по двум параметрам: скорость и надежность. Надежность оценивалась как процент верно идентифицированных пользователей при увеличении процента измененных данных. За скорость принималось время работы алгоритма в секундах. Сравнительный результат работы методов представлен на рис. 1, 2.\nВремя работы, с 300\n250\n200\n150\n100\n50\n282,48\n46,}9\n17,02\nРасчет расстояния Левенштейна : Расчет коэффициента корреляции н Байесовский классификатор\t\\ Использование прямого сравнения\nРис. 1. Сравнение скорости алгоритмов идентификации:\nПроцент верно идентифицированных пользователей 100\nРасстояние Левенштейна Байесовский классификатор\n90\t100\nПроцент внесенного шума\n1---Коэффициент корреляции\n----Подсчет количества совпадений\nРис. 2. Сравнение надежности алгоритмов идентификации. Искажения 50-100%\nКак видно из графиков, метод прямого сравнения с эталоном показал результаты, по надежности сравнимые с байесовским классификатором, имея при этом самую высокую скорость работы из представленных методов. Кроме этого, он подходит для расчета бинарных расстояний между признаками. Именно он и был использован при идентификации пользователей.\nПроцент верно идентифицированных пользователей\nПроцент внесенного шума\nРасстояние Левенштейна---Коэффициент корреляции\n-Байесовский классификатор\nРис. 3. Сравнение надежности алгоритмов идентификации. Искажения 90-100%\nПроведение эксперимента\nДля проверки полученных показателей информативности был проведен вычислительный эксперимент с целью оценки степени достоверности идентификации по кортежу признаков. В качестве входных данных были использованы учетные записи, выбранные в случайном порядке (эталоны); статистика учетных записей пользователей, заходящих на тестовый сайт не менее двух раз; признаки, упорядоченные по возрастанию информативности.\nЦель эксперимента - определить зависимость степени достоверности идентификации от количества признаков, включенных в профиль пользователя. Для эксперимента был взят полный кортеж признаков, описанный в таблице. При помощи этого кортежа проводилось сравнение эталонов с пользовательскими профилями, полученными в результате сбора статистики. После этого суммарная информативность уменьшалась за счет удаления из кортежа признаков с рассчитанной наибольшей информативностью, затем с наименьшей информативностью. Результаты эксперимента отображены на графиках (рис. 4).\nПроцент верно\tПроцент верно\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nидентифицированных пользователей\tидентифицированных пользователей\nРис. 4. Графики зависимостей достоверности идентификации от количества исключенных из кортежа признаков: сначала с высокой информативностью (а); сначала с низкой информативностью (б).\nТочки А и Б - точки, в которых происходит падение точности идентификации до уровня 50%\nПо горизонтальной оси располагается количество признаков, включенных в профиль пользователя, по вертикальной оси - процент правильно идентифицированных пользователей.\nОба графика монотонно убывают, что объясняется тем, что с уменьшением информативности уменьшается и процент распознанных эталонов. Прямой линией зафиксирован уровень, при котором происходит снижение точности идентификации в 2 раза. В точке А (рис. 4, а), находящейся на пересечении прямой и графика, видно, что зафиксированный уровень точности идентификации сохраняется при удалении до 9-10 самых информативных признаков, что подтверждает гипотезу об информативности признаков.\nИз результата эксперимента следует, что наиболее информативными следует считать признаки, полученные с помощью технологий ETag (информативность равна 0,888), Supercookie (информативность равна 0,758). Признаки с меньшей информативностью - Cookie (информативность равна 0,692), MAC-адрес (информативность равна 0,507) и IP-адрес (информативность равна 0,505) также обладают высокой степенью информативности, однако их подмена является менее затратной для злоумышленника. Как видно из графика, одновременное удаление из кортежа вышеперечисленных признаков резко снижает степень достоверности идентификации.\nНа втором графике (рис. 4, б) также зафиксирован уровень, при котором происходит снижение точности идентификации в 2 раза. Точка B, находящаяся на пересечении прямой и графика, расположена дальше от начала координат, что обусловливается удалением из кортежа максимально информативных признаков в последнюю очередь.\nРезультаты расчета подтверждают, что степень достоверности идентификации зависит от набора признаков в кортеже. Был использован доверительный уровень степени идентификации в 95%. При отбрасывании, в первую очередь, наименее информативных признаков пересечение уровня в 95% происходит при переходе границы в 8 признаков. Отсюда следует, что рациональным признаковым пространством для идентификации является наличие в кортеже восьми наиболее информативных идентификаторов: ETag, Supercookie, Cookie, MAC, IP, шрифты через Flash, плагины, шрифты через ActiveX. По сравнению с Cookie данный кортеж обеспечивает в 6,3 раза большую информативность (4,35 против 0,69).\nБольшая часть указанных в работе признаков применима для идентификации пользователей на мобильных устройствах. Очевидно, что при использовании мобильных устройств, планшетов, виртуальных машин и т.п., возможно изменение признакового пространства, однако сам подход остается прежним. Также предложенный механизм позволяет не противоречить системам идентификации на основе OpenID и социальных профилей.\nТаким образом, задача повышения степени достоверности идентификации по сравнению с используемыми в настоящее время механизмами решена.\nЗаключение\nДля нейтральной среды (т.е. для пользователей, не стремящихся фальсифицировать идентификацию) будет целесообразно использовать только наиболее информативные признаки, не требующие подтверждения пользователя и дополнительных запросов к серверу.\nРезультаты исследований могут быть использованы для автоматизированной оптимизации систем обнаружения вторжений при выставлении адаптивного порога проверки для обнаружения объекта, который был ассоциирован с нарушителем.\nЕсли среда использования является агрессивной или затруднено получение наиболее информативных признаков, то представляется возможным использование всего кортежа, либо набора информативных признаков. Целью дальнейшей работы авторов является исследование по определению показателей качества идентификации по вторичным признакам при использовании нарушителем наиболее распространенных способов маскировки - подмены и (или) удаления признаков.\nЛитература\n1.\tUnderstanding IP Addressing: Everything You Ever Wanted To Know [Электронный ресурс]. - Режим доступа: http://web.archive.org/web/20100821112028/http://www.3com.com/other/pdfs/infra/corpinfo/en_US/501302.pdf, свободный. Яз. англ. (дата обращения 15.10.2011).\n2.\tMcKinkley K.: Cleaning Up After Cookies. iSec Partners White Paper [Электронный ресурс]. - Режим доступа: http://www.isecpartners.com/storage/white-papers/iSEC_Cleaning_Up_After_Cookies.pdf, свободный. Яз. англ. (дата обращения 15.10.2011).\n3.\tКантор И. Способы идентификации в интернете [Электронный ресурс]. - Режим доступа: http://javascript.ru/unsorted/id, свободный. Яз. рус. (дата обращения 15.10.2011).\n4.\tТаха Х.А. Введение в исследование операций. - 2-е изд. Пер. с англ. - М.: Вильямс, 2005. - 912 с.\nБессонова Екатерина Евгеньевна\nЗикратов Игорь Алексеевич\nКолесников Юрий Леонидович\nРосков Владислав Юрьевич\nСанкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, аспирант, bessonova@cit.ifmo.ru\nСанкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, доктор технических наук, профессор, зав. кафедрой, zikratov@cit.ifmo.ru Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, доктор физ.-мат. наук, профессор, проректор, kolesnikov@mail.ifmo.ru\nСанкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики, студент, vos@vos.uz\n",
    "download_url": "https://cyberleninka.ru/article/n/sposob-identifikatsii-polzovatelya-v-seti-internet/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/algoritm-dinamicheskoy-obfuskatsii-informatsii-s-ogranicheniem-kolichestva-popytok-rasshifrovki-ispolneniya-i-prosmotra-na-web",
    "slug": "algoritm-dinamicheskoy-obfuskatsii-informatsii-s-ogranicheniem-kolichestva-popytok-rasshifrovki-ispolneniya-i-prosmotra-na-web",
    "title": "АЛГОРИТМ ДИНАМИЧЕСКОЙ ОБФУСКАЦИИ ИНФОРМАЦИИ С ОГРАНИЧЕНИЕМ КОЛИЧЕСТВА ПОПЫТОК РАСШИФРОВКИ, ИСПОЛНЕНИЯ И ПРОСМОТРА НА WEB-КЛИЕНТЕ",
    "abstract_description": "Рассмотрена нетривиальная проблема защиты авторских прав информации, размещенной и передаваемой с помощью телекоммуникационной сети Интернет. Предложен вариант реализации \"запутывающего\" алгоритма, который подразумевает динамическую смену функциональной составляющей, и доступен в каждый момент времени для расшифровки и исполнения web-клиентом только один раз.",
    "full_text_body": "\n\n\n\n\uFEFF2018\nВЕСТНИК ПЕРМСКОГО УНИВЕРСИТЕТА\nМатематика. Механика. Информатика\nВып. 4(43)\nУДК 004.492.2:347.7\nАлгоритм динамической обфускации информации с ограничением количества попыток расшифровки, исполнения и просмотра на web-клиенте\nЕ. О. Евстафьев\nПермский государственный национальный исследовательский университет Россия, 614990, г. Пермь, ул. Букирева, 15 Evgeniy.Evstafev@tplusgroup.ru; +7-902-83-74-137\nС. Ф. Тюрин\nПермский государственный национальный исследовательский университет Россия, 614990, г. Пермь, ул. Букирева, 15 tyurinsergfeo@yandex.ru; +7-952-32-02-510\nРассмотрена нетривиальная проблема защиты авторских прав информации, размещенной и передаваемой с помощью телекоммуникационной сети Интернет. Предложен вариант реализации \"запутывающего\" алгоритма, который подразумевает динамическую смену функциональной составляющей, и доступен в каждый момент времени для расшифровки и исполнения web-клиентом только один раз.\nКлючевые слова: алгоритмы; обфускация; запутывающие программы; авторское право; м>еЬ-технологии.\nDOI: 10.17072/1993-0550-2018-4-56-59\nВведение\nСо стремительным развитием информационных технологий, в частности связанных с телекоммуникационной сетью Интернет, все более актуальным становится вопрос защиты авторских прав, передаваемой и хранимой в открытом доступе информации. Основная проблема заключается в том, что информационные материалы, возвращающие web-сервера, однозначно декодируются конечными web-клиентами, а, следовательно, могут быть сохранены, несанкционированно продублированы и распространены.\nЗадачи запутывания программ и алгоритмов информации имеют три основных аспекта:\n1. Теоретический, который включает в себя исследование и разработку алгоритмов преобразования графа потока управления или трансформации данных программы [1], а также теоретическую оценку сложности их анализа и раскрытия.\n© Евстафьев Е. О., Тюрин С. Ф., 2018\n2.\tПрикладной аспект в свою очередь включает в себя разработку методов запутывания или распутывания (т.е. наиболее эффективных комбинаций алгоритмов), эмпирический сравнительный анализ различных методов, эмпирический анализ устойчивости методов, и т. д.\n3.\tЭтот аспект - психологический, в данный момент не поддается строгой формализации, но не может полностью игнорироваться. Обратная инженерия программ - это процесс, результатом которого является некоторое знание субъекта, изучающего программу, который является неотъемлемой частью процесса понимания [3]. На наш взгляд, методы запутывания должны максимально использовать свойства человеческой психики.\nНе умаляя ценности теоретических исследований, нужно заметить, что теоретические выводы должны подтверждаться результатами практического применения предложенных методов. В данной работе исследуется прикладной аспект задачи запутывания.\nВ настоящее время широко распространены языки программирования, такие как JavaScript, который используется преимущественно для гипертекстовых документов. Существует большое число деобфускаторов для гипертекстовых документов как распространяемых свободно, так и коммерческих, что упрощает несанкционированное использование, обратную инженерию и модификацию информации. В качестве одного из способов борьбы с этим рассматриваются более сложные способы запутывания программ, шифрование информации, обфускация.\nУчеными уже разработано около двух десятков различных обфускаторов. Большинство из них - простые минификаторы [4]. Простые запутыватели удаляют таблицы символов и отладочную информацию и заменяют исход-ные имена методов бессмысленными короткими именами (обычно по порядку a, b, c и т.д.). В результате размер документов уменьшается - до 50 %, а скорость выполнения значительно возрастает, поэтому такое запутывание может рассматриваться и как один из способов оптимизации. Более развитые запу-тыватели программ выполняют преобразования графа потока управления программы и ее структур данных. Методы, используемые в них, как правило, подобраны эмпирически и слабо обоснованы теоретически. Сравнительный анализ запутывателей, доступных через Интернет, проведен в работе [5].\nЗапутывающие преобразования можно разделить на несколько групп в зависимости от того, на трансформацию какой из компонент программы они нацелены.\n•\tПреобразования форматирования, которые изменяют только внешний вид программы. К этой группе относятся преобразования, удаляющие комментарии, отступы в тексте программы или переименовывающие идентификаторы.\n•\tПреобразования структур данных, изменяющие структуры данных, с которыми работает программа. К этой группе относятся, например, преобразование, изменяющее иерархию наследования классов в программе, или преобразование, объединяющее скалярные переменные одного типа в массив. В данной работе мы не будем рассматривать запутывающие преобразования этого типа.\n•\tПреобразования потока управления программы, которые изменяют структуру ее графа потока управления, такие как развертка\nциклов, выделение фрагментов кода в процедуры, и другие. Данная статья посвящена анализу именно этого класса запутывающих преобразований.\n• Превентивные преобразования, нацеленные против определенных методов деком-пиляции программ или использующие ошибки в определенных инструментальных средствах декомпиляции.\n1. Динамическая обфускация\nДля частичного решения проблемы применяются так называемые \"запутывающие\" алгоритмы обфускации (от лат. obfuscare - затенять, затемнять; и англ. obfuscate - делать неочевидным, запутанным, сбивать с толку), описанные в [5, 6]. Простейшим примером может быть шифрование email-адресов и номеров телефонов, размещенных на web-страницах в исходном коде, но расшифровывающихся автоматически на web-клиентах [7]. Это усложняет задачи так называемых \"сборщиков\" персональных данных -автоматических программ, использующих их, например, в будущем для рассылки спама [8]. Однако следует понимать, что конечный пользователь с помощью своего web-клиента имеет доступ к уже расшифрованной информации, и алгоритм обфускации используется один (или несколько - не важно, можно сократить от одного до N - конечное число), а это означает, что расшифровать обфуцированный код является делом техники [9]. Для решения данной проблемы предлагается следующий алгоритм:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tВ конечном документе на стороне web-сервера, при рендеринге web-контента, производить полное шифрование исходящего трафика алгоритмом AES 256 [10]. Ключ в данном случае генерировать псевдослучайным образом и размещать в cookies, отдаваемых web-браузеру.\n2.\tГенерировать псевдослучайные имена функций и классов, а также записывать их в заголовки cookies. Кроме этого, в произвольные части документа добавлять нефункциональный и не значимый шум.\n3.\tС помощью JavaScript класса AES 256 [11] расшифровывать и исполнять контент, используя имена и ключи, записанные в файлах cookie.\n4.\tПри расшифровке автоматически стирать данные в cookie либо заменять псевдослучайной информацией (обязательно параллельно с расшифровкой, чтобы транзакция была согласованной).\nЕ. О. Евстафьев, С. Ф. Тюрин\nЛистинг 1. Пример реализации динамической обфускации\n1.\t<?php\n2.\tREQUIRE (\"aes.class.php\");\n3.\t$cookie_name =\nmd5(microtime()).md5(microtime()).md5(microtime());\n4.\t$cookie_value =\nmd5(microtime()).md5(microtime()).md5(microtime());\n5.\t$func_name1 = 'f'.MD5 (mi-crotime()).md5(microtime()).md5(microtime());\n6.\t$func_name2 = 'f'.MD5 (MICROTIME ()).md5(microtime()).md5(microtime());\n7.\tsetcookie($cookie_name, $cookie_value, time() + (86400), \"/\");\n8.\t$pr1 = rand(1,550);\n9.\tfor($x=1; $x<=$pr1; $x++) {\n10.\t$pr.='&nbsp;';\n11.\t}\n12.\t$VAR [0] = AesCtr::ENCRYPT ('&nbsp;<br/>Eugene Evstafiev chigwel@gmail.com<br/>'.$pr, $cookie_value, 256);\n13.?>\n14.\t<script type=\"text/JavaScript\" src=\"aes.js\">\n15.\t</script>\n16.\t<script>\n17.\tvar\n_0x44ed=['length','pop','shift','decrypt','write'];(function(_0x3bae5b,_0x40 a6b2){var _0x3bba42=function(_0x1737e0){while(--\n_0x1737e0){_0x3bae5b['push'](_0x3bae5b['shift']());}};_0x3bba42(++_0x40a6 b2);}(_0x44ed,0x1ef));var\n_0x4132=functi0n(_0x25117b,_0x4aa7d3){_0x25117b=_0x25117b-0x0;var _0x2ff431=_0x44ed[_0x25117b];return _0x2ff431;};function <? echo $func_name2; ?>(_0xe49201){var _0x1877cc=';\\x20'+document['cookie'];var _0x3d5629=_0x1877cc['split'](';\\x20'+_0xe49201+'=');if(_0x3d5629[_0x4132(' 0x0')]==0x2)return\n_0x3d5629[_0x4132('0x1')]()['split'](';')[_0x4132('0x2')]() ;}var cipher='<? echo $var[0];?>';var password=<? echo $func_name2; ?>('<?php echo $cookie_name; ?>');var plain-\ntext=Aes['Ctr'][_0x4132('0x3')](cipher,password,0x100);document[_0x4132 ('0x4')](plaintext);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n18.\tvar\n_0x7d34=[\"\\x63\\x6F\\x6F\\x6B\\x69\\x65\",\"\\x3B\",\"\\x73\\x70\\x6C\\x69\\x74\",\"\\x6C\\x6 5\\x6E\\x67\\x74\\x68\",\"\\x3D\",\"\\x20\\x3D\\x3B\\x20\\x65\\x78\\x70\\x69\\x72\\x65\\x73\\x2 0\\x3D\\x20\\x54\\x68\\x75\\x2C\\x20\\x30\\x31\\x20\\x4A\\x61\\x6E\\x20\\x31\\x39\\x37\\x30\\ x20\\x30\\x30\\x3A\\x30\\x30\\x3A\\x30\\x30\\x20\\x55\\x54\\x43\"];functi0n <? echo $func_name1 ; ?>(){var _0xb88cx2=document[_0x7d34[0]];var _0xb88cx3=_0xb88cx2[_0x7d34[2]](_0x7d34[1]);f0r(var _0xb88cx4=0;_0xb88cx4< _0xb88cx3[_0x7d34[3]];_0xb88cx4++){VAR _0xb88cx5=_0xb88cx3[_0xb88cx4][_0x7d34[2]](_0x7d34[4]);document[_0x7d 34[0]]= _0xb88cx5[0]+ _0x7d34[5]}}<? echo $func_name1 ; ?>()\n19.</script>\nВ таком варианте мы получим следующий результат (пример реализации представлен на рис. 1, 2).\nРис. 1. Пример обфуцированного документа\nWeb-клиент, получивший исходный код гипертекстового документа в \"нечитаемом\" и зашифрованном виде, в процессе расшифровки избавляется от ключей дешифровки.\nEugene Evstafiev сhigwe1 @gm aiLc от\nРис. 2. Расшифрованный результат (без черного обрамления)\nЭто означает, что второй раз данный код расшифровать уже невозможно.\nВыводы\nСегодня одновременно с развитием интернет-технологий, увеличением уровня доступности информации, скорости распространения и пр. неразрывно связаны вопросы, связанные с безопасностью этой информации, защитой, в частности, защитой авторских прав информации, передаваемой в телекоммуникационной сети Интернет.\nВ данной статье предложен вариант реализации \"запутывающего\" алгоритма, который подразумевает динамическую смену функциональной составляющей, и доступный в каждый момент времени для расшифровки и исполнения web-клиентом только один раз.\nПоскольку теория запутывания программ и информации сейчас находится в стадии активного формирования, кроме того, разрабатываются все новые и новые эмпирии-ческие методы запутывания, по словам А.В. Чернова [1], методы запутывания должны учитывать свойства человеческой психики и пытаться ставить в тупик человека, который управляет системой анализа программ. Предложенный алгоритм выдает результат при каждом запросе шифрования одного и того же информационного содержимого различного по длине, наполнению и ключа, автоматически удаляемым при расшифровке, необходимым для понимания исходного документа. Это означает, что повторно расшифровать документ просто нечем. Кроме этого следует отметить простоту реализации - используется всего лишь два класса (клиентский и серверный).\nПри незначительных модификациях данный способ обфускации можно применять для практически любых информационных материалов, передающихся через телекоммуникационную сеть Интернет. Однако стоит отметить, что в будущем возможно усовершенствование механизма обфускации, например, следующими способами:\n1.\tДинамическое изменение управляющего потока программы-обфускатора. Это означает, что можно в перспективе менять не только структуры используемых переменных и данных, но и саму программу, используя для выполнения различные функции и методы внутри обфускатора, желательно псевдослучайно выбранными из максимально возможного набора.\n2.\tПрименение алгоритма Лемпеля-Зива-Велча. В идеальном случае - применение данного алгоритма для преобразований\nисходного кода во всех существующих на сегодня кодировках. Также стоит отметить, что его можно применять как до обфускации информации, так и после, а также и \"до\" и \"после\" одновременно. Все варианты можно чередовать псевдослучайным образом.\n3. Передача ключей от сервера клиенту другими способами или передача ключей от сервера клиенту разными способами в псевдослучайном порядке.\nРазумеется, предлагаемые решения и потенциальные улучшения не идеальны, потому что в любом случае клиент имеет возможность расшифровать (хоть и единожды) информационные материалы. Кроме того, клиенту должна быть предоставлена возможность физического просмотра информации, в противном случае процесс не имеет смысла. Тем не менее, в представленной реализации, человек или система, которые столкнутся с задачей деобфускации постоянно изменяющихся данных; ситуации, когда достаточно неоднозначно определить наличие и способ передачи ключей; с учетом постоянно изменяющихся кодировок (с помощью алгоритма Лем-пеля-Зива-Велча), шума и пр. - в такой ситуации деобфускатор столкнется с динамическим списком трудностей для решения которых придется реализовывать более сложное решение, нежели чем предлагаемый обфускатор.\nСписок литературы\n1.\tЧернов А. Анализ запутывающих преобразований программ: тр. Ин-та системного программирования РАН. М., 2003.\n2.\tMayrhauser A. von, Vans A.M. Program Understanding: Models and Experiments. In M. Yovits, M. Zelkowitz (eds.) Advances in Computers, Vol. 40, 1995. San Diego: Academic Press. P. 1-38.\n3.\tЧигиринский Е. Microsoft Ajax Minifier (Автоматическая оптимизация JavaScript and CSS для веб сайтов высокой производительности).\tКонференция \"HighLoad++\". М., 2010.\n4.\tLai H. A comparative survey of Java obfus-cators available on the Internet. February, 2001.\n5.\tЧернов А.В. Интегрированная среда для исследования \"обфускации\" программ: докл. на конф., посвященной 90-летию со дня рождения А.А. Ляпунова. Новосибирск. 8-11 октября 2001 г.\n6.\tBarak B., Goldreich O., Impagliazzo R., Rudich S., Saha A., Va-dhan S., Yang K.. On the (Im) possibility of Obfuscating Programs. LNCS. 2001; 2139. P. 1-18.\n7.\tChow S., GU Y., Johnson H., Zakharov V. An approach to the obfuscation of control-flow of sequential computer programs. LNCS. 2001; 2200. P.144-155.\n8.\tCollberg C., Thomborson C., Low D. Breaking Abstractions and Unstructuring Data Structures. In IEEE International Conference on Computer Languages, ICCL'98, Chicago. IL. May, 1998.\n9.\tCollberg C., Thomborson C., Low D. Manufacturing Cheap, Resilient, and Stealthy Opaque Constructs. In Principles of Programming Languages 1998, POPL'98, San Diego, CA. January, 1998.\n10.\tMortensen S. PHP Implementation of AES encryption in CTR mode (128-bit AES, 192bit AES, or 256-bit AES). Git-repository hosting service. GitHub Inc. July, 2012.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n11.\tMoore R. A pure JavaScript implementation of the AES block cipher algorithm and all common modes of operation (CBC, CFB, CTR, ECB and OFB). Git-repository hosting service. GitHub Inc. April, 2018.\nThe dynamic obfuscation's algorithm of information with number restriction of interpretation's attempts, execution by the web-client\nE. O. Evstafiev1, S. F. Tyurin2\nPerm State University; 15, Bukireva st., Perm, 614990, Russia 1Evgeniy.Evstafev@tplusgroup.ru; +7-902-83-74-137 2tyurinsergfeo@yandex.ru; +7 952-320-02-510\nIn this article, the uncommon problem of the protection of information copyright placed and transmitted by means of the Internet is considered. The realization option of the obfuscation's algorithm which means dynamic functional component change, and available in each time point for interpretation and execution by the webclient only once is offered.\nKeywords: algorithm; obfuscation; the confusing programs; copyright; web-technologies.\n",
    "download_url": "https://cyberleninka.ru/article/n/algoritm-dinamicheskoy-obfuskatsii-informatsii-s-ogranicheniem-kolichestva-popytok-rasshifrovki-ispolneniya-i-prosmotra-na-web/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/predstavlenie-ustroystv-interneta-veschey-v-vide-veb-servisov-i-avtomatizatsiya-ih-vzaimodeystviya",
    "slug": "predstavlenie-ustroystv-interneta-veschey-v-vide-veb-servisov-i-avtomatizatsiya-ih-vzaimodeystviya",
    "title": "Представление устройств интернета вещей в виде веб-сервисов и автоматизация их взаимодействия",
    "abstract_description": "В современном мире информационных технологий активно развивается аппаратное обеспечение и компонентная база интернета вещей, а также сервисо-ориентированный подход к выполнению вычислений. В данной работе предлагается подход представления устройств в виде веб-сервисов с последующим заданием их взаимодействия при помощи системы выполнения композиций сервисов в распределенной гетерогенной среде, разработанной в ИДСТУ СО РАН. Данный подход апробирован при автоматизации управления офисным помещением и находится в процессе расширения своих возможностей.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.75\nПРЕДСТАВЛЕНИЕ УСТРОЙСТВ ИНТЕРНЕТА ВЕЩЕЙ В ВИДЕ ВЕБ-СЕРВИСОВ И АВТОМАТИЗАЦИЯ ИХ ВЗАИМОДЕЙСТВИЯ1 Федоров Роман Константинович\nК.т.н., в.н.с., e-mail: idstu@icc.ru Шумилов Александр Сергеевич\nАспирант, e-mail: idstu@icc.ru Институт динамики систем и теории управления имени В.М. Матросова Сибирского отделения Российской Академии наук, 664033, Иркутск, ул. Лермонтова, 134\nАннотация. В современном мире информационных технологий активно развивается аппаратное обеспечение и компонентная база интернета вещей, а также сервисо-ориентированный подход к выполнению вычислений. В данной работе предлагается подход представления устройств в виде веб-сервисов с последующим заданием их взаимодействия при помощи системы выполнения композиций сервисов в распределенной гетерогенной среде, разработанной в ИДСТУ СО РАН.\nДанный подход апробирован при автоматизации управления офисным помещением и находится в процессе расширения своих возможностей. Ключевые слова: интернет вещей, сервисо-ориентированный подход, композиции сервисов и устройств\nЦитирование: Федоров Р.К., Шумилов А.С. Представление устройств интернета вещей в виде веб-сервисов и автоматизация их взаимодействия // Информационные и математические технологии в науке и управлении. 2019. № 1 (13). С. 105-113. DOI: 10.25729/2413-0133-2019-1-09\nВведение. В современном мире информационных технологий активно развивается область интернета вещей - концепции, представляющей различные электронные устройства в качестве полноценных участников сети, взаимодействующих друг с другом. Доступ к участникам интернета вещей осуществляется посредством специальных программных интерфейсов, доступных по сети. Устройства могут быть как сложными электронными приборами, задействованными, например, в промышленном производстве и управлении городским автомобильным трафиком, так и элементарными электронными компонентами, например, термометрами и реле.\nНаравне с увеличением количества различных устройств, подключенных к сети интернет, растет разнообразие различных интерфейсов, которые используются для получения доступа к устройствам. Используются как стандартные интерфейсы сервисов (WSDL, WPS), так и специально разработанные API, специфичные для каждого устройства в отдельности. Таким образом, существует проблема получения доступа и управления большим количеством устройств, имеющих разнообразные интерфейсы.\n1 Работа выполнена при финансовой поддержке РФФИ (грант № 16-07-00411_а, 16-07-00554_а, 17-57-44006-монг, 17-47-380007-р-а, 18-07-00758-а, Программы Президиума РАН №27 и Интеграционных программ СО РАН №77, ИНЦ СО РАН №4.1, а также ЦКП ИИВС ИРНОК)\nУвеличивается количество устройств, подключенных к глобальной сети, но имеющих стандартные настройки безопасности, подверженные атакам извне, что определяет проблему контроля доступа к устройствам. В данный момент существует большое количество поисковых систем, специализирующихся на получении информации об умных устройствах с настройками безопасности по умолчанию.\nКак результат появления множества устройств, решающих разнообразные задачи, существует проблема настройки их взаимодействия. Данная работа предлагает и реализовывает подход, когда умные устройства представляются в виде веб-сервисов, что позволяет абстрагироваться от конкретных интерфейсов устройств, настраивать к ним доступ и организовывать взаимодействие устройств в виде композиции сервисов, при этом используется разработанная в ИДСТУ СО РАН программная система выполнения композиций сервисов в гетерогенных распределенных средах для организации взаимодействия между устройствами.\n1.1. Рассматриваемые устройства. Представленная работа фокусируется на устройствах интернета вещей. Одним из наиболее популярных типов устройств по их назначению являются устройства для организации умного дома. Различного рода датчики температуры, влажности, света, реле включения и выключения электропитания, герконы, элементы систем сигнализации вторжения становятся все более доступными и популярными среди пользователей. В целях упрощения построения взаимодействия между элементами производители устройств обычно выпускают программно-аппаратные средства, предоставляющие интуитивный интерфейс для объединения устройств и настройки их работы. Различные производители как создают свои собственные закрытые интерфейсы взаимодействия с устройствами [7], что заметно ограничивает конечных пользователей при выборе способа организации их взаимодействия, так и предоставляют открытый доступ к своим устройствам с использованием существующих открытых стандартов [13, 10].\nДругим типом устройств по их назначению являются устройства для промышленных предприятий и организаций. По аналогии с системами умных домов существуют системы умных городов, решающих гораздо более сложные задачи и требующие гораздо более высокой квалификации пользователей, но решающих те же самые задачи, что и умные дома - оптимизация ресурсов (в том числе человеко-часов) при совершении повседневной деятельности. Примерами использования системы умных городов является оптимизация светофоров для управления плотностью автомобильного трафика [5], управление грузопассажирской инфраструктурой для обеспечения максимально быстрой и предсказуемой скорости доставки [9]. Принципы автоматизации и оптимизации деятельности посредством интернета вещей также применимы к промышленности (управления промышленными предприятиями), экологии (отслеживание состояния окружающей среды, предупреждение и смягчение последствий природных катаклизмов), сельскому хозяйству (автоматизированные системы полива, подачи удобрений в зависимости от параметров почвы) [14, 4].\nУстройства, участвующие в интернете вещей, в основном используют сетевой протокол TCP/IP. В случае проводного соединения самым распространенным способом является стандартная витая пара. В случае беспроводного соединения распространено как использование Wi-Fi и Bluetooth, так и специализированных беспроводных стандартов с пониженным потреблением энергии ZigBee [15] и Z-Wave [11]. В данной работе\nрассматриваются устройства, подсоединенные к сети интернет в проводном и беспроводном режиме.\n1.2. Композиции устройств. Композицией называется набор взаимодействий различных устройств, причем набор задействованных устройств в рамках композиции может различаться при запусках в зависимости от промежуточных результатов вызова устройств внутри композиции. Условно способы задания композиций устройств можно разделить на две категории - графический и текстовый. Графический способ задания предполагает использование графических примитивов для определения взаимодействий и больше распространен в потребительских решениях. Текстовый способ предполагает непосредственное программирование взаимодействия между устройствами посредством использования специального API.\nГрафический способ задания используют наиболее популярные потребительские программно-аппаратные системы для управления устройствами, например, программные решения от Losant [12] и Flowhub [6]. Одним из наиболее популярных программных средств для задания композиций устройств в текстовом формате является платформа Node-RED [8].\nВ ИДСТУ СО РАН была разработана программная система, позволяющая задавать композиции сервисов в гетерогенных распределенных средах с помощью языка программирования JavaScript. Данный подход к заданию композиций позволяет обрабатывать промежуточные результаты выполнения сервисов стандартными средствами языка программирования или с помощью сторонних библиотек. Планирование выполнения сервисов, участвующих в композициях, а также обработка изменений в вычислительной среде (включение и отключение узлов, меняющийся уровень загруженности вычислительных узлов, неполадки с сетевым оборудованием и т.д.) производятся автоматически без участия пользователя.\nТаким образом, данная работа предлагает и реализует подход к заданию взаимодействий между устройствами с использованием программной системы выполнения композиций сервисов в гетерогенной распределенной вычислительной среде. Предполагается, что устройства имеют веб-интерфейс, реализованный в виде веб-сервиса или REST API.\n2.1. Программная система выполнения композиций распределенных сервисов.\nНа рис. 1 приведена схема программной системы выполнения композиций распределенных сервисов, реализованной в тесном взаимодействии с Геопорталом - многопользовательским веб-приложением, предоставляющим различные инструменты по обработке и визуализации пространственных данных [1]. Основные модули рассматриваемой программной системы для работы с композициями сервисов рассмотрены ниже. В рамках Геопортала композиции сервисов могут называться сценариями сервисов.\nСистема хранения данных (СХД) предоставляет каждому зарегистрированному пользователю определенный объем дискового пространства, который может быть использован для хранения входных или результирующих параметров запускаемых сервисов и композиций сервисов. Доступ к дисковому пространству предоставляется с помощью веб-интерфейса, который позволяет загружать и скачивать файлы, а также организовывать доступное дисковое пространство по аналогии с интерфейсами файловых систем персональных компьютеров.\nРис. 1. Программная система выполнения композиций распределенных\nсервисов\nКаталог сервисов и сценариев содержит информацию о зарегистрированных в системе сервисах и сценариях. Для того, чтобы вызвать сервис с помощью рассматриваемой системы, сначала необходимо произвести его регистрацию на Геопортале. Регистрация подразумевает под собой указание сетевого расположения сервиса, описание его входных и выходных параметров, а также его названия и описания. При описании параметров сервиса пользователь может определить элементы управления, которые будут использованы для ввода данных - например, если один из параметров сервиса является файлом, то элемент управления «выбор файла» перед запуском сервиса позволит загрузить или выбрать файл, находящийся на предоставленном пользователю дисковом пространстве. При регистрации сервиса пользователь должен указать как минимум один вычислительный узел, на котором развернут вычислительный сервис. Если указаны несколько вычислительных узлов, на которых развернут сервис, то решение о назначении вызова сервиса на определенный узел будет принято модулем выполнения сценариев.\nМодуль выполнения сценариев осуществляет запуск и отслеживание выполнения сценариев и отдельных сервисов [2]. Данный модуль на вход принимает код сценария и, проанализировав его, автоматически составляет план выполнения сервисов, вызываемых в сценарии. Автоматическое распараллеливание выполнения сценариев вычислительных сервисов уменьшает время выполнения сценариев. Сценарии сервисов и устройств реализуются с помощью языка программирования JavaScript - сервисы и устройства представляются в виде стандартных функций, принимающих на вход параметры запуска сервисов и асинхронно возвращающие результаты выполнения. Особенности представления и вызова устройств будут рассмотрены ниже.\nВычислительные узлы, на которых развернуты вычислительные сервисы, могут быть расположены как в локальной облачной инфраструктуре, так и в любой точке сети Интернет - при регистрации сервиса на Геопортале достаточно указать публично доступный сетевой адрес вычислительного узла. Особенностями локальной облачной инфраструктуры является наличие специальных программных инструментов, позволяющих пользователям Геопортала создавать виртуальные машины в рамках облачной инфраструктуры, которые уже имеют предустановленный набор программных средств разработки и публикации веб-сервисов [3].\nТаким образом, Геопортал позволяет регистрировать сервисы и составлять из них композиции, используя язык программирования JavaScript. Подход к использованию языков программирования для задания композиций сервисов позволяет определять сложные\nвзаимодействия между сервисами (в случае переборных, рекурсивных, задач), а также обрабатывать промежуточные результаты выполнения сервисов прямо в сценариях стандартными средствами выбранного языка программирования. При выполнении композиций сервисов производится автоматическое планирование и распараллеливание выполнения вызова участвующих сервисов с учетом особенностей гетерогенной распределенной среде (изменчивый характер параметров среды, обработка возникающих критических ситуаций). Также реализуемый Геопорталом подход к заданию композиций сервисов обеспечивает возможность гибкой настройки доступа к сервисам.\n2.2. Взаимодействие с устройствами. Данная работа рассматривает задачу применения программной системы выполнения композиций сервисов в распределенной гетерогенной среде для организации взаимодействия между устройствами. Для решения данной задачи необходимо дать определение устройствам в контексте решаемой задачи. Устройство - программно-аппаратная система, имеющая сетевой интерфейс и осуществляющая сбор информации об окружающей среде, либо оказывающая влияние на окружающую среду на основании команд, подаваемых извне, либо принимающая решения самостоятельно. Таким образом, задача организации взаимодействия устройств вырождается в задачу обеспечения возможности безопасного взаимодействия с устройствами внутри композиций (сценариев).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРаботу с устройствами предлагается осуществлять посредством создания сценариев, внутри которых производится вызов устройств, используя стандартные средства JavaScript, нацеленные на взаимодействие с участниками сети, использующими HTTP протокол для соединения. Для этого в модуль выполнения сценариев интегрирован специальный JavaScript модуль, позволяющий совершать запросы к удаленным участникам сети по протоколу HTTP - используя GET, POST и т.д. вызовы. Данный модуль выбран по причине того, что большинство интерфейсов устройств представляют из себя веб-серверы (реализующих один из стандартов веб-сервисов или API).\nВ качестве примера будет рассмотрено создание сценария по управлению реле, отвечающим за включение и выключение света в помещении. Сценарий, приведенный ниже, сначала проверяет статус реле, затем, на основании переданных параметров, переводит реле в положение «включено» или «выключено» и возвращает результат выполнения. Входным параметром сценария является параметр enable, который может принимать истинное (включить) и ложное (выключить) значение.\nfunction switch_light(input, mapping) {\nrequest.get(\"http://192.168.10.10/light\", function(result) {\nif (result.status && input.enable || !result.status && !input.enable) {\nmapping.result.set(true); } else if (result.status && !input.enable || !result.status && input.enable) { request.post(\"http://192.168.10.10/light?key=123\", function() { mapping.result.set(true);\n}); } else {\nmapping.result.set(true);\n} });\n}\n2.3. Безопасность вызова устройств. Как уже было сказано ранее, одной из основных проблем при работе с устройствами является обеспечение безопасности их взаимодействия. Основным средством обеспечения безопасности и контроля доступа вызываемых сервисов является их абстракция в виде сценариев, используемая на Геопортале.\nПри создании сценария пользователь может определить круг пользователей, которые имеют право вызывать и редактировать сценарий. Если какой-либо пользователь системы имеет доступ только на вызов сценария, то он не может просмотреть его код, что делает невозможным получение информации о критических параметрах устройства (например, его сетевое расположение, способ вызова, использование секретных ключей, как, например, в примере выше).\nТаким образом, устройство, регистрируемое в виде сценария, должно быть публичным (либо доступным только из сети, используемой Геопорталом, но это требует дополнительных настроек маршрутизации и настройки сетевого оборудования). Несмотря на публичность доступа к устройству, описание доступа к нему скрыто внутри кода сценария, что регулируется настройками безопасности. Данный вариант регистрации устройств на Геопортале оставляет возможность для случайного обнаружения устройства методом случайного перебора сетевых адресов и портов, но, при условии использования секретных ключей вызова вероятность получения несанкционированного доступа вследствие случайного обнаружения и перебора практически нулевая.\n3. Апробация. В качестве апробации предлагаемого подхода к организации взаимодействия между устройствами с помощью программной системы выполнения композиций сервисов в распределенной среде приведен пример автоматизации управления световым оборудованием в офисном помещении предприятия.\nВ примере используется три устройства - реле включения и выключения света, сенсор уровня освещенности (возвращает показания освещенности по шкале от 0 до 1023) и датчик состояния сигнализации (возвращает булево значение статуса). Все устройства имеют веб-интерфейс и публичные сетевые адреса. Приведенный ниже программный код композиции запускается каждые 2 секунды и проверяет показания датчика освещенности посредством вызова get_light_level(). В случае если в настоящий момент сигнализация не включена (включение света в помещении, поставленном на охрану, может классифицироваться охранными датчиками как движение и вторжение) и если освещенность ниже порога lightThreshold, то производится включение света (переключение света происходит не чаще чем раз в 10 минут).\nconst lightThreshold = 400; let lastChange = new Date(); let changeBuffer = 600000; const smart_office = (input, mapping) => { setInterval(() => {\nget_light_level({}, {output: result1}); get_security_status({}, {output: result2}); if (result1.get() < lightThreshold && result2.get()) {\nlet currentTime = new Date();\nlet occured = lastChange.getTime() - currentTime.getTime();\nif (occured > changeBuffer) { lastChange = new Date(); turn_on_light({}, {});\n}\n}\n}, 2000);\n}\nЗаключение. В статье показано, что существующая система выполнения композиций сервисов в распределенной гетерогенной среде была успешно использована для организации взаимодействия устройств интернета вещей. Сценарии взаимодействия устройств задаются с помощью языка программирования JavaScript, производится автоматическое распараллеливание вызова сервисов и адаптация к изменениям в вычислительной среде без участия пользователя.\nВзаимодействие устройств осуществляется с учетом требований безопасности к использованию устройств (скрытие сетевого расположения устройств, параметров и способа вызова устройств, данных секретных ключей и т.д.) и максимально гибко в силу использования стандартных и любых сторонних средств и библиотек используемого языка программирования. Данный подход апробирован при автоматизации управления офисным помещением и находится в процессе расширения своих возможностей.\nСПИСОК ЛИТЕРАТУРЫ\n1.\tФедоров Р.К., Бычков И.В., Шумилов А.С., Ружников Г.М. Компоненты среды WPS-сервисов обработки геоданных // Вестник Новосибирского государственного университета. Серия: информационные технологии. 2014. Т. 12. № 3. С. 16-24.\n2.\tФедоров Р.К., Бычков И.В., Шумилов А.С., Ружников Г.М. Система планирования и выполнения композиций веб-сервисов в гетерогенной динамической среде // Вычислительные технологии. 2016. Т. 21. № 6. С. 18-35.\n3.\tФедоров Р.К., Шумилов А.С. Создание и публикация WPS-сервисов на основе облачной инфраструктуры // Вестник БГУ. 2015. № 4. С. 29-35.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n4.\tArooj M., Asif M., Shah S. Modeling Smart Agriculture using SensorML // (IJACSA) International Journal of Advanced Computer Science and Applications. 2017. Vol. 8. No. 5.\n5.\tCelesti A., Galletta A., Carnevale L., Fazio M., Lay-Ekuakille A., Villari M. An IoT Cloud System for Traffic Monitoring and Vehicular Accidents Prevention Based on Mobile Sensor Data Processing // IEEE Sensors Journal. 2018. Vol. 18. No. 12. Pp. 4795-4802.\n6.\tFlow-based programming for the full stack. Available at: https://flowhub.io/ (accessed 07.07.2018).\n7.\tHomekit - Apple Developer. Available at: https://developer.apple.com/homekit/ (accessed 05.07.2018).\n8.\tNode-RED | Flow-based programming for the Internet of Things. Available at: https://nodered.org/ (accessed 06.07.2018).\n9.\tPaprocki W. How Transport and Logistics Operators Can Implement the Solutions of \"Industry 4.0\" // TranSopot 2016: Sustainable Transport Development, Innovation and Technology. 2017. Pp. 185-196.\n10.\tSensor Model Language (SensorML) | OGC. Available at: http://www.opengeospatial.org/standards/sensorml (дата обращения: 6.07.2018).\n11.\tThe Internet of Things is powered by Z-Wave. Available at: https://z-wavealliance.org/ (accessed 10.07.2018).\n12.\tVisual workflow engine. Available at: https://www.losant.com/iot-platform/visual-workflow-engine (accessed 06.07.2018).\n13.\tWelcome | RAML. Available at: https://raml.org/ (accessed 05.07.2018).\n14.\tYang J., Liu M., Lu J., Miao Y. Botanical Internet of Things: Toward Smart Indoor Farming by Connecting People, Plant, Data and Clouds // Mobile Networks and Applications. 2017. Vol. 23. No. 2. Pp. 188-202.\n15.\tZigbee Alliance. Available at: http://www.zigbee.org/ (accessed 06.07.2018).\nUDK 004.75\nIMPLEMENTATION OF SMART DEVICES AS WEB-SERVICES AND AUTOMATION OF THEIRS INTERACTIONS Roman K. Fedorov\nPhD., leading researcher, e-mail: idstu@icc.ru Aleksandr S. Shumilov\nPostgraduate, e-mail: idstu@icc.ru Matrosov Institute for System Dynamics and Control Theory of Siberian Branch of Russian Academy of Sciences, 664033, Irkutsk, Russia, Lermontov str., 134\nAbstract. The active development of hardware and software of the internet of things devices, as well as the development of the service-oriented approach can be observed in today's world of informational technologies. This article proposes to implement various devices of the internet of things as web-services with definition of theirs interactions using the distributed service compositions execution in heterogeneous environment software system, developed in ISDCT SB RAS.\nPresented approach was probated during automation of the office building management processes and is currently under constant development.\nKeywords: internet of things, service-oriented approach, service and devices compositions\nReferences\n1.\tFedorov R.K., Bychkov I.V., Shumilov A.S., Rugnikov G.M. Komponenty sredy WPS-servisov obrabotki geodannyh [Components of the WPS-service environment for spatial data processing] // Vestnik Novosibirskogo gosudarstvennogo universiteta. Serija: informacionnye tehnologii = Herald of Novosibirsk state university. Ser. Informational technologies. 2014. Vol. 12. No. 3. Pp. 16-24. (in Russian)\n2.\tFedorov R.K., Bychkov I.V., Shumilov A.S., Rugnikov G.M. Sistema planirovanija i vypolnenija kompozicij veb-servisov v geterogennoj dinamicheskoj srede [Software system of planning and executing web-services compositions in heterogeneous dynamic environment] // Vychislitel'nye tehnologii = Computational technologies. 2016. Vol. 21. No. 6. Pp. 18-35. (in Russian)\n3.\tFedorov R.K., Shumilov A.S. Sozdanie i publikacija WPS-servisov na osnove oblachnoj infrastruktury [Development and publication of WPS-services using the cloud infrastructure] // Vestnik BGU = Herald of BSU. 2015. No. 4. Pp. 29-35. (in Russian)\n4.\tArooj M., Asif M., Shah S. Modeling Smart Agriculture using SensorML // (IJACSA) International Journal of Advanced Computer Science and Applications. 2017. Vol. 8. No. 5.\n5.\tCelesti A., Galletta A., Carnevale L., Fazio M., Lay-Ekuakille A., Villari M. An IoT Cloud System for Traffic Monitoring and Vehicular Accidents Prevention Based on Mobile Sensor Data Processing // IEEE Sensors Journal. 2018. Vol. 18. No. 12. Pp. 4795-4802.\n6.\tFlow-based programming for the full stack. Available at: https://flowhub.io/ (accessed 07.07.2018).\n7.\tHomekit - Apple Developer. Available at: https://developer.apple.com/homekit/ (accessed 05.07.2018).\n8.\tNode-RED | Flow-based programming for the Internet of Things. Available at: https://nodered.org/ (accessed 06.07.2018).\n9.\tPaprocki W. How Transport and Logistics Operators Can Implement the Solutions of \"Industry 4.0\" // TranSopot 2016: Sustainable Transport Development, Innovation and Technology. 2017. Pp. 185-196.\n10.\tSensor Model Language (SensorML) | OGC. Available at: http://www.opengeospatial.org/standards/sensorml (дата обращения: 6.07.2018).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n11.\tThe Internet of Things is powered by Z-Wave. Available at: https://z-wavealliance.org/ (accessed 10.07.2018).\n12.\tVisual workflow engine. Available at: https://www.losant.com/iot-platform/visual-workflow-engine (accessed 06.07.2018).\n13.\tWelcome | RAML. Available at: https://raml.org/ (accessed 05.07.2018).\n14.\tYang J., Liu M., Lu J., Miao Y. Botanical Internet of Things: Toward Smart Indoor Farming by Connecting People, Plant, Data and Clouds // Mobile Networks and Applications. 2017. Vol. 23. No. 2. Pp. 188-202.\n15.\tZigbee Alliance. Available at: http://www.zigbee.org/ (accessed 06.07.2018).\n",
    "download_url": "https://cyberleninka.ru/article/n/predstavlenie-ustroystv-interneta-veschey-v-vide-veb-servisov-i-avtomatizatsiya-ih-vzaimodeystviya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/informatsionnoe-obespechenie-innovatsionnogo-menedzhmenta-v-obrazovanii",
    "slug": "informatsionnoe-obespechenie-innovatsionnogo-menedzhmenta-v-obrazovanii",
    "title": "Информационное обеспечение инновационного менеджмента в образовании",
    "abstract_description": "В результате исследования информационно-коммуникационных технологий в работе с одарёнными обучающимися общеобразовательной организации были получены следующие результаты: инновационно-технологический менеджмент в сфере образования предполагает не только управление технологическими, организационными и экономическими инновациями, но и менеджмент педагогических инноваций, то есть управление процессом разработки и распространения новых педагогических технологий, новых методов, приемов, методик преподавательской деятельности. В процессе разработки электронного учебного пособия применялось различное программно-информационное обеспечение: Constructor Electronic books, iSpring Free 5.7, JavaScript. На основе проведенной работы в очередной раз подтверждены неоспоримые преимущества разработки HTML-кода в обычном текстовом редакторе.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 376.54\nО. Н. Гринюк1, Н. В. Маслова1, Ю. М. Сафронова2*, Д. С. Ермаков3\n1Новомосковский институт (филиал) РХТУ им. Д.И. Менделеева, Новомосковск, Россия 301665, Тульская область, г. Новомосковск, ул. Дружбы, д. 8 2Международный инновационный университет, Сочи, Россия 354000, Краснодарский край, г. Сочи, ул. Орджоникидзе, д. 10 \"А\"\n3Новомосковский филиал Университета Российского инновационного образования, Новомосковск, Россия 301650, Тульская область, г. Новомосковск, ул. Бережного, д. 12 * e-mail: ikt.9@yandex.ru\nИНФОРМАЦИОННОЕ ОБЕСПЕЧЕНИЕ ИННОВАЦИОННОГО МЕНЕДЖМЕНТА В ОБРАЗОВАНИИ\nВ результате исследования информационно-коммуникационных технологий в работе с одарёнными обучающимися общеобразовательной организации были получены следующие результаты: инновационно-технологический менеджмент в сфере образования предполагает не только управление технологическими, организационными и экономическими инновациями, но и менеджмент педагогических инноваций, то есть управление процессом разработки и распространения новых педагогических технологий, новых методов, приемов, методик преподавательской деятельности. В процессе разработки электронного учебного пособия применялось различное программно-информационное обеспечение: Constructor Electronic books, iSpring Free 5.7, JavaScript. На основе проведенной работы в очередной раз подтверждены неоспоримые преимущества разработки HTML-кода в обычном текстовом редакторе.\nКлючевые слова: инновационный менеджмент в образовании; информационно-коммуникационные технологии; одарённые дети; электронные учебные пособия; HTML; JavaScript.\nИспользование\tинформационно-\nкоммуникационных технологий служит не только эффективным средством в работе с одарёнными обучающимися общеобразовательной организации (в том числе разработка электронного учебного пособия по информатике и информационно -коммуникационным технологиям), но также инструментом управления, маркетинга, рекламы, в целом - социально-экономическим инструментом, определяющим качество жизни современного человека и эффективность образовательной деятельности организации.\nПроведённый анализ литературы, практических разработок позволили определить основные требования к информационно-коммуникационным технологиям как инструменту управления: информационно-коммуникационные технологии помогают педагогам общеобразовательных организаций в поисках важной информации и новых методов в своей деятельности (контроль учебного процесса, демонстрация своих научных работ). Также использование электронных учебных пособий позволяет более красочно вести уроки, представляя материал более доступным и интересным методом для обучающихся [1].\nВ качестве средства разработки электронного учебного пособия по информатике и информационно-коммуникационным технологиям для работы с одарёнными обучающимися выбран язык разметки гипертекста HTML; в частности для улучшения компоновки страниц и оптимизации затрат труда были использованы фреймы; для реализации тестирования - язык JAVA SCRIPT поскольку HTML - это стандартный язык web\nпрограммирования, использующиися для разметки документов в Интернете. Возможности вышеуказанного языка программирования позволяют создавать интерактивные электронные учебные пособия, более удобными способами подключать различныи мультимедииныи контент к веб-странице, работать с разнообразными интерфейсами и многое другое.\nЯзык разметки гипертекста (HyperText Makeup Language - HTML) формулируется в терминах языка стандартной обобщенной разметки (Standard Generalized Markup Language - SGML). Язык SGML представляет собой метод создания структурированных документов, а также языков для их разметки. Все документы типа HTML придерживаются единых деклараций языка SGML и пролога. Следовательно, реализации программы WorldWide Web в общем случае лишь передают и сохраняют ту часть документа HTML, которая содержит данные [2].\nСущность разработки заключается в том, что электронные учебные пособия позволяют:\n-\tактивизировать познавательную деятельность одарённых обучающихся;\n-\tиндивидуально подходить к каждому ребёнку, используя разноуровневые задания;\n-\tповышать интерес к обучению (мотивация);\n-\tосуществлять дифференцированный\nподход;\n-\tоблегчить понимание изучаемого материала и тем самым более эффективно воздействовать на одарённого ребенка;\n-\tсэкономить время учителя-предметника\nдля самостоятельного изготовления и подбора наглядных и дидактических материалов;\n- родителям (законным представителям) одарённых обучающихся более эффективно включиться в образовательную работу.\nПри открытии электронного учебного пособия вначале появляется главная страница. В верхней части страницы располагается горизонтальное меню «Суть вопроса», «А как это сделать?», «Знания\nукладываются легко», «Лучшие квесты». Слева расположен сайдбар «Официальные документы», раздел «ЭОР». По центру страницы расположена главная информация об электронном учебном пособии, его целях и задачах. В самой нижней части страницы «Главная» расположении футер, где мы можем наблюдать следующую информацию «Безопасный Интернет детям», «Цифровые образовательные ресурсы» (рис. 1).\nРис. 1. Главная страница электронного учебного пособия\nПеред современным образованием стоит задача поиска новых видов и форм организации учебной деятельности. Обучение должно быть развивающим в плане развития самостоятельного критического и творческого мышления. С этой целью в электронном учебном пособии используется проектная технология, которая привлекает ресурсы сети Интернет. Но обилие информации в сети и ее качество не только не упрощают процесс работы над проектом, но и усложняют его. Одно из возможных решений данной проблемы это технология веб-квест. Образовательный веЬ-квест - это сайт в Интернете, с которым работают обучающиеся, выполняя ту или иную учебную задачу. Разрабатываются такие веб-квесты для максимальной интеграции Интернета в различные учебные предметы на разных уровнях обучения в учебном процессе. Они охватывают отдельную проблему, учебный предмет, тему, могут быть и межпредметными. Особенностью\nобразовательных веб-квестов является то, что часть или вся информация для самостоятельной или групповой работы обучающихся с ним находится на различных веб-сайтах. Кроме того, результатом работы с веб-квестом является публикация работ обучающихся в виде веб-страниц и веб-сайтов (локально или в Интернет). Также материалы могут быть представлены в виде устного выступления, компьютерной презентации, мультфильма и т.д.». Внешний вид страницы <^еЬ-квесты» представлен на рис. 2.\nРазработанное электронное учебное пособие может быть использовано в практической работе менеджеров, работающих в области информационных технологий, а также использоваться в целях информирования\tнеограниченного\tкруга\nпользователей.\nРис. 2. Страница электронного учебного пособия «Web-квесты по информатике и ИКТ»\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nГринюк Ольга Николаевна, к.т.н., доцент кафедры Автоматизации производственных процессов НИ РХТУ им. Д. И. Менделеева, Россия, Новомосковск.\nМаслова Наталия Васильевна, к.т.н., доцент кафедры Автоматизации производственных процессов НИ РХТУ им. Д. И. Менделеева, Россия, Новомосковск.\nСафронова Юлия Михайловна, студентка 6 курса факультета Экономики и социально-информационных технологий Международного инновационного университета, Россия, Сочи.\nЕрмаков Дмитрий Сергеевич, д.пед.н., профессор, заведующий кафедрой Математических и естественнонаучных дисциплин Новомосковского филиала Университета Российского инновационного образования, Россия, Новомосковск.\nЛитература\n1.\tОголева Л.Н. Инновационный менеджмент: учебник для вузов. М.: Инфра-М, 2003. 327 с.\n2.\tАкперов И.Г., Сметанин А.В., Коноплева И.А. Информационные технологии в менеджменте: учебник. М.: НИЦ ИНФРА-М, 2013. 400 с.\nGrinyuk Olga Nikolaevna 1, Maslova Natalia Vasilevna 1, Safronova Yulia Mikhailovna 2*, Ermakov Dmitry Sergeevich 3\n1Novomoskovsk Institute (D. Mendeleev University Branch), Novomoskovsk, Russia\n2\tInternational innovative university, Sochi, Russia\n3\tNovomoskovsk branch of University of the Russian innovative education, Novomoskovsk, Russia * e-mail: ikt.9@yandex.ru\nINFORMATION SUPPORT OF INNOVATIVE MANAGEMENT IN EDUCATION\nAbstract\nAs a result of research of information and communication technologies in work with gifted trained in the general education organization the following results have been received: innovatively - technological management in education assumes not only management of technological, organizational and economic innovations, but also management of pedagogical innovations, that is management of process of development and distribution of new pedagogical technologies, new methods, receptions, techniques of teaching activity. In the course of development of the electronic manual various program information support was applied: Constructor Electronic books, iSpring Free 5.7, JavaScript. On the basis of the carried-out work indisputable advantages of development of a HTML code in a usual text editor once again are confirmed.\nKey words: innovative management in education; information and communication technologies; exceptional children; electronic manuals; HTML; JavaScript.\n",
    "download_url": "https://cyberleninka.ru/article/n/informatsionnoe-obespechenie-innovatsionnogo-menedzhmenta-v-obrazovanii/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metod-optimizatsii-protsessa-testirovaniya-veb-resursov-na-osnove-mnogokriterialnogo-podhoda",
    "slug": "metod-optimizatsii-protsessa-testirovaniya-veb-resursov-na-osnove-mnogokriterialnogo-podhoda",
    "title": "Метод оптимизации процесса тестирования веб-ресурсов на основе многокритериального подхода",
    "abstract_description": "В данной работе предложен метод оптимального учета совокупности методик для эффективного тестирования веб-ресурсов на основе опроса экспертов в данной области. Алгоритм оптимального использования методов тестирования позволит сократить время на этап проведения тестирования, но с сохранением максимального покрытия тестами, а, следовательно, и качества вебресурса",
    "full_text_body": "\n\n\n\n\uFEFFа □-\nУ данш роботi запропоновано метод оптимального врахування сукупностi методик для ефективного тестування веб-ресур-Ыв на основi опитування експертiв в данш областi. Алгоритм оптимального викори-стання методiв тестування дозволить ско-ротити час на етап проведення тестування, але зi збереженням максимального покрит-тя тестами, а, отже, i якостi веб-ресурсу\nКлючовi слова: програмний продукт, тестування, оптимiзацiя по Парето, мето-\nди тестування\n□-□\nВ данной работе предложен метод оптимального учета совокупности методик для эффективного тестирования веб-ресурсов на основе опроса экспертов в данной области. Алгоритм оптимального использования методов тестирования позволит сократить время на этап проведения тестирования, но с сохранением максимального покрытия тестами, а, следовательно, и качества веб-ресурса\nКлючевые слова: программный продукт, тестирование, оптимизация по Парето,\nметоды тестирования -□ □-\n1. Введение\nВ настоящее время развития и внедрения различных технологий, программных средств и сред разработки, появления на рынке новых технологических решений, количество видов, типов программного обеспечения возросло. При создании типичного веб-проекта (сайта, портала) около половины общего времени и более 50 % общей стоимости расходуется на тестирование разрабатываемой программы или системы. Тестирование является важным этапом в создании программного продукта (ПП), однако к настоящему времени тестирование программ не поднялось до уровня точной науки. Данный немало важный этап разработки ПП освещен меньше, чем любой другой аспект разработки программного обеспечения [1].\nВ условиях огромного многообразия веб-ресурсов, подход к процессу тестирования унифицирован. Очень часто особенности типа продукта, его слабые места не учитываются, а тестирование выполняется по принципу «какие успею методы применить, те и применю» в условиях жесткого ограничения по времени и большого количества методов тестирования. Стоит отметить, что в настоящий момент не существует определенного единого алгоритма применения совокупности методов тестирования [2 - 3] для конкретного типа продукта.\nРазработка данного алгоритма, а также его дальнейшее применение позволит:\n1. Сократить время, отведенное на тестирование программного продукта на этапе кодирования, с сохранением покрытия тестами продукта, что сохранит гарантии качества.\nУДК 004.934.5\nМЕТОД ОПТИМИЗАЦИИ\nПРОЦЕССА ТЕСТИРОВАНИЯ ВЕБ-РЕСУРСОВ НА ОСНОВЕ МНОГОКРИТЕРИАЛЬНОГО ПОДХОДА\nН.Е. Кул и шова\nКандидат технических наук, доцент* Контактный тел.: (057) 702-13-78 Е-mail: kunonna@mail.ru М.И. Глуходед* Е-mail: glukhodid.m@gmail.com *Кафедра «Мультимедийные системы и технологии» Харьковский национальный университет радиоэлектроники пр. Ленина, 16, г. Харьков, Украина, 61166\n2. Конкретизировать и оптимизировать рабочий процесс инженеров по качеству на этапе тестирования программного продукта после его кодирования.\nСоответственно, целью данной статьи является разработка такого алгоритма оптимального использования методов тестирования, чтобы время на данный этап было сокращено, но с сохранением максимального покрытия тестами, а, следовательно, и качества веб-ресурса.\n2. Основная часть\nЗадача принятия оптимальных решений состоит в выборе среди множества возможных решений таких решений, которые являлись бы в определенном смысле лучшими, или, как говорят, оптимальными. В рассматриваемом частном случае необходимо найти некое множество оптимальных методов тестирования, применимых для конкретного web-ресурса.\nРазработанный метод приведен на рис. 1. Данный метод систематизирует набор шагов и действия, которые необходимо предпринять для получения результата - оптимального набора методов тестирования для web-ресурса.\nИсходными данными для метода является набор известных методик тестирования. В рамках решения поставленной задачи формируется набор характеристик, оценки которым ставит выбранная группа экспертов в данной области.\nДля случая тестирования web-ресурса характерен случай многокритериальности, что означает задачу выбора оптимального множества применяемых мето-\n©\nдов тестирования, каждый из которых имеет частные характеристики, определяемые опрашиваемыми экспертами.\nиному показателю формируется, исходя из взвешенной суммы следующего вида:\nРМ = ^1к1 + ^2к2 + ... + ^\n(1)\n2.2. Нахождение оптимального набора методов тестирования\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПрименительно к данному случаю полагается, что принимаемое решение х это вариант системы ф = ^,Р), который определяется своей структурой s (совокупностью элементов и связей) и вектором параметров в . Эффективность системы оценивается совокупностью показателей качества и соответствующей векторной целевой функцией\nк(ф) = (к1(ф),...,к,(ф),...,кт(ф)).\n(2)\nРис. 1. Разработанный метод\n2.1. Формирование суждений экспертов\nДля нахождения множества несравнимых методов тестирования применяется многокритериальная оптимизация по Парето, для формирования обобщенных суждений ЛПР по характеристикам методов - взвешенная сумма.\nДопустим таких экспертов N . Каждый эксперт, в зависимости от его опыта в разработке ПП и профессионального стажа, помечается нормированным коэффициентом £,¡,1 = 1...№\nКаждый рассматриваемый метод тестирования имеет определенное количество показателей качества, допустим М. Все эксперты высказывают свои суждения по тому или иному показателю качества в любом удобном им численном виде к. При этом для каждого суждения применяется формула нормирования к- =—— . Затем показатели качества преоб-к;тах\nразовываются в сопоставимый вид, чтобы они носили однотипный характер. Общее суждение по тому или\nПоказатели качества системы, как правило, связаны между собой и являются антагонистическими. Это означает, что улучшение одних показателей качества при изменении структуры и параметров системы достигается за счет ухудшения других показателей качества.\nСуществующие ограничения на условия работы, структуру s е$д и параметры РеВд системы, а также на значения ее показателей качества, определяют подмножество допустимых проектных решений Фд = Sд хВд. Здесь существуют противоречивые требования. С одной стороны, желательно с максимальной полнотой представить все возможные варианты системы, чтобы не пропустить потенциально лучших вариантов решений. С другой стороны, существуют ограничения, определяемые допустимыми затратами (времени и средств) на процесс проектирования системы.\nВ рассматриваемом случае Парето-множество [4 - 5] представляет собой совокупность методов тестирования, оптимальных по показателям качества М, определенным экспертами заранее.\nПарето-оптимальные проектные решения могут быть найдены как непосредственно на множестве Фд с применением введенных бинарных отношений предпочтения, так и в пространстве введенных показателей качества - критериальном пространстве оценок. При этом каждый вариант системы ф отображается из множества допустимых вариантов Ф д в критериальное пространство Yс Я1\"\nY = К(ФД) = {у eY|y = (к(ф), феФд }.\nОтношению предпочтения у на множестве Фд соответствует отношение > в критериальном пространстве оценок Y. Для любых двух проектных решений ф',ф\"еФд, для которых верно векторное неравенство к(ф')> к(ф'') , всегда имеет место отношение ф' у ф''.\nЗдесь следует отметить, что показатели качества (целевые функции) методов тестирования могут быть трех типов: нейтральными, согласованными между собой и конкурирующими между собой. В первых двух случаях оптимизация системы может осуществляться в отдельности по каждому из показателей качества. В третьем случае достигнуть потенциального значения\nкаждого из показателей в отдельности не представляется возможным.\nПри этом может быть достигнут лишь согласованный оптимум введенных целевых функций - оптимум по критерию Парето. Это означает, что дальнейшее улучшение каждого из показателей может быть достигнуто лишь за счет ухудшения остальных показателей качества системы.\nОптимуму по критерию Парето в критериальном пространстве соответствует подмножество Парето-оптимальных оценок, которые соответствуют недоминируемым вариантам системы\nв которой весовые коэффициенты Х1,Х2,...,Хт выбираются из условия Х! >0,\t= 1. Множество Па-\n1=1\nрето-оптимальных решений содержит те варианты системы, которые удовлетворяют условию (4) при разных допустимых комбинациях весовых коэффициентов Х1,X2,...,Хт .\nМетод рабочих характеристик состоит в том, что все целевые функции, кроме одной, например, первой, переводятся в разряд ограничений типа равенства, и ищется её экстремум на множестве допустимых альтернатив Фд\nP(Y) = opt,Y = {к(фо)е^ЭД^Ь^>к(фо)}. (3)\t) U ефр^,\nk\tД\tфеФэ\nПри нахождении подмножества Парето-оптималь-ных оценок, согласно (3), исключаются безусловно худшие оценки, а следовательно, и соответствующие им безусловно худшие варианты системы.\nНахождение Парето-оптимальных оценок и соответствующих им решений может производиться согласно (3) методом дискретного выбора при конечной мощности множества допустимых вариантов системы Фд.\nКроме этого, для нахождения Парето-оптималь-ных решений могут быть использованы специальные методы, например, весовой метод, метод рабочих характеристик, метод последовательных уступок и другие методы.\nВ частности, в случае применения весового метода Парето-оптимальные проектные решения находятся путем оптимизации взвешенной суммы частных целевых функций\nк2(ф) = К2ф;к3(ф) = К3ф,...,кт(ф) = КИф },\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n(5)\nPk(Фд ) = {ф(о) е Фд : argexte[кр(ф) =\n= *А(ф) + ^2к2(ф)+... + ^ткт(ф)]},\n(4)\nгде К2ф,К3ф,...,Ктф - некоторые фиксированные, но произвольные значения показателей качества.\n3. Выводы\nВ данной статье предложен метод оптимального учета совокупности методик для эффективного тестирования веб-ресурсов на основе опроса экспертов в данной области.\nДля решения поставленной задачи нужно решить несколько частных задач: на основе опроса экспертов в области тестирования и применении многокритериальной оптимизации найти оптимальное множество методов тестирования для частных случаев веб-ресурса; разработать алгоритм применения методов тестирования для обеспечения максимального качества веб-ресурса с сокращением времени.\nЛитература\n1.\tМолодцова, О.П. Управлшня якютю програмно! продукцп [Текст]: навчальний посiбник / О.П. Молодцова. - К. КНЕУ, 2001. - 248 с.\n2.\tФокс, Дж. Программное обеспечение и его разработка [Текст] / Дж. Фокс. - Пер. с англ. - М.: Мир, 2001. - 368 с.\n3.\tThe Economic Impacts of Inadequate Infrastructure for Software Testing Research [Электронный ресурс] / NIST Planning Report № 02-3, RTI Health, Social, and Economics Research. - Research Triangle Park, NC. - May 2002 - Mode of access: http://spinroot. com/spin/Doc/course/NISTreport02-3.pdf.\n4.\tБерезовский, Б.А., Барышников, Ю.М., Борзенко, В.И., Кепнер, Л.М. Многокритериальная оптимизация. Математические аспекты [Текст] / Б.А. Березовский, Ю.М. Барышников, В.И. Борзенко, Л.М. Кепнер. - М.: Наука. - 1986 - 186 с.\n5.\tБезрук, В.М. Векторна оптимiзацiя та статистичне моделювання в автоматизованому проектуванш систем зв'язку [Текст] / В.М. Безрук. - Харгав: ХНУРЕ. - 2002. - 156 c.\nAbstract\nThe number of types of software has been increased. When creating a typical web project (website, portal) about half of the time and more than 50% of the total cost is testing the developed program or system. Testing is an important step in creating a software product. The purpose of this paper is to develop such an algorithm of optimal use of testing methods to reduce the time on testing period, but with preservation of the maximum test coverage, and, consequently, the quality of a web resource. The task of making optimal decisions is to choose among the many possible solutions. The method, which integrates set of steps and actions to be taken to get the best result - an optimal set of test methods for web-resource, is developed.\nInput data for the method is a set of well-known testing techniques. As part of the solution of the problem a set of characteristics is formed and evaluated by the group of experts in the field.\nIn this paper, a method for the optimal set of accounting methods for effective testing of web resources based on a survey of experts in the field, is proposed.\nTo solve this problem we must solve some specific issues:\n-\tfinding the optimal set of test methods for specific cases of the website based on a survey of experts in the field of testing and applying multi-criteria optimization;\n-\tdeveloping an algorithm of test methods to ensure the highest quality web resource\nKeywords: software, testing, Pareto optimization, testing method\nПредставлено аналтичне дослиджен-ня новттх технологш WEB-дизайну, ана-лiз основних алгоритмiв просування сайтiв та гх практична реалiзацiя у виглядi тте-рактивного мультимедшного навчального поыбника «HTML5/CSS3, JavaScript/SEO. Розробка сучасних сайmiв»\nКлючовi слова: ттернет-технологи, динамiчна графша, ттерфейс, методи пошуковог оптимiзацiг, ранжування сай-тiв\n□-□\nПредставлено аналитическое исследование новейших технологий WEB-дизайна, анализ основных алгоритмов продвижения сайтов и их практическая реализация в виде интерактивного мультимедийного обучающего пособия «HTML5/CSS3, JavaScript/SEO. Разработка современных сайтов»\nКлючевые слова: интернет-технологии, динамическая графика, ттерфейс, методы поисковой оптимизации, ранжирование сайтов -□ □-\nУДК 004.89\nИССЛЕДОВАНИЕ НОВЕЙШИХ ВЕБ-ТЕХНОЛОГИЙ И АЛГОРИТМОВ ПРОДВИЖЕНИЯ САЙТОВ\nИ.Н. Егорова\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКандидат технических наук, доцент Кафедра мультимедийных систем и технологий* Контактный тел.: (057) 702-13-78 E-mail: irinaiegorova@gmail.com Е.А. Бондаренко Кафедра медиасистем и технологий* Контактный тел.: 099-420-88-64 Е-mail: lena.guz@mail.ru *Харьковский национальный университет радиоэлектроники пр. Ленина, 16, г. Харьков, Украина, 61166\n1. Введение\nТехнологии создания клиентского интерфейса, а именно HTML5, CSS3, JavaScript,- представляют большой интерес в области современной WEB-разработки, так как позволяют значительно расширить функциональные возможности WEB-страниц, поддерживают работу с новейшими мультимедийными приложениями, при этом сохраняя легкость чтения кода пользователем и ясность исполнения компьютером.\nHTML5 - является перспективным направлением развития интернет-технологий. Семантическая разметка, структурные теги, динамическая графика, геолокация, добавление видео без использования сторонних плагинов, таких как Flash и QuickTime - вот то, что позволило создать новый ориентир в сфере разработки клиентского интерфейса, как для Web, так и для мобильных приложений.\nТакое многообразие новых возможностей особенно в сфере web -графики порождает ряд вопросов об особенностях их применения, и в частности:\n©\n-\tинтеграция с давно прижившимися web-техно-логиями;\n-\tцелесообразность использования динамической графики средствами HTML5 в том или ином проекте,\n-\tвозможности современных браузеров в поддержке столь перспективного направления web-проектиро-вания;\n-\tпути решения проблемы восприятия HTML5-тех-нологий некоторыми браузерами (InternetExplorer).\nДаже самый красивый, информационно-полезный и удобный сайт, разработанный в соответствии с новейшими тенденциями и технологиями web - проектирования, нуждается в соответствующем продвижении.\nПоисковая оптимизация представляет собой комплекс мер для поднятия позиций сайта в результатах выдачи поисковых систем по определенным запросам пользователей.\nОбычно чем выше позиция сайта в результатах поиска, тем больше заинтересованных посетителей его посетит.\n",
    "download_url": "https://cyberleninka.ru/article/n/metod-optimizatsii-protsessa-testirovaniya-veb-resursov-na-osnove-mnogokriterialnogo-podhoda/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/problemy-vybora-yazykov-programmirovaniya-pri-razrabotke-krossplatformennyh-prilozheniy",
    "slug": "problemy-vybora-yazykov-programmirovaniya-pri-razrabotke-krossplatformennyh-prilozheniy",
    "title": "Проблемы выбора языков программирования при разработке кроссплатформенных приложений",
    "abstract_description": "Одним из первых шагов при создании любой программы является выбор языка программирования. А с кроссплатформенными приложениями эта проблема встает особенно остро. В данной работе рассматриваются факторы, влияющие на выбор языка разработки. Приведены примеры использования возможных языков и технологий, подробно описан практический опыт применения некоторых из них при создании реальных приложений.",
    "full_text_body": "\n\n\n\n\uFEFFПроблемы выбора языков программирования при разработке кроссплатформенных приложений\nЗахаров В.Б, Мальковский М.Г., Мостяев А.И.\nАннотация — Одним из первых шагов при создании любой программы является выбор языка программирования. А с кроссплатформенными приложениями эта проблема встает особенно остро. В данной работе рассматриваются факторы, влияющие на выбор языка разработки. Приведены примеры использования возможных языков и технологий, подробно описан практический опыт применения некоторых из них при создании реальных приложений.\nКлючевые слова — мобильные приложения, переносимость программ, пользовательский интерфейс, шахматные приложения.\nI. Введение\nВ настоящее время роль персонального компьютера, как единственного инструмента для выполнения программ и общения через интернет, стала заметно снижаться. Появилось множество новых устройств - смартфоны, планшеты, умные часы и телевизоры, другая бытовая техника. Большинство пользователей в своей повседневной жизни используют несколько устройств и хотят использовать знакомые приложения на каждом из них. Для создания программ для различных устройств и платформ существует множество инструментов, зачастую в корне различающихся используемыми технологиями.\nПеред разработчиками приложений встает проблема разработки кроссплатформенных приложений, способных работать на разных устройствах и операционных системах. Например, на персональных компьютерах под управлением операционных систем Windows, Linux или macOS, на телефонах, планшетах, телевизорах и умных часах под управлением мобильных операционных систем Android и iOS или в веб-браузерах. Хорошим примером такой универсальной программы может служить программа облачного хранения файлов Dropbox, имеющая приложения для персональных компьютеров, мобильных устройств и веб-браузера.\nНо далеко не каждая компания может себе позволить\nСтатья получена 16 июня 2017.\nЗахаров Виктор Борисович, МГУ, ф-т ВМК, н.с. (e-mal: victorldis@gmail .com).\nМальковский Михаил Георгиевич,\tМГУ, ф-т ВМК, профессор (e-mal: malk@cs.msu.su).\nМостяев Артем Игоревич, МГУ,\tф-т ВМК, аспирант (e-mal: reistlin12@gmail.com).\nразработку отдельных приложений для каждой из платформ. В связи с этим встает вопрос об оптимизации процесса разработки для нескольких платформ. В настоящий момент программисты не могут исходить в выборе языка программирования по принципу любимого языка, на котором они уже написали много программ. Потребуется предварительная проработка всех вопросов, связанных с созданием программного продукта и принятие взвешенных решений. В данной работе проводится анализ возможных подходов к созданию кроссплатформенных приложений.\nII. Актуальность проблемы\nПроблема переносимости сейчас затрагивает большую часть имеющихся на рынке программ. В зависимости от назначения программ [1], проблемы переносимости проявляются по-разному. Рассмотрим возможные варианты.\nA.\tВычислительные программы\nНаименее всего проблема переносимости затрагивает различные вычислительные программы, например, программы расчета математических или физических моделей, которые не требуют сложного графического интерфейса. Чаще всего требуется просто ввести определенный набор данных и получить результаты. Кроме того, часто возникает задача удаленного доступа к вычислительным мощностям (в частности, суперкомпьютерам) на разных платформах через удаленные программы-терминалы, работающие с командной строкой. Такие программы-терминалы используют текстовый ввод-вывод и сравнительно легко переносятся на все платформы.\nB.\tПростые приложения\nДругим примером являются программы, реализующие алгоритмы, не требующие больших вычислительных мощностей. Например, алгоритмы кодирования и декодирования аудио- и видео-информации. Мощности современных мобильных устройств хватает для выполнения таких алгоритмов, и многие пользователи хотят иметь возможность работать с данными мультимедиа не только со стационарных компьютеров. Интерфейс указанных программ состоит в последовательном выборе нескольких опций и файлов, то есть, он также достаточно примитивный. Проблема переносимости проявляется в выборе языка программирования, имеющего компиляторы для всех\nнеобходимых платформ.\nC.\tПростые приложения\nВ следующие группу входят приложения, использующиеся людьми в повседневной жизни. Например, приложения для доступа к электронной почте или обмена сообщениями. Они существуют для всех платформ и предоставляют одни и те же возможности в работе на различных платформах. Причем для каждой платформы создается отдельное приложение. Графический интерфейс данных программ обычно не сложен и чаще всего использует стандартные графические элементы. Проблема переносимости здесь проявляется уже не только в выборе языка программирования, но и в способе организации пользовательского интерфейса, ведь для каждой платформы рекомендованы свои правила построения интерфейса, зависящие от требований операционной системы и физических размеров устройства.\nD.\tИгровые программы\nТакже можно выделить еще одну большую группу программ — игровые программы. Они в основном используют специальные инструменты для отображения — игровые движки. Здесь для поддержки какой-либо платформы, в первую очередь, необходимо наличие версии игрового движка для нее.\nE.\tПрограммы со сложным интерфейсом\nСамую проблемную группу составляют программы со сложным графическим интерфейсом, требующие активного взаимодействия как различных экранных элементов, так и функциональных блоков программы. Это могут быть аналитические и деловые программы, стратегические и логические игры и многое другое. В создании таких программ важную роль играют дизайнеры пользовательского интерфейса. Указанная группа программ требует наибольших усилий по переносу, так как, с одной стороны, существует множество форм-факторов используемых устройств, а с другой стороны, концепции дизайна фирм-производителей (Apple, Google, Microsoft) сильно отличаются друг от друга.\nИз краткого описания видно, что для любого современного приложения, независимо от его назначения, возникает потребность решения проблем кроссплатформенности на самых ранних этапах разработки. В следующих главах будут описаны возможные подходы к решению проблемы переносимости.\nIII. Выбор языка программирования\nКомпании-поставщики операционных систем или платформ предоставляют разработчикам свои средства для разработки приложений. Далее в статье мы будем называть эти средства родными. Родные средства базируются на каком-либо языке программирования и включают в себя набор системных библиотек. Ключевым, применительно к теме данной работы, является язык программирования, выбранный\nкомпанией-поставщиком.\nТак, компания Microsoft предоставляет набор языков программирования для разработки приложений для Universal Windows Platform (единая платформа, работающая на персональных компьютерах, телефонах и планшетах) — C++, C#, Visual Basic и JavaScript [2]. Компания Apple предлагает разработчикам использовать языки программирования Objective-C и Swift для создания программ для операционных систем macOS, iOS, watchOS and tvOS [3]. А компания Google предлагает использовать язык Java [4] для разработки программ для операционной системы Android.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНесколько иная ситуация с созданием веб-приложений. Традиционно они разделяются на две составляющие - клиентскую (front-end) и серверную (back-end), для каждой из которых может использоваться свой язык программирования. Для клиентской части в подавляющем большинстве случаев используется язык JavaScript. Для серверной части набор языков программирования просто огромен. Наиболее распространенные из них - это PHP, C#, Java, С++, Scala, Ruby, Python (Django), JavaScript (Node.js). Хотя есть и довольно экзотические варианты вроде Hack, Erlang, Haskell и Prolog. Такое обилие связано с тем, что общение между клиентской и сетевой частями стандартизовано, и реализация серверной части может быть выполнена на любом языке, лишь бы она предоставляла интерфейс доступа, соответствующий стандарту.\nМы видим, что основные языки программирования для разных платформ различаются. Тем не менее, практически каждый из указанных языков в той или иной степени доступен почти на всех платформах, вопрос только в качестве его реализации на неродных платформах.\nДостаточно популярно стало использование наборов интегрированных\tбиблиотек\t(фреймворков),\nпозволяющих вести разработку приложения на одном языке программирования для нескольких платформ. На данный момент существует несколько фреймворков. Описание возможностей и принципов работы каждого из них требует отдельной статьи, поэтому приведем краткое описание наиболее распространенных из них, различающихся языком разработки, чтобы показать неоднозначность в выборе языка программирования даже при выборе фреймворка.\nОдним из самых распространенных фреймворков является Qt, позволяющий создавать приложения на языке С++ для множества платформ - Unix, Windows, macOS, Android, iOS [5]. Он предоставляет встроенные библиотеки для взаимодействия с платформой на языке С++, а также встроенный редактор интерфейса.\nРаспространенным вариантом кроссплатформенных фреймворков являются реализации, использующие веб-технологии, в частности, язык JavaScript. Так как сейчас никакая платформа, предназначенная для широкого круга пользователей, не может существовать без возможности отображения веб-содержимого, то программы, написанные на языке JavaScript и\nиспользующие HTML и CSS для отображения, могут быть запущены практически на всех платформах. Существуют специальные библиотеки, которые упрощают процесс создания таких приложений и расширяют их возможности. Например, Apache Cordova для мобильных платформ и React для веб-сайтов и персональных компьютеров.\nДругим примером кроссплатформенного фреймворка является сочетание пакетов Delphi RTL и FireMonkey. Существуют реализации для платформ Windows, Unix, macOS, iOS и Android [6]. Фреймворк состоит из двух частей - среды выполнения (Delphi RTL) и кроссплатформенной библиотеки интерфейса (FireMonkey).\nОпять же отдельно стоит выделить средства для создания игровых программ. Они, как правило, уже базируются на фреймворке или движке, который является кроссплатформенным. Примером может служить игровой движок Unity, предлагающий разработку на языке C#. Движок доступен для множества платформ, включая Windows, Unix, macOS, iOS и Android [7].\nКаждый из фреймворков обладает определенными достоинствами и недостатками. Так, Qt и Delphi обеспечивают хорошую производительность программ, но для поддержки графического интерфейса требуются бОльшие ресурсы, чем это требуется для родных приложений. JavaScript обеспечивает самую лучшую переносимость графических элементов под разные форм-факторы устройств, но более-менее сложные программы, написанные на JavaScript заметно тормозят, особенно на устаревших устройствах. Программы на С# зачастую плохо поддерживают весь набор библиотек, встроенных в операционную систему.\nПолучается, что выбор языка программирования для создания многоплатформенного приложения очень неоднозначный.\n•\tДля каждой платформы можно использовать её родной язык программирования.\n•\tМожно использовать хорошо освоенный разработчиками приложения их любимый язык, но постоянно решать проблемы, связанные с его некачественной реализацией на какой-либо платформе. Проблема не только в том, что группа программистов привыкла к определенному языку, а в том, что на этом языке уже написаны значительные объемы кода. И встает вопрос, использовать его как есть, или переписывать на другой язык.\n•\tМожно использовать универсальный фреймворк, но каждый из них имеет как определенные достоинства, так и значимые недостатки, которые могут не позволить создать программу приемлемого качества. Каким бы заманчивым не было решение использовать единый код для всех платформ, стоит четко понимать, что фреймворки не могут быть также хороши как родные средства. Во-первых, в них с опозданием вносится поддержка новых функций операционных систем. Во-вторых, они\nдобавляют слой программного кода. Наличие этого слоя как ведет к некоторой (а иногда и значительной) потере производительности, так и вызывает неизбежные ошибки, борьба с которыми вызывает постоянную головную боль у разработчиков.\nНо обязательно ли ограничивать выбор только одним языком разработки? Ведь для каждой из платформ выбран свой язык по какой-то причине. Может использования нескольких языков не стоит так категорично избегать? В следующей главе будут рассмотрены варианты совмещения нескольких языков программирования при создании кроссплатформенных приложений.\nIV. Совмещение нескольких языков\nПРОГРАММИРОВАНИЯ Любая программа, как только она выходит за рамки одного программного модуля или класса, становится представима в виде сочетания нескольких составных частей.\nВ программе можно выделить основную часть, не зависящую от конкретной платформы. Если говорить очень обобщенно, то это множество алгоритмов, реализующих основные функции программы, так называемая бизнес-логика приложения. Данная часть является основной составляющей программы, делающей эту программу значимой, весомой для пользователя. Поэтому к ней предъявляются повышенные требования по корректности, надежности и отказоустойчивости. Соответственно, на создание этой части требуются значительные усилия команды разработчиков, и возникает естественное желание использовать единственную, проверенную и надежную реализацию этой бизнес-логики на всех поддерживаемых платформах.\nНо приложение состоит не только из бизнес-логики. В нем также есть и интерфейс взаимодействия с пользователем (пользовательский интерфейс). Как правило, пользовательский интерфейс зависит от платформы. Компания-поставщик платформы предоставляет специальные инструменты для построения пользовательского интерфейса, а в процессе работы программы он управляется программным кодом, написанным на одном из языков, предоставляемым поставщиком платформы. То есть, интерфейс является частью приложения, зависящей от конкретной платформы.\nA. Реализация бизнес-логики Принимая во внимание выводы, сделанные выше, можно считать оправданным разделение приложения на бизнес-логику и интерфейс, где бизнес-логика является кроссплатформенной частью. К счастью, для подобного разделения есть несколько доступных решений. Например, язык C# широко используется в программировании для Windows и Web, а также имеет специальную интегрированную среду разработки (IDE) Xamarin для создания приложения для мобильных\nплатформ Android и iOS. Кроме того, с недавнего времени, язык поддерживается на macOS и Unix. Иными словами, бизнес-логика, написанная на языке C#, может быть использована на всех популярных платформах, и, с помощью специальных средств разработки, подключена к родному интерфейсу системы.\nДругим\tязыком\tкроссплатформенного\nпрограммирования является С++. Так как первая его версия была создана давно (относительно других языков, предлагаемых для разработки на современных платформах), то при выходе более новых языков программирования (Java, Objective-C, C#) создателям приходилось оставлять возможность подключения модулей на С++. Отчасти, это было вызвано тем, что при появлении этих языков большое количество алгоритмов уже были реализованы на С++. К тому же, язык С++ отличается лучшей производительностью, нежели языки с автоматической сборкой мусора, поэтому части программ, требующие высокой производительности, по-прежнему было необходимо разрабатывать на С++.\nВ результате, сейчас программный код на языке С++ можно использовать на любой популярной платформе, в сочетании с другим языком программирования. Для Windows и Unix это осуществляется через динамически подключаемые библиотеки (.dll и .so), для Android с помощью технологии Java Native Interface (JNI), а для macOS и iOS компилятор языка Objective-C полностью поддерживает компиляцию языка С++. А новый язык Swift для разработки для платформ macOS и iOS поддерживает связь с языком Objective-C. Для подключения С++ к языку JavaScript есть несколько возможных вариантов — инструменты Emscripten и WebAssembly, позволяющие кросскомпилировать язык С++ в JavaScript и родные расширения для Node.js (Native Addons) [8].\nВ качестве примера кроссплатформенного использования языка С++ можно привести алгоритмы кодирования и декодирования мультимедиа (JPEG, mp3, ffmpeg), реализованные на языке С++, которые используются почти ежедневно любым человеком, работающим с компьютером.\nB. Реализация сетевых функций Также стоит отметить тот факт, что большинство современных приложений используют сетевые функции, которые разделяются на клиентскую и серверную части.\nВзаимодействие с сервером ведется по заранее установленному протоколу, поэтому выбор языка программирования для основной программы не влияет на выбор серверного языка программирования. Для реализации серверной части доступен большой набор языков программирования, и здесь разработчики легко могут выбрать наиболее подходящий.\nДругой вопрос состоит в реализации общения с сервером - использовать ли для него кроссплатформенный язык или нет. Однозначного ответа на этот вопрос нет. Родные языки программирования предоставляют библиотеки для\nработы с сетью, которые могут использовать различные настройки\tи\tособенности\tсистемы.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКроссплатформенные средства не всегда могут обеспечить весь набор возможностей. Но эти возможности не всегда необходимы для минимальных сетевых функций, поэтому окончательное решение зависит от требований к сетевой функциональности программы. Здесь тоже возможно смешанное решение. Например, формировать данные для сетевых запросов в кроссплатформенной части, а затем передавать их с помощью родных библиотек для каждой платформы.\nV. ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС\nПомимо бизнес-логики и сетевой части, в приложениях есть еще одна большая составляющая -пользовательский интерфейс. Его качеством никогда нельзя пренебрегать при создании приложений, ориентированных на конечных пользователей, а удобство и простота интерфейса облегчают жизнь как пользователям, так и разработчикам.\nМожно выделить 3 основных технологии реализации пользовательского интерфейса:\nA.\tИспользование родных для платформы графических элементов.\nB.\tИспользование языка JavaScript и технологий HTML и CSS. Для краткости будем их далее называть JavaScript-технологиями.\nC.\tИспользование промежуточного графического движка, заменяющего родные графические средства (OpenGL, FireMonkey, Qt).\nA.\tРодные технологии позволяют создавать интерфейс, наиболее отвечающий рекомендациям разработчиков платформ. Программы выглядят более привычными для пользователей, они знают, где искать необходимые функции. Кроме того, доступен большой дополнительный набор компонент, созданных как производителями платформ, так и сторонними разработчиками. Родной интерфейс при работе требует минимальных ресурсов и отличается хорошей реакцией. Единственный недостаток - для каждой новой платформы интерфейс программы требуется создавать заново в соответствии с требованиями этой платформы, её редактора интерфейса и родного языка программирования.\nB.\tНапротив, JavaScript-технологии теоретически позволяют добиться полной переносимости. Браузерные движки хорошо стандартизированы (по сравнению с родными средствами), они установлены фактически на всех платформах. Правда, отметим, что для совместимости со всеми устройствами разработчикам приходится ориентироваться не на самые современные версии этих движков, а на более ранние, что снижает возможную функциональность.\nИз недостатков, в первую очередь, отметим, что язык JavaScript изначально ориентирован на интерпретацию исходного кода, что определяет медленное выполнение программ, написанных на этом языке. Но, так как браузерные движки являются важнейшей составной частью всех платформ, то разработчики движков\nприкладывают значительные усилия для того, чтобы повысить эффективность выполнения JavaScript-программ. В частности, широко используется компиляция на лету. Это и многое другое позволяет добиться приемлемой скорости работы JavaScript-приложений, хотя отставание от других технологий по быстродействию часто остается заметным.\nC. Использование промежуточного графического движка, в первую очередь, востребовано в приложениях, в которых присутствуют сложные графические объекты, с элементами движения и наличием слоев. В частности, хорошо подходит для подобных целей библиотека OpenGL. Использование же подобных движков для написания общего пользовательского интерфейса хотя и решает задачу переносимости, делает интерфейс приложений непохожим на родной интерфейс устройства. Разработчикам промежуточных движков приходится постоянно успевать за разработчиками операционных систем, реализующих всё новые и новые возможности. Чаще всего поддержка новых функций в промежуточный слой включается с заметным опозданием. Всё это может значительно усложнить разработку и сделать приложение, полностью написанное с использованием промежуточного движка, менее конкурентноспособным.\nКак мы видим, каждая из технологий имеет как достоинства, так и недостатки. Соответственно возникает вопрос о совмещении в одном проекте разных технологий. Технически это реализуется с помощью добавления специальных функций-обработчиков событий для графических элементов. При этом функции-обработчики событий и функции отображения графических элементов могут быть написаны на разных языках программирования. В программе могут одновременно существовать формы с родными графическими элементами, HTML-формы и формы, использующие специфический графический движок.\nМожно дать следующие рекомендации по средствам для реализации пользовательского интерфейса.\nЕсли интерфейс сравнительно простой, то его можно сделать по любой из технологий, но лучше использовать родные средства, так как объем переносимого кода небольшой, а приложение будет смотреться гораздо лучше и использовать меньше ресурсов.\nПри наличии в приложении таблиц, картинок, размеченных текстов идеально подходит технология JavaScript. При этом JavaScript-элементы разумно включать в общую структуру графического интерфейса, совмещая родные и JavaScript-формы в общих контейнерах. Если обработка событий от JavaScript-элементов простая, то она обрабатывается непосредственно JavaScript-функциями. Сложную или критичную по времени выполнения обработку лучше реализовать в функциональной части программы.\nВ общем случае в целях переносимости надо пытаться реализовать на JavaScript как можно большую часть пользовательского интерфейса. Но следует иметь в виду, что JavaScript может не поддерживать специфические функции и не работать со всеми графическими\nэлементами, доступными на устройстве, поэтому эта технология не подходит, если подобная функциональность существенно нужна. Дизайн, доступный в HTML-разметке, может не соответствовать принятому на устройстве дизайну. Также в JavaScript будет трудно поддерживать сложное взаимодействие функциональной части и графических элементов. В лучшем случае потребуется кодировать и отлаживать сложную логику взаимодействия частей программы, в худшем случае это приведет к значительному торможению программы и связанных с этим неудобствам.\nЕсли от графики требуется высокая скорость, в частности, поддержка анимационных функций, то следует использовать соответствующий игровой движок. Его как можно включить в контейнеры родного интерфейса, так и полностью написать приложение на графическом движке.\nVI. Практический опыт\nНесмотря на все возможные плюсы, рекламируемые в описаниях технологий, на практике ситуация может кардинально измениться из-за неожиданно возникающих технических проблем. Поэтому стоит обратиться\tк примерам использования\nкроссплатформенных технологий при создании реальных приложений.\nПервый опыт применения кроссплатформенных технологий авторами статьи был получен при создании мобильного приложения \"Шахматная Планета\" для платформы Android в 2011 году. Он заключался в применении веб-технологий для создания пользовательского интерфейса приложения. Бизнес-логика была реализована родными средствами на языке Java. В качестве достоинства выбранного подхода следует отметить, что процесс разработки шел относительно быстро, потому что у команды был опыт работы с веб-технологиями, а приложение для Android создавалось впервые, и родные технологии создания интерфейса не были хорошо освоены. Также веб-технологии хорошо себя зарекомендовали для реализации элементов интерфейса, с низким уровнем взаимодействия с пользователем. То есть, те элементы, которые нужны для отображения информации, а не для взаимодействия. Например, в приложении есть элемент \"Нотация\", необходимый для отображения ходов в шахматной партии, его реализация через веб-технологии не вызывает неудобства у пользователя. Совершенно противоположная ситуация возникла с элементом \"Шахматная доска\" - пользователю необходимо быстро получать реакцию на свои действия. Например, при игре на время или при перемещении фигуры. Реализация этого элемента с использованием веб-технологий плохо показала себя в плане производительности, после чего данный элемент был сделан с использованием родных средств.\nВ процессе разработки были выявлены и следующие неудобства [9]:\n1) Основной проблемой стала скорость работы и\nотзывчивость интерфейса на действия пользователя. Элементы интерфейса, реализованные через веб-технологии, давали значительно большую задержку на нажатия, чем родные элементы интерфейса. В результате, заметное время после нажатия на элемент, на экране ничего не происходило.\n2)\tДругой проблемой стало динамическое изменение информации в процессе работы. При необходимости обновить какой-либо элемент интерфейса, нужно вызывать функции JavaScript программно через веб-терминал (консоль). При изменении нескольких элементов или области большого размера, пользователю были видны различные артефакты. Например, при отображении информации в виде списка, если необходимо добавить элемент в начало, то все последующие необходимо сдвинуть, что происходит заметными скачками.\n3)\tВозникали проблемы с разными версиями браузеров на разных версиях операционных систем. Часто возникали ситуации, что одна функция работала на одной версии, но не работала на другой. Или в одной версии программа работала корректно, а в другой возникала ошибка либо в форматировании, либо в работе\nСледующим шагом стало выделение части бизнес-логики в кроссплатформенный модуль в 2013 году. В качестве языка реализации был выбран язык С++, как широко распространенный и знакомый команде разработчиков. С языка Java на язык С++ был перенесен модуль, отвечающий за хранение и представление шахматной партии. В его функции входит хранение текущей позиции и ходов партии, добавление и удаление ходов, проверка шахматных правил, а также загрузка и сохранение партии в текстовый формат (PGN). В модуль было перенесено значительное количество функций, а суммарный размер исходных файлов модуля получился около 200 кб. После перенесения части бизнес-логики с языка Java на язык С++ скорость работы приложения визуально мало изменилась. С одной стороны код на С++ выполняется быстрее, с другой стороны, при вызове функций С++ из Java есть накладные расходы. Основным минусом такого подхода стала возросшая сложность структуры проекта, но плюсы от перехода все равно гораздо значительнее.\nБольшой\tопыт\tкроссплатформенного\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nпрограммирования был получен при создании в 2014 году приложения \"Таблицы Ломоносова\" [10], используемого для доступа через сервер к таблицам семифигурных шахматных окончаний. У приложения есть реализации для платформ Android, iOS, Web и Windows. В таблицах шахматных окончаний хранятся точные оценки (ничья или выигрыш/проигрыш в указанное число ходов) всех позиций с семью и меньшим количеством шахматных фигур. Особая сложность возникает из-за того, что финальный размер файлов таблиц составляет более 100 терабайт [11], из-за чего их невозможно предоставить в полном объеме для локального доступа обычным пользователям. Поэтому было принято решение, что часть таблиц может\nиспользоваться локально, а часть удаленно через вебсервер.\nШахматные таблицы хранятся в особом формате, алгоритм чтения которого был реализован на языке С++. Алгоритм был подключен к родным приложениям для платформ разработки Android, iOS и Windows, а также к веб-серверу для удаленного доступа. При этом, приложение для Android было реализовано на языке Java, для iOS на Objective-C, для Windows на Delphi, а веб-сервер на C#. Подключение кроссплатформенного модуля к родному приложению для Android было реализовано с помощью технологии JNI, для iOS -Objective-C++, для Windows код на языке С++ был скомпилирован в виде dll библиотеки и подключен к программе на языке Delphi с помощью метода статического связывания, и к веб-серверу на языке C# с помощью метода динамического связывания. Приложения могли работать как с локальными файлами таблиц, так и с веб-сервером, протокол общения с которым был реализован с использованием формата XML. Таким образом, приложение \"Таблицы Ломоносова\" получило наибольшее количество реализаций для нескольких платформ и подтвердило оправданность использования языка С++ в качестве базового для кроссплатформенной части проекта.\nДругим примером является шахматная обучающая программа \"Пешка\", имеющая реализации для платформ Android, iOS, Web и Windows. Программа предоставляет пользователю возможность решать шахматные задачи, а также читать теоретические уроки в удобном интерактивном виде. База задач и уроков хранится в программе в особом формате cke. Алгоритм чтения этого формата реализован на языке С++, а визуальное представление - с помощью родных средств для каждой платформы.\tТехнология\tподключения\nкроссплатформенного модуля к родным приложениям такая же, что и при локальном доступе к файлам в \"Таблицах Ломоносова\". Но показательным примером использования кроссплатформенного кода в этой программе является компонент \"XMLPlayer\". Данный компонент предоставляет возможность разыгрывания обучающих сценариев по шахматной партии. В его функции входит: автоматическое проигрывание ходов в партии, запрос правильного хода в позиции, отображение подсказок при ошибках, подсчет набранных очков, разыгрывание нескольких вариантов ходов в партии. Все эти функции требуют показа информации пользователю, а некоторые (вопросы) еще и непосредственного взаимодействия. Получается, что необходимо реализовать механизм асинхронного общения кроссплатформенного модуля с программным кодом на родных средствах. Данная задача была решена путем введения протокола общения между модулями и стандартизации интерфейсов доступа к ним. При необходимости отображения инфрмации, XMLPlayer вызывает метод интерфейса в реализации визуальной части. А при получении ответа от пользователя, визуальная часть вызывает необходимый метод XMLPlayer. Таким образом, визуальная часть была\nреализована отдельно для платформ Android, iOS, Web и Windows, но все реализации работают с кроссплатформенной реализацией XMLPlayer.\nКроссплатформенные средства также были использованы в веб-приложении \"Игровая зона Chess King\", с помощью них была реализована игра в шахматы против компьютера. Алгоритм игры в шахматы написан на языке С++ и используется в приложениях для платформ Android и iOS с использованием технологий, описанных выше. Чтобы подключить его к веб-приложению был использован инструмент Emscripten, также известный как WebAssembly, являющийся кросскомпилятором языка С++ в подмножество языка JavaScript. Для вызова функций, реализованных на С++, из кода на языке JavaScript, необходимо добавить в С++ проект отдельный модуль с перечислением внешних функций, никаких особых преобразований в коде С++ при этом делать не нужно. Единственной проблемой такого способа является высокая сложность отладки полученного веб-модуля, потому что он является результатом автоматического преобразования программы на языке С++.\nТакже к кроссплатформенным технологиям можно отнести вынесение части бизнес-логики программы на сторону сервера. Причем, благодаря единому стандарту доступа к веб-приложениям, реализацию программы можно делать практически на любом языке программирования. Эту особенность можно использовать для подключения готовой кодовой базы команды программистов, написанной на другом языке программирования. Например, в веб-приложении \"Игровая зона Chess King\" используются модули, написанные на языке Delphi, использовавшиеся в более ранних продуктах. Одним модулем является \"Игровая компонента\", реализующая алгоритм онлайн-игры в шахматы двух соперников. Общение с \"Игровой компонентой\" реализуется через веб-сокеты, а информация передается в формате JSON. Другим модулем, реализованным на языке Delphi, является алгоритм жеребьевки игроков турнира по швейцарской системе. Алгоритм был реализован на языке Delphi много лет назад, и активно используется в программе \"Шахматная Планета\". Так как в нем довольно много тонких моментов, а программа использует много особенностей языка и информацию о низкоуровневом представлении структур данных, то было принято решение использовать готовый модуль, добавив в него специальные функции для веб-доступа по технологии ISAPI.\nVII. Заключение\nПосле изучения проблем выбора языков и технологий кроссплатформенного программирования можно констатировать тот факт, что имеется достаточно большое количество различных подходов, но ни один из них не является идеальным. Окончательное решение по выбору технологий должно приниматься, исходя из требований к программе и возможностей компании. В качестве примеров были использованы программы, в\nразработке которых авторы статьи принимали участие.\nДля получения качественных приложений разработчикам приходится вникать в тонкости программирования на используемых платформах и изучать их функциональность. В статье мы описали, чем нужно руководствоваться для принятия решений о реализации различных программ и их частей, окончательное же решение нужно принимать разработчикам, исходя как из имеющейся базы программного кода, знания разработчиками тех или иных технологий и требований, предъявляемых к программным продуктам.\nКроме того, отметим, что обильно появляющиеся в последние годы языки программирования и их версии не только не решают проблему переносимости, но и усугубляют ее. И если для создания требовательных к скорости выполнения частей программного кода легко сделать выбор в пользу языка С++, то для написания программного кода общего назначения однозначный выбор сделать очень трудно. Серьезно назрел вопрос о договоренности компаний - разработчиков платформ о родной поддержке, по крайней мере, одного общего для всех платформ языка программирования. Главными чертами этого языка должны быть как простота и поддержка современных конструкций языков программирования, так и, самое главное, беспроблемная стыковка с такими языками, как JavaScript, Java, Swift, C++. Последнее условие является необходимым, так как только в этом случае пользователи смогут постепенно переходить на новый единый язык, не отказываясь от имеющегося кода.\nБиблиография\n[1]\tГоловин И. Г., Захаров В. Б., Мостяев А. И. Влияние тенденций современного общества на процесс создания, распространения и поддержки программ для мобильных устройств // Научный взгляд в будущее. - 2016. - Т. 4, № 2. - С. 41-51.\n[2]\tВыбор языка программирования [Электронный ресурс] // Центр разработки для Windows [Официальный веб-сайт]. URL: https://docs.microsoft.com/ru-ru/windows/uwp/porting/getting-started-choosing-a-programming-language.\n[3]\tБаклин Д. Профессиональное программирование приложений для iPhone и iPad / Джин Баклин ; [пер. с англ. ООО \"Айдиономикс\"]. - М. : Эксмо, 2013. - 672 с.2.\n[4]\tМайер Р. Android 4. Программирование приложений для планшетных компьютеров и смартфонов / Рето Майер ; [пер. с англ. ООО \"Айдиономикс\"]. - М. : Эксмо, 2013. - 816 с.\n[5]\tSupported Platforms [Электронный ресурс] // Qt Documentation [Официальный веб-сайт]. URL: http://doc.qt.io/qt-5/supported-platforms.html.\n[6]\tSupported Target Platforms [Электронный ресурс] // RAD Studio [Официальный\tвеб-сайт].\tURL: http://docwiki.embarcadero.com/RADStudio/Berlin/en/Supported_Ta rget_Platforms.\n[7]\tМногоплатформенность [Электронный ресурс] // Unity [Официальный\tвеб-сайт].\tURL: https://unity3 d. com/ru/unity/multiplatform.\n[8]\tЗахаров В., Мальковский М., Мостяев А. Java или альтернативы? Опыт переноса приложений на платформу Android // Сборник научных трудов SWorld. - 2015. - Т. 5, №1(38). - С. 15-27.\n[9]\tЗахаров В., Мостяев А. Особенности переноса приложений на мобильные платформы // Программные системы и инструменты / Под ред. А. Н. Терехин. - Т. 15. - Издательский отдел факультета ВМК МГУ Москва, МГУ, 2014. - С. 16-24.\n[10]\tЗахаров В. Б., Мальковский М. Г., Мостяев А. И. Успехи шахматной информатики и возможность полного решения\nзадачи игры в шахматы // Евразийский Союз Ученых (ЕСУ). -2016. - Т. 3, № 1 (22). - С. 124-126.\n[11] Zakharov V. B., Mal'kovskii M. G., Shchukin Y. V. Compression of underdetermined data in a 7-piece chess table // Moscow University Computational Mathematics and Cybernetics. - 2016. - Vol. 40, no. 1. - P. 47-52. Block compression algorithms used for solving the problem of 7-piece chess endings are presented. The algorithms are based on data reordering before compression, the RE-PAIR compression algorithm, and use of the so-called underdetermined value method.\nProgramming Language Choice Problem in Cross-platform Application Development\nZakharov V.B., Mal'kovkij M.G., Mostyaev A.I\nAbstract - One of the first steps in the process of software development is programming language choice. In case of cross-platform application development the choice problem becomes especially actual one. This work considers a lot of factors influencing on language choice. The examples of using different languages and technologies are described. The practical experience of creating real applications is considered in details.\nKeywords: chess applications, mobile applications, program compatibility, user interface.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n",
    "download_url": "https://cyberleninka.ru/article/n/problemy-vybora-yazykov-programmirovaniya-pri-razrabotke-krossplatformennyh-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/vybor-tehnologicheskih-resheniy-dlya-razrabotki-programmnogo-obespecheniya-raspredelennyh-informatsionnyh-sistem",
    "slug": "vybor-tehnologicheskih-resheniy-dlya-razrabotki-programmnogo-obespecheniya-raspredelennyh-informatsionnyh-sistem",
    "title": "Выбор технологических решений для разработки программного обеспечения распределенных информационных систем",
    "abstract_description": "Выбор инструментов и средств и технологий программирования для создания информационных систем представляет собой актуальное направление. Для каждой проектируемой системы необходимо определить набор критериев, предъявляемым к среде разработки, используемым библиотекам и технологиям. В статье рассматривается выбор технологических решений на примере разрабатываемой цифровой вычислительной веб-платформы Российской академии образования для обеспечения информационной поддержки деятельности психологов по проведению исследований, в том числе популяционных и лонгитюдных. Особенностью системы являются: масштабность и значительное время разработки, требующей реализации и обеспечение гарантированной вычислительной надежности широкого спектра применяемых цифровых инструментов психологических исследований; обеспечение функционирования в различных условиях, в частности при проведении массовых исследований в школах, имеющих различные характеристики вычислительных ресурсов и каналов связи; возможность масштабирование сервисов; обеспечение безопасности и закрытость данных, а также использование технологий и инструментов программирования, которые бы обеспечивали совместимость и конвертацию данных с другими средствами обработки психологических исследований. Для разрабатываемой системы были введены критерии оценки программных технологий, которые учитывают особенности функционирования и жизненного цикла продукта, на конкретном примере показан выбор соответствующих технологических решений. Важной составляющей при разработке является обучение команды разработчиков используемым технологиям. Приведена система, реализующая программу обучения выбранных технологий. Разработанная система обучения используется для уменьшения времени включения в программную разработку новых исполнителей, по мере расширения задач.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.422\nDOI: 10.25559/SITITO.14.201802.344-354\nВЫБОР ТЕХНОЛОГИЧЕСКИХ РЕШЕНИЙ ДЛЯ РАЗРАБОТКИ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ РАСПРЕДЕЛЕННЫХ ИНФОРМАЦИОННЫХ СИСТЕМ\nД.Ю. Ильин12, Е.В. Никульчев12, П.В. Колясников2\n1\tМИРЭА - Российский технологический университет, г. Москва, Россия\n2\tРоссийская академия образования, г. Москва, Россия\nTHE CHOICE OF TECHNOLOGICAL SOLUTIONS FOR SOFTWARE DEVELOPMENT FOR DISTRIBUTED INFORMATION SYSTEMS\nDmitry Yu. Ilyin12, Evgeny V. Nikulchev12, Pavel V. Kolyasnikov2\n1\tMIREA - Russian Technological University, Moscow, Russia\n2\tRussian Academy of Education, Moscow, Russia\n© Ильин Д.Ю., Никульчев Е.В., Колясников П.В., 2018\nАннотация\nВыбор инструментов и средств и технологий программирования для создания информационных систем представляет собой актуальное направление. Для каждой проектируемой системы необходимо определить набор критериев, предъявляемым к среде разработки, используемым библиотекам и технологиям. В статье рассматривается выбор технологических решений на примере разрабатываемой цифровой вычислительной веб-платформы Российской академии образования для обеспечения информационной поддержки деятельности психологов по проведению исследований, в том числе популяционных и лонгитюдных. Особенностью системы являются: масштабность и значительное время разработки, требующей реализации и обеспечение гарантированной вычислительной надежности широкого спектра применяемых цифровых инструментов психологических исследований; обеспечение функционирования в различных условиях, в частности при проведении массовых исследований в школах, имеющих различные характеристики вычислительных ресурсов и каналов связи; возможность масштабирование сервисов; обеспечение безопасности и закрытость данных, а также использование технологий и инструментов программирования, которые бы обеспечивали совместимость и конвертацию данных с другими средствами обработки психологических исследований. Для разрабатываемой системы были введены критерии оценки программных технологий, которые учитывают особенности функционирования и жизненного цикла продукта, на конкретном примере показан выбор соответствующих технологических решений. Важной составляющей при разработке является обучение команды разработчиков используемым технологиям. Приведена система, реализующая программу обучения выбранных технологий. Разработанная система обучения используется для уменьшения времени включения в программную разработку новых исполнителей, по мере расширения задач.Ключевые слова\nТеоретическая механика; провисающая цепь; цепная функция; производная; интеграл; потенциальная энергия; кинетическая энергия; принцип Лагранжа-Дирихле; закон Ньютона; оптимизации с ограничениями; система алгебраических уравнений; компьютерная графика; анимация; Mathcad.\n|Об авторах:|\nИльин Дмитрий Юрьевич, аспирант, МИРЭА — Российский технологический университет (119454, Россия, г. Москва, пр. Вернадского, д. 78); главный аналитик лаборатории мониторинга эффективности и качества научных исследований информационно-аналитического центра, Российская академия образования (119121, Россия, г. Москва, ул. Погодинская, д. 8), ORCID: http://orcid.org/0000-0002-0241-2733, i@ dmitryilin.com\nНикульчев Евгений Витальевич, доктор технический наук, профессор, профессор кафедры управления и моделирования систем, МИРЭА — Российский технологический университет (119454, Россия, г. Москва, пр. Вернадского, д. 78); главный аналитик лаборатории мониторинга эффективности и качества научных исследований информационно-аналитического центра, Российская академия образования (119121, Россия, г. Москва, ул. Погодинская, д. 8), ORCID: http://orcid.org/0000-0003-1254-9132, nikulchev@mail.ru\nКолясников Павел Владимирович, ведущий аналитик лаборатории мониторинга эффективности и качества научных исследований информационно-аналитического центра, Российская академия образования (119121, Россия, г. Москва, ул. Погодинская, д. 8), ORCID: http:// orcid.org/0000-0003-3633-5913, pavelkolyasnikov@gmail.com\nКлючевые слова\nТехнологии разработки программ; цифровая психологическая платформа; информационная поддержка психологических исследований; выбор компонентов программ; проектирование информационных систем; программная инженерия.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nKeywords\nAbstract\nTechnology of program development; digital psychological platform; information support of psychological research; selection of program components; design of information systems; software engineering.\nThe choice of tools and programming technologies for creating information systems is a current trend. Each projected system needs you to define a set of criteria for the development environment used by libraries and technologies. This article considers a choice of technological solutions using an example of the developed digital computing web platform of the Russian Academy of Education to provide information support to the activities of psychologists doing research, including population and longitudinal studies. The peculiarity of the system are: magnitude and significant development time requiring the implementation and assurance of the guaranteed computing reliability of a wide range of digital tools used in psychological research; maintenance of functioning in various conditions, in particular when carrying out mass research in schools with different characteristics of computing resources and communication channels; the possibility of scaling services; security and data privacy, as well as the use of technologies and programming tools that would ensure the compatibility and conversion of data with other means of processing psychological research. For the developed system, criteria were introduced for evaluating software technologies that take into account the features of the functioning and life cycle of a product, a specific example shows the selection of appropriate technological solutions. An important component in the development is the training of the development team for the technologies used. A system that implements the training program for selected technologies is given. The developed training system is used to reduce the time of inclusion in the development of new software developers, as the tasks are expanded.\n1. Введение\nВ настоящее время для разработки программных систем можно использовать большой набор инструментов, отличающихся и своими функциональными возможностями и удобствами программирования, также и не лишенных недостатков, которые часто возникают только на стадии разработки, расширения системы или при интеграции модулей в единый комплекс. Поэтому важной задачей уже на этапе проектирования выбрать набор инструментов и технологий программирования, отвечающей как требованиям самого изготавливаемого программного продукта, так и процесса программирования. При этом необходимо рассматривать и параметры используемых технологий [1], гарантированное качество обработки данных при использовании сетей [2], надежность при расширении [3] и другие.\nЦель статьи — рассмотреть выбор технологических решений на примере разрабатываемой цифровой вычислительной веб-платформы Российской академии образования [4, 5] для обеспечения информационной поддержки деятельности психологов по проведению исследований, в том числе популяцион-ных и лонгитюдных [6, 7].\nАрхитектура информационной системы является не только структурной основной для описания компонентов системы и их связей, но и определяет подходы к разработке и окружения. Описание архитектуры должно включать в себя ответы на вопросы, которые возникли в ходе проектирования системы.\nРазрабатываемая платформа является веб-ориентированной и будет состоять из серверной и клиентской части, поэтому одно из основных задач является выбор языков и технологий, подходящих для разработки этих компонентов [8].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПлатформа должна работать в большинстве браузеров, в том числе и мобильных, без установки дополнительных плагинов и расширений. Поэтому необходимо было выбрать решение, которое не будет накладывать какие-либо специфические ограничения или требовать от пользователя установки дополнительных плагинов и библиотек, кроме наличия самого браузера.\nТребования к серверным компонентам менее строгие. Тем не менее, следует учитывать особенности тех или иных техноло-\nгических решений в отношении кривой обучения и сложности поддержки результирующего программного продукта.\nТаким образом, особенностью системы являются:\n•\tзначительное время разработки, требующей реализации и обеспечение гарантированной вычислительной надежности широкого спектра применяемых цифровых инструментов психологических исследований;\n•\tобеспечение функционирования в различных условиях, в частности, при проведения массовых исследований в различных регионах страны, имеющих различные характеристики вычислительных ресурсов и каналов связи;\n•\tвозможность масштабирование сервисов;\n•\tобеспечение безопасности и закрытость данных;\n•\tиспользование технологий и инструментов программирования, которые бы обеспечивали совместимость и конвертацию данных с другими средствами обработки психологических исследований.\nДля формирования адекватного задаче архитектурного решения применен ряд методов. Первичный этап включал в себя architecture requirement analysis (анализ требований архитектуры), с целью выявления основных вариантов использования, функциональных и нефункциональных требований к платформе [9].\nНа основании полученной информации был проведен architecture synthesis (синтез архитектуры) с целью определить набор слабосвязанных компонентов системы, их связи, наиболее эффективные способы обмена данными.\nДля выбора языков программирования и технологий, подходящих для разработки платформы, было проведено их исследование и сравнение. Оно проводилось в контексте сформированной архитектуры, требований и имеющихся ограничений. В отношении языков программирования для браузерных приложений оцениваются возможности доставки приложений без необходимости установки дополнительного ПО. Фреймворки рассматриваются на предмет их активного применения в проектах, размера сообщества разработчиков, соответствия поставленной\nVol. 14, no 2. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nзадаче и времени существования на рынке. Стоит отметить, что прямое сравнение фреймворков для разработки не даст результатов, поскольку каждый из них позволит достичь конечного результата. Тем не менее, ряд из них следует считать более пригодными ввиду лучшей масштабируемости, меньших затрат на обучение и большего числа готовых модулей.\nСтатья состоит из трех разделов. В первом, в теоретической части изложены особенности архитектуры разрабатываемой системы и ее основные компоненты. Во втором, экспериментальном, введены критерии для клиентской и серверной части приложения, на конкретном примере показан выбор соответствующих технологических решений. В части реализации приведена система, реализующая программу обучения выбранным технологиям.\n2. Теоретическая часть: методы и объект исследования\nС точки зрения конечного пользователя проект будет состоять из двух основных компонентов: частной учетной записи исследователя и приложений для онлайни автономных (оффлайн) экспериментов. Учитывая, что с течением времени количество пользователей будет расти, то веб-сервис должен быть масштабируемым по горизонтали. Каждый узел API должен включать многоуровневую архитектуру. В сочетании с Object-DocumentMapper (ODM) он обеспечит обслуживание большей гибкостью по сравнению с монолитной архитектурой.\nЭкспериментальные и интенсивные алгоритмы данных для популяционных исследований должны быть отделены от основного сервиса, а также от административных функций. С точки зрения безопасности панель администрирования может использоваться как отдельная сервис в интрасети. Помимо масштабирования алгоритмической части, хранение данных также должно быть масштабируемым [8, 9]. Наилучшим подходом для проекта является сочетание шардирования (sharding) и репликации (replication) (рисунок 1.5). Шардирование (sharding) позволяет распределить данные между разными физическими серверами (шардами) на основе значения некоторого ключа, благодаря чему сущности группируются в набор данных по этому ключу. Репликация (replication) позволяет копировать данные между несколькими серверами, среди которых одни сервера (master) - для сохранения данных, а другие (slave) - для считывания. Тем самым, шардирование может обеспечить систему высокой производительностью ввода-вывода, в то время как репликация может помочь обеспечить доступность службы.\nАрхитектура разрабатываемой платформы для психологических исследований была выбрана многокомпонентной, что обеспечивает больше гибкости по сравнению с монолитной.\nМонолитные архитектуры имеют ряд недостатков:\n•\tчем больше система, тем сложнее поддерживать ее и вносить изменения;\n•\tпри большой системе изменение небольшой части кода может стать причиной появления ошибок у всей системы;\n•\tпосле каждого изменения кода приходится тестировать всю систему на наличие ошибок.\nВ отличие от монолитной, использование многокомпонентной архитектуры дает следующие преимущества:\n•\tписать и поддерживать небольшие части проще, чем одну большую систему;\n•\tлегче распределить разработчиков на написание кон-\nкретной части системы;\n•\tсистема может быть гетерогенной, так как для каждого из компонентов можно использовать свои языки и технологии, в зависимости от задачи;\n•\tболее легкое обновление, так как затрагивается только нужный компонент;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tсистема становится более отказоустойчивой, так как в случае выхода из строя одного и из компонентов другие еще могут оказаться рабочими.\nТем самым выбор в пользу многокомпонентной архитектуры является обоснованным ввиду ряда преимуществ перед монолитной и наиболее подходящей с учетом требований к разрабатываемой платформе.\nНа рис. 1 изображена схема архитектуры платформы для психологических исследований. Архитектура разделена на отдельные компоненты, которые могут работать независимо и общаться между собой с помощью REST API.\nРис. 1. Схема многокомпонентной архитектуры платформы Fig. 1. Schema of a multi-component platform architecture\n«APIServer» является основным ядром системы, которое представляет собой RESTAPI сервер и отвечает за работу с хранилищем данных, а также за выполнение различных сервисных функций.\n«Onlinewebservices» являются компонентами, которые должны быть доступны из сети интернет. Они представляют основную онлайн часть разрабатываемой платформы, среди которых:\n•\tонлайн плеер тестов;\n•\tонлайн конструктор тестов;\n•\tличный кабинет исследователя\n•\tличный кабинет испытуемого.\n«Externalapplication» являются отдельными приложениями, такие как десктопные и мобильные. В отличие от онлайн версии плеера тестов, особенностью приложений является то,\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nчто процесс прохождения этих тестов должен работать без подключения к интернету. В связи с этим данные для тестов должны быть загружены заранее, а после прохождения тестов субъектом загружены обратно на сервер.\n«Privatewebservices (intranet)» являются отдельными сервисами, состоящими из Панели администрирования платформы и Панели анализа данных. Особенность этих сервисов в том, что они должны быть изолированы от прямого доступа из сети интернет для обеспечения гарантии безопасности. Стоит также обратить внимание, что эти сервисы общаются со своим отдельным RESTAPI, включающим в себя административные методы, которые также не должны быть доступны из сети интернет.\n3. Экспериментальная часть: выбор технологических решении на основе заданных критериев оценки\n3.1. Выбор технологических решений для разработки клиентской части приложения\nВ результате рассмотрения JavaScript, Java апплетов и платформы Adobe Flash с точки зрения применимости для исполнения кода в браузере было выяснено, что применимым можно считать только JavaScript. Это связано не только с тем, что JavaScript используется во многих областях: клиентские браузеры, серверная часть, мобильные платформы, а также десктоп-приложения. Технология Java-апплетов, как и технология Adobe Flash, требуют установки дополнительных компонентов в систему пользователя. Более того, в зависимости от операционной системы и браузера может разниться процесс установки и\nнастройки. Ввиду большой вариативности аппаратного и программного обеспечения в образовательных учреждениях, в которых будут проходить исследования, применение этих двух технологий нецелесообразно, так как это может затруднить процесс проведения массовых исследований. Нужно учитывать, что в браузерах на мобильных устройствах Adobe Flash и Java аппле-ты не поддерживаются. Стоит также обратить внимание на то, что от Adobe Flash отказываются в пользу HTML5, который может работать с мультимедиа (видео и аудио) .\nТаким образом, выбор в пользу языка JavaScript для разработки клиентской части становится очевидным и альтернативного решения, в рамках заданных условий, на текущий момент нет. JavaScript поддерживается всеми распространенными браузерами и включен в них по умолчанию.\nРазработка на стороне клиента крупных Single Page Applications (SPA) на базе чистого JavaScript является трудным и неэффективным процессом, поэтому необходимо использовать фреймворки, которые задают структуру приложения и имеют базовый набор компонентов. Почти все современные фреймвор-ки обладают схожим функционалом и способны решить поставленную задачу. Тем самым выбор в первую очередь должен быть основан не на функционале фреймворка [12-14].\nДля рассмотрения были выбраны наиболее известные и популярные фреймворки, среди которых Backbone.js [15], AngularJS 1 [16], AngularJS 2 [17], React,js [18], Ember.js [19, 20], Vue.js [18] и Polymer [21]. В таблице 1 показаны достоинства и недостатки этих фреймворков с учетом применимости к разрабатываемой платформе.\nТаблица 1. Достоинства и недостатки Frontend фреймворков Table 1. Advantages and disadvantages of Frontend frameworks\nФреймворк\tДостоинства\tНедостатки\nBackbone.js\tКомпактный Простая структура Низкий порог вхождения Богатая документация (Rich documentation) Поддерживает REST\tНе поддерживает двустороннюю привязку данных Требует дополнительных компонентов для реализации сложного функционала Плохо подходит для крупных проектов\nAngularJS 1\tВысокая популярность Низкий порог вхождения Богатая документация Большое сообщество Много готовых решений Является частью стека MEAN (MongoDB, Express. JS, AngularJS, NodeJS) Поддерживает REST Высокая скорость разработки Поддерживает двустороннюю привязку данных\tСчитается, что устарел, так как есть AngularJS 2 Не совместим с AngularJS 2 Скорость работы падает при достаточно большом количестве данных\nAngularJS 2\tБогатая документация Большое сообщество Имеет большое количество функций Поддерживает RESTwЕсть Angular Universal для решения проблем поисковой оптимизации (рендер страниц на сервере) Поддерживает двустороннюю привязку данных\tИспользует TypeScript для компиляции в JavaScript Более сложный порог вхождения, чем AngularJS 1 Необходимо сделать много действий для решения даже небольшого функционала\nVol. 14, no 2. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nReact\tКомпактный Высокая производительность Хорошая документация Подойдет для крупных и сложных проектов с высокой степенью нагрузки\tТребует дополнительную реализацию на сервере для работы с данными (например, Flux или Redux) Не поддерживается REST Не совместим с библиотеками, которые модифицируют DOM Большой порог вхождения Сложный подход к разработке, непривычный для начинающих разработчиков\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nEmber.js\tБогатая документация Большая экосистема Подходит для сложных и больших приложений Поддерживает REST Поддерживает двустороннюю привязку данных\tСчитается монолитным по сравнению с другими фреймворками Отсутствует повторное использование компонентов на уровне контроллера Больше порог вхождения, чем в других фреймворках Тяжелая структура Слишком большой для небольших проектов\nVue.js\tОчень быстро растущая популярность Низкий порог вхождения Мало зависимостей Хорошая производительность Богатая документация Хорошая экосистема Поддерживает двустороннюю привязку данных\tДостаточно молодой фреймворк Разрабатывается в основном одним человеком Сделано не очень много проектов Не поддерживается REST \"из коробки\" (есть библиотека Axios)\nPolymer\tНовая и перспективная технология Web Components Высокая скорость работы\tСлишком молодое решение Большие риски при использовании Мало готовых решений и примеров Большой порог вхождения для начинающих\nBackbone.js плохо подходит для разработки крупных проектов, так как отсутствуют необходимые компоненты для реализации сложного функционала. Тем самым, по мнению авторов статьи, использование данного фреймворка нецелесообразно ввиду того, что он не имеет достаточного функционала, а также имеются альтернативные решения.\nPolymer является библиотекой, которая основывается на достаточно новой технологии Web Components. Спецификация W3C данной технологии еще не завершена. Могут быть проблемы с поддержкой браузеров, проблемы в стабильности работы, а также получается большой порог вхождения для разработчиков. В связи с этим использование этого фреймворка было решено отказаться ввиду возможных рисков.\nReact, в отличие от других, является библиотекой и не позволяет создать веб приложение, так как он предназначен для создания View части и должен работать с данными на сервере, например, совместно с Flux или Redux. Поэтому React является сложным для понимания, имеет непривычную структуру, что усложняет понимание приложения в целом, а также имеет большой порог вхождения для начинающих разработчиков. По мнению авторов, на React сложнее сделать быстрый прототип и поддерживать решение, чем на другом фреймворке.\nAngularJS 1, AngularJS 2, Ember.js и Vue.js имеют двустороннюю привязку данных, возможность построения крупных систем, хорошую документацию и сообщество. Основной выбор будет проводиться между данными фреймворками.\nEmber.js имеет сложную структуру проекта и большой порог вхождения для начинающих разработчиков, а в случае выхода за пределы стандартного использования является громоздким и не гибким. Кроме того, фреймворк является менее популярным, чем AngularJS и Vue.js.\nVue.js версии 2 на текущий момент является самым быстрорастущим по популярности фреймворком, он взял лучшие решения от Ember.js, React и AngularJS, а также имеет хорошую производительность. Немаловажным фактором также является\nто, что Vue.js не поддерживает REST и требует дополнительной библиотеки Axios для этого. Кроме того, фреймворк является молодым и разрабатывается в основном одним человеком, поэтому его использование может привести к большим рискам.\nВ результате, наиболее подходящими для разработки платформы для психологических исследований является AngularJS 1 и AngularJS 2. AngularJS 1 является достаточно простым фреймворком для освоения и понимания, обладает низким порогом вхождения при богатом наборе функций. AngularJS 2 является параллельным проектом с AngularJS 1 и разрабатывается отдельно. AngularJS 2 сильно усложнили, для написания простейшего приложения требуется гораздо больше действий. Кроме того, он написан на TypeScript, что потребует дополнительных знаний от разработчиков.\nС учетом того, что разрабатываемая платформа для психологических исследований имеет ограничение в ресурсах, то наиболее подходящим решением на текущий момент является AngularJS 1. Кроме того AngularJS 1 имеет большую популярность и прогноз на использование, согласно данным GitHub и патентному анализу [22].\n3.2. Выбор технологических решений для разработки серверной части приложения\nРазработка серверной части платформы позволяет выбирать из достаточно широкого круга технологий, по сравнению с клиентской частью. Связано это с тем, что серверные технологии зависят от предпочтений разработчиков, оборудования и требований, предъявляемых к проекту. Выбор технологических решений для разработки серверных компонентов лучше начать не с языков программирования, а с рассмотрения фреймворков в связи с тем, что они задают основную структуру для разработки приложения. В таблице 2 представлены характерные особенности, достоинства и недостатки наиболее подходящих фрейм-ворков для разработки серверной части платформы.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nТаблица 2. Достоинства и недостатки Server-side фреймворков Table 2. Advantages and disadvantages of Server-side Frameworks\nФреймворк\tИспользуемый язык\tДостоинства\tНедостатки\nLaravel, Symfony [23]\tPHP\tНизкий порог вхождения Большое количество разработчиков на PHP\tБлокирующие IO вызовы Интерпретатор PHP имеет низкую производительность Нет платной поддержки\nDjango [24]\tPython\tНизкий порог вхождения Генерация панели администрирования для реляционных БД\tБлокирующие IO вызовы Не поддерживает NoSQL-решения \"из коробки\"\nRuby on Rails [25]\tRuby\tНизкий порог вхождения\tВ сообществе разработчиков есть упоминания проблем масштабирования при растущей нагрузке Блокирующие IO вызовы\nExpress.js [22, 26]\tJavaScript (Node.js)\tНе блокирующий по умолчанию (асинхронный) Плавная кривая обучения\tДолгосрочная поддержка проекта имеет затруднения (сложность рефакторинга) Разработка большими группами может быть затруднительна\nLoopback [27]\tJavaScript (Node.js)\tНе блокирующий по умолчанию (асинхронный) Генерация панели просмотра и работы с REST API Декларативный подход к генерации REST API\tСгенерированный API не содержит методов для массового обновления связанных между собой сущностей\nPlay [28]\tScala / Java\tНе блокирующий по умолчанию (асинхронный) Хорошо масштабируем даже при блокирующем коде Строгая типизация упрощает рефакторинг\tМедленная компиляция Новые версии фреймворка требуют доработок в конечном ПО\nVaadin [29]\tJava\tСодержит библиотеку готовых UI элементов Frontend-код генерируется на основе серверного Строгая типизация упрощает рефакторинг\tБлокирующий по умолчанию Медленная компиляция Высокий порог вхождения Разработка новых элементов UI трудоемкая Нет полноценного контроля за Frontend-кодом\nASP .NET MVC [30]\tC#\tСтрогая типизация упрощает рефакторинг\tLock-in на платформу Windows Необходимость покупки лицензий Windows Server для развертывания\nТак как было определено, что требуется высокая степень масштабируемости проекта, следует акцентировать внимание на non-blocking I/O фреймворках. В связи с этим стоит исключить из рассмотрения Laravel, Symfony, Django и Ruby on Rails. Также, ввиду сложностей по реализации non-blocking I/O и custom интерфейсов, для проекта не подходит фреймворк Vaadin.\nASP .NET MVC накладывает дополнительные ограничения на инфраструктуру при отсутствии значимых достоинств, поэтому фреймворк следует исключить из дальнейшего рассмотрения. Таким образом, основной выбор будет проводится между фреймворками Express.js, Loopback и Play\nНемаловажным фактором является язык программирования, на котором написан фреймворк. Express.js и Loopback написаны на Node.js (JavaScript), в том время как Play на Java. В случае с JavaScript, как для клиентской, так и для серверной части будет применяться единый синтаксис. Это повысит эффективность разработки платформы, так как разработчику потребуется знать не два, а только один язык программирования, что явля-\nется плюсом в условиях небольшого количества разработчиков. Кроме того, это позволяет совместить часть процесса обучения и снизить общий порог вхождения, что в лучшую сторону повлияет на время подготовки новых специалистов, которые будут участвовать в разработке платформы. JavaScript является самым популярным языком в мире по данным статистики таких крупных сервисов, как GitHub и StackOverflow. В связи с этим целесообразнее применение фреймворков Express.js и Loopback, чем Play.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИз оставшихся двух фреймворков выбор в пользу Loopback более целесообразен по ряду причин:\n•\tLoopback предлагает ряд паттернов, что поможет сохранить должный уровень поддерживаемости кодовой базы при ее увеличении;\n•\tфреймворк основывается на Express.js, что позволит задействовать все его функциональные компоненты;\n•\tLoopback предлагает функционал для упрощенной генерации API, что значительно снижает трудозатраты при разработке.\nVol. 14, no 2. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nПеречисленное выше, по мнению авторов статьи, является более значимым, чем наиболее плавная кривая обучения. Таким образом, выбор остановлен на фреймворке Loopback.\n4. Реализация: программа обучения для подготовки разработчиков\nВ процессе работы над проектом могут появляться новые разработчики, которым необходимо освоить стек технологий и инструментов или закрепить уже имеющиеся навыки, которые применяются разработке веб-ориентированной платформы.\nСокращение времени на подготовку каждого сотрудника в отдельности в условиях ограниченного количества опытных разработчиков является важной задачей. В связи с этим было принято решение разработать программу обучения, которая затрагивает основные аспекты разработки и применяемого набора технологий.\nПрограмма обучения включает набор задач, над которыми обучаемый ведет самостоятельную работу согласно описанному в ней заданию. Все вопросы и обсуждения ведутся с ментором\n(наставником). После завершения каждой задачи она сдается ментору, который проверяет правильность ее выполнения и задает контрольные вопросы. Вопросы, которые возникают в процессе работы над задачей рекомендуется записывать, а по достижению достаточного количества допускается задавать их ментору. На момент сдачи материала и ответов на контрольные вопросы предполагается, что сотрудник подготовлен и будет отвечать на вопросы самостоятельно, что позволит объективно оценить понимание материала.\nРазработанная программа обучения включает в себя 2 основных части и разбита на отдельные задачи в Redmine (рисунки 2 и 3):\n•\tбазовая часть, включающая в себя основные навыки по веб-разработке (система управления проектами, система контроля версий, HTML5, CSS3, верстка, Semantic-UI, JavaScript и jQuery);\n•\tпрактическая часть, включающая в себя разработку приложения по управлению списком задач (AngularJS, Node.js, NPM и Loopback).\nTask #246: Задача #1.1. Система управления проектами Redmine\tNew\nTask #247: Задача #1.2. Система контроля версий Gil\tNew\nTask #248: Задача #1.3. Правильная организация разработки с GitFlow, SemVer и GitLab\tNew\nTask #249: Задача #1.4. Основы веба, изучение HTML и CSS\tNew\nTask #250: Задача #1.5. Верстка тестовой страницы\tNew\nTask #251: Задача #1.6. Изучение CSS-фреймворка\tNew\nTask #252: Задача #1.7. Верстка страницы с использованием CSS-фреймворка Semantic UI Task #253: Задача #1.8. Изучение JavaScript\tNew New\nTask #254: Задача #1.9. Разработка калькулятора на JavaScript\tNew\nTask#255: Задача #1.10. Расширенный JavaScript\tNew\nTask #256: Задача #1.11. Изучение jQuery\tNew\nTask #257: Задача #1.12. Стандарты кодирования и документирование в JavaScript\tNew\nРис. 2. Первая часть программы обучения (базовая часть) Fig. 2. The first part of the training program (basic part)\nЗадачи в Redmine копируются для каждого из обучаемых сотрудников из задач-шаблонов. По мере прохождения задач они отмечаются соответствующими статусами, указывается процент их выполнения, пишутся комментарии и производится оценка затраченного времени, что позволяет ментору отслеживать — на каком именно этапе освоения материала находится обучаемый и каков его прогресс.\nКаждая задача включает в себя несколько пунктов:\n•\tпункт «Задание» — это основное задание, которое необходимо выполнить;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tпункт «Дополнительно» — как правило, содержит дополнительные ссылки и материалы;\n•\tпункт «Контрольные вопросы» — контрольные вопросы, по которым необходимо будет отчитываться после завершения задачи.\nРазработанная программа обучения уже применяется на практике и хорошо показала себя: обучаемый самостоятельно проходит материал и привыкает к работе с системой управления проектами Redmine, а ментор сокращает время на обучение. Для дополнительного контроля и ведения статистики был создан опросник с помощью GoogleForms, которые заводится на каждого из обучаемых сотрудников. Ментор в определенный промежуток времени заполняет опросник на обучаемого, в результате чего получается отчет, пример которого показан на рисунке 5. Это также позволяет оценить, насколько разработчик подготовлен для выполнения задач по разработке веб-ориентированной платформы.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nSupport #494: Задача #2.1. Разработка ToDo. Подготовка и настройка\tNew рабочего окружения (Frontend)\nTask #495: Задача #2.2. Теоретическая подготовка по AngularJS 1 .х\tNew\nSupport #496: Задача #2.3. Создание репозитория проекта (Angular)\tNew\nFeature #497: Задача #2.4. Применение пакетного менеджера для\tNew подгрузки зависимостей проекта\nFeature #498: Задача #2.5. Инициализация Angular на веб-странице\tNew\nFeature #499: Задача #2.6. Роутинг, контроллеры и ссыпки в Angular\tNew\nFeature #500: Задача #2.7. Вёрстка страницы ToDo с применением\tNew Semantic Ul\nFeature #501: Задача #2.8. Сервисы и директивы в Angular\tNew\nSupport #502: Задача #2.9. Релиз готового функционала\tNew\nFeature #503: Задача #2.10. Работа с Local Storage\tNew\nSupport #504: Задача #2.11. Подготовка виртуального рабочего\tNew\nокружения (Backend)\nTask#505: Задача #2.12. Теоретическая подготовка no Loopback 3.x\tNew\nSupport #506: Задача #2.13. Создание репозитория проекта\tNew\n(Loopback)\nFeature #507: Задача #2.14. Инициализация приложения Loopback,\tNew\nиспользование Explored для просмотра API\nFeature #508: Задача #2.15. Data Source, Модели, Boot-скрипты и\tNew\nгенерация CRUD в Loopback\nFeature #509: Задача #2.1 S. Создание дополнительных удаленных\tNew\nметодов в Loopback\nFeature #510: Задача #2.17. Экспорт и встраивание Angular SDK в\tNew\nпроект\nFeature #511: Задача #2.18. Наследование и связи между моделями\tNew\nв Loopback. Встроенные модели.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nFeature #512: Задача #2.19. Список контроля доступа в Loopback.\tNew\nАвторизация\nРис. 3. Вторая часть программы обучения (практическая часть) Fig. 3. The second part of the training program (practical part)\nЗадание:\n1.\tПрочитать про модель ветвления GitFlow - http://nvle.com/posts/a-successful-gll-branchlng-rnodel/ (перевод -https://habrahabr. ru/post/1069121)\n2.\tПосмотреть спецификацию SemVer - http://semver.org/\n3.\tПрочитать материал в Базе Знаний - Git - Правила работы\n4.\tПосмотреть GltLab, его отличия от GltHub и Bltbucket\n5.\tСделать тестовое задание - Тестовое задание по Git, Git Flow и SemVer\nДополнительно:\n1.\tУстановить Atom с плагином Git-Plus и попробовать работу с Git\n2.\tУстановить и посмотреть SourceTree [только Win и Мае] - https://www.sourcetreeapp.com/\nКонтрольные вопросы:\n1.\tНа каком языке писать комментарии в коде, названия коммитов, описание в GltLab и задачи в Reümlne?\n2.\tКак указать в коммите привязку к задаче в Redmine?\n3.\tМожет ли быть коммит без указания номера задачи в Redmine?\n4.\tЗачем нужен GitFlow?\n5.\tКакие ветви являются самыми главными, а какие вспомогательными в GitFlow?\n6.\tКак используются ветви функциональности (feature)? Куда вливаются эти ветви и зачем?\n7.\tКак используются ветви релиза? Куда вливаются эти ветви и зачем?\n8.\tКак используются ветви исправлений? Куда вливаются эти ветви и зачем?\n9.\tКак правильно именовать функциональные ветки (feature)?\n10.\tЧто дает флаг -no-ff при слиянии веток? Можно ли сделать так. чтобы не указывать его каждый раз?\n11.\tМожет ли одна функциональная ветка (feature) быть вложена в другую и почему?\n12.\tКакие правила слияния веток (merge) указаны в Базе Знаний?\n13.\tКак указываются номера версий по спецификации SemVer?\n14.\tЧто такое GitLab, зачем он нужен и какие есть альтернативы?\nРис. 4. Пример задания 1.3 «Правильная организация разработки с GitFlow, SemVer и GitLab» Fig. 4. Sample task 1.3 «Proper organization of development with GitFlow, SemVer and GitLab»\nVol. 14, no 2. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКак бы Вы оценили профессиональные навыки сотрудника в целом?\na responses\nРис. 5. Пример части отчета по одному из сотрудников Fig. 5. Example of part of the report for one of the employees\n5. Заключение\nГарантированное качество функционирования больших распределенных систем, их успешная и эффективная работа в течении ряда лет, возможности масштабирования и взаимодействия с различными платформами закладывается на этапе проектирования. Сейчас отходит в прошлое характерная еще десятилетние лет назад хаотическая разработка, приводившая к тому, что к процессу изготовления продукта и запуска его в эксплуатацию информационные технологии уже устаревали. Новые подходы требуют тщательного и всестороннего документирования процесса проектирования и реализацию. Широко используется понятия экосистемы языков программирования, автоматизированные системы и инструменты разработки, позволяющие проектировать информационную систему, способную к развитию и обеспечению качество и надежности решаемых задач.\nВ статье на конкретном примере цифровой платформы психологических исследований показан процесс выбора технологий для разработки клиентской и серверной части. В настоящее время ядро системы создано и проходит опытную эксплуатацию в образовательном учреждении для информационной поддержки психологических исследований. Созданная реализация показала адекватный выбор программных технологий, система успешно функционирует в тестовом режиме, одновременно расширяя свои функциональные возможности.\nСозданная программа обучения также показала свою эффективность, уменьшив затраты на привлечение новых программистов. Система обучения также была опробована на студентах и аспирантах кафедры управления и моделирования систем МИРЭА, что позволило оценить методические результаты и усилить качество подготовки за счет обучения реальным технологиях программной инженерии.\nБлагодарности\nИсследование выполнено в рамках государственного заказа Министерства образования и науки Российской Федерации «Разработка технологической концепции Дата-центра междисциплинарных исследований в образовании» (проект 25.13253.2018/12.1).\nСписок использованных источников\n[1]\tVenkatesan D., Sridhar S. A novel programming framework for architecting next generation enterprise scale information systems // Information Systems and e-Business Management. 2017. Vol. 15, issue 2. Pp. 489-534. DOI: 10.1007/ s10257-016-0330-y\n[2]\tChen Y., Huang J., Lin C., Hu J. A partial selection methodology for efficient QoS-aware service composition // IEEE Transactions on Services Computing. 2015. Vol. 8, issue 3. Pp. 384397. DOI: 10.1109/TSC.2014.2381493\n[3]\tZhang H., Lu M., Gu T. SOA software architecture extended modeling considering reliability information // Proceedings of 2017 IEEE Second International Conference on Reliability Systems Engineering (ICRSE), 2017. Pp. 1-6. DOI: 10.1109/ ICRSE.2017.8030794\n[4]\tZakharov I., Nikulchev E., Ilin D., Ismatullina V., Fenin A. Web-based Platform for Psychology Research // ITM Web of Conferences. 2017. Vol. 10 (04006). DOI: 10.1051/itm-conf/20171004006\n[5]\tNikulchev E., Kolyasnikov P., Ilin D., Kasatonov S., Biryukov D., Zakharov I. Selection of Architectural Concept and Development Technologies for the Implementation of a Web-Based Platform for Psychology Research // Proceedings of IEEE 2018 Computing Conference (10-12 July, 2018). London, 2018. Pp. 370-376.\n[6]\tMalykh S.B., Tikhomirova T.N. Personality features and intellect: the nature of correlation // Voprosy psihologii. 2015. Vol. 2. Pp. 147-160.\n[7]\tTikhomirova T., Lysenkova I., Ismatullina V., Malykh S. Cross-cultural study of mother-child interactions and child's intelligence // The European Proceedings of Social & Behavioural Sciences. 2017. Vol. 33. Pp. 353-366. DOI: 10.15405/epsbs.2017.12.38\n[8]\tChattopadhyay S., Banerjee A., Banerjee N. A fast and scalable mechanism for Web service composition // ACM Transactions on the Web. 2017. Vol. 11, issue 4. Pp. 26. DOI: 10.1145/3098884\n[9]\tBarak M., Ziv S. Wandering: A Web-based platform for the creation of location-based interactive learning objects // Computers & Education. 2013. Vol. 62. Pp. 159-170. DOI: 10.1016/j.compedu.2012.10.015\n[10]\tVenkateswaran N., Changder S. Simplified data partitioning in a consistent hashing based sharding implementation // Proceedings of IEEE Region 10 Conference, TENCON 2017-2017 (5-8 November, 2017). Penang, Malaysia, 2017. Pp. 895-900. DOI: 10.1109/TENCON.2017.8227985\n[11]\tVenkateswaran N., Changder S. Handling workload skew in a consistent hashing based partitioning implementation // Proceedings of IEEE 2017 International Conference on Advances in Computing, Communications and Informatics (ICACCI) (13-16 September, 2017). Udupi, India, 2017. Pp. 1163-1169. DOI: 10.1109/ICACCI.2017.8125999\n[12]\tKristensen E K., M0ller A. Type test scripts for TypeScript testing // Proceedings of the ACM on Programming Languages (OOPSLA), Article 90 (October 2017), 25 pages. DOI: 10.1145/3133914\n[13]\tDhok M., Ramanathan M. K., Sinha N. Type-aware concolic testing of JavaScript programs // Proceedings of the 38th International Conference on Software Engineering (ICSE\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nParallel and distributed programming, grid technologies,\nprogramming on GPUs\n'16). ACM, New York, NY, USA, 2016. Pp. 168-179. DOI: 10.1145/2884781.2884859\n[14]\tBae S., Park J., Ryu S. Partition-based coverage metrics and [28] type-guided search in concolic testing for JavaScript applications // Proceedings of 2017 IEEE/ACM 5th International FME Workshop on Formal Methods in Software Engineering [29] (FormaliSE) (27-27 May 2017). Buenos Aires, Argentina, 2017. Pp. 72-78. DOI: 10.1109/FormaliSE.2017.10\n[15]\tMardan A. Backbone. js and Parse. com. In Full Stack JavaScript. Apress, Berkeley, CA, 2015. Pp. 121-136. DOI: 10.1007/978-1-4842-1751-1_5\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[16]\tChansuwath W, Senivongse T. A model-driven development of web applications using AngularJS framework // Proceedings of 2016 IEEE/ACIS 15 th International Conference on Comput- [30] er and Information Science (ICIS) (26-29 June 2016). Okaya-ma, Japan, 2016. Pp. 1-6. DOI: 10.1109/ICIS.2016.7550838\n[17]\tFain Y., Moiseev A. Angular 2 Development with TypeScript (1st ed.). Manning Publications Co., Greenwich, CT, USA, 2016. 456 p.\n[18]\tSheppard D. PWAs From the Start. In: Beginning Progressive\nWeb App Development. Apress, Berkeley, CA, 2017. Pp. 209- References 240. DOI: 10.1007/978-1-4842-3090-9_11\n[19]\tHamdy A., Ibrahim O., Hazem A. A Web Based Framework for [1] Pre-release Testing of Mobile Applications // Proceedings of 20th International Conference on Circuits, Systems, Communications and Computers (CSCC 2016). MATEC Web of Conferences Vol. 76, (04041), 2016. DOI: 10.1051/matecco- [2] nf/20167604041\n[20]\tCravens J., Brady T.Q. Building Web Apps with Ember. js: Write Ambitious Javascript. O'Reilly Media, Inc., 2014. 188 p.\n[21]\tKristensen E.K., M0ller A. Inference and Evolution of TypeScript [3] Declaration Files. In: Huisman M., Rubin J. (eds) Fundamental Approaches to Software Engineering. FASE 2017 // Lecture Notes in Computer Science. Vol. 10202. Springer, Berlin, Heidelberg, 2017. Pp. 99-115. DOI: 10.1007/978-3-662-54494-5_6\n[22]\tNikulchev E, Ilin D., Bubnov G., Mateshuk E. Scalable service [4] for predictive learning based on the professional social networking sites // International Journal of Advanced Computer Science and Applications. 2017. Vol. 8, issue 5. Pp. 9-15. DOI: 10.14569/IJACSA.2017.080502\t[5]\n[23]\tSinha S. How Request, Response Work in Laravel 5. Beginning Laravel. Apress, Berkeley, CA, 2017. Pp. 161-165. DOI: 10.1007/978-1-4842-2538-7_18\n[24]\tLotfy K., Hale M.L. Assessing pairing and data exchange mechanism security in the wearable Internet of Things // Proceedings of 2016 IEEE International Conference on Mobile [6] Services (MS) (27 June-2 July 2016). San Francisco, CA, USA, 2016. Pp. 25-32. DOI: 10.1109/MobServ.2016.15\n[25]\tZhang Y., Yin G., Yu Y., Wang H. Investigating social media [7] in GitHub's pull-requests: a case study on Ruby on Rails // Proceedings of the 1st International Workshop on Crowd-based Software Development Methods and Technologies. ACM, New York, NY, USA, 2014. Pp. 37-41. DOI: 10.1145/2666539.2666572\t[8]\n[26]\tChaniotis I.K., Kyriakou K.I. D., Tselikas N.D. Is Node. js a viable option for building modern web applications? A performance evaluation study // Computing. 2015. Vol. 97, issue 10. Pp. [9] 1023-1044. DOI: 10.1007/s00607-014-0394-9\n[27]\tRankovski G., Chorbev I. Improving Scalability of Web Applications by Utilizing Asynchronous I/O // Advances in Intel-\nligent Systems and Computing. 2016. Vol. 665. Pp. 211-218. DOI: 10.1007/978-3-319-68855-8_21\nHuntJ. Play framework // A Beginner's Guide to Scala, Object Orientation and Functional Programming. Springer, Cham, 2018. Pp. 431-446. DOI: 10.1007/978-3-319-75771-1_38 Alexopoulos K, Koukas S, Boli N., Mourtzis D. Resource Planning for the Installation of Industrial Product Service Systems. In: Lodding H., Riedel R., Thoben KD., von Cieminski G., Kiritsis D. (eds) // Advances in Production Management Systems. The Path to Intelligent, Collaborative and Sustainable Manufacturing. APMS 2017. IFIP Advances in Information and Communication Technology. Vol. 514. Springer, Cham, 2017. Pp. 205-213. DOI: 10.1007/978-3-319-66926-7_24 Troelsen A., Japikse P. Introducing ASP. NET MVC // Pro C# 7. Apress, Berkeley, CA, 2017. Pp. 1179-1221. DOI: 10.1007/978-1-4842-3018-3_29\nПоступила 16.05.2018; принята в печать 10.06.2018; опубликована онлайн 30.06.2018.\nVenkatesan D., Sridhar S. A novel programming framework for architecting next generation enterprise scale information systems. Information Systems and e-Business Management. 2017; 15(2):489-534. DOI: 10.1007/sl0257-016-0330-y Chen Y., Huang J., Lin C., Hu J. A partial selection methodology for efficient QoS-aware service composition. IEEE Transactions on Services Computing. 2015; 8(3):384-397. DOI: 10.1109/TSC.2014.2381493\nZhang H., Lu M., Gu T. SOA software architecture extended modeling considering reliability information. Proceedings of 2017 IEEE Second International Conference on Reliability Systems Engineering (ICRSE), pp. 1-6, 2017.DO1: 10.1109/ ICRSE.2017.8030794\nZakharov I., Nikulchev E., Ilin D., Ismatullina V., Fenin A. Web-based Platform for Psychology Research. ITM Web of Conferences. 2017; 10(04006). DOI: 10.1051/itm-conf/20171004006\nNikulchev E., Kolyasnikov P., Ilin D., Kasatonov S., Biryukov D., Zakharov I. Selection of Architectural Concept and Development Technologies for the Implementation of a Web-Based Platform for Psychology Research. Proceedings of IEEE 2018 Computing Conference (10-12 July, 2018). London, pp. 370376, 2018.\nMalykh S.B., Tikhomirova T.N. Personality features and intellect: the nature of correlation. Voprosy psihologii. 2015; 2:147-160.\nTikhomirova T., Lysenkova I., Ismatullina V., Malykh S. Cross-cultural study of mother-child interactions and child's intelligence. The European Proceedings of Social & Behavioural Sciences. 2017; 33:353-366. DOI: 10.15405/ epsbs.2017.12.38\nChattopadhyay S., Banerjee A., Banerjee N. A fast and scalable mechanism for Web service composition. ACM Transactions on the Web. 2017; 11(4):26. DOI: 10.1145/3098884 Barak M., Ziv S. Wandering: A Web-based platform for the creation of location-based interactive learning objects. Computers & Education. 2013; 62:159-170. DOI: 10.1016/j. compedu.2012.10.015\nVol. 14, no 2. 2G1S ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\n[10]\tVenkateswaran N., Changder S. Simplified data partitioning [21] in a consistent hashing based sharding implementation. Proceedings of IEEE Region 10 Conference, TENCON 2017-2017\n(5-8 November, 2017). Penang, Malaysia, 2017. pp. 895-900. DOI: 10.1109/TENC0N.2017.8227985\n[11]\tVenkateswaran N., Changder S. Handling workload skew in a [22] consistent hashing based partitioning implementation. Proceedings of IEEE 2017 International Conference on Advances\nin Computing, Communications and Informatics (ICACCI) (1316 September, 2017). Udupi, India, pp. 1163-1169, 2017. DOI: 10.1109/ICACCI.2017.8125999\t[23]\n[12]\tKristensen E K., M0ller A. Type test scripts for TypeScript testing. Proceedings of the ACM on Programming Languages (OOPSLA), Article 90 (October 2017), 25 pages. DOI: [24] 10.1145/3133914\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[13]\tDhok M., Ramanathan M. K., Sinha N. Type-aware concol-ic testing of JavaScript programs. Proceedings of the 38th International Conference on Software Engineering (ICSE\n'16). ACM, New York, NY, USA, pp. 168-179, 2016. DOI: [25] 10.1145/2884781.2884859\n[14]\tBae S., Park J., Ryu S. Partition-based coverage metrics and type-guided search in concolic testing for JavaScript applications. Proceedings of 2017 IEEE/ACM 5th International FME Workshop on Formal Methods in Software Engineering (For- [26] maliSE) (27-27 May 2017). Buenos Aires, Argentina, pp. 7278, 2017. DOI: 10.1109/FormaliSE.2017.10\n[15]\tMardan A. Backbone. js and Parse. com. In Full Stack JavaScript. Apress, Berkeley, CA, pp. 121-136, 2015. DOI: [27] 10.1007/978-1-4842-1751-1_5\n[16]\tChansuwath W., Senivongse T. A model-driven development of web applications using AngularJS framework. Proceedings\nof 2016IEEE/ACIS 15th International Conference on Computer [28] and Information Science (ICIS) (26-29 June 2016). Okayama, Japan, pp. 1-6, 2016. DOI: 10.1109/ICIS.2016.7550838\n[17]\tFain Y., Moiseev A. Angular 2 Development with TypeScript (1st [29] ed.). Manning Publications Co., Greenwich, CT, USA, 2016. 456 p.\n[18]\tSheppard D. PWAs From the Start. In: Beginning Progressive Web App Development. Apress, Berkeley, CA, 2017. pp. 209240. DOI: 10.1007/978-1-4842-3090-9_11\n[19]\tHamdy A., Ibrahim O., Hazem A. A Web Based Framework for Pre-release Testing of Mobile Applications. Proceedings\nof 20th International Conference on Circuits, Systems, Com- [30] munications and Computers (CSCC 2016). MATEC Web of Conferences Vol. 76, (04041), 2016. DOI: 10.1051/matecco-nf/20167604041\n[20]\tCravens J., Brady T.Q. Building Web Apps with Ember. js: Write Ambitious Javascript. O'Reilly Media, Inc., 2014. 188 p.\nKristensen E.K., M0ller A. Inference and Evolution of TypeScript Declaration Files. In: Huisman M., Rubin J. (eds) Fundamental Approaches to Software Engineering. FASE 2017. Lecture Notes in Computer Science. Vol. 10202. Springer, Berlin, Heidelberg, 2017. pp. 99-115. DOI: 10.1007/978-3-662-54494-5_6 Nikulchev E., Ilin D., Bubnov G., Mateshuk E. Scalable service for predictive learning based on the professional social networking sites. International Journal of Advanced Computer Science and Applications. 2017; 8(5):9-15. DOI: 10.14569/IJAC-SA.2017.080502\nSinha S. How Request, Response Work in Laravel 5. Beginning Laravel. Apress, Berkeley, CA, 2017. pp. 161-165. DOI: 10.1007/978-1-4842-2538-7_18\nLotfy K., Hale M.L. Assessing pairing and data exchange mechanism security in the wearable Internet of Things. Proceedings of 2016 IEEE International Conference on Mobile Services (MS) (27 June-2 July 2016). San Francisco, CA, USA, pp. 25-32, 2016. DOI: 10.1109/MobServ.2016.15 Zhang Y., Yin G., Yu Y., Wang H. Investigating social media in GitHub's pull-requests: a case study on Ruby on Rails. Proceedings of the 1st International Workshop on Crowd-based Software Development Methods and Technologies. ACM, New York, NY, USA, pp. 37-41, 2014. DOI: 10.1145/2666539.2666572 Chaniotis I.K., Kyriakou K.I. D., Tselikas N.D. Is Node. js a viable option for building modern web applications? A performance evaluation study. Computing. 2015; 97(10):1023-1044. DOI: 10.1007/s00607-014-0394-9\nRankovski G., Chorbev I. Improving Scalability of Web Applications by Utilizing Asynchronous I/O. Advances in Intelligent Systems and Computing. 2016; 665:211-218. DOI: 10.1007/978-3-319-68855-8_21\nHunt J. Play framework. A Beginner's Guide to Scala, Object Orientation and Functional Programming. Springer, Cham, pp. 431-446, 2018. DOI: 10.1007/978-3-319-75771-1_38 Alexopoulos K., Koukas S., Boli N., Mourtzis D. Resource Planning for the Installation of Industrial Product Service Systems. In: Lödding H., Riedel R., Thoben KD., von Cieminski G., Kiritsis D. (eds) Advances in Production Management Systems. The Path to Intelligent, Collaborative and Sustainable Manufacturing. APMS 2017. IFIP Advances in Information and Communication Technology. Vol. 514. Springer, Cham, pp. 205-213, 2017. DOI: 10.1007/978-3-319-66926-7_24 Troelsen A., Japikse P. Introducing ASP. NET MVC. In Pro C# 7. Apress, Berkeley, CA, pp. 1179-1221, 2017. DOI: 10.1007/978-1-4842-3018-3_29\nSubmitted 16.05.2018; revised 10.06.2018; published online 30.06.2018.\nAbout the authors:\nDmitry Yu. Ilyin, postgraduate student, MIREA - Russian Technological University (78 Vernadsky Prospekt, Moscow 119454, Russia); Chief analyst of the Laboratory for Monitoring the Efficiency and Quality of Scientific Research of the Information and Analytical Center, Russian Academy of Education (8 Pogodinskaya St., Moscow 119121, Russia), http://orcid.org/0000-0002-0241-2733, i@dmitryilin.com\nEugene V. Nikulchev, Doctor of Technical Sciences, Professor, Department of Control and Modeling Systems, MIREA - Russian Technological University (78 Vernadsky Prospekt, Moscow 119454, Russia); Chief analyst of the Laboratory for Monitoring the Efficiency and Quality of Scientific Research of the Information and Analytical Center, Russian Academy of Education (8 Pogodinskaya St., Moscow 119121, Russia), http://orcid.org/0000-0003-1254-9132, nikulchev@mail.ru Pavel V. Kolyasnikov, Leading Analyst of the Laboratory of Monitoring the Efficiency and Quality of Scientific Research of the Information and Analytical Center, Russian Academy of Education (8 Pogodinskaya St., Moscow 119121, Russia), http://orcid.org/0000-0003-3633-5913, pavelkolyasnikov@gmail.com\nThis is an Open Access article distributed under the terms of the Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0), which permits unrestricted reuse, distribution, and reproduction in any medium provided the original work is properly cited.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 2 (2018) ISSN 2411-1473 sitito.cs.msu.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/vybor-tehnologicheskih-resheniy-dlya-razrabotki-programmnogo-obespecheniya-raspredelennyh-informatsionnyh-sistem/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-zaschity-dannyh-v-seti-internet-na-storone-klienta",
    "slug": "metody-zaschity-dannyh-v-seti-internet-na-storone-klienta",
    "title": "Методы защиты данных в сети Интернет на стороне клиента",
    "abstract_description": "На сегодняшний день подавляющее большинство приложений работают в разных информационных сетях и используют самую распространенную сетевую архитектуру «клиент-сервер». В статье рассмотрены методы защиты на стороне клиента, которыми оперирует разработчик во время проектирования алгоритмов функционирования веб-приложений, а также наглядно показаны примеры пренебрежения перечисленными методиками на примере обезличенных общедоступных сервисов в сети Интернет, функционирующих на территории Российской Федерации.",
    "full_text_body": "\n\n\n\n\uFEFFУДК: 004.056.5\nМЕТОДЫ ЗАЩИТЫ ДАННЫХ В СЕТИ ИНТЕРНЕТ НА СТОРОНЕ КЛИЕНТА\nЛипартелиани Г. Г., магистрант Невежин В.П., к.т.н., профессор - научный руководитель\nФинансовый Университет при Правительстве Российской Федерации (Финуниверситет), г. Москва\nАннотация. На сегодняшний день подавляющее большинство приложений работают в разных информационных сетях и используют самую распространенную сетевую архитектуру «клиент-сервер». В статье рассмотрены методы защиты на стороне клиента, которыми оперирует разработчик во время проектирования алгоритмов функционирования веб-приложений, а также наглядно показаны примеры пренебрежения перечисленными методиками на примере обезличенных общедоступных сервисов в сети Интернет, функционирующих на территории Российской Федерации.\nКлючевые слова: защита данных, сеть интернет, веб-приложения, уязвимость веб-приложений, сети, базы данных.\nMETHODS OF CLIENT-SIDE DATA PROTECTION ON THE INTERNET\nLiparteliani G., student Nevezhin Viktor, professor - scientific director Financial University under the Government of the Russian Federation, Moscow\nAbstract. To date, the vast majority of applications work in different informational networks and use the most common network architecture \"client-server\". The article considers the methods of protection on the client side, which operates the developer during the design of algorithms web applications, and illustrated the examples of neglect listed methods on the example of the impersonal public services in the Internet, functioning on the territory of the Russian Federation.\nKey words: data protection, Internet, web application vulnerability, web application, network, database.\nВсемирная сеть Интернет позволяет человечеству объединять свои знания, делиться новостями, просто общаться или даже совершать покупки в сети Интернет. В век инновационных технологий использование сетевых ресурсов стало настолько привычным для людей занятием, что мало кто задумывается о том, как работают сервисы, без которых последние не могут представить себе и дня.\nМногие слышали слово «сервер», некоторые даже знают, что по факту это ничто иное как обычный компьютер, который сегодня стоит в каждом доме. Сервер (англ. обработчик, распределитель) - компьютер к которому клиент (веб-браузер пользователя) отправляет структурированные запросы с заданными параметрами, исходя из которых на сервере выполняется\tспециальный\tзаданный\nразработчиком алгоритм, возвращающий «Хроноэкономика» № 5 (7). Октябрь 2017\nответный пакет данных браузеру пользователя. При переходе пользователя на любой веб-сайт, происходит передача пакета данных на сервер для обработки. В частности, передаются:\n•\tURL-адрес, содержащий в себе открытые данные для обработки\n•\tслужебная информация такая как, браузер пользователя, его часовой пояс, №-адреса, адрес предыдущего посещенного сайта и др.\nСервер получает эту информацию, обрабатывает\tв\tсоответствии\tс\nзапрограммированной логикой и передает пользователю так называемый ответ, который может содержать сформированную вебстраницу, отказ в доступе, команду перенаправления на другой сайт или любую другую информацию. Браузер, в свою очередь,\nимеет собственные «вшитые» в его ядро обработчики, отображающие пользователю ответные данные в понятном и ясном для него виде. Ответный пакет данных напрямую зависит от того, как было настроено поведение сервера в зависимости от конкретного запроса пользователя. Концепция «клиент-сервер» подразумевает хранение на сервере программного кода, к которому рядовой пользователь не имеет прямого доступа. Как описывалось ранее, последний может лишь отправлять в этот «черный ящик» данные и получать на них от последнего ответ, к которому пользователь имеет абсолютно полный доступ к восприятию и, при желании, к последующему редактированию. Но стоит отметить, что редактируя уже полученный ответ сервера, пользователь не меняет логику работы сервера для последующих запросов.\nНо на самом ли деле это так? С первого взгляда может показаться, что при такой структуре взаимодействия веб приложение абсолютно защищено от действий злоумышленников или неумелых пользователей сети Интернет. Но в действительности имеется не одна уязвимость, которые с первого взгляда неочевидны. Далее будут рассмотрены лишь некоторые из них и даны рекомендации по методам уменьшения вероятности их возникновения.\nРассмотрим форму обратной связи на каком-нибудь сайте К, который занимается продажей каких-либо товаров. В данной форме от пользователя просят заполнить два поля: электронную почту и номер телефона для дальнейшей связи с ним. Пользователь, заполняя требуемые от него для отправки поля, может легко допустить ошибку, поэтому не исключено, что телефон или электронная почта могут оказаться неверными. В результате компания может потерять ценного клиента и прибыль, ради которой она и работает. Данную проблему можно легко избежать, проверяя данные перед отправкой их на сервер. Например, можно было бы встроить проверку на обязательное наличие символов «@» и «.», а также проверить отсутствие невозможных символов в адресе\nэлектронной почты. Тогда клиент сразу бы увидел допущенную ошибку и для отправки формы ему пришлось бы внести необходимые корректировки. Рассмотренная проверка требует обработки на языке программирования, который выполнялся бы в среде браузера до отправки запроса с на сервер.\nОсновным\tстандартным\tязыком\nпрограммирования в среде любого браузера является JavaScript (далее по тексту - JS). Он позволяет обрабатывать данные прямо на стороне клиента используя мощности компьютера и, в некоторых случаях, снижать нагрузку на сервер. Благодаря ему визуальные составляющие веб-сайтов сегодня получили массу возможностей в изменении контента прямо в браузере пользователя без необходимости перезагрузки страницы.\nРанее был рассмотрен относительно безобидный пример ошибки при заполнении полей формы. Но злоумышленники могут в своих целях намеренно подставлять неверные данные, чтобы незапланированно повлиять на работу сервера. Программный код на стороне клиента большинство браузеров позволяет редактировать. В результате пользователь может полностью изменить структуру веб-страницы, заложенную логику отправки данных на сервер. Поэтому обрабатывая данные, полученные от клиента, на сервере разработчику необходимо повторно проверять полученные данные. Возвращаясь к рассматриваемому примеру, злоумышленник может отправить вместо электронной почты вредоносный скрипт, который нарушит работу сервера или, что еще хуже, передаст конфиденциальные данные другим злоумышленникам. Поэтому, в первую очередь, разработчику веб-приложения необходимо четко продумать, какими способами изменение программного кода, находящегося на стороне клиента, можно нарушить заложенную логику поведения сайта. Стоит еще раз подчеркнуть, что изменение данных в браузере не означает, что другие пользователи сети Интернет также увидят эти изменения. Последние хранятся только на устройстве клиента. В результате сразу после перезагрузки\nвеб-страницы, данные с сервера будут получены заново и все локальные изменения будут потеряны. Однако, как уже отмечалось, можно изменить локально код, который, например, отвечает за отправку данных на сервер, и тем самым вызвать незапланированное поведение веб-приложения.\nШирокий функционал JS влечет за собой больше возможностей для возникновения ошибок и атак злоумышленников. В частности, JS позволяет динамически изменять контент страницы или просто передавать/получать данные, выполняя при этом запросы к серверу, без перезагрузки страницы. Данная технология получила название AJAX. Наиболее распространенная ошибка при использовании данной технологией состоит в отсутствии проверки на повторную отправку запроса на сервер. Иными словами, пользователь совершает какое-либо действие на веб-странице, которое влечет за собой запуск синхронного AJAX-запроса серверу. Т.к. выполнение данного запроса не сопровождается перезагрузкой страницы, то в процессе обмена данными и ожидания получения ответа от сервера на сайте не будет происходить никаких изменений. Пользователь сайта, не ведая о работающем процессе, может попробовать выполнить такой же запрос повторно. В результате возникает так называемое «накладывание» запросов, что может привести не только к некорректной работе сайта, но и повлечет повышенную нагрузку на сервер. Для избегания данной проблемы опытные разработчики специально внедряют проверки на повторный запуск не завершенных AJAX-запросов.\nДля того, чтобы максимально снизить вероятность редактирования JS программного кода на клиентской стороне разработчики не редко прибегают к использованию процесса минификации или обфускации готового JS-кода. Этот процесс представляет из себя сжатие написанного кода путем удаления всех лишних пробелов, табуляции, переводов строк, комментариев разработчиков, а также изменение названий переменных на короткие интуитивно-непонятные. Наиболее известны следующие\n«минификаторы»: S Packer, JSmin, YUI Compressor, Closure compiler и др. Применение названных инструментов позволяет сократить размер исходного кода в несколько раз, что уменьшает размер ответного пакета данных, что повышает скорость загрузки сайта и, как следствие, сокращает расход пользовательского и серверного Интернет-трафика. Помимо этого, код становится гораздо более сложным к восприятию человеческим глазом. Даже опытному разработчику будет тяжело вникнуть в заложенную в код логику после его минификации.\nЕстественно существуют инструменты, позволяющие произвести обратный процесс деминификации, но они лишь помогают сделать код чуть более «читаемым», оставляя сложность понимания его действий. Наиболее распространенный деминификатор - jsbeautifier. В конечном итоге, если злоумышленник захочет разобраться в JS-коде для его последующего редактирования, то ему придется скопировать сжатый код, деминизировать его и затем, путем поиска нужных фраз, заменять его части. Однако, минификация позволяет затруднить этот процесс редактирования кода в несколько раз и возможно оттолкнуть часть тех, кто хотел «поэкспериментировать» с кодами сайта.\nСразу несколько уязвимостей не были закрыты в веб приложении разработчиками одной из компаний, которая по случайному стечению обстоятельств является разработчиком известного программного продукта на территории РФ. Это веб-приложение было создано для тестирования знания методов работы в продаваемом продукте для последующей выдачи сертификата, подтверждающее знания тестируемого.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТестирование состоит из 20 текстовых вопросов с 4 вариантами ответа на выбор, при этом имеется возможность пропускать вопросы, менять ответы, возвращаясь к уже отвеченным вопросам. По прохождению всех 20 вопросов, пользователь подтверждает завершение теста, после чего он узнает свой результат и видит таблицу сверки его ответов в сопоставлении с верными ответами.\nНа сегодняшний день у любого современного браузера есть консоль для разработчика, которая помогает удобно просматривать, вносить изменения и выполнять JS-коды без необходимости перезагрузки страницы, таким образом «превращая» веб-страницу в среду программирования.\nИспользуя данный инструмент мной был обнаружен основной файл теста: main.js. Данный скрипт не был минифицирован или как-либо зашифрован перед загрузкой его на работающий сервер, поэтому даже комментарии разработчика оставались на месте. В этом скрипте было найдено событие onclick (нажатие левой кнопкой мыши), которое было привязано к кнопке \"Завершить тестирование\". Данное событие вызывало функцию sendData с единственным параметром - true, а также перекидывало пользователя на страницу с результатами:\ndocument.getElementById(„submittest'). onclick =function(){\nsendData(true); //Отправка ответов на сервер для обработки\ndocument.location = „/test/results/';\n//Перенаправление на страницу с результатами }\nТаким образом, мною было замечено, что функция sendData не перенаправляет информацию на другую страницу, а это значит, что можно вызвать ее из консоли браузера. Тем самым, отправив данные для проверки на сервер, остаться на странице с условиями теста, где можно менять ответы. Проверка замечания дала ожидаемый результат: ответы на вопросы теста были отправлены на сервер для проверки, а пользователь остался на странице с тестированием.\nОсталось лишь проверить еще одну уязвимость на доверие полученным от пользователя данных. Для этого были отправлены новые ответы на тестирование, которые перезаписали предыдущие результаты теста. Методом подбора можно было подобрать правильные ответы, сверяясь со страницей результатов тестирования. Но, в данном случае, как уже упоминалось ранее, тест не только дает\nвозможность узнать пользователю свои результат, но и указывает ему верные ответы на все вопросы завершенного тестирования.\nТаким образом, мноИ был разобран пример того, как пренебрежение средствами «закрытия» уязвимостей веб-приложения, в частности отсутствие минификации сценария JS, а что еще важнее, непродуманность логики работы приложения, как на стороне клиента, так и на стороне сервера, привело к появлению метода прохождения теста на 100% вне зависимости от сложности вопросов. Это делает веб-приложение бесполезным, а выдаваемый сертификат незначимым.\nСписок использованных источников\n1.\tАсланов Рамиль Махир Оглы Проблемы защиты корпоративной информации в сети Интернет // Мониторинг правоприменения. 2012. №1. -\tURL: http://cyberleninka.ru/article/n/problemy-zaschity-korporativnoy-informatsii-v-seti-internet (дата обращения: 24.10.2017)\n2.\tГерманова Валерия Александровна, Атабекян Анаит Саргисовна Проблемы защиты персональных данных в сети интернет // Символ науки. 2016. №12-3. - URL: http://cyberleninka.ru/article/n/problemy-zaschity-personalnyh-dannyh-v-seti-internet\t(дата обращения: 24.10.2017)\n3.\tЖуйков Роман, Шарыгин Евгений Методы предварительной оптимизации программ на языке JavaScript // Труды ИСП РАН. 2015. №6. -URL: http://cyberleninka.ru/article/n/metody-predvaritelnoy-optimizatsii-programm-na-yazyke-javascript (дата обращения: 24.10.2017)\n4.\tЗотов В.А. Реализация языка JavaScript ajах и node. Js // Вестник МГУП. 2013. №9. - URL: http://cyberleninka.ru/article/n/realizatsiya-yazyka-javascript-ajah-i-node-js (дата обращения: 24.10.2017)\n5.\tМакфарланд Дэвид. JavaScript и jQuery. Исчерпывающее руководство. 3-е издание // Издательство \"Эксмо\" ООО, 2015\n: V V :\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-zaschity-dannyh-v-seti-internet-na-storone-klienta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sravnitelnyy-analiz-arhitektur-krossplatformennogo-programmnogo-obespecheniya",
    "slug": "sravnitelnyy-analiz-arhitektur-krossplatformennogo-programmnogo-obespecheniya",
    "title": "СРАВНИТЕЛЬНЫЙ АНАЛИЗ АРХИТЕКТУР КРОССПЛАТФОРМЕННОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ",
    "abstract_description": "Дано описание архитектур, наиболее распространённых в производственной практике наборов инструментов и библиотек для кроссплатформенной разработки. Приведен обзор механизмов операционных систем, которые используют выбранные инструменты. Проведено сравнение кроссплатформенных инструментов с точки зрения архитектуры. Рассмотрены механизмы интеграции кроссплатформенной и платформозависимых частей программного продукта, а также указаны «узкие места» данных механизмов. Приведены рекомендации, которые позволяют определиться с выбором кроссплатформенного инструмента в различных командах инженеров. Рассмотрен такой класс программного обеспечения, как мобильные приложения. Смартфоны и планшеты набирают все большую популярность, вытесняя бумажные носители и стационарные компьютеры, предоставляя бизнес-подразделениям возможность использовать новые каналы и способы обмена информацией с клиентами и сотрудниками. В работе проведен сравнительный анализ наиболее популярных инструментов: PhoneGap, ReactNative, Xamarin и Qt. В качестве целевых платформ рассмотрены операционные системы iOS, Android и Windows UWP. Проведён детальный анализ архитектур кроссплатформенного программного обеспечения в части обоснования использования инструментов кроссплатформенной разработки; архитектуры и интерфейсов для интеграции операционных систем (iOS, Android, Windows UWP); архитектуры кроссплатформенных приложений (PhoneGap, ReactNative, Qt, Xamarin). Сформированы общие рекомендации по выбору инструмента разработки кроссплатформенных приложений",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.4\nСРАВНИТЕЛЬНЫЙ АНАЛИЗ АРХИТЕКТУР КРОССПЛАТФОРМЕННОГО ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ\nВ.Н. Черников, С.Л. Подвальный, В.Ф. Барабанов, В.В. Сафронов Воронежский государственный технический университет, г. Воронеж, Россия\nАннотация: дано описание архитектур, наиболее распространённых в производственной практике наборов инструментов и библиотек для кроссплатформенной разработки. Приведен обзор механизмов операционных систем, которые используют выбранные инструменты. Проведено сравнение кроссплатформенных инструментов с точки зрения архитектуры. Рассмотрены механизмы интеграции кроссплатформенной и платформозависимых частей программного продукта, а также указаны «узкие места» данных механизмов. Приведены рекомендации, которые позволяют определиться с выбором кроссплатформенного инструмента в различных командах инженеров. Рассмотрен такой класс программного обеспечения, как мобильные приложения. Смартфоны и планшеты набирают все большую популярность, вытесняя бумажные носители и стационарные компьютеры, предоставляя бизнес-подразделениям возможность использовать новые каналы и способы обмена информацией с клиентами и сотрудниками. В работе проведен сравнительный анализ наиболее популярных инструментов: PhoneGap, ReactNative, Xamarin и Qt. В качестве целевых платформ рассмотрены операционные системы iOS, Android и Windows UWP. Проведён детальный анализ архитектур кроссплатформенного программного обеспечения в части обоснования использования инструментов кроссплатфор-менной разработки; архитектуры и интерфейсов для интеграции операционных систем (iOS, Android, Windows UWP); архитектуры кроссплатформенных приложений (PhoneGap, ReactNative, Qt, Xamarin). Сформированы общие рекомендации по выбору инструмента разработки кроссплатформенных приложений\nКлючевые слова: кроссплатформенная разработка, мобильные приложения, архитектуры компьютерных систем\nВведение\nКроссплатформенные инструменты и библиотеки активно используются при разработке широкого класса программного обеспечения. Однако все инструменты имеют свои ограничения и важно их понимать при вводе в промышленное использование.\nДалее будет рассмотрен такой класс программного обеспечения, как мобильные приложения. Смартфоны и планшеты набирают все большую популярность, вытесняя бумажные носители и стационарные компьютеры, предоставляя бизнес-подразделениям возможность использовать новые каналы и способы обмена информацией с клиентами и сотрудниками.\nВ отличие от рынка стационарных компьютеров, где доминирует Windows, на рынке мобильной разработки есть 2 ведущие платформы: Apple iOS и Google Android. С целью оптимизации расходов, увеличения скорости разработки и утилизации существующих компетенций все шире начинают использоваться инструменты кроссплатформенной мобильной разработки.\nВ данной работе проведен сравнительный анализ наиболее популярных инструментов:\n© Черников В.Н., Подвальный С.Л., Барабанов В.Ф., Сафронов В.В., 2018\nPhoneGap, ReactNative, Xamarin и Qt. В качестве целевых платформ мы будем рассматривать операционные системы iOS, Android и Windows UWP.\n1. Обоснование использования инструментов кроссплатформенной разработки\nИсторически на рынке компьютеров всегда была конкуренция, и каждый производитель предоставлял оптимальный набор так называемых «нативных» (родных) инструментов для разработки приложений под свои операционные системы и устройства. \"Нативные\" средства разработки обеспечивают максимальную производительность и доступ к возможностям операционной системы.\nОднако часто оказывалось, что эти инструменты были несовместимы друг с другом не только на уровне языка разработки, принятых соглашений и архитектур, но и на уровне механизмов работы с операционной системой и библиотеками. В результате для реализации одних и тех же алгоритмов, пользовательских или бизнес-сценариев требовалось написать приложение для нескольких сред на разных языках программирования.\nВторым важным моментом является наличие необходимых компетенций (знаний и опы-\nта) внутри команды - если их нет, то потребуется время на обучение.\nДля того чтобы решить обе этих проблемы, на рынке появились инструменты крос-сплатформенной разработки, предлагающие:\n-\tмаксимизировать общую базу кода на едином языке программирования, чтобы продукт было проще разрабатывать и поддерживать;\n-\tиспользовать существующие компетенции и специалистов для реализации приложений на новых платформах.\nИтак, «нативные» инструменты предоставляются самими владельцами экосистем и позволяют получить полный доступ к возможностям целевых операционных систем, имеют полный доступ к системным API, оптимальную производительность и требуют отдельной команды разработки под каждую платформу.\nКроссплатформенные инструменты позволяют сократить трудозатраты и ускорить выпуск приложений в том случае, если требуется поддержка нескольких платформ одновременно и имеются (или развиваются) необходимые компетенции. В долгосрочной перспективе кроссплатформенные решения помогут упростить и удешевить развитие программного продукта, но для этого стоит учитывать особенности выбранного инструмента.\n2. Архитектура и интерфейсы для интеграции операционных систем\nГлавный принцип, лежащий в основе кроссплатформенных приложений, - разделение кода на 2 части:\n-\tкроссплатформенную, живущую в виртуальном окружении и имеющую ограниченный доступ к возможностям целевой платформы через специальный мост;\n-\tнативную, которая обеспечивает инициализацию приложения, управление жизненным циклом ключевых объектов и имеющую полный доступ к системным API.\nОбщая архитектура кроссплатформенных приложений показана на рис. 1.\nДля связи между \"нативной\" и \"крос-сплатформенной\" частями, необходимо использовать специальный мост (bridge), который\nи определяет возможности и ограничения крос-сплатформенных инструментов.\nВсе кроссплатформенные приложения обязаны иметь нативную часть, поэтому давайте рассмотрим, какие системные API предоставляются самими iOS, Android и Windows.\nРис. 1. Общая архитектура кроссплатформенного приложения\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n2.1. Архитектура iOS\nНативные интерфейсы низкого уровня в iOS реализованы по аналогии с Unix (для С). Для iOS-разработчика выбор языков ограничивается Objective C и Swift, ведь именно для них реализованы нативные инструменты и API. Общая архитектура iOS представлена на рис. 2.\nДополнительно на схеме мы отметили компоненты, которые имеют значение для кроссплатформенных фреймворков:\n-\tWebKit используется в гибридных приложениях на базе PhoneGap или аналогов для запуска приложений и фактически выступает средой выполнения веб-приложений [1];\n-\tJavaScript Core используется в ReactNative и аналогах для быстрого выполнения JS-кода и обмена данными между Native и\nJS [2];\n-\tOpenGL ES используется в играх и приложениях на Qt/QML или аналогах для отри-совки интерфейса [3];\n-\tUIKit отвечает за нативный пользовательский интерфейс приложения, что актуально для ReactNative и Xamarin.\nNative Арр Objective С, C/C++\t\t\tNative Арр Swift\n.............. 1 ..............\n* Swift API\nГ\nUserapp\nOS\nObjective С and С API\nCocoa Touch\nMedia\nCore Services\nUIKit, Address Book Ul, EventKit Ul, GameKit, ¡Ad, MapKit, Message Ul, Notification Center, PushKit, Twitter\nUIKit graphics, Core Graphics, Core Animation, Core Image, OpenGL ES and GLKit, Metal, TextKIt and Core Text, Image I/O, Photos Library\nAccounts, Address Book, Ad Support, CFNetwork, Core Data (+SQLite), CloudKit, Core Foundation, Core Location, Core Media, Core Motion, Core Telephony, EventKit, Foundation, HealthKit, HomeKit, JavaScript Core, Mobile Core Services, Multipeer Connectivity, NewsstandKit, PassKit, Quick Look, Social, StoreKit, System Configuration, WebKit\nCore OS\nAccelerate, Core Bluetooth, External Accessory, Generic Security Services, Local Authentication, Network Extension, Security, System\niOS\nРис. 2. Архитектура iOS\nKernel\n2.2. Архитектура Android\nAndroid также является Unix-системой и большей частью основан на Linux. В Android, поверх ядра Linux создана своя инфраструктура, включающая виртуальную машину Java (Java Virtual Machine, JVM) для запуска приложений. JVM выступает посредником между пользовательским кодом и набором системных API, доступных для Java-приложений. Поддержка языка Kotlin является надстройкой над той инфраструктурой, которая доступна Java. На рис. 3 показана архитектура Android.\nAndroid Рис. 3. Архитектура Android\nВ Android разработчику доступно сразу целых 2 подсистемы: Native Development Kit (Android NDK) и Android SDK.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nС помощью NDK можно получить доступ к низкоуровневым механизмам Android. Разработка ведется на С/С++.\nПри использовании Android SDK разработчик оказывается внутри Java-машины Dalvik (или Android Runtime, ART) и имеем только те возможности, которые предоставляет Java API.\nСвязующим звеном между библиотеками низкого уровня (на C/C++) и инфраструктурой Java выступает специальный JNI bridge (Java Native Interface), который и позволяет двум мирам взаимодействовать друг с другом. JNI выступает единым и универсальным связующим звеном, однако, как и любой мост, ведет к падению производительности приложения.\nПомимо JNI bridge, в архитектуре Android также стоит выделить наличие подсистем WebKit (для PhoneGap), OpenGL ES (для Qt и игр) и View System (для ReactNative и Xamarin), аналогичные модулям в iOS.\n2.3. Архитектура Windows UWP\nВ заключение давайте рассмотрим архитектуру Windows, которая предоставляет большое количество различных интерфейсов и механизмов взаимодействия с операционной системой. Архитектура Windows показана на рис. 4.\nWindows UWP\nРис. 4. Архитектура Windows\nПомимо API для C++/C#, Windows UWP также предоставляет механизмы работы с JavaScript на базе модуля Chakra. Microsoft также поддерживает версию ReactNative на Windows UWP.\nВ системе доступен компонент WebView, необходимый PhoneGap. Реализации OpenGL ES нет, вместо нее доступен DirectX [4, 5].\n3. Архитектуры кроссплатформенных приложений\nВсе операционные системы имеют те или иные технические возможности по запуску кроссплатформенных приложений. Самое простое с технической точки зрения - использование WebView, которое есть у всех ОС (актуально для PhoneGap). Вторым вариантом является использование механизмов низкого уровня (например, OpenGL ES и языка C/C++), это позволит разделять между проектами большинство логики (в играх или Qt), но будет ограниченно работать (или не работать) на Windows UWP. Если же необходим полный доступ к возможностям целевых операционных систем (ОС), то здесь начинают задействоваться системные API верхнего уровня - такой подход реализуется только в Xamarin и ReactNative.\nЧтобы лучше понять возможности и ограничения каждого из фреймворков, давайте рассмотрим, как архитектурно они устроены и какие из этого следуют возможности и ограничения.\n3.1. Архитектура PhoneGap\nРешения на базе PhoneGap используют WebView и являются простыми с точки зрения\nреализации: создается небольшое «нативное» приложение, которое отображает встроенный веб-браузер и открывает в нем HTML-файл из ресурсов приложения. Из кода HTML нет прямого доступа к системным API, поэтому необходимо к WebView и HTML-коду подключать библиотеки, которые добавляют интерфейсы доступа к системной функциональности через объекты и классы JavaScript. На рис. 5 показана архитектура PhoneGap.\nPhoneGap\nwebkit. WebView\nft ft 3 J^lLJL Л\nPlugins Native libs\nAPI, libs, Ul controls, services\nAPI, libs, Ul controls, services\nAPI, libs, Ul controls, services\nWindows UWP\nРис. 5. Архитектура приложения на PhoneGap\nКак видим, PhoneGap позволяет разделять практически весь код между платформами, однако все еще требуется реализация нативной части на Objective C и Java (и C# для Windows). Весь жизненный цикл приложения проходит внутри WebView.\nПользовательский интерфейс организован по принципу одностраничного HTML - в реальных приложениях со сложным интерфейсом будут подергивания и подтормаживания (особенности мобильных WebView, которые еще и могут отличаться у разных производителей). Для передачи данных через мост их необходимо сериализовать/десериализовать в Json. В целом мост используется редко, так как вся жизнь приложения проходит внутри WebView.\n3.2. Архитектуры ReactNative\nReactNative дает возможность использовать скриптовый язык программирования JavaScript для описания интерфейса пользователя и логики работы приложений. Сам по себе код на JavaScript обеспечивает производительность, сопоставимую с нативной. Однако и в архитектуре ReactNative присутствует мост, снижающий скорость работы с платформенной функциональностью и UI. На рис. 6 показана архитектура ReactNative.\nРис. 6. Архитектура приложения на ReactNative\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПри создании приложений на ReactNative разработчику будет необходимо также реализо-вывать нативную часть на Objective C, Java или C#, которая инициализирует модуль исполнения кода на JavaScipt и передает в него нужные файлы из ресурсов приложения. Далее пользовательский код на JavaScript переключает на себя управление жизненным циклом и созданием пользовательского интерфейса [6, 7].\nДля передачи данных и вызовов между кодом на JavaScript и нативной частями приложение также использует мост. Важно отметить, что для передачи сложных структур данных и классов между нативной частью и кодом на JavaScript их необходимо сериализо-вать/десериализовать в формате JSON.\n3.3. Qt\nАрхитектура Qt позволяет портировать его в те операционные системы, которые имеют API для C++. И iOS, и Android (NDK), и Windows такой возможностью обладают, хотя и все со своими особенностями.\nОдин из главных плюсов Qt - собственная эффективная система отрисовки пользовательского интерфейса либо на базе растрового движка (например, CoreGraphics в iOS), либо на базе Open GL (ES). Именно это и делает фреймворк портируемым на новые операционные системы и среды исполнения. На рис. 7 показана архитектура Qt.\nНа iOS используются стандартные модули CoreGraphics и UIKit для отрисовки пользовательского интерфейса. В Android используются механизмы NDK для отрисовки UI, а для доступа к Java API и управления приложением используется уже знакомый нам мост JNI. Также в iOS и Android может использоваться Open GL ES для отрисовки QML или работы с 3D.\nВ Windows имеется прямой доступ к C++ API, но нет реализации Open GL (ES), поэтому необходимо использовать конвертацию вызовов Open GL ES в вызовы DirectX.\nВажно отметить, что пользовательский интерфейс приложений на основе Qt не является нативным, а только делается похожим на него с помощью стилизации.\n3.4. Xamarin\nXamarin является открытой реализацией инфраструктуры .NET для Unix-систем. Для взаимодействия с родными (для C) интерфейсами операционных систем в Mono используется механизм P/Invoke. На основе Mono были созданы фреймворки MonoTouch и MonoDroid, которые затем переименовали в Xamarin.iOS и Xamarin.Android, и теперь вместе называют \"классическим Xamarin\" (Xamarin Classic).\nКлассический Xamarin предоставляет полный доступ к системным API, то есть можно создавать нативные приложения iOS/Android. Нативные библиотеки подключаются через механизм байндинга (Native Library Binding). Взаимодействие с ОС происходит через мост и механизм оберток (wrappers), однако нет необходимости сериализовать данные, так как осуществляется автоматический маршалинг и есть возможность прямой передачи ссылок между средами Mono Managed и Native. На рис. 8 показана архитектура Xamarin.\nРис. 7. Архитектура приложения на Qt\nРис. 8. Архитектура приложения на Xamarin\nПроизводительность кода на C# сопоставима с производительностью нативного кода в iOS/Android, но при взаимодействии с ОС используется мост, который может замедлять приложение при неэффективном использовании.\nПриложение на Xamarin.iOS / Xamarin.Android обычно состоит из shared (общей) части, которая упаковывается в .NET-библиотеку (dll) и платформенной части, которая имеет полный доступ к API, включая на-тивный пользовательский интерфейс. В платформенной части содержатся описание экранов, ресурсы, стили, шрифты - практически 100% структура нативного проекта на Objective C или Java, или на C#.\nЗаключение\nВ работе были рассмотрены особенности кроссплатформенных фреймворков с точки зрения архитектуры. Сами по себе кроссплат-форменные приложения сопоставимы с натив-ными, однако необходимость использования моста снижает скорость при взаимодействии с системными API.\nПри выборе фреймворка стоит учитывать не только язык программирования, но и необходимый уровень знаний целевых операционных систем (iOS, Android, Windows), а также опираться на опыт команды разработчиков. Например, при использовании PhoneGap можно обойтись без глубоких знаний особенностей различных ОС. А для Xamarin Classic придется стать экспертом в iOS и/или Android.\nОбщие рекомендации по выбору инструмента разработки кроссплатформенных приложений:\n- PhoneGap - если необходимо быстро сделать простое приложение или прототип и в команде есть опыт разработки одностраничных веб-приложений (HTML, JavaScript, CSS). В большинстве случаев можно найти готовые сторонние компоненты для нативной функциональности. Из минусов - неродной пользовательский интерфейс с частыми «подергивания-\nми и залипаниями», а также непростой доступ к нативной части. Процент разделяемого кода -до 95%;\n-\tReactNative - подойдет для опытных JavaScript-разработчков и команд, но потребует достаточно хорошего знания iOS Objective C API и Android Java API. Приложения выглядят и работают нативно. Процент разделяемого кода - до 90%;\n-\tXamarin Classic - для опытных C#-разработчиков, которым потребуется глубоко освоить iOS и Android. Приложения будут полностью нативными, но написаны на C#. Объем общей базы кода в редких случаях превышает 40%;\n-\tQt - этот фреймворк можно рекомендовать только в случае, если уже есть существующее приложение (например, для встраиваемых систем) и его необходимо запустить на iOS/Android. Высокие требования к квалификации разработчиков, непростой доступ к натив-ной функциональности и неродной UI являются заметными минусами фреймворка. Процент разделяемого кода может доходить до 95%.\nЛитература\n1.\tTavakkoli Alireza. Game Development and Simulation with Unreal Technology. Boca Raton: CRC Press. 2016. 427 p.\n2.\tShekar Siddharth. Cocos2d Cross-Platform Game Development Cookbook. Packt Publishing Ltd. 2014. 266 p.\n3.\tСкит Джон. C# для профессионалов: тонкости программирования; пер. с англ. Ю. Н. Артеменко. Изд. 3-е. М.: Вильямс, 2014. 608 с.\n4.\tHocking Joseph. Unity in Action. Multiplatform game development in C# with Unity 5. Manning, 2015. 352 p.\n5.\tТорн Алан. Искусство создания сценариев в unity; пер. с англ. Р. Н. Рагимова. М.: ДМК-Пресс, 2016. 360 с.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n6.\tИнтеграционные решения при построении корпоративных информационных систем / В.В. Сафронов и др. // Известия Самарского научного центра РАН. 2016. Т. 18. № 4(3). С. 646-654.\n7.\tМодульное построение распределённой информационной системы машиностроительного предприятия /\nB.В.\tСафронов и др. // Вестник Воронежского государственного технического университета. 2015. Т. 11. № 4.\nC.\t44-50.\nПоступила 25.06.2018; принята к публикации 15.09.2018 Информация об авторах\nЧерников Вячеслав Николаевич - соискатель, Воронежский государственный технический университет (394026, Россия, г. Воронеж, Московский проспект, 14), e-mail: slava.chernikoff@live.com\nПодвальный Семен Леонидович - д-р техн. наук, профессор, Воронежский государственный технический университет (394026, Россия, г. Воронеж, Московский проспект, 14), e-mail: spodvalny@yandex.ru\nБарабанов Владимир Федорович - д-р техн. наук, профессор, Воронежский государственный технический университет (394026, Россия, г. Воронеж, Московский проспект, 14), e-mail: bvf@list.ru\nСафронов Виталий Владимирович - канд. техн. наук, зав. лабораторией, Воронежский государственный технический университет (394026, Россия, г. Воронеж, Московский проспект, 14), e-mail: safronov.vitaliy@mail.ru\nCOMPARATIVE ANALYSIS OF ARCHITECTURES OF CROSS-PLATFORM SOFTWARE V.N. Chernikov, S.L. Podvalny, V.F. Barabanov, V.V. Safronov Voronezh State Technical University, Voronezh, Russia\nAbstract: the article describes the architecture, that is the most common in the practice of toolkits and libraries for cross-platform development. An overview of the mechanisms of operating systems that use selected tools is given. Comparison of cross-platform tools in terms of architecture is done. The mechanisms of integration of cross-platform and platform-independent parts of the software product are considered, and the \"bottlenecks\" of these mechanisms are indicated. The recommendations are given, which allow to determine the choice of cross-platform tools in different teams of engineers. This class of software is considered as mobile applications. Smartphones and pads are gaining popularity, displacing treeware and stationary computers, giving business units the opportunity to use new channels and ways to exchange information with customers and employees. The article compares the most popular tools: PhoneGap, ReactNative, Xamarin and Qt. The target platforms are iOS, Android and Windows UWP operating systems. A detailed analysis of cross-platform software architectures in part: a substantiation of the use of cross-platform development tools; architecture and interfaces for the integration of operating systems (iOS, Android, Windows UWP); architecture of cross-platform applications (PhoneGap, ReactNative, Qt, Xamarin). General recommendations on the choice of the tool for developing cross-platform applications have been formed\nKey words: cross-platform development, mobile applications, architecture of computer systems\nReferences\n1.\tTavakkoli Alireza \"Game Development and Simulation with Unreal Technology\", CRC Press, Boca Raton, 2016, 427 p.\n2.\tShakar S. \"Cocos2d cross-platform game development cookbook\", Packt Publishing Ltd, 2014, 266 p.\n3.\tSkeet J. \"C# for professionals: the subtleties of programming\", trans. from English by Artemenko Yu.N., Moscow, Williams, 2014, 608 p.\n4.\tHocking J. \"Unity in action. Multiplatform game development inC# with Unity 5\", Manning, 2015, 352 p.\n5.\tThorne A. \"The Art of scripting in Unity\", trans. from English by Ragimov R.N., Moscow, DMK-Press, 360 p.\n6.\tSafronov V.V. et al. \"Integration solutions in the construction of corporate information systems\", Proceedings of the Samara scientific center of RAS (Izvestiya Samarskogo nauchnogo tsentra RAN), 2016, vol. 18, no. 4 (3), pp. 646-654.\n7.\tSafronov V.V. et al. \"Modular building systems engineering distributed information companies\", The Bulletin of Voronezh State Technical University (Vestnik Voronezhskogo gosudarstvennogo tekhnicheskogo universiteta), 2015, vol. 11, no. 4, pp. 44-50.\nSubmitted 25.06.2018; revised 15.09.2018\nInformation about the authors\nVyacheslav N. Chernikov, Seeker, Voronezh State Technical University (14 Moskovskiy prospekt, Voronezh 394026, Russia), email: slava.chernikoff@live.com\nSemyen L. Podvalny, Dr. Sc. (Technical), Professor, Voronezh State Technical University (14 Moskovskiy prospekt, Voronezh 394026, Russia), e-mail: spodvalny@yandex.ru\nVladimir F. Barabanov, Dr. Sc. (Technical), Professor, Voronezh State Technical University (14 Moskovskiy prospekt, Voronezh 394026, Russia), e-mail: bvf@list.ru\nVitaliy V. Safronov, Cand. Sc. (Technical), Laboratory Manager, Voronezh State Technical University (14 Moskovskiy prospekt, Voronezh 394026, Russia), e-mail: safronov.vitaliy@mail.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/sravnitelnyy-analiz-arhitektur-krossplatformennogo-programmnogo-obespecheniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/ispolzovanie-setevoy-bazy-dannyh-dlya-hraneniya-slozhnostrukturirovannyh-dannyh-na-storone-klienta-v-informatsionnoy-sisteme-s-web",
    "slug": "ispolzovanie-setevoy-bazy-dannyh-dlya-hraneniya-slozhnostrukturirovannyh-dannyh-na-storone-klienta-v-informatsionnoy-sisteme-s-web",
    "title": "Использование сетевой базы данных для хранения сложноструктурированных данных на стороне клиента в информационной системе с web-интерфейсом",
    "abstract_description": "Развитие технологий Web 2.0 привело к перемещению сложных приложений в Web. Web-приложения обладают рядом преимуществ, однако, текущие ограничения платформы Web 2.0 (в частности, отсутствие поддержки распределённых систем объектов) не позволяют эффективно оперировать сложноструктурированными данными, что затрудняет реализацию информационных систем в виде веб-приложений. К данным со сложной структурой (сложноструктурированным) относятся массивы, списки, деревья, графы, сети и их комбинации. Проблема состоит в сложности поддержки актуальности веб-страницы и синхронизации с сервером, необходимости передачи больших объёмов данных это может негативно сказаться на скорости реакции пользовательского интерфейса приложения. Следовательно, важной задачей является минимизация объёма передаваемых данных, необходимых для выполнения той или иной операции и ликвидация повторной загрузки данных. В качестве решения данной проблемы предлагается ввести отдельный (вспомогательный) уровень данных на стороне клиента. В ходе реализации такого уровня абстракции, решающего описанные выше проблемы, была разработана концепция унифицированного ориентированного графа (UOG, Unified Oriented Graph), представляющая собой частный случай сетевой базы данных.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.428.4\nБаранов Д.А., Влацкая И.В.\nОренбургский Государственный Университет Е-mail: baranov@semograph.com\nИСПОЛЬЗОВАНИЕ СЕТЕВОЙ БАЗЫ ДАННЫХ ДЛЯ ХРАНЕНИЯ СЛОЖНОСТРУКТУРИРОВАННЫХ ДАННЫХ НА СТОРОНЕ КЛИЕНТА В ИНФОРМАЦИОННОЙ СИСТЕМЕ С WEB-ИНТЕРФЕЙСОМ\nРазвитие технологий Web 2.0 привело к перемещению сложных приложений в Web. Web-приложения обладают рядом преимуществ, однако, текущие ограничения платформы Web 2.0 (в частности, отсутствие поддержки распределённых систем объектов) не позволяют эффективно оперировать сложноструктурированными данными, что затрудняет реализацию информационных систем в виде веб-приложений.\nК данным со сложной структурой (сложноструктурированным) относятся массивы, списки, деревья, графы, сети и их комбинации. Проблема состоит в сложности поддержки актуальности веб-страницы и синхронизации с сервером, необходимости передачи больших объёмов данных -это может негативно сказаться на скорости реакции пользовательского интерфейса приложения. Следовательно, важной задачей является минимизация объёма передаваемых данных, необходимых для выполнения той или иной операции и ликвидация повторной загрузки данных.\nВ качестве решения данной проблемы предлагается ввести отдельный (вспомогательный) уровень данных на стороне клиента. В ходе реализации такого уровня абстракции, решающего описанные выше проблемы, была разработана концепция унифицированного ориентированного графа (UOG, Unified Oriented Graph), представляющая собой частный случай сетевой базы данных.\nКлючевые слова: распределённые системы, унифицированный объектный граф, сложноструктурированные данные, базы данных.\nПосле наступления эпохи Web 2.0 и появления новых средств и стандартов разработки web-приложений наблюдается тенденция переноса привычных «настольных» приложений в web. Это обусловлено преимуществами, которые получают пользователи web-приложений нового поколения, например: запуск приложения без установки на клиент (компьютер, мобильное устройство, виртуальную машину) посредством браузера; доступ к персональным данным с любого устройства, поддерживающего используемые стандарты Web 2.0 и доступом в Интернет; интеграция с разнообразными web-сервисами, такими как социальные сети или платёжные системы. Дальше всех в этом направлении продвинулась корпорация Google, анонсировав в июле 2009 операционную систему ChromeOS, весь пользовательский интерфейс которой реализуется в браузере.\nФактически, любое web-приложение представляет собой распределённую информационную систему клиент-серверной архитектуры [1]. При этом архитектура уровней системы может варьироваться. С развитием Web 2.0 все большее число функций переносится на клиент. Это связано с возросшей вычислительной мощностью клиенстких устройств и производительностью браузеров. Если раньше web-сервер генерировал статическую HTML-страницу а\nзадачей клиента была лишь визуализация этой страницы, то теперь сервер, как правило, лишь передаёт браузеру набор данных, где производится конструирование DOM (Document Object Model, Объектная Модель Документа) и визуализация страницы. Помимо снижения нагрузки на сервер, это так же позволяет динамически изменять web-страницу и реализовать интерактивный пользовательский интерфейс. Ключевыми факторами в этом процессе стало внедрение языка программирования JavaScript в браузер, появление технологии AJAX (Asynchronous JavaScript and XML) и концепции RIA (Rich Internet Application — веб-приложения с «насыщенным» интерфейсом). На рисунке 1 изображена диаграмма процесса изменения архитектуры клиент-сервер web-приложений.\nОписанные выше преимущества актуальны и для информационных систем. Однако, текущие ограничения платформы Web 2.0 (в частности, отсутствие поддержки распределённых систем объектов) не позволяют эффективно оперировать сложноструктурированными данными, что затрудняет реализацию информационных систем в виде веб-приложений.\nК данным со сложной структурой (сложноструктурированным) относятся массивы, списки, деревья, графы, сети и их комбинации [2], [3]. Основная проблема состоит в сложности\nподдержки актуальности DOM веб-страницы и синхронизации с сервером. Кроме того, в современных веб-приложениях (особенно, в информационных системах) объёмы данных, с которыми работает пользователь, могут быть очень большими. Передача таких объёмов данных через Интернет может негативно сказаться на скорости реакции пользовательского интерфейса приложения. Следовательно, важной задачей является минимизация объёма передаваемых данных, необходимых для выполнения той или иной операции и ликвидация повторной загрузки данных.\nВ качестве решения данной проблемы предлагается ввести отдельный (вспомогательный) уровень данных на стороне клиента. Следует отметить, что стандарт HTML5 добавил в браузеры поддержку LocalStorage — реляционной БД, позволяющей веб-приложениям перманентно хранить в браузере произвольные данные. Однако, современные методы разработки информационных систем подразумевают использование средств более высокого уровня, чем прямое общение с БД через SQL, таких как ORM (Object-Relational Mapping, Объектно-Реляционное Отображение) [4]. Тем не менее, LocalStorage предоставляет возможность хранения данных на стороне клиента, что позволяет избежать необходимость повторной загрузки не изменявшихся данных при каждом открытии приложения. Наиболее логичным решением является реализация дополнительного уровня абстракции между LocalStorage и веб-приложением, предоставляющим удобный\nинтерфейс программирования и использующий возможности LocalStorage.\nВ ходе реализации такого уровня абстракции, решающего описанные выше проблемы, была разработана концепция унифицированного ориентированного графа (UOG, Unified Oriented Graph). UOG представляет собой частный случай сетевой базы данных. Сетевые базы данных менее эффективны в плане скорости доступа и занимаемого объёма по отношению к реляционным БД, однако они позволяют естественным образом представлять сложносвязные структуры данных. Кроме того, схема сетевой базы данных, как правило, не накладывает жёстких ограничений на типы хранимых данных, что может быть полезным при хранении сложных структур данных.\nОсновной идеей унифицированного ориентированного графа является представление всех полученных с сервера данных в единой структуре (графе, сетевой БД) на клиенте, для обеспечения единого (унифицированного) интерфейса доступа к данным и ассоциативным связям между ними (ориентированность). Для этого ассоциативные связи представляются в виде узлов графа, наряду с прочими данными.\nКонцепция UOG близка к модели OEM (Object Exchange Model), разработанной для представления слабоструктурированных данных [5, 6]. Однако, в отличии от модели OEM, UOG имеет более жёсткую схему (которая является частью самого графа), позволяющая производить валидацию данных и контролировать их структуру до синхронизации с сервером. Схема\nРисунок 1— Развитие архитектуры клиент-сервер\nUOG задаётся априорно и не допускает появления в модели неструктурированных данных.\nПри использовании концепции унифицированного ориентированного графа можно выделить следующие основные задачи: обмен данными с сервером, выборка узлов, визуализация данных, слежение за обновлениями данных.\nПоскольку web-приложения не поддерживают распределённые системы объектов (CORBA, DCOM, GLOBE, SOAP), для решения задачи обмена данными (протокола синхронизации уровней представления данных сервера и клиента) возможно использование одного из способов обмена сообщениями в распределённых системах, таких как XML-RPC, JSON, REST. XML-RPC (Remote Procedure Call, удалённый вызов процедур на основе XML) является одним из первых протоколов, обеспечивающих удалённый вызов функций [1]. Как правило, он не используется в web-приложениях, поскольку с Web 2.0 появились более удобные способы обмена данными. JSON (JavaScript Object Notation) — текстовый формат данных, предоставляющий прозрачную сериализацию основных структур JavaScript и легко читаемый людьми. REST (Representational State Transfer, Передача состояния представления) — набор простых принципов доступа и манипуляции данными через унифицированный интерфейс, реализующий набор операций CRUD (Create, Read, Update, Delete) поверх протокола HTTP [7]. В качестве формата данных REST обычно использует JSON. Подход REST представляется наиболее естественным для синхронизации данных между разными уровнями представления данных.\nОсновными понятиями REST являются ресурс и коллекция ресурсов. Ресурсом является любая сущность, которой оперирует ИС. Любой ресурс входит в некоторую коллекцию ресурсов, в пределах которой он должен иметь уникальный идентификатор. Например:\n/rest/books — коллекция книг;\n/rest/books/15 — книга с идентификатором 15;\n/rest/books/15/pages — коллекция страниц книги с идентификатором 15;\nСледует подчеркнуть, что REST не накладывает никаких ограничений на способ представления адресов ресурсов и коллекций. Так, пример 3 может быть представлен следующим образом:\n/rest/pages/15?book_id=15 — коллекция страниц с параметром запроса <идентифика-тор_книги=15>.\nВ рассматриваемой задаче необходимо учесть, что нужно предоставить доступ к связям данных на стороне сервера как к ресурсам. Для доступа к связям данных с помощью REST можно использовать три подхода:\nПрисвоить каждой связи уникальный идентификатор относительно других связей этого же типа. То есть, необходимо завести отдельную коллекцию связей:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n/rest/book_has_author/183 — у книги есть автор, связь с идентификатором 183.\nТакой подход удобен, поскольку не требует никаких изменений в логике UOG для работы с узлами, хранящими связи. Однако, хранение идентификатора связи влечёт накладные расходы на сервере БД. В реляционных БД связи типа многие-ко-многим, как правило, хранятся в виде отдельной таблцы, соедржащей кортежи (<идентификатор первого связываемого объекта>; <идентификатор второго связываемого объекта>; ^дополнительные поля>]) [4], следовательно, включение идентификатора связи в котреж может увеличить размер записи в 1,5 раза в случае отсутствия дополнительных полей. Учитывая потенциально большое количество связей (относительно обычных сущностей), это серьёзный недостаток данного подхода.\nОчевидно, коллекция связей может быть выражена как подколлекция ресурсов, связываемых ею. Однако, такой способ представления оставляет неоднозначность выбора уникального идентификатора связи:\n/rest/books/15/authors/3 — автор с идентификатором 3 книги с идентификатором 15.\n/rest/authors/3/books/15 — автор с идентификатором 3 книги с идентификатором 15.\nИспользование параметров строки запроса. Для этого подхода, как и для первого, требуется коллекция связей. Однако, внутри неё ресурсам (связям) не будут присваиваться уникальные идентификаторы. Весто этого обращение к ресурсам будет осуществляться через параметры строки запроса:\n/rest/book_has_author?book_id=15&author_ id=3 — автор с идентификатором 3 книги с идентификатором 15.\nДанный подход лишён недостатков предыдущих подходов, но следует заметить, что приведённый пример фактически является вызовом метода list, т. е. получения коллекции. Фактически, это означает, что результатом выполнения такого запроса будет массив объектов. Однако, уникальность связей должна обеспечиваться на уровне БД.\nОчевидно, сложные структуры данных подразумевают сложную логику представления. Для реализации интерфейса таких информационных систем зачастую используют паттерн MVC (Model-View-Controller, Модель-Представление-Контроллер) [8], [9]. Основополагающей идеей данного паттерна является отделение данных от представления. Это означает, что одни и те же данные могут быть одновременно представлены разными способами, при этом обновление данных в модели автоматически вызывает обновление всех представлений этих данных посредством контроллера.\nРассмотрим особенности использования UOG в качестве модели в составе паттерна MVC. При реализации этого паттерна часто\nбывает необходимо представлять целые коллекции объектов как единое целое. Удобство UOG заключается в возможности динамического формирования произвольных коллекций из узлов графа (срезов) посредством запросов с возможностью наблюдения за изменениями в этих коллекциях. Эта возможность основывается на механизме выборок узлов из графа, описанном ниже. Значительным достоинством данного подхода является возможность повторного использования представлений для визуализации (в том числе одновременной) узлов одного типа, выбранных на основе связей с узлами различных типов, путём простой замены запроса. На рисунке 2 представлена схема клиент-серверного приложения с использованием UOG.\nПомимо визуализации, использование UOG в качестве модели упрощает редактирование данных и синхронизацию с сервером, поскольку предоставляет единый интерфейс доступа к данным, их созданию и изменению.\nКак уже отмечалось, во многих информационных системах объёмы данных, с которыми\nРисунок 2 — UOG в клиент-серверном приложении\nработает пользователь, слишком велики, чтобы загружать их единовременно. Поэтому необходим механизм отложенной загрузки данных, т. е. узлов графа в концепции UOG. Очевидно, в большинсве случаев объём необходимых пользователю данных значительно меньше объёма всех доступных ему данных, следовательно, механизм отложенной загрузки должен загружать только необходимые данные, с минимальной избыточностью, благодаря чему снизится время загрузки (и, как следствие, время реакции интерфейса) и нагрузка на сервер. В рамках концепции UOG были разработаны два подхода к реализации механизма отложенной загрузки данных:\nУзлы-пустышки (Dummy Nodes) Ленивые узлы (Lazy Nodes) Для выборки узлов из графа используется алгоритм, принимающий на вход объект JavaScript (ассоциативный массив) с параметрами запроса и последовательно анализирующий доступные узлы. Это же механизм используется для наблюдения за новыми и удаляемыми узлами. Для оптимизации поиска узлы могут быть упорядочены по типу и другим вспомогательным полям.\nОписанный подход был опробован на второй версии системы графосемантического моделирования «Семограф» [10], [11].\nUOG разрабатывалась для хранения данных в ИС «Семограф» на стороне клиента.\nРисунок 3 — Схема ядра структуры данных ИС «Семограф»\nПервоначально для этих целей использовались классические коллекции (реализация из библиотеки BackboneJS), однако, особенности структур данных «Семографа» значительно усложняли этот подход (ядро структуры схематично представлено на рисунке 3). Такая структура стала следствием денормализации реляционной модели, проведённой с целью устранения дублирования больших объёмов текстовых данных.\nСложность заключается в наличии сложных взаимосвязей между типами данных (например один компонент может одновременно принадлежать проекту, нескольким контекстам этого проекта и нескольким полям этого проекта). Для манипулирования подобными данными были испытаны два подхода:\nхранение нескольких экземпляров одного объекта (в данном случае, компонента), используя для поддержания целостности некоторый дескриптор (например, первичный ключ из БД);\nиспользование проекций коллекций (срезов), подразумевает наличие общей коллекции для хранения однотипных объектов и управляющего объекта (агрегирующей коллекции), осуществляющего выборку из общей коллекции необходимых объектов.\nПервый подход неудобен из-за возможной потери целостности данных, второй — из-за трудоемкости контроля и синхронизации управляющего объекта, коллекции и необходимости поддержки нескольких объектов управления.\nПри всестороннем рассмотрении проблемы, в частности, представлении структуры данных в виде, изображённом на рисунке 3, стало очевидно, что самым логичным способом хранения этих данных является представление в виде графа. Эта идея стала основой концепции UOG.\nПомимо ядра структуры данных (приведённой на рисунке 3), UOG включает большое количество периферийных и вспомогательных данных, не связанных непосредственно с\nреляционной моделью данных ИС. К ним относятся: HTML-шаблоны, элементы интерфейса (окна, их положение и размер), сведения о рабочих столах. Подобное единое представление данных позволило организовать унифицированный интерфейс доступа к любым данным клиента. В ИС «Семограф» этот интерфейс реализован посредством специального языка запросов, основанного на реализации DataJS. Особенности данных системы потребовали\nсущественной доработки и оптимизации интерпретатора запросов.\nНа данный момент система «Семограф» еще находится в стадии разработки, однако сам процесс разработки подтвердил ожидаемые преимущества UOG: унифицированный интерфейс доступа к данным, перманентное хранение данных на клиенте, автоматическая актуализация представлений данных и т. д.\n24.09.2015\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nСписок литературы:\n1.\tЭ. Таненбаум, М. ван Стеен, Распределенные системы. Принципы и парадигмы, 2003.\n2.\tР. Седжвик, Фундаментальные алгоритмы на C. Анализ/Структуры данных/Сортировка/Поиск/Алгоритмы на графах, 2003.\n3.\tМ.В. Гладков С.В. Шибанов, Сложные структуры в реляционных базах данных, 2004.\n4.\tK. Roebuck, Object-relational mapping (Orm): High-impact Strategies - What You Need to Know: Definitions, Adoptions, Impact,\nBenefits, Maturity, Vendors, 2011.\n5.\tМ. Гринев, Системы управления полуструктурированными данными, 1999.\n6.\tД. Палей, Моделирование квазиструктурированных данных, 2002\n7.\tJ. Webber, S. Parastatidis, I. Robinson, REST in Practice: Hypermedia and Systems Architecture, 2010.\n8.\tЭ. Гамма, Р. Хелм, Р. Джонсон, Дж. Влиссидес, Приемы объектно-ориентированного проектирования. Паттерны проекти-\nрования, 2007.\n9.\tЭ. Фримен, Э. Фримен, К. Сьерра, Б. Бейтс, Паттерны проектирования, 2011.\n10.\tСемограф. — URL: http://new.semograf.com (дата обращения: 4.08.2013).\n11.\tСистема графосемантического моделирования / Д. А. Баранов, К. И. Белоусов, И. В. Влацкая, Н. Л. Зелянская. — М. :\nСвидетельство о государственной регистрации в Федеральной службе по интеллектуальной собственности, патентам и товарным знакам. Зарегистрировано в Реестре программ для ЭВМ №20111617192 от 15.09.2011.\nСведения об авторах:\nБаранов Дмитрий Александрович, преподаватель кафедры компьютерной безопасности и математического обеспечения информационных систем Оренбургского государственного университета\nE-mail: baranov@semograph.com\nВлацкая Ирина Валерьевна, заведующий кафедрой компьютерной безопасности и математического обеспечения информационных систем Оренбургского государственного университета, кандидат технических наук, доцент E-mail: irina.vlatskaya@yandex.ru\n460018, Оренбург, пр. Победы 13, ауд. 20520, тел.: (3532) 372534\n",
    "download_url": "https://cyberleninka.ru/article/n/ispolzovanie-setevoy-bazy-dannyh-dlya-hraneniya-slozhnostrukturirovannyh-dannyh-na-storone-klienta-v-informatsionnoy-sisteme-s-web/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/o-razrabotke-novogo-podhoda-dlya-ischisleniya-parametrov-raschetnoy-lesoseki-neistoschitelnogo-polzovaniya",
    "slug": "o-razrabotke-novogo-podhoda-dlya-ischisleniya-parametrov-raschetnoy-lesoseki-neistoschitelnogo-polzovaniya",
    "title": "О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования",
    "abstract_description": "Предлагается новый подход к определению допускаемых объемов пользования древесиной (расчетной лесосеки) для спелых и перестойных эксплуатационных лесов и разработанные на его основе компьютерные программы, которые позволяют вычислять параметры расчетной лесосеки, обеспечивающей непрерывное неистощительное лесопользование в этих лесах, на протяжении заданного числа лет. Предлагаемый подход к определению «расчетной лесосеки» для эксплуатационных лесов базируется на имитационной модели динамики всей возрастной структуры насаждений – от начальных классов возраста («молодняки») до старших классов («спелые»). Достоинством предлагаемого подхода является независимость процедуры и результатов моделирования от каких-либо заранее задаваемых формул для расчета допускаемого объема изъятия древесины, что позволяет использовать его для вычисления расчетной лесосеки в эксплуатационных лесах с различной исходной возрастной структурой и различной интенсивностью лесопользования. В отличие от применяемых ныне формул расчетных лесосек, основанных на мысленной модели истощения запасов перестойных, спелых, приспевающих и других насаждений через то или иное время, имитационная модель рассчитывает этот процесс во всех деталях относительно всех разновозрастных групп деревьев. По существу в числовой форме (виртуально, в недрах компьютера) воссоздается вся возрастная структура древостоя на протяжении любого отрезка времени. Вырубки рассматриваются как скачкообразное и территориально локализованное изменение возрастной структуры древостоя, и модель призвана рассчитать их последствия, а также дать возможность решать задачи расчета оптимальной величины расчетной лесосеки при задаваемых ограничениях на данной территории. Предлагаемый новый подход рассмотрен на примере сплошных рубок спелых и перестойных насаждений в Республике Карелия.",
    "full_text_body": "\n\n\n\n\uFEFFКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\nнаучный электронный журнал\nПРИНЦИПЫ ЭКОЛОГИИ\nПЕТРОЗАВОДСКИЙ ГОСУДАРСТВЕННЫЙ\nУНИВЕРСИТЕТ\nhttp://ecopri.ru\nhttp://petrsu.ru\nУДК 630*61\nО разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования\nКОРОСОВ\nАндрей Викторович\nРОДИОНОВ Андрей Викторович\nГОЛУБЕВ\nВладимир Евгеньевич ЗАРОДОВ\nАлександр Юрьевич\nМРОО «СПОК», korosov@mail.ru\nМРОО «СПОК», andrey.rodionov@mail.ru\nМРОО «СПОК», veg-cbk@mail.ru\nМРОО «СПОК», x-booster@mail.ru\nМАРКОВСКИЙ\nАлександр\nВладимирович\nКлючевые слова:\nрасчетная лесосека эксплуатационные леса неистощительное лесопользование новый подход\nМРОО «СПОК», markovsky.a@gmail.com\nАннотация:\nПредлагается новый подход к определению допускаемых объемов пользования древесиной (расчетной лесосеки) для спелых и перестойных эксплуатационных лесов и разработанные на его основе компьютерные программы, которые позволяют вычислять параметры расчетной лесосеки, обеспечивающей непрерывное неистощительное лесопользование в этих лесах, на протяжении заданного числа лет.\nПредлагаемый подход к определению «расчетной лесосеки» для эксплуатационных лесов базируется на имитационной модели динамики всей возрастной структуры насаждений - от начальных классов возраста («молодняки») до старших классов («спелые»). Достоинством предлагаемого подхода является независимость процедуры и результатов моделирования от каких-либо заранее задаваемых формул для расчета допускаемого объема изъятия древесины, что позволяет использовать его для вычисления расчетной лесосеки в эксплуатационных лесах с различной исходной возрастной структурой и различной интенсивностью лесопользования. В отличие от применяемых ныне формул расчетных лесосек, основанных на мысленной модели истощения запасов перестойных, спелых, приспевающих и других насаждений через то или иное время, имитационная модель рассчитывает этот процесс во всех деталях относительно всех разновозрастных групп деревьев. По существу в числовой форме (виртуально, в недрах компьютера) воссоздается вся возрастная структура древостоя на протяжении любого отрезка времени.\n4\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\nВырубки рассматриваются как скачкообразное и территориально локализованное изменение возрастной структуры древостоя, и модель призвана рассчитать их последствия, а также дать возможность решать задачи расчета оптимальной величины расчетной лесосеки при задаваемых ограничениях на данной территории. Предлагаемый новый подход рассмотрен на примере сплошных рубок спелых и перестойных насаждений в Республике Карелия.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n© 2014 Петрозаводский государственный университет\nРецензент: С. А. Корчагов Рецензент: А. М. Цыпук\nОпубликована: 24 ноября 2014 года\nВведение\nЭкологическое мировоззрение все ближе к практике: вслед за пониманием всеобщей взаимосвязи явлений в биосфере и зависимости от нее человека от экологии берут стратегию устойчивого развития (принцип существования экосистем). Тактикой новой деятельности становится неистощительное природопользование (там, где это возможно, например в лесном хозяйстве). Все чаще практики природопользования заимствуют у экологии и ее эффективные методы описания динамических систем, в том числе количественные. В нашем сообщении рассмотрен подход к организации неистощительного лесопользования с помощью имитационного моделирования лесной динамики.\nВ действующем законодательстве РФ большое внимание уделяется определению допускаемых объемов заготовки древесины - «расчетной лесосеки». Приказом Рослесхоза от 27.05.2011 г. № 191 утвержден «Порядок исчисления расчетной лесосеки» с целью определения допустимого ежегодного объема изъятия древесины в эксплуатационных и защитных лесах. Статья 29 Лесного кодекса РФ прямо запрещает заготовку древесины в объеме, превышающем расчетную лесосеку. Таким образом, по закону заготовка древесины в объемах, ведущих к истощению лесов, запрещается. При этом утверждается, что расчетная лесосека определяет ежегодный объем изъятия древесины в эксплуатационных и защитных лесах, обеспечивающий многоцелевое, рациональное, непрерывное, неистощительное использование лесов, исходя из установленных возрастов рубок, сохранения биологического разнообразия, водоохранных, защитных и других полезных свойств лесов.\nОднако, по мнению ряда отечественных экспертов (Болотова, 2002; Загадки..., 2014; Отчет..., 2014; Что такое., 2014; Ярошенко, 2014), существующие методики и подходы к определению расчетной лесосеки, практически не менявшиеся на протяжении XX века, не обеспечивают реальной неистощительности лесопользования по причине наличия существенных недостатков. Это значит, что для России в целом и Республики Карелия в частности актуальным является выработка новых подходов к определению допускаемых объемов заготовки древесины, обеспечивающих реальную неистощительность лесопользования, с учетом установленных возрастов рубок, закономерностей строения и развития древостоев и данных о потребности в древесине.\nЦель нашего сообщения состоит в описании нового количественного подхода к определению расчетной лесосеки на базе имитационной модели.\nМатериалы\nПри разработке и тестировании имитационной модели были использованы открытые данные лесохозяйственных регламентов центральных лесничеств Республики Карелия (Лесохозяйственные., 2014) и общие таблицы хода роста нормальных древостоев из справочника «Общесоюзные нормативы для таксации лесов» (Общесоюзные., 2014).\nТрадиционные методы исследований\nК концу XX века лесной наукой было разработано множество формальных методов для определения объемов расчетных лесосек - например, в работах Н. Н. Свалова, В. В. Антанайтиса и В. В. Загреева (Свалов, 1979; Антанайтис и др., 1981) описывается более 40 различных методов исчисления. Активные исследования в указанном направлении продолжаются до сих пор (см., например, работы (Болотова, 2005; Владимиров и др., 2014 и др.)).\n5\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583____________________________________________________________________\nВ ряде работ (Свалов, 1979; Болотова, 2004 и др.) отмечается, что среди всех известных методов нет ни одного достаточно универсального. Среди основных причин сложившейся ситуации указанными экспертами выделяются следующие:\n•\tна практике недостаточно учитывается, что объекты регулирования лесопользования (т. е. лесные участки) могут иметь различную исходную возрастную и породную структуру насаждений, например: леса регулированные, относительно равномерно распределенные по возрасту; леса с дефицитом спелых древостоев, леса неурегулированные (природные);\n•\tприменяемые на практике методы расчета недостаточно учитывают динамику лесного фонда (т. е. то, что в процессе лесопользования возрастная и породная структура насаждений меняется);\n■ применяемые на практике методы расчета недостаточно учитывают происходящие процессы лесовосстановления и лесоэксплуатации, вероятные потери от пожаров, нападения лесных вредителей и пр.\nОсобенно остро недостатки применяемых на практике в России методов расчета объема пользования проявляются при пионерном освоении лесов, когда значительную часть аренды лесопромышленного предприятия занимают ценные малонарушенные лесные территории (Свалов, 1979; Ярошенко, 2014).\nДля обеспечения сохранения ценных малонарушенных лесных территорий и постоянства лесопользования (неснижаемости его во времени) необходима выработка новых подходов к исчислению объемов пользования лесом, учитывающих естественную динамику лесов и соблюдающих принцип непрерывности пользования лесом на протяжении всего цикла его развития.\nОригинальные методы исследований\nПредваряя наш анализ, выделим защитные и эксплуатационные леса. Задачи сохранения биологического разнообразия, обеспечения водоохранных, защитных и других полезных свойств лесов в условиях лесничеств должны выполняться преимущественно за счет защитных лесов. Вопрос о необходимой площади таких лесов на территории соответствующих лесничеств является весьма актуальным, но выходит за рамки анализа.\nДля эксплуатационных лесов в лесничествах должна применяться такая методика оценки расчетной лесосеки, которая гарантируетустойчивое (например, постоянное неснижаемое) обеспечение перерабатывающих предприятий лесного сектора необходимым древесным сырьем на протяжении заранее заданного промежутка времени.\nТермин «непрерывное неистощительное лесопользование» в эксплуатационных лесах определяется как возможность использования лесных ресурсов с постоянной высокой эффективностью (при полноценной реализации естественных продуктивных сил леса) на протяжении заранее заданного промежутка времени (или бесконечно). При этом по окончании заданного промежутка времени лес не должен физически исчезнуть на занимаемых площадях, просто его возможности снабжать промышленность древесиной требуемого качества будут полностью исчерпаны. Очевидно, что чем короче планируемый период лесопользования, тем выше уровень использования лесных ресурсов. Такая логика указывает на два ограничения при оценке объемов «расчетной лесосеки». Во-первых, они относятся к заранее заданному периоду лесопользования конечной продолжительности и, во-вторых, они должны обеспечивать постоянство максимально возможного изъятия лесных ресурсов на этот период.\nМы предлагаем подход к определению расчетной лесосеки для эксплуатационных лесов основать на базе имитационной модели динамики возрастной структуры насаждений, учитывающей все возрастные классы - от начальных («молодняки») до старших («спелые леса»).\nВ отличие от применяемых ныне формул расчета лесосеки, основанных на мысленной модели истощения запасов перестойных, спелых, приспевающих и других насаждений через то или иное время, имитационная модель рассчитывает этот процесс во всех деталях относительно всех разновозрастных групп деревьев. По существу в числовой форме (виртуально, в недрах компьютера) воссоздается и прогнозируется история леса на протяжении любого отрезка времени. Вырубки рассматриваются как скачкообразное и территориально локализованное изменение возрастной структуры древостоя, а модель призвана рассчитать их последствия и дать возможность решать задачи расчета оптимальной величины «расчетной лесосеки» при задаваемых ограничениях на данной территории. Модель позволяет вычислять допускаемые объемы заготовки древесины (расчетной лесосеки) в эксплуатационных лесах с различной исходной возрастной структурой и различной интенсивностью\n6\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\nлесопользования.\nМоделирование возрастной структуры насаждения\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ отдельный момент времени древостой одного возраста занимает площадь а^ ^ - момент времени, j - возраст, а - площадь). В отдельный момент времени i возрастная структура насаждения представлена набором значений относительной площади древостоев разного возраста.\nСумма относительных площадей всех участков разновозрастных древостоев составляет единицу (вся площадь, занимаемая насаждением), т. е.:\n2 aij = 1. [1]\nВ следующий момент времени i + 1 моделируется переход древостоев каждого возрастного класса в более старший а,■\t= а\n+1, У+1 ai,j - древостой на некоем участке на следующем временном шаге переходит в следующий возрастной класс. Шаг возрастной и временной шкалы в модели составляет один год.\nВ модели учитываются процессы естественного отмирания (sdj) нарушения из-за внешних\n(включая антропогенные) случайных воздействий (sa/) поспепствия рубок (s . „\naj), последс1вия рубок (scy). Они задаются в форме\nкоэффициентов выживания (s - survival; d - death, a - anthropogenic, c - cut). В зависимости от возраста\n(j) эти коэффициенты могут меняться.\nЗначения коэффициентов, учитывающих процессы естественного отмирания (sdj) и нарушения\nиз-за внешних случайных воздействий (saj), выбираются по соответствующей специальной литературе и помещаются во встроенных базах данных при программной реализации данной имитационной модели. Например, для древостоя сосны обыкновенной в возрасте 5 лет вероятность выживания\nсоставляет 100 %, Sd5 = 1; вероятность нарушения внешними случайными воздействиями составляет 5 % (а сохранения - 95 %; Sa5 = 0,95); вероятность быть вырубленным - нулевая (sC5 = 1). Аналогичные цифры\nдля 100 лет: sd = 1 00. s „\nd100 -t,00. sa100 = 0,95; sc\t= от 0 до 1\nПолная формула перехода древостоев каждого возрастного класса в более старший имеет вид:\n+1, j+1\n= s\ndj X s\nЗначения коэф фиЦ'иеатоВ>]естественного отмирания (sdj)\nназначаются при программной реализации математической модели, исходя из данных о продолжительности жизни отдельных деревьев, древостоев в целом и данных о динамике прироста запасов древостоев на корню.\nВ справочнике (Общесоюзные..., 2014) имеются указания на то, что запас наиболее характерных для европейской части России лесообразующих хвойных пород (сосны и ели) постепенно увеличивается до возраста естественной спелости, затем начинает уменьшаться, в возрасте около 180 лет прирост становится практически нулевым. Известно (Спелость..., 2014), что возраст естественной спелости у деревьев сосны или ели наступает к 300-350 годам, а у их насаждений — к 200-250 годам. Из работ (Арефьев, 2014; Булыгин, 1991) также известно, что береза живет в среднем до 100-120 лет, осина - до 80-100 лет. В модели принято, что предельный возраст хвойных (сосна, ель) насаждений составляет 250 лет, березовых - 130 лет, осиновых - 100 лет.\nС учетом изложенного для программной реализации имитационной модели были приняты параметры отмирания наиболее характерных для европейской части России лесообразующих пород деревьев (табл. 1).\nТаблица 1. Параметры естественного вымирания основных лесообразующих пород деревьев\nПоказатель\t\tПорода\nсосна, ель\tбереза\nВозраст начала вымирания, лет\t180\t90\nВозраст полного вымирания, лет\t250\t130\nУровень ежегодной гибели\t0.05\t0.08\nПереводя вышеизложенные факты в используемые в модели единицы площади, приходим к следующим оценкам (для сосны): до возраста насаждений 180 лет естественной убыли площади\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nдревостоя не происходит (sd,0-180 = 1); начиная со 180 лет задается прогрессивное снижение площади на\n5 % (сохранение - 95 %) sd,180-249 = 0,95. К 249 годам доля перестойных древостоев снизится до 3 % от доли в 180 лет. Для возраста 250 лет принята убыль 100 % - sd = 0\nЗначения к°эффициент°в случайного отм|раниЯ (sdj) назначаются при программной\n7\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583____________________________________________________________\nреализации имитационной модели, исходя из данных исследований случайной гибели древостоев разного возраста.\nПо некоторым данным (Forest..., 2013), за период 2004-2008 гг. в Финляндии серьезно пострадало 4.4 % лесных площадей, умеренно пострадало 23.9 %; принимаем оценку: 5 % отмирания (95 %\nсохранения)- saj _ 0.95. В то же время проблема определения конкретных значений коэффициента\nслучайного отмирания (%) является весьма актуальной (см., например, работы: Болотов и др., 2005; Болотова, 2002) и требует дополнительных исследований.\nОпределение величины коэффициентов гибели от рубок (scj) и составляет предмет модельного исследования. Они варьируются в модели с целью поиска оптимального варианта лесопользования. Эта технология рассмотрена ниже.\nИсходя из формулы перехода древостоев в более старший возрастной класс на каждом i-м шаге, общие потери площадей древостоя составят (a, _ s\n,j Sdj X Saj X s .\nЛюбые нарушена ап)д оШного растительного покрова (вывалы и ветровалы, пожары и рубки) ведут к появлению территорий без деревьев, которые рассматриваются как пополнение площади (доли)\nдревостоев нулевого возрастного класса (а,,0). Поскольку такие нарушения возможны на территории древостоя любого возраста, нулевой класс в следующий (i + 1) момент времени сформирован суммой площадей с нарушенным древостоем по всем возрастным классам:\n1+1,0 _ 1 (a,j _ sd X Saj х s .\nРезультатом расчетов по%8д%л)и [является таблица из значений a,. размером m х к где m - число шагов модели (продолжительность периода времени для прогноза); к - число возрастных классов. Набор этих значений можно анализировать, представлять в виде диаграмм и пр., а также использовать при настройке параметров функционирования при оценке возможностей неистощительного лесопользования.\nМоделирование рубок насаждений\nВырубки представляют собой изъятие деревьев старших возрастных классов (в примере - старше 80 лет, т. е. j > 80) и переход этих площадей в категорию нулевого возрастного класса. Однако вырубаться может только лес на корню, из площади которого уже вычли потери от действия внутренних и внешних факторов (sdj х s\n1, j>80\n_ 1 (s,\naj X aj ):\ndj X S,\naj X a,\nj,j\tSdj X S\nЗная запас древесины на 1 га для^ажЙо^в о5растного класса (Rj), несложно рассчитать объемы рубки древесины (^,+1) на каждом временном шаге модели:\n= I (Rj X с,+1, ,\nJ6]\nЗапас древесинь^/Тна7 ^га для древостоев всех классов возраста при программной реализации модели определяется по количественным моделям хода роста соответствующих насаждений, построенным на основе общих таблиц хода роста нормальных древостоев (Общесоюзные., 2014). Вместо таблиц (Общесоюзные., 2014) могут использоваться таблицы, составленные научным коллективом под руководством профессора А. З. Швиденко (Швиденко и др., 2008), или другие аналогичные.\nПоскольку в лесохозяйственных регламентах центральных лесничеств для хвойных пород используются две категории продуктивности: 1-3 и 4-5 классы бонитетов, а для лиственных - одна категория продуктивности, то для построения математических моделей хода роста значения из первоисточника (Общесоюзные., 2014) усреднялись (см. пример в табл. 2).\nК сожалению, указанные материалы (табл. 2) недостаточны для непосредственного моделирования хода роста соответствующих древостоев по двум причинам. Во-первых, они не дают представления о запасе в древостоях старше 160 лет, во-вторых, запас так называемого нормального древостоя существенно выше запаса реальных древостоев.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНапример, для сосны 4-5-го классов бонитета нормальный запас в возрасте 100 лет составляет 186 кбм/га (табл. 2), а по лесохозяйственному регламенту Медвежьегорского центрального лесничества Республики Карелия (Лесохозяйственные., 2014) для спелых и перестойных сосновых насаждений 4-5-го бонитета в эксплуатационных лесах - 154 кбм/га.\nс\nv\n,+\n8\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583______________________________________________________________________\nТаблица 2. Запасы стволовой древесины в нормальных древостоях, кбм/га\nВозраст, лет\t\tСосна\t\tЕль\tБереза\n1-3 бон.\t4-5а бон.\t1-3 бон.\t4-5а бон.\t1-5 бон\n10\t28\t\t19\t-\t18\n20\t79\t25\t64\t-\t51\n30\t137\t44\t135\t21\t88\n40\t202\t68\t226\t36\t123\n50\t266\t92\t326\t56\t155\n60\t320\t116\t426\t79\t182\n70\t367\t137\t521\t103\t204\n80\t405\t156\t604\t128\t222\n90\t439\t172\t675\t152\t237\n100\t466\t186\t735\t175\t249\n110\t486\t197\t783\t195\t-\n120\t504\t206\t820\t211\t-\n130\t520\t215\t852\t225\t-\n140\t534\t223\t878\t238\t-\n150\t547\t230\t901\t249\t-\n160\t558\t236\t921\t259\t-\nПо этим причинам данные из таблиц хода роста нормальных древостоев (Общесоюзные..., 2014) были преобразованы следующим образом.\nСначала по имеющимся исходным данным (табл. 2) были рассчитаны кривые изменения запасов древесины с возрастом; использованы уравнения полиномов 2-й степени вида:\nR н= 30 + a 1 х i + a2 x i 2, [7]\nгде а - коэффициенты полинома (табл. 3), i - возраст древостоя.\nТаблица 3. Коэффициенты для кривых изменения запасов в нормальных древостоях\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКоэффициент\t\tСосна\t\tЕль\t\tБереза\n1-3 бон.\t4-5а бон.\t1-3 бон.\t\t4-5а бон.\t1-5 бон\nа0\t-56.4111\t-16.5509\t-120.995\t\t-12.9605\t-27.983\n31\t7.589699\t2.584391\t8.631785\t\t2.520494\t6.1537]\nа2\t-0.02381\t-0.00616\t-0.02038\t\t-0.00589\t-0.0252\nПолученные кривые изменения запаса позволили, в частности, рассчитать возможный запас нормального древостоя для возрастных групп старше 160 лет. Уравнения получены: для сосны и ели двух групп бонитетов (1-3 и 4-5а), для осины и березы всех классов бонитета; всего 6 уравнений.\nЗатем был введен поправочный коэффициент (K) для расчета кривых изменения запасов древостоя с возрастом для условий каждого конкретного лесничества (R„), исходя из простого соображения, что эта величина будет отличаться от запаса нормального древостоя (RJ на величину K:\nK = Rл / RH. [8]\nПоправочный коэффициент вычисляется, исходя из соотношения величины запаса древостоя, приведенной в лесохозяйственном регламенте для конкретного района, и величины запаса, рассчитанной по модели динамики запаса нормального древостоя.\nНапример, для насаждений сосны 4-5-го бонитета Медвежьегорского центрального лесничества Республики Карелия (Лесохозяйственные., 2014) в возрасте 100 лет модель дает «нормальный» запас, равный\nR^oo = -16.5509 + 2.584391 х 100 - 0.00616 х 1002 = 180.3 кбм/га,\nа в лесохозяйственном регламенте указана величина 154 кбм/га, следовательно, искомый коэффициент равен\nK = R^00 / RM00 = 154 /180.3 = 0.854248.\nВ дальнейшем этот и другие коэффициенты (табл. 4) используются для определения запасов сосновых древостоев 4-5-го бонитета эксплуатационных лесов Медвежьегорского центрального лесничества Республики Карелия (Лесохозяйственные., 2014) любого возраста i по формуле:\nRл, = K х R*. [9]\nТаблица 4. Поправочные коэффициенты для Медвежьегорского центрального лесничества\n9\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\nКоэффициент\tСосна\t\t\tЕль\t\tБереза\n1-3 бон.\t4-5а бон.\t1-3 бон.\t\t4-5а бон.\t1-5 бон\nK\t0.637542\t0.854248\t0.585236\t\t0.960368\t0.8214\nАналогичным образом вычисляются поправочные коэффициенты для условий каждого конкретного лесничества. При программной реализации математической модели разработан соответствующий блок программы, рассчитывающий эти коэффициенты. От пользователя требуется ввести значения запаса на 1 га для спелых и перестойных древостоев, приведенного в лесохозяйственном регламенте данного региона, программа сравнивает введенное значение с табличными и рассчитывает необходимый поправочный коэффициент для всех возрастных групп.\nОценка «расчетной лесосеки» неистощительного пользования\nПри вычислении параметров «расчетной лесосеки», обеспечивающей непрерывное неистощительное лесопользование в эксплуатационных лесах, возможно рассматривать два варианта.\nВариант I. «Непрерывное неистощительное лесопользование» в эксплуатационных лесах можно понимать как ежегодное изъятие максимально возможного объема древесины на протяжении заданного числа лет путем ежегодной вырубки территории одного и того же размера (т. е. постоянство рубок по площади (Синицын и др., 1973)).\nЭтим постулируется, что площадь рубок на протяжении всего периода прогноза должна быть постоянной и максимально возможной; например, для спелых древостоев:\nс', j>80 = const -> max. [10]\nПри этом в зависимости от запасов разновозрастной древесины и закономерного изменения возрастного состава общий вырубаемый объем древесины (v) будет год от года варьировать.\nВариант II. «Непрерывное неистощительное лесопользование» в эксплуатационных лесах можно понимать как изъятие максимально возможного и постоянного объема древесины на протяжении заданного числа лет путем ежегодной вырубки территории различных размеров (т. е. постоянство рубок по объему древесины (Синицын и др., 1973)).\nЭтим постулируется, что площадь рубки на протяжении периода прогноза может варьировать, но общий вырубаемый объем древесины должен быть постоянным и максимально большим:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nvi = const -> max. [11]\nВ зависимости от запасов разновозрастной древесины и закономерного изменения возрастного состава год от года варьировать будет уже площадь рубок. Электронные компьютерные средства позволяют рассчитать не один, но множество сценариев, при которых объемы рубок могут варьировать. Каждый из сценариев будет иметь свой критерий реализации. Если критерий количественно определен, он вводится в процедуру оптимизации, которая подбирает такие параметры модели (объемы и/или площади рубок), чтобы заданный критерий был выполнен.\nПри этом могут быть решены три основных задачи.\n1.\tВычислить продолжительность периода времени, в течение которого можно постоянно изымать произвольно заданный объем древесины требуемого возраста (в гектарах площади необходимых вырубок или в кубометрах необходимого объема заготовок); эта задача не ограничена никакими критериями и выполняется как простой расчет динамики древостоя при рубках той или иной интенсивности. Расчет останавливается, когда запасы древесины требуемого возраста будут полностью истощены; это и будет возможная продолжительность рубок. Обычная динамика возрастной структуры насаждения сводится к тому, что если принять завышенную расчетную лесосеку, вычисленную по известным формулам (Приказ..., 2014), то ресурсы спелых и перестойных древостоев заканчиваются через 35-50 лет (рис. 1).\n10\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\n0Г00\n0\t5 10 15 20 25 50 55 40 45 5]\nРис. 1. Изменение соотношения площадей четырех возрастных групп насаждения при использовании завышенных размеров расчетной лесосеки. По оси ординат - доля площади данной группы от всей площади изучаемого района. По оси абсцисс - годы жизни древостоя. Красной чертой отмечена дата, после которой расчетная лесосека становится не обеспеченной лесными ресурсами\nFig. 1. Changes in the ratio of the areas of four age groups of the stand when using oversized allowable cut. The ordinate - part of the studied area occupied by a certain age group. The abscissa - years of life of the stand. Red line denotes the date after which the allowable cut is not provided by forest resources\n2.\tВычислить максимально возможную ежегодную площадь расчетной лесосеки, которая будет постоянно доступна для рубки в течение произвольно заданного периода времени. Обычная динамика возрастной структуры насаждения демонстрирует плавное снижение площади древостоев (например, спелых и перестойных), назначенных в рубку, вплоть до полного их сведения в последний год прогнозируемого периода (рис. 2).\nРис. 2. Изменение соотношения площадей четырех возрастных групп насаждения при условии постоянства площади расчетной лесосеки «главного пользования» на 100 лет. По оси ординат - доля площади данной группы от всей площади изучаемого района. По оси абсцисс - годы жизни древостоя. Красной чертой отмечена дата, после которой расчетная лесосека становится не обеспеченной лесными\nресурсами\nFig. 2. Changes in the ratio of the areas of four age groups of the stand provided that the area of the allowable cut of «principal use» is constant for 100 years. The ordinate - part of the studied area occupied by the certain age group. The abscissa - years of life of the stand. Red line denotes the date after which allowable\ncut is not provided by forest resources\n3.\tВычислить площадь расчетной лесосеки, вырубка которой будет обеспечивать ежегодно максимально возможный и постоянный объем древесины в течение произвольно заданного периода\n11\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583_______________________________________________________________\nвремени (без варьирований объемов и перерывов в лесодобыче в указанный период). Обычная динамика выглядит вначале как постепенное возрастание площадей рубок (по мере вырубания более продуктивных старших возрастных групп и замене их менее продуктивными младшими) и последующая стабилизация площадей рубок, когда старшие древостои будут в основном сведены (рис. 3, 4).\nОтличие от предыдущего варианта состоит в том, что при изменении возрастного состава и, следовательно, запасов на корню для обеспечения заготовок заданного объема древесины в разные годы потребуется вырубать разные площади.\nРис. 3. Изменение соотношения площадей четырех возрастных групп насаждения при условии понижения возраста рубки и постоянства объемов заготовки древесины на 200 лет. По оси ординат -доля площади данной группы от всей площади изучаемого района. По оси абсцисс - годы жизни\nдревостоя\nFig. 3. Changes in the ratio of the areas of four age groups of the stand under the condition of reduced cutting age and constant harvesting volumes for 200 years. The ordinate - part of the studied area occupied by\na certain age group . Abscissa - years of life of the stand.\nРис. 4. Изменение соотношения площадей рубок «старших», «п» (спелых), и «младших», «б», возрастных групп в насаждении при условии понижения возраста рубки и постоянства объемов заготовки древесины на 200 лет. По оси ординат - доля площади данной группы от всей площади изучаемого района. По оси абсцисс - годы жизни древостоя\nFig. 4. Changes in the ratio of the cutting areas of «senior», «п» (mature) and «junior», «б» age groups of the stand under the condition of reduced cutting age and constant harvesting volumes for 200 years. The ordinate - part of the studied area occupied by a certain age group. The abscissa - years of life of the stand.\nПрограммная реализация разработанных моделей осуществлялась в двух программных средах.\nСреда Excel\nПостроение модели возрастной структуры насаждения и проверку ее работоспособности проводили в среде пакета MS Excel. За основу была взята технология табличного программирования, при котором на листе Excel строится имитационная система, открывающая возможность настройки модельных параметров встроенными методами оптимизации пакета (Коросов, 2002).\nПри этой технологии сама модель (матрица возрастной структуры) строится на листе Excel как набор множества стереотипных формул, вычисляющих переход одновозрастной группы во все более старшие возрастные классы с учетом потерь от различных факторов (отмирания, нарушения, рубки).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМодель настраивалась с помощью встроенного макроса процедуры оптимизации «Поиск решения». В такой форме модель имеет прозрачную структуру и средства иллюстрации и доступна для предметного обсуждения специалистами разных профилей (рис. 5).\n12\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583________________________________________________________________\nПомимо отмеченных преимуществ, наглядности и прозрачности, модель, реализованная в среде Excel, обладает отрицательным качеством - крайней громоздкостью; в таком виде она не годится для программирования на алгоритмических языках.\nРис. 5. Общий вид имитационной модели в среде Excel Fig. 5. General view of the simulation model in Excel\nСреда JavaScript\nДля практической апробации и широкого обсуждения предлагаемого авторами подхода и моделей была разработана компьютерная программа на языке JavaScript (JavaScript..., 2014). Программная реализация модели на языке JavaScript в целом копирует структуру модели, созданной в среде Excel. При отладке программы на JavaScript использовались результаты моделирования в среде Excel.\nДостоинством JavaScript является возможность создания общедоступной через сеть Интернет программы с удобным для пользователей интерфейсом ввода-вывода данных. Программа на JavaScript может работать на компьютере с любой операционной системой, в среде web-браузера, в котором включена обработка javascript-сценариев (по умолчанию она включена).\nРазработанная программа на JavaScript (рис. 6) размещена в тестовом режиме в сети Интернет по адресу: http://hcvf.ru/lesoseka/ (вкладка «Новый метод расчета лесосеки») и может быть перенесена на другой адрес. Здесь же размещена краткая справка по самой программе. Программа работает во всех современных web-браузерах (Firefox, Opera, Chrome, Safari, Yandex, Internet Explorer).\n13\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\n1 ^эблаи! ь I pynrytaCdpucl-i !\nОт\tДо\tПЛОщаДь. Г&\n0\t40\t100\tМЙЛОДНЙМ\tЕ\n■41\tGQ\tгоо\tсредоБоэрвст1-ы&\tЕ\nя\tFIJ\t500\tприспвБЭТирте\tЕ\n&1\tТОО\t400\t\tЕ\nиГщач тои^дь.га Ю00 ■-iKn^aT.anHctinflMrincufEiflb га 400\nДота псон1»аък потерь гпощдлоЛ (па умсгм»ма)0 til\t|^j\nШаг\nЛРй*ЛВРО*ичич *0\t*1\t*3\t*}\t*1\t*6\t*5\t*7\nSDipaCFL^DA\n*3 НА щ *13\t*13\t*14\t*1Ь\t*16\t*1*\t*1» р»\nДогнвммоиьк\nпотерь\t0.01\t501\t001\t001\t001\t001 OOt 0.01\t0.01\t001\t0.51\t501\t001\t0О1\t001\t001\t0О1\t0Я1\t0.01\t001\t0.51\nrowusiieflQj\nво» &да ода ода оо»ода оо» ода ода ода о о» ода ода ода оо»-ода оо» ода ода ода ода\nIUKJU^]n\nEtasiKKT нггчзлэ [ц&ндрщотчв. ngrSi____________|7}\n■Звласдроогсмным 1 га. м72(Ю\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nОГщ^ ;iire; др ri Е«=К № Ы ЧЭ & < rT^'-ami'l J ^>1 ГР СИНД Н. Ца. KWTO\nйыбвЬиГв рв*ич моДйГл_____________В\nТВГЧОЗ ПЦИ1й™нТ6ТЪНССТИ ПППЬЭОВЭЧИЯ сдьыиапйльасвания__________________\nРис. 6. Фрагмент интерфейса программы для исчисления объема пользования лесом на основе\nпредлагаемого подхода\nFig. 6. Fragment of the interface for the calculation of the volume of forest utilization on the basis of the\nproposed approach\nРазработанная на языке JavaScript программа предназначена для вычисления параметров расчетной лесосеки в спелых и перестойных лесах, обеспечивающей непрерывное неистощительное лесопользование в эксплуатационных лесах. При вычислении используются открытые исходные данные из лесохозяйственных регламентов центральных лесничеств и лесных планов субъектов РФ: площади древостоев различных классов возраста, запас на 1 га в спелых и перестойных древостоях, возраст рубки спелых и перестойных насаждений.\nМатематическое моделирование хода роста и изменения запаса соответствующих насаждений (см. формулы [6-9]) здесь не применяется, в соответствии с предназначением программы.\nПрограмма позволяет моделировать изменения соотношения площадей возрастных групп насаждения монопородного состава и вычислять на этой основе объемы или площади изъятия лесных ресурсов (параметры расчетной лесосеки) при сплошных рубках, обеспечивающие непрерывное неистощительное лесопользование в спелых эксплуатационных лесах на протяжении всего периода прогноза. Программа обеспечивает моделирование результатов постепенных и выборочных рубок в спелых эксплуатационных лесах.\nДля моделирования постепенных (выборочных) рубок исчисление требуемой площади расчетной лесосеки производится путем деления общего запаса древесины, намеченного к изъятию при рубках в соответствующем насаждении, на соответствующий средний запас древесины на гектаре в спелых и перестойных древостоях. Если известна только площадь постепенных (выборочных) рубок, то вычисление общего запаса, намеченного к изъятию, производится путем умножения этой площади на средний запас древесины на гектаре с учетом среднего процента выборки от общего запаса (также приводится в лесохозяйственных регламентах).\nПрограмма может работать в двух режимах:\n•\t«прогноз продолжительности пользования» - прогноз продолжительности пользования спелыми и перестойными древостоями при заранее известном ежегодном объеме их рубки. При выборе этого режима необходимо дополнительно задать планируемый ежегодный объем рубки леса и продолжительность периода прогноза;\n•\t«расчет объема пользования» - расчет объема равномерного пользования спелыми и перестойными древостоями на период прогноза. При выборе этого режима необходимо дополнительно задать продолжительность периода прогноза (желаемое количество лет\n14\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583_______________________________________________________\nпользования).\nРезультаты расчетов в режиме «прогноз продолжительности пользования» выводятся в виде таблицы и графика динамики долей от общей площади всех возрастных групп. Продолжительность пользования лесом при заранее известном ежегодном объеме их рубки указывается на графике.\nРезультаты расчетов в режиме «расчет объема пользования» выводятся в виде таблицы и графика динамики долей от общей площади всех возрастных групп. Также указывается ежегодный расчетный объем равномерного пользования лесом (т. е. рубки леса) на период прогноза.\nОбсуждение\nСогласно лесохозяйственному регламенту Пудожского центрального лесничества Республики Карелия (Лесохозяйственные регламенты..., 2014), площадь сосняков 1-3-го классов бонитета составляет 54575 га, в т. ч.: молодняки - 14752 га; средневозрастные - 6559 га; приспевающие - 12435 га; спелые и перестойные насаждения - 20829 га. Средний запас на 1 га в спелых и перестойных насаждениях - 276 куб. м. Рекомендуемая расчетная лесосека - «интегральная», 618 га/год.\nРасчет на период 100 лет с помощью разработанной программы показал следующее:\n-\tежегодная заготовка в объеме 170 тыс. куб. м древесины («интегральная» расчетная лесосека, 618 га/год) возможна на прогнозируемый период. Изменение соотношения групп возраста представлено на рис. 7;\n-\tмаксимально возможный ежегодный объем заготовки древесины на прогнозируемый период составляет 183 тыс. куб. м (т. е. примерно 666 га/год). При этом важно понимать, что к концу прогнозируемого периода спелые и перестойные насаждения будут полностью вырублены (рис. 8).\nРис. 7. Динамика соотношения древостоев различных групп возраста при ежегодной заготовке 170 тыс. куб. м древесины (618 га/год) в сосняках 1-3-го бонитета Пудожского центрального лесничества Карелии (отображение результатов расчетов по программе в окне браузера)\nFig. 7. Dynamics of the ratio of different age group stands when harvesting annually 170 thousand cu. meters of timber (618 ha / year) in pine forests of 1-3 yield class in Pudozhsky central forestry of Karelia (the results of computing using the program are displayed in browser)\n15\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________________\nD 2\t4 t [■ I С> IJ М 14 ГЬ :□ 22 24 Zfi ZB SO 3Z 3+ К 3S 4С 41 44 4S АЛ 4D 42 Н К » AD £2 &4 И 1Ь ГП 72 Т4 Гй ГИ М 9Z Ы И ■?[ « М И М\nГ .1 Ч 7 t Г И 15 17 It Л 21 Л 7? 2t 31 31 X 17 1» fM] « iv* 4» II 11 И V IP <1 £1 iE Ct 71 7t 74 77 7t 11 ёЭ К 17 It II il « 17 Et\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nГы.\nВ нин m ntprcrahaiM 1нрнсп1но1н< В tpiiHiiPipiiTHkit В hhmdjh\nРис. 8. Динамика соотношения древостоев различных групп возраста при ежегодной заготовке 183 тыс. куб. м древесины (666 га/год) в сосняках 1-3-го бонитета Пудожского центрального\nлесничества Карелии (отображение результатов расчетов по программе в окне браузера)\nFig. 8. Dynamics of the ratio of different age group stands when harvesting annually 183 thousand cu. meters of timber (666 ha / year) in pine forests of 1-3 yield class in Pudozhsky central forestry of Karelia (the results of computing using the program are displayed in browser)\nТаким образом, для рассмотренного примера рекомендуемая по лесохозяйственному регламенту «интегральная» расчетная лесосека в размере 618 га/год может считаться приемлемой на весь период прогноза (100 лет). Если ставить задачу максимально использовать (т. е. полностью вырубить) спелые и перестойные сосняки в течение 100 лет, то ежегодный объем пользования можно увеличить до 183 тыс. куб. м (666 га/год).\nЗаметим, что данная рекомендация в целом соответствует цифрам так называемой лесосеки равномерного пользования (674 га/год) и второй возрастной лесосеки (664 га/год), указанных в лесохозяйственном регламенте Пудожского центрального лесничества Республики Карелия (Лесохозяйственные..., 2014).\nАналогичные вычисления легко могут быть выполнены заинтересованными экспертами с помощью разработанной программы, на основе открытых исходных данных из лесохозяйственных регламентов центральных лесничеств и лесных планов субъектов РФ.\nЗаключение или выводы\nАвторами предлагается новый подход к определению расчетной лесосеки для спелых и перестойных эксплуатационных лесов и разработанные на его основе компьютерные программы, которые позволяют вычислять параметры расчетной лесосеки, обеспечивающей непрерывное неистощительное лесопользование в этих лесах, на протяжении заданного числа лет.\nВ отличие от применяемых ныне формул для исчисления расчетной лесосеки, основанных на мысленной модели истощения запасов перестойных, спелых, приспевающих и других насаждений через то или иное время, с помощью предлагаемого подхода можно количественно воспроизвести этот процесс во всех деталях относительно всех разновозрастных групп деревьев. Модельное представление обеспечивает значительно большую универсальность, чем формальное, поскольку, во-первых, позволяет рассчитывать любые характеристики изучаемого процесса, а не только те, что позволяют применяемые формулы, во-вторых, параметры модели могут быть с помощью специальных процедур подстроены под реальные данные, что позволит давать гораздо более реалистичные прогнозы результатов лесопользования.\nОпыт разработки предлагаемого подхода и программ на его основе подсказывает следующие основные направления дальнейших исследований:\n1. Следует детализировать уже разработанные модели и программы:\nа)\tучесть в модели все типы рубок - сплошные, постепенные, выборочные и рубки ухода, а также\n16\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583______________________________________________________________\nсвязанные с ними эффекты изменения продуктивности, породного состава и запаса насаждения (сейчас учитываются только рубки сплошные, менее точно - постепенные и выборочные);\nб)\tувеличить перечень пород деревьев (и соответствующих им баз данных с характеристиками), для которых может быть выполнена оценка расчетной лесосеки (сейчас охвачено 4 породы);\nв)\tучесть в модели эффекты «накопления» запасов спелых и перестойных насаждений при эксплуатации насаждений, ранее истощенных рубками (т. е. имеющих на начальном этапе моделирования дефицит спелых и приспевающих древостоев, при избытке молодняков).\n2. Выйти на моделирование территориального аспекта лесозаготовок:\nа)\tс использованием ГИС-технологий построить модель пространственно-временной динамики насаждений для целей распределения площадей рубок по территории, проектирования сети дорог и других необходимых лесохозяйственных мероприятий;\nб)\tс использованием ГИС-технологий построить модель распределения площадей рубок по территории с учетом транспортной и экономической доступности лесов, а также других природных и производственных факторов (в настоящее время пространственный фактор не учитывается);\nв)\tсоздать программу автоматического проектирования (оптимизации) сети лесных дорог на основе прогнозируемых объемов (площадей) изъятия лесных ресурсов в долгосрочной перспективе (результаты подобных разработок уже опубликованы - (Болотов и др., 2005; Владимирови др., 2014 и др.)).\nВ заключение следует отметить, что проблема расчета неистощительного объема пользования лесом имеет особое значение для лесных предприятий, сертифицированных или сертифицируемых по системе FSC (поскольку наличие сертификата FSC подразумевает соблюдение предприятием не только норм и требований действующего законодательства, но и принципов, критериев и требований национального стандарта FSC).\nПредлагаемый новый подход рекомендуется для апробации в условиях указанных предприятий. При этом важно учесть, что в связи с внедрением лесной сертификации не все эксплуатационные леса могут использоваться в полном объеме. В эксплуатационных лесах таких предприятий возможно исключение из расчета лесопользования так называемых лесов высокой природоохранной ценности, репрезентативных участков лесных экосистем, не исключенных из расчета лесопользования законодательно.\nПо результатам апробации возможны дальнейшие усовершенствования предлагаемого подхода, а также выпуск инструкций и рекомендаций, облегчающих практическую работу по вычислению необходимых показателей.\nБиблиография\nАнтанайтис В. В., Загреев В. В. Прирост леса [Forest growth]. М.: Лесн. пром-сть, 1981. 200 с.\nАрефьев С. П. О максимальном возрасте деревьев на территории Тюменской области [On the maximum age of trees on the territory of Tyumen region] // Путь в Сибирь. URL: http://library.ikz.ru/georg-steller/aus-sibirien-2013-2009/arefev-s.-p.-o-maksimalnom-vozraste-derevev-nc(дата обращения: 13.05.2014).\nБолотов О. В., Ельдештейн Ю. М., Болотова А. С. и др. Основы расчета и планирования устойчивого управления лесами и лесопользованием: монография [Bases of calculating and planning of sustainable forest management and forest use: monograph]. Красноярск: СибГТУ, 2005. 181 с.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБолотова А. С. Определение расчетной лесосеки на основе моделирования динамики лесного фонда: [Determination of allowable cut on the basis of simulation of forest fund dynamic] Автореф. дисс. ... канд. с.-х. наук. Красноярск, 2002. 24 с. // disserCat - электронная библиотека диссертаций. URL: http://www.disserc at.com/content/opredelenie-raschetnoi-lesoseki-na-osnove-modelirovaniya-dinamiki-lesnogo-fonda (дата обращения: 22.07.2014).\nБолотова А. С. К методике определения расчетной лесосеки [On methods of determining allowable cut] // Web-сайт Брянской государственной инженерно-технологической академии (БГИТА). URL: http://science-bsea.bgita.ru/2004/les_2004/bolotova_metodika.htm (дата обращения: 22.07.2014).\nБулыгин Н. Е. Дендрология: учебник для высш. учеб. заведений [Dendrology: textbook for higher\n17\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583___________________________________________________________________\neducation]. Л.: Агропромиздат, Ленингр. отд-ние, 1991. 352 с.\nВладимиров И. Н., Попова А. К. Моделирование пространственно-временной динамики лесных ресурсов с использованием интеллектной ГИС [Modeling spatio-temporal dynamics of forest resources by means of knowledge-based\tGIS]\t//\tАкадемическое\tиздательство\t«ГЕО».\tURL:\nhttp://www.izdatgeo.ru/pdf/gipr/2009-1/26.pdf (дата обращения: 22.07.2014).\nЗагадки расчетной лесосеки: рубим мало? [Mysteries of the annual allowable cut: cutting too little?] // Forest.ru - Все о российских лесах. URL: http://old.forest.ru/rus/problems/myths/lesoseka.html (дата обращения: 22.07.2014).\nКоросов А. В. Имитационное моделирование в среде MS Excel (на примерах из экологии) [Simulation modeling in MS Excel environment (with examples from ecology)]. Петрозаводск: Изд-во ПетрГУ, 2002. 212 с.\nЛесохозяйственные регламенты центральных лесничеств Карелии на 2012-2021 гг. [Forest management regulations of the central forestries of Karelia for 2012-2021] // Официальный интернет-портал Республики Карелия «Карелия официальная». URL: http://gov.karelia.ru/gov/Power/Committee/Forest/lh_regl21.html (дата обращения: 13.05.2014).\nОбщесоюзные нормативы для таксации лесов (утв. Приказом Госкомлеса СССР от 28.02.1989 г. № 38) [Union-wide standards for forest inventory (approved by Order of State Forest Committee of the USSR from 28.02.1989,\tN\t38)]\t//\tКонсультант\tПлюс.\tURL:\nhttp://base.consultant.ru/cons/cgi/online.cgi?req=doc;base=ESU;n = 15893 (дата обращения: 13.05.2014).\nОтчет о научно-исследовательской работе по государственному контракту от 30.06.2011 г. № р-6к-11/4 Лот 4 «Разработка технологии повышения эффективности организации лесного хозяйства на основе системы рубок ухода за лесом» (фрагмент) [Research record on the state contract from 30.06.2011 N p-6k-11/4 Lot 4 «Developing technology of improving effectiveness of forestry organization on the basis of forest thinning system» (fragment)] // ФБУ «СПбНИИЛХ». URL: http://www.spb-niilh.ru/pdf/Prilozhenie1.pdf (дата обращения: 22.07.2014).\nПриказ Федерального агентства лесного хозяйства (Рослесхоз) от 27.05.2011 г. № 191 «Об утверждении Порядка исчисления расчетной лесосеки» (зарегистрирован в Минюсте РФ 06.07.2011 г. № 21276) [Order of Federal Forestry Agency (Rosleskhoz) from 27.05.2011 N 191 «On approval of the Procedure for calculating the annual allowable cut» (registered in Minyust RF 06.07.2011, N 21276)] // Интернет-портал «Российской Газеты». URL: http://www.rg.ru/2011/07/07/lesoseka-site-dok.html (дата обращения: 13.05.2014).\nСвалов Н. Н. Моделирование производительности древостоев и теория лесопользования [Modeling productivity of forest stands and the theory of forest use]. М.: Лесн. пром-сть, 1979. 216 с.\nСиницын С. Г., Моисеев Н. А., Загреев В. В. и др. Расчет размера лесопользования [Calculation of amount of forest use]. М.: Лесн. пром-сть, 1973. 176 с.\nСпелость леса [Maturity of forests] // Яндекс словари. URL: http://slovari.yandex.ru/~книги/БСЭ/Спелость леса/ (дата обращения: 13.05.2014).\nЧто такое расчетная лесосека, и обеспечивает ли она неистощительное лесопользование? [What is the allowable cut, and does it provide the sustainable forest use?] // Wood.ru - Первый лесопромышленный портал. URL: http://www.wood.ru/ru/loa298.html (дата обращения: 22.07.2014).\nШвиденко А. З., Щепащенко Д. Г., Нильссон С., Булуй Ю. И. Таблицы и модели хода роста и продуктивности насаждений основных лесообразующих пород Северной Евразии (нормативно-справочные материалы) [Tables and models of growth and productivity of forests of major forest forming species of Northern Eurasia (standard and reference materials)]. М.: Федеральное агентство лесного хозяйства, 2008. 886 с.\n18\nКоросов А. В. , Родионов А. В. , Голубев В. Е. , Зародов А. Ю. , Марковский А. В. О разработке нового подхода для исчисления параметров расчетной лесосеки неистощительного пользования // Принципы экологии. 2014. № 2. С. 4-20. DOI: 10.15393/j1.art.2014.3583________________________________________________________________\nЯрошенко А. Ю. К вопросу об определении объемов неистощительного лесопользования [On the determination of volume of sustainable forest use] // Лесной форум Гринпис России. URL: http://www.forestforum.ru/viewtopic.php?p=94107 (дата обращения: 22.07.2014).\nJavaScript // Википедия - свободная энциклопедия. URL: http://ru.wikipedia.org/wiki/JavaScript (дата обращения: 13.05.2014).\nForest Finland in Brief 2013 / ed. Yrjo Sevola; Finnish Forest Research Institute, METLA. Vantaa: Kopijyva, 2013. 48 p.\nБлагодарности\nИсследование выполнено при поддержке проекта WWF и IKEA «Содействие устойчивому лесопользованию в России на основе сотрудничества со всеми заинтересованными сторонами в сферах государственного управления, бизнеса и образования».\nАвторы благодарят координатора проектов по лесам высокой природоохранной ценности WWF России Кобякова Константина Николаевича за инициирование размышлений по проблемам исчисления параметров расчетной лесосеки неистощительного пользования и активное участие в обсуждении полученных результатов.\nАвторы будут признательны за любые комментарии и замечания по существу разработанного подхода.\n19\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nKorosov A., Rodionov A., Golubev V., Zarodov A., Markovsky A. On the development of a new approach to calculating parameters of the annual allowable cut for sustainable forest management // Principy ekologii. 2014. Vol. 3. № 2. P. 4-20.\nOn the development of a new approach to calculating parameters of the annual allowable cut for sustainable forest management\nKOROSOV Andrey\tNGO «SPOK», korosov@mail.ru\nRODIONOV Andrey\tNGO «SPOK», andrey.rodionov@mail.ru\nGOLUBEV Vladimir\tNGO «SPOK», veg-cbk@mail.ru\nZARODOV Alexander\tNGO «SPOK», x-booster@mail.ru\nMARKOVSKY Alexander\tNGO «SPOK», markovsky.a@gmail.com\nKeywords: allowable cut exploitable forests sustainable forest management new approach\tSummary: A new approach to calculating parameters of the annual allowable cut for sustainable forest management in mature and over-mature exploitable forests and computer-based programs, developed on its base that allows to calculate the parameters of the annual allowable cut for sustainable forest management in these forests for a predetermined number of years are presented. The proposed approach is based on the simulation model of the age structure dynamics of the stand - from initial age classes of (\"sapling stands \") to older ones (\"mature stands\"). The advantage of the proposed approach is that the procedure and the results of simulation are independent of any predefined formulas for calculating the allowable cut, thus it can be used to calculate allowable cut for exploitable forests with a variable initial age structure and intensity of forest management. Unlike currently applied formulas of the annual allowable cut, based on the thought model of the depletion of over-mature, mature, ripening and other stands in certain time, the simulation model enables to calculate in detail the process for all different age groups of trees. In fact, the entire age structure of the stand is reconstructed in numerical form (virtually, within the computer) for any chosen period of time. Cuttings are considered as abrupt and territorially localized changes in the stand age structure, and the model aims to compute their consequences, as well as to solve the problem of calculating the optimal allowable cut under the restrictions in a given area. The proposed new approach is considered by the example of clear-cutting of mature and over-mature stands in the Republic of Karelia\nReferences\n20\n",
    "download_url": "https://cyberleninka.ru/article/n/o-razrabotke-novogo-podhoda-dlya-ischisleniya-parametrov-raschetnoy-lesoseki-neistoschitelnogo-polzovaniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/avtomatizatsiya-rascheta-nagrevov-dvigatelya-s-primeneniem-ustroystva-plavnogo-puska-na-baze-algoritma-rascheta-samozapuska",
    "slug": "avtomatizatsiya-rascheta-nagrevov-dvigatelya-s-primeneniem-ustroystva-plavnogo-puska-na-baze-algoritma-rascheta-samozapuska",
    "title": "АВТОМАТИЗАЦИЯ РАСЧЕТА НАГРЕВОВ ДВИГАТЕЛЯ С ПРИМЕНЕНИЕМ УСТРОЙСТВА ПЛАВНОГО ПУСКА НА БАЗЕ АЛГОРИТМА РАСЧЕТА САМОЗАПУСКА",
    "abstract_description": "В статье предлагается метод оптимизации расчета нагревов частей активного объема крупных асинхронных двигателей с использованием устройства плавного пуска при определенных видах нагрузочных характеристик. Расчет нагревов обусловливается необходимостью определения степени старения изоляции и прогнозирования уменьшения срока службы электрической машины. Метод оптимизации расчета нагревов частей активного объема асинхронного двигателя базируется на автоматизации вычисления нагревов при моделировании процесса самозапуска двигателя после восстановления аварийного снижения напряжения сети. В то же время использование устройства плавного пуска подразумевает существенное проседание моментной характеристики двигателя. Данное явление, несмотря на снижение пусковых токов, явно сказывается как на времени запуска двигателя, так и на времени его дозапуска при выбеге ротора, соответственно на величине нагревов частей активного объема машины, вплоть до самой возможности запуска, что может вывести двигатель из строя и привести к аварии на ответственных производственных объектах. Предложена комплексная модификация алгоритма расчета токов и моментов, а также нагревов частей активного объема асинхронной машины при плавном пуске и автоматизация обработки массива данных расчета на конкретном примере асинхронного двигателя.",
    "full_text_body": "\n\n\n\n\uFEFF_ДОКЛАДЫ АН ВШ РФ_\n2019_апрель-июнь_№ 2 (43)\n- ТЕХНИЧЕСКИЕ НАУКИ -\nУДК 621.313.13\nАВТОМАТИЗАЦИЯ РАСЧЕТА НАГРЕВОВ ДВИГАТЕЛЯ С ПРИМЕНЕНИЕМ УСТРОЙСТВА ПЛАВНОГО ПУСКА НА БАЗЕ АЛГОРИТМА РАСЧЕТА САМОЗАПУСКА\nА.А. Шевченко, З.С. Темлякова, Д.М. Топорков\nНовосибирский государственный технический университет\nВ статье предлагается метод оптимизации расчета нагревов частей активного объема крупных асинхронных двигателей с использованием устройства плавного пуска при определенных видах нагрузочных характеристик. Расчет нагревов обусловливается необходимостью определения степени старения изоляции и прогнозирования уменьшения срока службы электрической машины. Метод оптимизации расчета нагревов частей активного объема асинхронного двигателя базируется на автоматизации вычисления нагревов при моделировании процесса самозапуска двигателя после восстановления аварийного снижения напряжения сети. В то же время использование устройства плавного пуска подразумевает существенное проседание моментной характеристики двигателя. Данное явление, несмотря на снижение пусковых токов, явно сказывается как на времени запуска двигателя, так и на времени его дозапуска при выбеге ротора, соответственно на величине нагревов частей активного объема машины, вплоть до самой возможности запуска, что может вывести двигатель из строя и привести к аварии на ответственных производственных объектах. Предложена комплексная модификация алгоритма расчета токов и моментов, а также нагревов частей активного объема асинхронной машины при плавном пуске и автоматизация обработки массива данных расчета на конкретном примере асинхронного двигателя.\nКлючевые слова: асинхронный двигатель, самозапуск, устройство плавного пуска, математическое моделирование, автоматизация, JavaScript.\nDOI: 10.17212/1727-2769-2019-2-80-91\nВведение\nВ современных регулируемых электромеханических системах все шире применяют плавный пуск асинхронных двигателей, для которого характерно уменьшение пускового тока и, как следствие, увеличение срока службы машины [1-4]. Несмотря на то что в современном производстве пуск двигателя все чаще осуществляется от преобразователя частоты (ПЧ), применение устройств плавного пуска (УПП) по сей день остается дешевой альтернативой и помогает избежать высоких нагрузок на сеть, а также слишком быстрого пуска. Последнее может привести к гидравлическим ударам, рывкам в механизме, обрыву транспортерных лент и т.д.\nС помощью УПП обеспечивается приведение в соответствие с требованиями по эксплуатации количественных значений токов обмоток электрической машины и момента вращения ротора в течение пуска. Характерно, что ток обмотки статора двигателя пропорционален напряжению, а момент вращения пропорционален квадрату напряжения. Это означает, что в результате управления напряжением двигателя с помощью электронного УПП в ходе процесса пуска регулируется также потребляемый пусковой ток и создаваемый в двигателе начальный пусковой момент.\nТакже неотъемлемым требованием обеспечения автоматизированных производственных процессов является требование автоматического восстановления\n© 2019 А.А. Шевченко, З.С. Темлякова, Д.М. Топорков\nрежима работы используемых в электрооборудовании асинхронных электродвигателей после кратковременного нарушения электроснабжения, которое сопровождается выбегом ротора. Под термином «выбег» подразумевается выход ротора из режима работы при номинальном скольжении в случаях снижения или отключения напряжения. Коротко физическая картина описывается следующим образом: при временном уменьшении подводимого напряжения в недопустимых пределах асинхронные двигатели ответственных механизмов не отключаются, а одновременно с восстановлением напряжения на шинах электроснабжающей установки они пускаются автоматически, без участия персонала. Тем самым технологический процесс производства не нарушается. Автоматическое восстановление работы электродвигателей при кратковременном нарушении электроснабжения принято называть самозапуском.\nКороткие замыкания в сетях, вызывающие исчезновение либо снижение напряжения, как правило, кратковременные В силу своих специфических особенностей роторы асинхронных двигателей не успевают остановиться, что обеспечивает продолжение технологического процесса производства. Однако с ростом скольжения ротор затормаживается, что сопровождается возрастанием тока в проводниках обмоток статора и ротора, что, в свою очередь, может привести к недопустимым перегревам и, как следствие, более быстрому старению изоляции. Из этого следует, что имеет место повышенная нагрузка электрической цепи питания. То есть цепь питания во время пуска двигателя должна быть рассчитана на более высокую нагрузку [5, 6].\n1. Постановка задачи\nНесмотря на то что при использовании УПП в случае аварийной ситуации самозапуск не осуществляется и двигатель перед следующим пуском должен быть остановлен полностью, алгоритм расчета нагревов при пуске с УПП схож с алгоритмом расчета нагревов при самозапуске. Соответственно автоматизация расчета пусковых нагревов при плавном пуске может основываться на алгоритме подсчета нагревов активных частей машины при дозапуске.\nРеализация плавного пуска асинхронного двигателя рассматривается на примере высоковольтного асинхронного двигателя 5АЗМВ-3150/6000У2,5 производства НПО «ЭЛСИБ» ПАО в сочетании с устройством тиристорного регулирования напряжения.\nРешаемая задача сводится к следующему.\n1.\tМодификация алгоритма расчета минимально возможного пускового тока, обеспечивающего режим гарантированного пуска, на основе ранее разработанного алгоритма расчета необходимых параметров при самозапуске двигателя.\n2.\tАвтоматизация расчета массива значений пусковых токов и моментов с целью уменьшения трудоемкости и времени расчета.\n2. Расчет времени самозапуска\nПроцедура математического моделирования имеет разветвленный характер и состоит из нескольких блоков и подблоков. Перед расчетом нагревов токоведу-щих частей двигателя (обмотка статора, стержни и короткозамыкающие кольца ротора) необходимо вычислить время самозапуска. Для этого необходимы следующие исходные данные:\n^ном - номинальная мощность, кВт;\nпном - синхронная частота вращения магнитного поля статора, об/мин;\n/дв - динамический момент инерции ротора, кг • м2;\n/мех - динамический момент инерции нагрузочного механизма, кг • м2; 5 - скольжение (набор значений), о.е.;\nМ - соответствующее скольжениям значение вращающего момента, о.е. В качестве набора значений скольжений выбрана следующая числовая последовательность:\n1; 0,9; 0,8; 0,7; 0,6; 0,5; 0,4; 0,3; 0,2; 0,15; 0,1; 0,05; значение 5кр,\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nгде 5кр - критическое значение скольжения.\nКроме того, необходимо задать статическую зависимость момента сопротивления механизма от скольжения Мс(5), а также минимальное значение избыточного момента Миш;п, о.е., время отсутствия напряжения и=0 , с, и дискретность\nвремени восстановления напряжения /восст, с. Подробно задание приведенных выше параметров приведено в [7].\nИз указанных исходных данных необходимо выделить следующие величины.\n1.\tНачальное (а!) и конечное (а2) значения относительного снижения напряжения:\nи п\nа = —^,\nи н\nгде ип - величина напряжения просадки; ин - величина номинального значения напряжения.\n2.\tМи - значение избыточного момента.\nРасчет времени самозапуска состоит из двух основных подблоков. Смысл первого заключается в определении всех требуемых для расчета времени самозапуска величин, второго - в анализе удовлетворения требованиям условия самозапуска.\nДискретность времени восстановления (Д/, с) предопределяет точность расчета времени самозапуска. При расчете полагается, что отрезки а1...а2 и 0.../восст изменяются линейно по закону у = х. Путем линейной интерполяции отрезок аь.. а2 разбивается на число частей, соответствующее заданной дискретности, при этом каждому отрезку времени соответствует значение а,-.\nПреобразованием дифференциального уравнения изменения момента из [4, 5] получена зависимость изменения времени выбега от скольжения:\n2лпном (.дв + .мех )1\n-----ном V дв мех-' г\nТ(5) =-^-1\n30\t0 М и.Ср (5)\nИз данной зависимости, подставляя т(5) = /ц=0, находится скольжение выбега 5выб.\nДалее, учитывая квадратичную зависимость между напряжением и моментом, программа находит избыточные моменты для каждого значения скольжения при всех имеющихся по результатам разбиения на отрезки величин а, после чего полученные результаты сводит в таблицу (табл. 1).\nАналогично высчитывается минимальное значение ат1п, при котором физически возможен запуск/дозапуск асинхронного двигателя. Далее согласно\n1Т1 ^\nх = кТ ]-\n0 Ми.ср (5)\nвысчитывается значение времени пуска для каждого значения а, при допущении, что данная величина относительного снижения напряжения постоянна для всего\nпериода времени работы двигателя. Эта формула содержит параметры к (коэффициент постоянной времени агрегата) и Т (постоянная времени электродвигателя, с), которые определяются по методике из [5] следующим образом:\nк = 1 +\t= 1 + /мех .\ngdI Jдв\nДв\nT _ GDд2вnн2омl0\"3\n365Рном\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nGD 2\nгде\nJ _ 4\n2 2 GD^^x - маховый момент двигателя/механизма соответственно, кг • м ; J - ди-\n2\nнамический момент инерции, кг • м .\nБолее подробное описание алгоритма подсчета времени самозапуска приведено в [7].\nТаблица 1 / Table 1\nЗначения избыточных моментов Values of excess torque\ns\tai\ta2\t\ta„\nti\tt2\t\ttn\nSi\tMuI.I\tM„2.i\t\tМщ\nSi3\tM„i.i3\tMM2.i3\t\tMnn.i3\n3. Расчет нагревов при самозапуске\nРасчет нагревов при пуске производится по окончании определения всех отрезков времени и аналогичен процедуре определения времени самозапуска. Для расчета используются следующие данные: Тс/к - базовые нагревы стержней/колец, °С; VI - скорость нарастания температуры обмотки статора, °С/с. рс/к - относительные потери в стержнях/кольцах, соответствующие вышеуказанному набору значений скольжений, о.е.\nПо аналогии с расчетом времени пуска согласно [8] определяется нагрев обмотки статора\n9! =а 2^кТ}- ^\n0 Миср (s) Нагрев стержней/колец ротора:\n3 _ 2 kT 1 рс/к.ср(s) ds с/к _ а с/к J ■\n0 Ми.ср ( s)\nПри расчете нагревов при самозапуске возникает сложность в части определения значений нагревов обмотки статора, стержней и короткозамыкающих колец ротора при «зависании ротора» асинхронного двигателя.\nИзвестно, что минимальное значение избыточного момента Мимин, - это та минимальная разница между значениями вращающего момента электродвигателя М и момента сопротивления нагрузки Мс, при которой произойдет его гарантированный пуск/дозапуск. При математическом моделировании принято допущение, что при меньшем положительном значении избыточного момента произойдет «зависание ротора», т. е. вращение с постоянной угловой скоростью происходит до тех пор, пока напряжение обмотки статора не повысится до значения, обеспечивающего необходимый избыточный момент, и, как следствие, продолжение разгона ротора. Реальная физическая картина разгона продолжится и при снижении углового ускорения. При отрицательном избыточном моменте угловое ускорение примет соответственно отрицательное значение.\nВ качестве примера на рис. 1 дана графическая интерпретация зависимости избыточного момента в функции скольжения Мс(5). Область избыточного момента Ми получена как функция разности вращающего момента асинхронного двигателя и момента сопротивления нагрузки согласно [4].\nМи = М - Мс.\nРис. 1 - Моментные характеристики двигателя и нагрузочного механизмаM, о.е., от скольжения s, о.е.\nFig. 1 - The motor torque and load mechanism characteristics M, r.u., versus slip s, r.u.\nСледствием «зависания ротора» является значительное возрастание температур токоведущих частей из-за относительно продолжительного времени работы при скольжении, которому соответствует высокое значение тока обмотки статора. В данном случае, согласно [8]:\n*\nq _ Jl^i Ua ср к/^зав\n1зав _ 198^ном ,\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nq\t_ p а1 +a2 ^ном^зав\n°с/к. зав _ \"с/к i „\nСс/к^с/к\nЗдесь 4™ - время «зависания», с. 7 - плотность тока в обмотке статора, А/мм2. Сс/к - удельная теплоемкость материала стержней/колец, кДж/кг • °С. Ос/к - вес стержней/колец, кг. I - относительные пусковые токи, соответствующие скольжениям (набор значений), о.е.. иа ср - средняя величина снижения напряжения, В. к - температурный коэффициент, о.е.. индекс «зав» означает искомую величину в режиме зависания.\nСредняя величина снижения напряжения и температурный коэффициент:\nи = и а1 + а2 ^а.ср ином 2 '\n(<°P -15° ).\nк( = 1 + 0,004| С -15\nЗдесь {р - расчетная температура (зависит от класса изоляции).\nЗначения удельной теплоемкости используемых для изготовления токопрово-дящих частей асинхронных двигателях металлов приведены в [9]. Нагрев при разгоне от величины критического скольжения до величины номинального полагается на 0,1 °С.\n4. Принципы реализации плавного пуска\nПринципы реализации плавного пуска подобны последовательности анализа выбега ротора, рассмотренного выше. В данном случае также обеспечивается постепенное изменение создаваемого в двигателе момента вращения.\nВ отличие от частотно-токового регулирования пуска и выбега ротора двигателя с использованием частотного преобразователя, при которых регулируется частота, в рассматриваемом случае частота тока обмотки статора остается постоянной и соответствует сетевой частоте.\nНа рис. 2 представлена зависимость фазного напряжения в функции времени при использовании тиристорного устройства плавного пуска, где за счет изменения величины а (значение которой указано ранее) изменяется величина напряжения на обмотке статора и, как следствие, величина тока и момента.\nРис. 2 - График зависимости фазного напряжения от времени Fig. 2 - Phase voltage versus time graph\nСледует отметить, что используемый в работе подход к расчету является упрощенным, так как при проведении электромагнитных расчетов полагается, что вместо «обрезанного» сигнала происходит соответствующее уменьшение амплитуды напряжения. Однако при равенстве среднеквадратичных значений напряжений амплитудные величины могут существенно разниться.\nДля нахождения минимально допустимой уставки (величины минимально возможного пускового тока) при пуске, а также подсчета времени пуска и нагрева\nобмотки статора, стержней и к/з колец ротора при автоматизированном расчете в процессе использования программного комплекса вводятся те же входные данные, что и ранее, с той разницей что:\n1)\tисключаются входные величины ин, j1, Сс/к, G^, t°p ;\n2)\tдополнительно вводится величина номинального тока 1н.\nДля значений скольжений приведена линейка стандартных величин по аналогии с расчетом самозапуска. Перед началом расчета необходимо также вывести зависимость статического момента сопротивления механизма от скольжения Mc(s) [7].\nДалее необходимо задать условия пуска машины. Здесь вводятся описанные выше величины а и Ми min с той разницей, что для определения а величина ип будет являться не величиной напряжения просадки, а величиной «обрезанного» напряжения, подаваемого при пуске.\nДальнейший расчет автоматизирован.\n5. Алгоритм работы программы\nПрограммный комплекс реализован на языке программирования JavaScript. Ниже описаны особенности алгоритма работы программы.\nПрограмма создает массив из n значений величин относительного снижения напряжения при пуске, начиная от введенной пользователем величины а до величины а = 1 с дискретностью 0,01. Далее, учитывая квадратичную зависимость между напряжением и моментом, программа находит избыточные моменты для каждого значения скольжения на всем диапазоне а.. .1 для каждого значения а,-. По завершении построения двухмерного массива значений производится проверка величины избыточного момента при s = 1 для введенной величины а на выполнение условия Ми as = 1 > Ми min. Отрицательный результат такой проверки будет означать, что пользователь подобрал слишком низкое значение а, недостаточное для создания необходимого избыточного момента и соответственно для запуска двигателя, о чем программа незамедлительно оповестит пользователя.\nПри выполнении заданного условия программа начинает удалять из построенного ранее двумерного массива значений избыточных моментов лишние наборы величин а, по следующему алгоритму. Программа начинает проверять выполнение условия Ми ¿j+i > Ми min, где i - значение а,, j - значение Sj. При первом выполнении данного условия набор избыточных моментов для текущего а, сохраняется в массиве. В случае, когда значение избыточного момента для очередного скольжения окажется ниже величины Ми min, происходит переход к следующему значению а. Если после перехода условие Ми > Ми min не выполняется, то происходит переход к следующему значению а, а набор избыточных моментов для оставленного а, удаляется из массива.\nПо достижении величины а = 1 расчет идет до номинального значения скольжения. В случае, если в последнем наборе избыточных моментов существует хотя бы одно отрицательное значение, машина не выйдет на номинальную скорость, о чем программа незамедлительно сообщит.\nВ случае, если на промежуточном дискретном значении а все оставшиеся величины избыточных моментов выше минимальной, полагается, что машина запустится уже на данной величине относительного снижения напряжения.\nСформировавшийся двумерный массив из m наборов значений избыточных моментов сводится в таблицу (см. табл. 1).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТакже высчитывается минимальное значение а, при котором физически возможен запуск двигателя.\nДальнейший расчет времени запуска и величин нагревов происходит по принципу, описанному выше для самозапуска. Кроме этого, исходя из линейной зависимости тока и напряжения, производится расчет величин кратности пускового тока для каждого значения скольжения:\nТ* — т*\nтУПП — атпрям. пуск ,\n*\nгде Тупп - относительное значение пускового тока с использованием УПП;\n*\nТпрям. пуск - относительное значение пускового тока при прямом пуске. 6. Результаты математического моделирования\nМатематическое моделирование плавного пуска, как указывалось выше, осуществлено на примере асинхронного двигателя 5АЗМВ-3150/6000У2,5 производства НПО «ЭЛСИБ» ПАО в сочетании с устройством тиристорного регулирования напряжения.\nГрафическая интерпретация моментов и токов при прямом и плавном пусках показана на рис. 3, 4.\nРис. 3 - График зависимости относительной величины тока I, о.е., от частоты вращения n, об/мин Fig. 3 - Relative current value I, r.u., versus speed n, rpm, graph\nM\nРис. 4 - График зависимости относительной величины момента M, о.е., от частоты вращения n, об/мин\nFig. 4 - Relative torque valueM, r.u., versus speed n, rpm, graph\nКоличественная характеристика значений моментов и токов представлена в табл. 2.\nТаблица 2 / Table 2\nРезультаты расчета Calculation results\nP, кВт\t\t\t3150\nU, В\t\t\t6000\nn, об/мин\t\t\t3000\nIi, А\t\t\t347\ns\tIпрям.пуск\tа\t-^УПП\t-^прям.пуск\tM^\nо.е.\n1,00\t7,06\t0,68\t4,80\t0,80\t0,37\n0,90\t7,00\t0,68\t4,76\t0,80\t0,37\n0,80\t6,90\t0,68\t4,69\t0,80\t0,37\n0,70\t6,80\t0,68\t4,62\t0,82\t0,38\n0,60\t6,75\t0,68\t4,59\t0,84\t0,39\n0,50\t6,65\t0,70\t4,66\t0,87\t0,43\n0,40\t6,56\t0,74\t4,85\t0,95\t0,52\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n0,30\t6,50\t0,76\t4,94\t1,10\t0,64\n0,20\t6,15\t0,76\t4,67\t1,30\t0,75\n0,15\t5,85\t0,76\t4,45\t1,45\t0,84\n0,10\t5,50\t0,76\t4,18\t1,60\t0,92\n0,05\t4,75\t0,76\t3,61\t2,00\t1,16\nsKp = 0,02\t4,10\t0,76\t3,12\t2,40\t1,39\nХарактеристика нагрузочного момента имеет вид параболы с провалом [7, 911]. Пусковой нагрузочный момент составляет 2 кН • м, номинальный - 10 кН • м.\nСоставляется заключение о требуемой минимальной величине кратности пускового тока двигателя для внесенной пользователем величины относительного снижения напряжения при пуске а, время пуска и нагревы: пуск двигателя 5АЗМВ-3150/6000У2,5 возможен при питании от УПП при настройке не менее 4,95/н (значение тока при пуске !п = 1718 А, максимально допустимое время пуска должно быть не более 25 с). Нагрев обмотки статора составит 21,7 °C, нагрев стержней - 139 °C, колец - 53,0 °C.\nЗаключение\n1.\tНа базе алгоритма расчета времени самозапуска и нагревов при нем разработана модификация алгоритма расчета токов при плавном пуске за счет изменения напряжения с использованием тиристорного устройства для заданной нагрузки. В модификации отражены особенности электромагнитного расчета при постоянной частоте тока обмотки статора. В то же время показана универсальность алгоритма расчета.\n2.\tАлгоритм обработки массива значений пусковых токов и моментов при плавном пуске для заданной нагрузки автоматизирован и сведен в программный комплекс, что обеспечивает уменьшение трудоемкости и времени расчета. Одновременно с этим, учитывая особенности языка программирования JavaScript, конечный пользователь ситуативно имеет возможность удаленного доступа к разработанному программному продукту.\nЛИТЕРАТУРА\n1.\tГольдберг О.Д. Испытания электрических машин. - М.: Высшая школа, 2000. - 225 с.\n2.\tВольдек А.И., Попов В.В. Электрические машины. Машины переменного тока: учебник для вузов. - СПб.: Питер, 2008. - 350 с.\n3.\tАрхипцев Ю.Ф., Котеленев Н.Ф. Асинхронные электродвигатели. - М.: Энергоатом-издат, 1986. - 104 с.\n4.\tЧиликин М.Г., Сандлер А. С. Общий курс электропривода: учебник для вузов. - М.: Энергоиздат, 1981. - 576 с.\n5.\tСыромятников И. А. Режимы работы асинхронных и синхронных двигателей. - М.: Энергоатомиздат, 1984. - 240 с.\n6.\tTemlyakova Z.S., Shevchenko A.A., Grechkin V.V. Investigation of operational properties of an induction motor based on numerical simulation // Electrical Engineering. Electrotech-nology. Power engineering (EEE-2015): proceedings, Novosibirsk, 9-12 June 2015. - Novosibirsk: NSTU, 2015. - P. 79-82.\n7.\tShevchenko A.A., Temlyakova Z.S. Large asynchronous machines self-running mode JavaScript-based computer-aided design // 11 International Forum on Strategic Technology (IFOST 2016): proceedings, Novosibirsk, 1-3 June 2016. - Novosibirsk: NSTU, 2016. -Pt. 2. - P. 133-135. - DOI: 10.1109/ifost.2016.7884210.\n8.\tHeating calculation features at self-start of large asynchronous motor / A.A. Shevchenko, Z.S. Temlyakova, V.V. Grechkin, M.E. Vilberger // IOP Conference Series: Earth and Environmental Science. - 2017. - Vol. 87. - Art. 032039. - P. 1-6. - DOI: 10.1088/17551315/87/3/032039.\n9.\tШевченко А.А., Темлякова З.С., Гречкин В.В. Автоматизация расчета самозапуска двухскоростных асинхронных машин на основе применения языка программирования JavaScript // Автоматизированный электропривод и промышленная электроника: труды 7 Всероссийской научно-практической конференции, Новокузнецк, 23-24 ноября 2016 г. - Новокузнецк: Изд-во СибГИУ, 2016. - С. 219-221.\n10. Computer support for designing a high-voltage induction motor / V.V. Grechkin, M.G. Persova, Y.G. Soloveichik, Z.S. Temlyakova // Russian Electrical Engineering. -2014. - Vol. 85, iss. 12. - P. 740-742. - DOI: 10.3103/s1068371214120050.\nMOTOR HEATING CALCULATION AUTOMATIZATION USING THE SOFT-STARTING DEVICE BASED ON THE SELF-STARTING CALCULATION ALGORITHM\nShevchenko A.A., Temlyakova Z.S., Toporkov D.M.\nNovosibirsk State Technical University, Novosibirsk, Russia\nThe article proposes a method for optimizing the calculation of the heating of large asynchronous motor active volume parts using a soft starter for certain types of load characteristics. The heating calculation is determined by the need to determine the insulation aging degree and predict a decrease in the service life of an electrical machine. The optimization method for calculating the heating of asynchronous motor active volume parts is based on automating the calculation of the heats when simulating the motor self-start process after the restoration the voltage in a network. At the same time, the use of a soft start device implies a significant subsidence of the motor torque characteristics. This phenomenon, despite the decrease in starting currents, clearly affects both the motor starting time and the starting-up time when the rotor has been running out, respectively, the machine active volume part heating amount up to the starting possibility which can damage the motor and lead to accidents at responsible production facilities. The algorithm comprehensive modification for calculating currents and torques, as well as asynchronous machine active volume heating parts with a soft-starter, and automating the calculation data array processing using a specific example of an asynchronous motor is proposed.\nKeywords: asynchronous motor, self-start, soft starter, mathematical modeling, automation, JavaScript.\nDOI: 10.17212/1727-2769-2019-2-80-91\nREFERENCES\n1.\tGol'dberg O.D. Ispytaniya elektricheskikh mashin [Electrical machine testing]. Moscow, Vysshaya shkola Publ., 2000. 225 p.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n2.\tVol'dek A.I., Popov V.V. Elektricheskie mashiny. Mashiny peremennogo toka [Electrical machines. AC machines: the textbook for high schools]. St. Petersburg, Piter Publ., 2008. 350 p.\n3.\tArkhiptsev Yu.F., Kotelenev N.F. Asinkhronnye elektrodvigateli [Asynchronous motors]. Moscow, Energoatomizdat Publ., 1986. 104 p.\n4.\tChilikin M.G., Sandler A.S. Obshchii kurs elektroprivoda [General course of electric drive]. Moscow, Energoizdat Publ.,1981. 576 p.\n5.\tSyromjatnikov I. A. Rezhimy raboty asinhronnyh i sinhronnyh dvigatelej [Operation modes of asynchronous and synchronous motors]. Moscow, 1984, 240 p.\n6.\tTemlyakova Z.S., Shevchenko A.A., Grechkin V.V. Investigation of operational properties of an induction motor based on numerical simulation. Electrical Engineering. Electrotech-nology. Power engineering (EEE-2015). Novosibirsk, 2015, pp. 79-82.\n7.\tShevchenko A.A., Temlyakova Z.S. Large asynchronous machines self-running mode JavaScript-based computer-aided design. 11 International Forum on Strategic Technology (IFOST 2016). Novosibirsk, 2016, pp. 133-135. DOI: 10.1109/ifost.2016.7884210.\n8.\tShevchenko A.A., Temlyakova Z.S., Grechkin V.V., Vilberger M.E. Heating calculation features at self-start of large asynchronous motor. IOP Conference Series: Earth and Environmental Science, 2017, vol. 87, art. 032039, pp. 1-6. DOI: 10.1088/1755-1315/87/3/032039.\n9.\tShevchenko A.A., Temlyakova Z.S., Grechkin V.V. [Automating the calculation of self-starting two-speed asynchronous machines based on the using JavaScript programming language]. Avtomatizirovannyi elektroprivod i promyshlennaya elektronika: trudy 7 Vseros-siiskoi nauchno-prakticheskoi konferentsii [Proceedings 7th SPC. \"Automated electric drive and industrial electronics\"]. Novokuznetsk, 2016, pp. 219-221. (In Russian).\n10. Grechkin V.V., Persova M.G., Soloveichik Y.G., Temlyakova Z.S. Computer support for designing a high-voltage induction motor. Russian Electrical Engineering, 2014, vol. 85, iss. 12, pp. 740-742. DOI: 10.3103/s1068371214120050.\nСВЕДЕНИЯ ОБ АВТОРАХ\nШевченко Андрей Александрович - родился в 1992 году, аспирант кафедры ЭМ НГТУ. Область научных интересов: автоматизация производственных процессов. Опубликовано более 10 научных работ. (Адрес: 630073, Россия, г. Новосибирск, пр. К. Маркса, 20. E-mail: com-rade.zed92@gmail.com).\nShevchenko Andrei Alexandrovich (b. 1992) - post-graduate student at the Department of Electromechanics in Novosibirsk State Technical University. His research interests are currently focused on automation of production processes. He is author of more than 10 scientific papers. (Address: Address: 20, Karl Marx Av., Novosibirsk, 630073, Russia. E-mail: comrade.zed92@gmail.com).\nТемлякова Зоя Савельевна - родилась в 1949 году, д-р техн. наук, профессор кафедры ЭМ НГТУ. Область научных интересов: электромеханические системы. Опубликовано более 60 научных работ. (Адрес: 630073, Россия, г. Новосибирск, пр. К. Маркса, 20. E-mail: temlikova@edu.nstu.ru).\nTemlyakova Zoya Savelyevna (b. 1949) - Doctor of Sciences (Eng.), professor in Novosibirsk State Technical University. Her research interests are currently focused on electromechanical systems. She is author of more than 60 scientific papers. (Address: 20, Karl Marx Av., Novosibirsk, 630073, Russia. E-mail: temlikova@edu.nstu.ru).\na\nТопорков Дмитрий Михайлович - родился в 1988 году, канд. техн. наук, доцент кафедры ЭМ НГТУ. Область научных интересов: вопросы проектирования электрических машин. Опубликовано более 20 научных работ. (Адрес: 630073, Россия, г. Новосибирск, пр. К. Маркса, 20. E-mail: toporkov@corp.nstu.ru).\nToporkov Dmitriy Mihailovich (b. 1988) - Candidate of Sciences (Eng.), associated professor in Novosibirsk State Technical University. His research interests are currently focused on issues of electrical machines designing. He is author of more than 20 scientific papers. (Address: 20, Karl Marx Av., Novosibirsk, 630073, Russia. E-mail: toporkov@corp.nstu.ru).\nСтатья поступила 29 мая 2019 г.\nReceived May 29, 2019\nTo Reference:\nShevchenko A.A., Temlyakova Z.S., Toporkov D.M. Avtomatizatsiya rascheta nagrevov dvigatelya s primeneniem ustroistva plavnogo puska na baze algoritma rascheta samozapuska [Motor heating calculation automatization using the soft-starting device based on the self-starting calculation algorithm]. Doklady Akademii nauk vysshei shkoly Rossiiskoi Federatsii - Proceedings of the Russian higher school Academy of sciences, 2019, no. 2 (43), pp. 80-91. DOI: 10.17212/1727-2769-2019-2-80-91.\n",
    "download_url": "https://cyberleninka.ru/article/n/avtomatizatsiya-rascheta-nagrevov-dvigatelya-s-primeneniem-ustroystva-plavnogo-puska-na-baze-algoritma-rascheta-samozapuska/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/problemy-klientskoy-proizvoditelnosti-informatsionnyh-resursov-seti",
    "slug": "problemy-klientskoy-proizvoditelnosti-informatsionnyh-resursov-seti",
    "title": "Проблемы клиентской производительности информационных ресурсов Сети",
    "abstract_description": "Рассмотрены доступность информационных ресурсов Сети и проблемы, связанные с клиентской производительностью ресурсов. Предложен комплексный подход для устранения проблем доступности веб-ресурсов, связанных с клиентской производительностью.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.455.1:004.738.12\nН. С. Мациевский\nПРОБЛЕМЫ КЛИЕНТСКОЙ ПРОИЗВОДИТЕЛЬНОСТИ ИНФОРМАЦИОННЫХ РЕСУРСОВ СЕТИ\nРассмотрены доступность информационных ресурсов Сети и проблемы, связанные с клиентской производительностью ресурсов. Предложен комплексный подход для устранения проблем доступности веб-ресурсов, связанных с клиентской производительностью.\nAvailability of information resources and client-side performance issues are reviewed. There is a generic approach to resolve website availability issues related to client side.\nКлючевые слова: клиентская оптимизация, веб-ресурсы, проблемы производительности, информационные ресурсы.\nKey words: website availability, client-side optimization, informational resources, web resources, web performance.\nВведение\nИнформационный ресурс — организованная совокупность информационных объектов [1]. В Сети эта совокупность может быть реализована как в виде веб-сайта, отдельной веб-страницы, полноценного вебпортала и других формах. Одной из форм информационного ресурса является электронная библиотека — «упорядоченная коллекция разнородных электронных документов (в том числе книг), снабженных средствами навигации и поиска» [2, с. 12].\nИнформационные ресурсы в Сети — обычно набор веб-страниц. Каждая веб-страница представляет собой набор объекта-контейнера (ОК) и ряда внешних объектов (ВО). ОК обычно представлен в виде (Х)ИТМЬ-файла, который содержит ссылки на ВО, являющиеся картинками, аудио- или видеофайлами, а также внешними CSS- и JavaScript-файлами. Большая часть нетекстовых ВО обычно изначально сжата, поэтому выигрыш от сжатия может быть получен только для самого (Х)ИТМЬ-файа и некоторых CSS- и JavaScript-файлов. Для более 60 % веб-страниц ОК занимает менее 50 % общего объема всей страницы. В среднем ОК занимает 44 % от общего размера веб-страниц [7].\nС 2003 по 2008 г. веб-страница более чем утроилась в размере, при этом число объектов почти удвоилось. Из-за этого для пользователей с низкой пропускной способностью канала (56 Кб и ISDN) постепенно время открытия сайта увеличивается. Для пользователей высокоскоростных каналов, напротив, среднее время открытия уменьшилось — по индексу интернет-производительности Keynote Business 40 (KB40) уменьшилось с 2,8 в 2006 г. до 2,33 с в 2008-м [7].\nЯ>\n163\nВестник Балтийского федерального университета им. И. Канта. 2011. Вып. 10. С. 163-168.\n164\nНесмотря на широкое распространение CSS, в 2007 г. было установлено, что из всех веб-страниц 62,6 % по-прежнему используют таблицы для разметки страницы, а 32,8 % — тег font для стилизации элементов. Средняя глубина вложенности таблиц уменьшилась при этом наполовину, по сравнению с 2006 г. — с 2,95 до 1,47. Сложные вложенные таблицы могут вызвать существенные задержки в браузерах при отображении страницы, потому что они должны быть проанализированы целиком перед своим отображением. Среднее число элементов на странице выросло более чем вдвое с 2006 по 2007 г. — с 281 до 592,6 [7].\nЧисло запросов к страницам в пересчете на пользователя более чем удвоилось — с 7074 в 2000 г. до 14 670 в 2007-м. При этом средний размер страницы (учитывая то, что запросы к страницам отделялись от запросов к прокси-серверам по задержке ответа) удвоился с 2000 по 2007 г. [8].\nПо проведенному в 2007 г. исследованию [5] на 84,8 % веб-страниц был обнаружен элемент script. Средний размер внешних файлов скриптов при этом составил 8845 байтов в несжатом виде и 6302 байтов в сжатом. Общий размер скриптов на странице — соответственно 68 812 и 49 738 байтов. На странице в среднем использовалось 7 внешних файлов скриптов, 6 из которых были уникальными [5].\nВ 2007 г. 82,4 % страниц содержали тег link, а 54,5 % — тег style (при этом среднее число внутренних тегов style — 2,27). Средний размер внешнего файла стилей — 6575 байтов в несжатом виде и 4457 байтов в сжатом. Общий размер всех файлов стилей на среднестатистической странице при этом был 15 175 и 10 347 байтов соответственно [7].\nКартинки использовались на 91,6 % всех веб-страниц в исследовании 2007 г. [7], GIF-формат при этом встречался на 84,6 % веб-страниц (77,9 % в 2006 г.), JPEG — на 64,5 % (в 2006 г. — 55,8 %), а PNG — на 32,2 %. При этом заметен существенный рост по сравнению с 2006 г. — 7,2 %. BMP, однако, обнаружено только на 0,8 % веб-страниц в 2006 г. Стоит заметить, что изображения в BMP-формате довольно велики по размеру, и данный формат не подразумевает их сжатие [7].\nСредняя домашняя страница первых 100 блогов составляет 934 Кб. Две трети от этого занимают картинки (61,3 %), 17,2 % — приходится на скрипты, 15,3 % — на HTML, а 5,9 % — на CSS. На средней домашней странице этих блогов было 63 изображения (включая как HTML-, так и CSS-картинки) и 9 внешних скриптов [6].\nЕсли в 2000 г. практически весь трафик обусловлен классическими HTML-форматами, текстовыми и графическими, то в уже 2007-м почти весь объем передаваемых данных — это видеофайлы, бинарные обновления и загрузки программного обеспечения. Благодаря этому сдвигу к большому объему видеоинформации и программного обеспечения средний размер ответа увеличился с 12 294 до 68 275 байтов — примерно в 5,5 раза. Эффективность (клиентского) кэширования в Интернете упала, поскольку число ответов с динамически создаваемыми данными увеличилось с 21,2 до 37,1 %. Эта статистика демонстрирует, как суть веб-сайтов изменилась от предоставления статической информации до обеспечения динамического взаимодействия с пользователем [8].\n1.\tПроблемы низкой производительности\nИсследование Акамай (Akamai) [5] показало, что наиболее приемлемым временем открытия страниц является 2 с. При этом повышенная доступность ресурсов позволяла удерживать пользователей ресурсов Сети дольше и обеспечивать их большей информацией.\nЭто же исследование установило, что 23 % пользователей электронных магазинов разочарованы качеством сервиса в связи с медленной работой веб-сайта магазина. Более быстрые веб-сайты больше удовлетворяют ожиданиям пользователей, имеют низкий показатель отказов и лучшее качество.\nПри большом времени ожидания количество пользователей, дожидающихся открытия веб-страниц, значительно сокращается [4, с. 12], приводя к снижению доступности ресурсов Сети и увеличивая порог необходимых технических требований для пользователей таких ресурсов. При этом существуют методы снижения порога доступности и приведения ресурса Сети в максимально быстрое состояние [3, с. 15].\nПользовательское раздражение сильно возрастает, если скорость загрузки страницы превышает 8 — 10 с безо всякого уведомления пользователя о процессе загрузки. Пользователи с широкополосным доступом еще менее терпимы к задержкам при загрузке веб-страниц по сравнению с пользователями с более узким каналом. В опросе, проведенном ЮпитерРесёч (JupiterResearch), было установлено, что 33 % пользователей скоростного соединения не хотят ждать более 4 с при загрузке страницы, при этом 43 % — не ждут более 6 с [9].\nВ исследовании, проведенном в 2004 г., Ф. На (F. Nah) установила, что терпимое время ожидания (ТВО) для неработающих ссылок (без обратной связи) — 5—8 с. С добавлением уведомления пользователя о процессе загрузки (обратной связи), например индикатора загрузки, ТВО увеличилось до 38 с. ТВО для повторных попыток зайти на неработающие ссылки составляло максимум 2—3 с (без обратной связи). Ф. На заключила, что ТВО для веб-пользователей достигает максимум около 2 с. Если учесть стремление пользователя посетить сайт повторно, то Дэнис Галета (D. Galletta) и другие авторы выявили, что кривая сглаживается при 4 с и более и уходит в нуль в районе 8 с и более [9].\n2.\tРешение проблем производительности\nНаиболее простой способ увеличения скорости загрузки страницы — уменьшение размера загружаемых объектов. В ряде ситуаций можно без потерь содержания изменить состав HTML-документа, файлов CSS и JavaScript и тем самым уменьшить суммарный размер загружаемых пользователями страниц.\nНа высоконагруженных страницах, какими являются, например, главные страницы поисковых систем Google, Yahoo, Яндекс, возникают ситуации, когда каждый лишний байт страницы критичен для быстродействия.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЯ>\n165\n166\nМинимизацией именуется процесс уменьшения объема кода за счет следующих операций:\n—\tудаление избыточных пробелов, табуляций и переносов строк;\n—\tудаление комментариев;\n—\tудаление дублирующегося кода.\nМинимизация применима к коду HTML, CSS и JS и в зависимости от размера и содержимого кода позволяет достичь результатов, близких к gzip-сжатию, уменьшать файлы до 30 % от исходного размера, а иногда и более. При использовании же еще и gzip-сжатия предварительная минимизация позволяет увеличить итоговую степень сжатия в среднем на 3—5% [4, с. 18].\nПомимо непосредственной загрузки каждого внешнего объекта вебстраницы браузеру необходимо совершить ряд дополнительных действий:\n—\tопределить IP-адрес сервера по его доменному имени;\n—\tустановить новое соединение с этим сервером;\n—\tотработать возможные редиректы;\n—\tотправить запрос на сервер;\n—\tдождаться ответа от сервера.\nТаким образом, из-за отсутствия этих временных издержек один внешний объект всегда загружается быстрее, чем несколько объектов того же суммарного размера, загружающихся последовательно, а поскольку многие браузеры загружают внешние файлы JS строго последовательно, количество этих объектов способно существенно повлиять на скорость загрузки веб-страницы.\nБраузеры и прокси-серверы обычно стремятся сохранить максимум информации в своих хранилищах, для того чтобы ускорить повторную загрузку ранее загруженных объектов. Важно помнить, что при этом возможна потеря актуальности представляемых данных, поэтому политика кэширования должна быть организована с учетом всех ситуаций.\nКэширование — это один из наиболее мощных механизмов для уменьшения объема передаваемых по сети данных, притом внедряется этот механизм очень просто [4, с. 32].\nНаибольший эффект от уменьшения количества запросов к серверу ощутят пользователи с низкой пропускной способностью канала и большим временем отклика от сервера — обычно это пользователи мобильных устройств и коммутируемых соединений.\nДаже когда веб-страница и все внешние объекты загружены на компьютер пользователя, браузеру по-прежнему требуется время для того, чтобы разобрать страницу, интерпретировать код HTML и CSS, выполнить код JavaScript. Принимая во внимание особенности работы браузеров на этом этапе, можно достичь существенно более высокой скорости загрузки страницы.\nРазбирая полученный HTML-код, браузер строит дерево документа, содержащее все элементы страницы. Затем, отыскав все взаимосвязи между элементами этого дерева и CSS-селекторами, относящимися к данной странице, он применяет к документу стили.\nЕсли на веб-странице присутствует большое количество элементов или объем CSS-кода достаточно велик, страница может прорисовываться с ощутимой задержкой. Когда объем кода уменьшить уже невозмож-\nно, более высокой скорости загрузки можно достичь за счет эффективной верстки. Основные рекомендации к верстке следующие [4, с. 34].\n1.\tНаиболее важное содержимое страницы должно находиться в самом начале HTML-документа. Так пользователи смогут начать взаимодействовать с этим содержимым раньше.\n2.\tАктуальные размеры изображений и ячеек таблиц, содержащих большое количество данных, должны быть явно заданы при помощи HTML-аттрибутов или CSS-свойств. Это позволит избавиться от лишних перерисовок веб-страницы. Например, когда браузер загрузит изображение и определит его размер, ему не потребуется обновлять макет веб-страницы, для изображения уже будет зарезервировано необходимое пространство. Кроме того, точно заданные размеры изображения избавят браузер от избыточной операции масштабирования изображения на лету.\n3.\tСледует отказаться от использования CSS-expressions для браузеров Internet Explorer. Они отрицательно влияют на производительность браузера и в большинстве ситуаций могут быть заменены более производительным JS-кодом, а иногда и вовсе альтернативной версткой. В ситуациях же, когда для требуемой функциональности сайта использования expressions не избежать, следует применять одноразовые expressions.\n4.\tНужно использовать быстродействующие селекторы идентификаторов и классов. Поскольку большинство браузеров анализируют селекторы справа налево, с виду простой селектор #header. menu li a будет применяться дольше, чем аналогичный ему селектор #header. menu-item. В первом случае браузеру требуется найти все ссылки на странице, проверить, находятся ли они в контексте элемента списка, элемента с классом menu и, наконец, элемента с идентификатором header. Второй вариант более предпочтителен, поскольку поиск элементов по классу и идентификатору выполнится существенно быстрее.\n5. Универсальные, дочерние, соседние селекторы, селекторы атрибутов, псевдоклассов и псевдоэлементов должны применяться только в тех ситуациях, когда это действительно необходимо. Все эти разновидности CSS-селекторов существенно более ресурсоемки, чем селекторы идентификаторов или классов.\nОт структуры HTML-документа во многом зависит скорость загрузки страницы пользователем. Даже при одинаковом суммарном размере страниц и равном количестве внешних объектов две различные страницы могут загружаться за совершенно разное время. Причина в том, что отображение элементов частично загруженной страницы в большинстве браузеров осуществляется только после выполнения следующих шагов [4, с. 35]:\n1)\tполучения HTML-документа;\n2)\tполучения всех внешних объектов CSS, вызываемых в HTML-документе;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3)\tполучения всех внешних объектов JavaScript, вызываемых в HTML-документе внутри тега <head>;\n4)\tполучения всех внешних объектов JavaScript в HTML-документе внутри тега <body>, расположенных в потоке выше выводящегося элемента.\n167\n168\nСписок литературы\n1.\tАнтопольский А. Б. Сегодня абсолютно чистых электронных библиотек, которые никак не нарушают законодательство, просто нет // Интернет-портал интеллектуальной молодежи. URL: http://ipim.ru/persons/14.htmI.\n2.\tЗемсков А. И., Шрайберг Я. Л. Электронные библиотеки. М., 2003.\n3.\tМациевский Н. С. Разгони свой сайт. М., 2009.\n4. Мациевский Н. С., Степанищев Е. В., Кондратенко Г. И. Реактивные вебсайты. М., 2010.\n5.\tAkamai reveals 2 seconds as the new threshold of acceptability for eCommerce\nweb page response times. Business Wire. URL:\thttp://www.businesswire.\ncom/news/googIe/20090914005141/en.\n6.\tAverage top 100 weblog performance survey. Website Optimization. URL: http://www.websiteoptimization.com/ speed/tweak/average-top-100-webIog.\n7.\tAverage web page size triples since 2003. Website Optimization. URL: http://www.websiteoptimization. com/speed/tweak/average-web-page.\n8.\tEvolution of the web from 2000 to 2007. Website Optimization. URL: http://www.websiteoptimization.com/speed/tweak/evoIution-web.\n9.\tThe psychology of web performance. Website Optimization. URL: http:// www. websiteoptimization. com/speed/tweak/psychoIogy-web-performance.\nОб авторе\nНиколай Сергеевич Мациевский — асп., Московский государственный университет культуры и искусств, e-mail: speed@webo.name.\nAuthor\nNikolay Matsievsky — PhD student, Moscow State University of Culture and Arts, e-mail: speed@webo.name.\n",
    "download_url": "https://cyberleninka.ru/article/n/problemy-klientskoy-proizvoditelnosti-informatsionnyh-resursov-seti/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/tehnologii-i-instrumenty-3d-modelirovaniya-v-brauzere",
    "slug": "tehnologii-i-instrumenty-3d-modelirovaniya-v-brauzere",
    "title": "Технологии и инструменты 3D моделирования в браузере",
    "abstract_description": "Благодаря научно-техническому прогрессу за последнее десятилетие объемы передаваемой по сети интернет информации существенно возросли. Увеличилась также и скорость обработки больших объёмов информации на локальных компьютерах пользователей интернета. Эти два фактора не могли не оказать влияния на развитие браузерной графики. В статье проводится обзор существующих на данный момент различных технологий, инструментов и библиотек, предназначенных для моделирования трёхмерной графики в браузерах.",
    "full_text_body": "\n\n\n\n\uFEFFТЕХНОЛОГИИ И ИНСТРУМЕНТЫ 3D МОДЕЛИРОВАНИЯ\nВ БРАУЗЕРЕ Ковтунов Д.С. Email: Kovtunov640@scientifictext.ru\nКовтунов Дмитрий Сергеевич - студент, кафедра космических информационных систем, Федеральное государственное бюджетное образовательное учреждение высшего профессионального образования Московский технологический университет, г. Москва\nАннотация: благодаря научно-техническому прогрессу за последнее десятилетие объемы передаваемой по сети интернет информации существенно возросли. Увеличилась также и скорость обработки больших объёмов информации на локальных компьютерах пользователей интернета. Эти два фактора не могли не оказать влияния на развитие браузерной графики. В статье проводится обзор существующих на данный момент различных технологий, инструментов и библиотек, предназначенных для моделирования трёхмерной графики в браузерах. Ключевые слова: 3D моделирование, OpenGL, WebGL, Three.js.\nTECHNOLOGIES AND TOOLS FOR 3D MODELING IN A BROWSER Kovtunov D.S.\nKovtunov Dmitry Sergeevich - Student, SPACE INFORMATION SYSTEMS DEPARTMENT,\nFEDERAL STATE BUDGET EDUCATIONAL INSTITUTION OF HIGHER PROFESSIONAL EDUCATION MOSCOW TECHNOLOGICAL UNIVERSITY, MOSCOW\nAbstract: for the last ten years due to scientific progress an amount of information which is sent by internet is significantly increased. Speed of a big amount of information processing also increased. This two factors are influenced on browser graphics. Different technologies, tools and libraries that are existing in this moment and are intended for 3D modeling are reviewing in this article. This article not proposes exhaustive view or detailed manual. It gives only superficial review of considered topic. Keywords: 3D modeling, OpenGL, WebGL, Three.js.\nУДК 004.94\nВеб-технологии прочно вошли в нашу повседневную жизнь. Индустрия услуг и развлечений в сети Интернет стремительно развивается, ведущие разработчики программного обеспечения улучшают поддержку трехмерной графики в своих продуктах. Благодаря росту производительности персональных компьютеров и расширению возможностей браузеров стало возможным создание и отображение трехмерной графики с применением веб-технологий.\nНаиболее распространенными технологиями отображения компьютерной графики на персональных компьютерах являются Direct3D и OpenGL.\nDirect3D — составная часть пакета технологий Microsoft DirectX.\nАльтернативная ей технология OpenGL, благодаря ее открытости, получила гораздо более широкое распространение. Реализации OpenGL доступны для различных операционных систем и аппаратных платформ. Спецификация OpenGL была разработана компанией Silicon Graphics Inc. и опубликована как открытый стандарт в 1992 году. Технология оказала огромное влияние на развитие трехмерной графики.\nWebGL уходит корнями в OpenGL, однако назвать его прямым потомком нельзя. Непосредственным прототипом WebGL принято считать OpenGL ES (for Embedded Systems для встраиваемых систем), создана в 2003--2004 годах.\nWebGL (Web-based Graphics Library) — программная библиотека для языка программирования JavaScript, позволяющая создавать на JavaScript интерактивную 3D-графику, функционирующую в широком спектре совместимых с ней веб-браузеров. За счёт использования низкоуровневых средств поддержки OpenGL, часть кода на WebGL может выполняться непосредственно на видеокартах.\nВ начале 2009 года некоммерческий промышленный консорциум Khronos Group учредил рабочую группу WebGL и запустил процесс стандартизации WebGL на основе OpenGL ES 2.0. Спецификация WebGL версии 1.0 была выпущена 3 марта 2011 года. Корпорация Apple приняла решение о поддержке WebGL в браузере Safari на конференции WWDC в 2014 году [1].\nWebGL предназначена для использования в веб-страницах и не требует установки специализированных расширений или библиотек.\nСоздание технологии WebGL позволило отображать и манипулировать трехмерной графикой на веб-страницах с помощью JavaScript. При помощи WebGL разработчики могут создавать совершенно новые пользовательские интерфейсы, трехмерные игры и использовать трехмерную графику для визуализации различной информации. Несмотря на внушительные возможности, WebGL отличается от других технологий доступностью и простотой использования, что способствует ее быстрому распространению.\nВ настоящий момент WebGL поддерживается следующими браузерами:\nДесктопные браузеры\n•\tMozilla Firefox (с 4-й версии)\n•\tGoogle Chrome (с 9-й версии)\n•\tSafari (с 6-й версии, по умолчанию поддержка WebGL отключена)\n•\tOpera (с 12-й версии, по умолчанию поддержка WebGL отключена)\n•\tIE (с 11 -й версии, для других версий можно воспользоваться сторонними плагинами, например, IEWebGL)\nМобильные браузеры и платформы\n•\tAndroid-браузер (поддерживает WebGL только на некоторых устройствах)\n•\tOpera Mobile (начиная с 12-й версии и только для ОС Android)\n•\tIOS (полная поддержка с версии 8.1)\n•\tFirefox for mobile (с 4-й версии)\n•\tGoogle Chrome для Android (с 25-й версии)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПреимуществами использования WebGL являются:\n•\tКроссбраузерность и отсутствие привязки к определенной платформе. Windows, MacOS, Linux — все это неважно, главное, чтобы ваш браузер поддерживал WebGL.\n•\tИспользование языка JavaScript, который достаточно распространен.\n•\tАвтоматическое управление памятью. В отличие от OpenGL, в WebGL не надо выполнять специальные действия для выделения и очистки памяти.\n•\tПоскольку WebGL для рендеринга графики использует графический процессор на видеокарте (GPU), для этой технологии характерна высокая производительность, которая сравнима с производительностью нативных приложений.\nТехнология WebGL использует низкоуровневое API, этот аспект облегчает внедрение технологии разработчиками браузеров в свои продукты, но создает достаточно большие трудности при создании интерфейсов. Существует несколько реализаций WebGL - ниже будут приведены основные [2].\nБиблиотека WebGLU.\nПервой общедоступной библиотекой стала WebGLU — набор утилит низкого и высокого уровня для разработки приложений на WebGL. WebGLU сконструирован\nтаким образом, что разработчик может сосредоточиться на конечном результате с минимумом суеты и кода, но библиотека не ограничивает разработчиков, которые хотят больше контроля. Это достигается за счет возможности использования низкоуровневых функций для работы с WebGL API.\nСреди функций стоит отметить:\n•\tВсе компиляции и компоновки обрабатываются автоматически\n•\tАвтоматическая установка любой проекции и вида модели\n•\tПоддерживает иерархии объектов\n•\tСтатические изображения и видео текстуры\n•\tПоддержка процедурной и покадровой анимации\n•\tВозможность смешивать типы анимации и иерархию объектов [3]\nБиблиотека GLGE\nДостаточно именитая библиотека для разработки приложений с использованием WebGL. Библиотека ориентирована больше на динамическое изменение сцены.\nИмеющиеся функции:\n•\tАнимирование материалов\n•\tСкелетная анимация\n•\tПоддержка карт смещения\n•\tРендеринг текста\n•\t2d фильтры\n•\tПоддержка LOD — уровни детализации объекта\n•\tФизика\n•\tПокадровая анимация\n•\tПоддержка карты нормалей\nБиблиотека three.js\nthree.js — это библиотека с открытым исходным кодом. Библиотека three.js упрощает использование программного интерфейса WebGL API для создания 3D-графики на странице веб-браузера.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ ней реализовано множество математических функций, с эффективными алгоритмами решения, чтобы веб-приложения работали с минимальными затратами ресурсов. Описаны часто используемые функции и методы, для построения трехмерной графики.\nБиблиотека three.js автоматизирует рутинные операции и предоставляет высокоуровневый программный интерфейс, позволяющий оперировать такими привычными понятиями компьютерной графики как сцена, графический объект и камера.\nthree.js определяет класс THREE, инкапсулирующий классы сцены, камеры, освещения, материалов, текстур и др.\nЧтобы визуализировать что-либо с помощью three.js, сначала необходимо создать сцену, добавить камеру и настроить рендерер.\nОбладает рядом функций:\n•\tДобавление и удаление объектов в режиме реального времени\n•\tПерспективная или ортографическая камеры\n•\tКаркасная анимация, различные виды кинематики, покадровая анимация\n•\tНесколько типов источников света — внешний, направленный, точечный\n•\tОбъекты — сети, частицы, спрайты, линии, скелетная анимация и так далее\n•\tМножество предустановленных типов геометрии — плоскость, куб, сфера, тор, 3D текст и так далее\nНаиболее популярная и активно развивающаяся библиотека на сегодняшний день. Подробная и доступная документация и огромное количество рабочих примеров.\nБиблиотека babylon.js\nБиблиотека с открытым исходным кодом для создания полноценных 3D приложений и игр, работающих в веб-браузере без использования сторонних плагинов и расширений. babylon.js по своим возможностям близок к three.js [2]. Список функций:\n•\tСглаживание\n•\tАнимационный движок\n•\tЗвуковой движок\n•\tАппаратное масштабирование\n•\tПошаговая загрузка сцены\n•\tАвтоматическая оптимизация сцены\n•\tПанель отладки\n•\t4 источника освещения — точечный, излучаемый повсюду, прожектор и реалистичное\n•\tПользовательские материалы и шейдеры\n•\tШирокие возможности текстурирования\nПовсеместное внедрение компьютерной графики требует от разработчиков освоения новых горизонтов. Однако всех объединяет желание создать качественные, легкие и производительные веб-приложения, активно использующие возможности трехмерной графики. WebGL и библиотека three.js в частности, являются мощным инструментом в руках как профессионалов, так и начинающих специалистов.\nСписок литературы /References\n1.\tЯковлевЕ.А. Биометрические технологии и системы контроля в управлении / В сб.: Экономика и управление в XXI веке: тенденции развития. Сб. материалов XXXVI Межд. науч.-практ. конф., 2017. С. 223-228.\n2.\tМаксимов Р.Л., Рафиков А.Г. Разработка автоматической СКУД повышенной безопасности на базе типового решения СКУД Biosmart с использованием автоматного подхода / Вопросы кибербезопасности, 2015. № 5 (13). С. 73-80.\n3.\tСмолин М.Ю., Борисов А.П. К вопросу об использовании систем биометрической защиты при обучении студентов / В сб.: Современные технологии в мировом научном пространстве. Сб. статей Межд. научно-практ. конф.: в 6 ч., 2017. С. 165-167.\n4.\tДенисьев С.А. Биометрия в УИС / В сборнике: Актуальные проблемы деятельности подразделений УИС сборник материалов Всероссийской научно -практической конференции. ФКОУ ВПО «Воронежский институт ФСИН России», 2012. С. 43-48.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n5.\tАрсениев А.Н., Балаев А.К., Макаренко Ю.А. Методы биометрической идентификации: потенциал применения в системах контроля и управления доступом / Новая наука: Проблемы и перспективы, 2016. № 121-3. С. 148-152.\n",
    "download_url": "https://cyberleninka.ru/article/n/tehnologii-i-instrumenty-3d-modelirovaniya-v-brauzere/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/upravlenie-obrazovatelnoy-programmoy-vuzov-v-kontekste-podgotovki-konkurentosposobnyh-razrabotchikov-programmnogo-obespecheniya",
    "slug": "upravlenie-obrazovatelnoy-programmoy-vuzov-v-kontekste-podgotovki-konkurentosposobnyh-razrabotchikov-programmnogo-obespecheniya",
    "title": "Управление образовательной программой вузов в контексте подготовки конкурентоспособных разработчиков программного обеспечения",
    "abstract_description": "В статье рассматриваются особенности управления образовательной программой вузов в контексте подготовки конкурентоспособных специалистов в ИТ-сфере. Рассмотрены известные противоречия между существующими образовательными стандартами и запросами работодателей в данной сфере с точки зрения потребителей образовательных услуг. Описываются ключевые блоки управления образовательной программой управление контингентом, ООП, ресурсами, учебным процессом, а также основные особенности требований к ИТ-специалистам. Рассматривается вопрос мониторинга требований на рынке труда к разработчикам ПО и управления набором профессиональных компетенций с учетом этих требований. Представлена схема управления основной образовательной программой, включающая мониторинг требований к ИТ-специалистам, определение целевого состояния ООП и управление профессиональными компетенциями и обеспечивающими их дисциплинами. Представлена математическая модель специализаций и требований, а так же математический аппарат для оценки соответствия набора профессиональных дисциплин учебного плана востребованным специализациям. Проведено исследование популярных специализаций на региональном рынке труда с помощью кластерного анализа, для которого использован алгоритм CLOPE. Проанализировано содержимое рабочих программ дисциплин учебного плана на предмет соответствия определенным требованиям работодателей. Описываются основные выводы и планируемое направление дальнейшей деятельности.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 378.1, 005.5, 519.237.8\nDOI: 10.25559/SITITO.14.201804.803-814\nУПРАВЛЕНИЕ ОБРАЗОВАТЕЛЬНОЙ ПРОГРАММОЙ ВУЗОВ В КОНТЕКСТЕ ПОДГОТОВКИ КОНКУРЕНТОСПОСОБНЫХ РАЗРАБОТЧИКОВ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ\nВ.В. Калевко, Д.Г. Лагерев, А.Г. Подвесовский\nБрянский государственный технический университет, г. Брянск, Россия\nEDUCATIONAL PROGRAM MANAGEMENT OF UNIVERSITIES IN THE CONTEXT OF TRAINING COMPETITIVE SOFTWARE DEVELOPERS\nViktor V. Kalevko, Dmitri G. Lagerev, Aleksandr G. Podvesovskii Bryansk State Technical University, Bryansk, Russia\nI© Калевко В.В., Лагерев Д.Г., Подвесовский А.Г., 2018|\nКлючевые слова\nАннотация\nУправление образовательным процессом; подготовка разработчиков программного обеспечения; требования к разработчикам ПО; соответствие\nобразовательной программы запросам рынка труда; модель специализации; мониторинг; кластеризация.\nВ статье рассматриваются особенности управления образовательной программой вузов в контексте подготовки конкурентоспособных специалистов в ИТ-сфере. Рассмотрены известные противоречия между существующими образовательными стандартами и запросами работодателей в данной сфере с точки зрения потребителей образовательных услуг. Описываются ключевые блоки управления образовательной программой — управление контингентом, ООП, ресурсами, учебным процессом, а также основные особенности требований к ИТ-специалистам. Рассматривается вопрос мониторинга требований на рынке труда к разработчикам ПО и управления набором профессиональных компетенций с учетом этих требований. Представлена схема управления основной образовательной программой, включающая мониторинг требований к ИТ-специалистам, определение целевого состояния ООП и управление профессиональными компетенциями и обеспечивающими их дисциплинами. Представлена математическая модель специализаций и требований, а так же математический аппарат для оценки соответствия набора профессиональных дисциплин учебного плана востребованным специализациям. Проведено исследование популярных специализаций на региональном рынке труда с помощью кластерного анализа, для которого использован алгоритм ^ОРЕ. Проанализировано содержимое рабочих программ дисциплин учебного плана на предмет соответствия определенным требованиям работодателей. Описываются основные выводы и планируемое направление дальнейшей деятельности.\nKeywords\nAbstract\nEducation process management; training of software developers; software developer requirements; compliance of the educational program with the demands of the job market; model of specialty; monitoring; clustering.\nThe article discusses the features of management of the educational program of universities in the context of training competitive specialists in the IT-sphere. The known contradictions between the existing educational standards and employers ' demands in this sphere from the point of view of consumers of educational services are considered. It describes the key blocks of educational program management - contingent, main education program (MEP) resources, education process management, and the main features of the requirements for IT-professionals. We consider the issue of monitoring the requirements of the job market for software developers and management of a set of professional competencies to meet these requirements. The scheme of the main educational program management is presented which include monitoring requirements it-professionals, the definition of the target status of the MEP and the management of\n|Об авторах:|\nКалевко Виктор Васильевич, аспирант, кафедра информатики и программного обеспечения, Брянский государственный технический университет (241035, Россия, г. Брянск, ул. Харьковская, д. 10-Б), ORCID: http://orcid.org/0000-0001-8152-3265, kalevko.gp@gmail.com Лагерев Дмитрий Григорьевич, кандидат технических наук, доцент, кафедра информатики и программного обеспечения, Брянский государственный технический университет (241035, Россия, г. Брянск, ул. Харьковская, д. 10-Б), ORCID: http://orcid.org/0000-0002-2702-6492, lagerevdg@mail.ru\nПодвесовский Александр Георгиевич, кандидат технических наук, доцент, заведующий кафедрой информатики и программного обеспечения, Брянский государственный технический университет (241035, Россия, г. Брянск, ул. Харьковская, д. 10-Б), ORCID: http://orcid. org/0000-0002-1118-3266, apodv@tu-bryansk.ru\nVol. 14, no 4. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\nprofessional competences and ensure their disciplines. The mathematical model of specializations and requirements, and also the mathematical apparatus for an assessment of compliance of a set of professional disciplines of the curriculum to demanded specializations is presented. For this purpose, a research of popular specializations in the regional job market using cluster analysis, for which the CLOPE algorithm is used. Analyzed the content of the discipline work programs of the curriculum for compliance with certain requirements of employers. The main conclusions and the planned direction of further activities are described.\nВведение\nСовременная российская экономика существует в условиях конкуренции. Коммерческие организации стремятся развивать производственные и технологические процессы для получения превосходства, а работодатели при приеме на работу ожидают от соискателей владения актуальными знаниями и навыками, обеспечивающимися профессиональными компетенциями. В современную эпоху глобализации это происходит в большей степени под влиянием мировых трендов. При этом для работодателей специалисты с соответствующим набором компетенций нужны как можно быстрее. Обобщенный запрос работодателями различных специалистов формирует «биржу труда». Довольно часто работодатели сотрудничают с вузами для подготовки специалистов с необходимым набором навыков (рис. 1).\nВ свою очередь министерство образования и науки РФ отслеживает происходящие тенденции, в том числе, на рынке труда и работает над улучшением и актуализацией федеральных государственных образовательных стандартов (ФГОС). В 2017 появились ФГОС высшего образования поколения 3++, которые более гибко позволяют реализовывать потенциал компетент-ностного подхода.\nНа выбор абитуриентов при определении вуза и направления подготовки влияют многие вещи - популярность и востребованность специалистов разных профилей, в том числе и размер заработной платы, а так же отзывы от уже обучающихся по соответствующим направлениям студентов и закончивших обучение специалистов.\nОсновным измеримым результатом подготовки являются выпускники. Набор компетенций и их уровень должен позволить выпускникам выполнять востребованную и перспективную работу. Этот результат является частью необходимых рейтинговых показателей вуза, которые в т.ч. влияют на популярность вуза в целом и направления подготовки в частности. По результатам трудоустройства выпускников вузы также смогут оценить качество обучения.\nОценить качество образования можно с разных точек зрения. С точки зрения учебных заведений показателем качества может выступать степень соответствия уровня подготовки требованиям, которые сформулированы в ФГОС. Для абитуриентов и учащихся важно получить такое образование в виде знаний и навыков, которое позволит конкурировать на рынке труда и развивать карьеру. Работодатели заинтересованы в том, чтобы выпускники вузов соответствовали необходимым требованиям, т.е. имели необходимую базу подготовки и владели востребованным инструментами.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМожно сделать вывод, что образовательная деятельность может быть успешной в том случае, если образовательные программы будут способны гибко следовать за изменениями конъюнктуры рынка и требованиями работодателей. При этом «под образовательной программой понимается совокупность\nсвойств образовательной услуги, значимых для потребителей» [1]. Таким образом, становится действительно важной эффективное функционирование системы управления образовательной программой для обеспечения конкурентоспособности.\nОсновная часть\nСистему управления образовательной программой можно разделить на 4 ключевых взаимосвязанных блока (рис. 2).\nБлок управления контингентом отвечает за работу с уже обучающимися студентами и за подготовку и осуществление нового набора. При подготовке нового набора руководство кафедры прогнозирует возможное количество поступающих студентов, а так же их уровень. На основе последнего определяется проходной балл. Если наборы уже были, можно использовать статистику по уровню абитуриентов и по тому как, они учились. Если же нет, то можно сравнить по другим вузам такие же направления или смежные с определенной поправкой. Нужно учитывать, какой процент будущих абитуриентов будет сдавать профильные предметы. Среди профильных предметов можно выделить как популярные (обществознание), так и менее распространенные (информатика).\nОбычно образовательные программы должны быть подготовлены за год до начала обучения. Допускаются некоторые корректировки за полгода до начала обучения, в зависимости от организации этого процесса в конкретном вузе. Соответственно, если при подготовке образовательных программ это учесть, то эффективность управления процессом обучения будет выше.\nБлок управления ООП отвечает за управление необходимыми для направлений подготовки сущностями - набором компетенций, учебным планом, рабочими программами [2]. При этом важно определиться с действительно актуальными и востребованными на рынке труда компетенциями, а так же обеспечивающими их дисциплинами, изучение которых будет поставлено в порядке, обусловленном связями между дидактическими единицами в модулях дисциплин. При этом распределение зачетных единиц по дисциплинам будет выполнено в соответствии с ценностью связанных с дисциплинами компетенций.\nУправление ресурсами для осуществления учебного процесса также играет важную роль. Под такими ресурсами будем понимать уровень и компетентность профессорско-преподавательского состава задействованных кафедр, оснащенность аудиторий, в том числе специальным оборудованием и программным обеспечением, электронную образовательную среду и учебно-методические комплексы. Состояние перечисленных ресурсов определяет, получится ли обеспечить необходимые компетенции, т.е. осуществить обучение по обеспечивающим дисциплинам. Зачастую управление ресурсами предполагает эффективное распределение денежных средствам для приближения целевому состоянию ресурсов. Соответственно, управление ресурсами должно быть направленно на повышение возможности обеспечивать учебный процесс на высоком уровне.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nРис. 1. Взаимодействие системы управления образовательной программой вуза с окружающей средой.\nСплошной чертой выделены явные воздействия, штрихом - неявные. Fig. 1. Interaction of the management system of the educational program of the university with the environment. The solid line indicates the explicit effects, the stroke - implicit ones.\nНовые технологии\nЗапрос подготовки специалистов\nОтзывы о подготовке специалистов\nВостребованные специализации\nФГОС,\nпроф. стандарты\nСистема управления образовательной программой\n1. Управление контингентом\t3.Управление ресурсами для осуществления учебного процесса\n2. Управление основными образовательными программами\t4. Управление учебным процессом\nРейтинговые показатели\nРезультаты подготовки\nА I\nПредпочтения абитуриентов по направлениям, уровень подготовки\nРис. 2. Ключевые блоки в системе управления образовательной программой вуза Fig. 2. Key blocks in the management system of the university educational program\nVol. 14, no 4. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nУправление учебным процессом включает в себя распределение нагрузки между преподавателями, проведение занятий и практик, контроль знаний. Данный блок непосредственно взаимодействует с контингентом (блок №1). Для проведения занятий должен быть подготовлен учебный план, рабочие программы и методические указания (блок №2). В процессе управления учебным процессом можно фиксировать различные метрики, которые могут касаться как отдельных студентов или преподавателей, так и групп и дисциплин. Данные метрики можно использовать в качестве обратной связи для управления всеми перечисленными блоками.\nРассмотрим более детально блок №2 «Управление основными образовательными программами» (рис. 3). В процессе управления ООП выделяются блоки управления компетенциями и управление учебным планом в виде управления дисциплинами.\nВ соответствии с ФГОС 3++ компетенции разделяются на 3 множества - универсальные, общепрофессиональные и профессиональные. Универсальные и общепрофессиональные компетенции строго закреплены в стандарте [3]. В тоже время стандарт делегирует образовательной организации определение профессиональных компетенций. Как правило, за это отвечает выпускающая кафедра, которая определяет необходимые профессиональные компетенции и обеспечивающие их дисциплины.\nДля обеспечения универсальных и общепрофессиональных компетенций используются общепрофессиональные и гуманитарные дисциплины, такие как математический анализ, история, иностранный язык, философия и др. Набор таких дисциплин определяет учебно-методическое управление, а подготовкой рабочих программ соответствующие кафедры.\nДля определенных специализаций может потребоваться углубленное изучение каких-то непрофильных для выпускающей кафедры дисциплин, например, связанных экономикой, математикой или иностранным языком. В таких случаях выпускающая кафедра может запросить у учебно-методического управления корректировку набора общепрофессиональных и гуманитарных дисциплин или попросить учесть специфику направления в процессе преподавания другими кафедрами напрямую. Уже на этом этапе можно определить приоритеты и значимость среди компетенций,\nДалее для обеспечения компетенций формируются рабочие программы дисциплин. При этом за подготовку профессиональных дисциплин будет отвечать выпускающая кафедра, а за остальные - кафедры профильных дисциплин. Сформированные дисциплины могут иметь определенные связи между собой, которые будут учтены при определении порядка изучения дисциплин.\nВ процессе формирования учебного плана дисциплины распределяются по учебным семестрам. В это же время фонд зачетных единиц распределяется между дисциплинами, а для дисциплин определяется итоговая форма контроля. Причем в зависимости ценности связанных с дисциплиной компетенций на дисциплину может быть выделено соответствующее количество зачетных единиц. Для дисциплин выполняется подготовка рабочих программ и методических указаний.\nПеред изучением специфики управления ООП для подготовки разработчиков программного обеспечения (ПО) рассмотрим особенности требований в данной отрасли. Выделяют основные виды профессиональной деятельности, которые тре-\nбуется выполнять при разработке ПО:\n•\tразработка ПО;\n•\tтестирование ПО;\n•\tуправление проектами;\n•\tаналитика;\n•\tадминистрирование.\nС другой стороны можно классифицировать виды деятельности по типу разрабатываемого ПО:\n•\tвеб-сервисы;\n•\tмобильные приложения;\n•\tнастольные приложения;\n•\tсервера;\n•\tкомпьютерные игры;\n•\tдрайверы и операционные системы;\n•\t1С-Предприятие;\n•\tинтернет вещей;\n•\tпрочее.\nРазличные рекрутинговые агентства (Группа «КАУС», DigitalHR, Staffline) выделяют от 15 до 30 различных должностей для ИТ-специалистов [4].\nКаждую из представленных должностей можно разделить еще более детально. Например, специализации тестировщика можно разделить как по типу тестируемого программного обеспечения (веб-сайты, настольные и мобильные приложения, сервисы, встраиваемые системы и т.д.), так и по способу тестирования (ручное или автоматизированное) и используемым инструментам.\nДля применяемых при разработке ПО инструментов, технологий характерна определенная динамика популярности. Так, например инструменты для разработки мобильных приложений, которые использовались 5 лет назад, будут неприемлемы из-за развития соответствующей отрасли. В работе [5] рассматривается задача мониторинга и анализа востребованных навыков в ИТ-сфере.\nРазличные сервисы позволяют отслеживать мировую динамику популярности языков программирования (ЯП). Для иллюстрации на рис. 4 выбраны 9 достаточно популярных ЯП.\nПо графику можно отследить, что популярный в начале 2000-х язык программирования Delphi после 2015 стал практически не востребован, а новые ЯП Go и Swift достаточно быстро набирают популярность. Многие ЯП являются языками общего назначения, т.е. с помощью них можно решать задачи различного плана. Например с помощью ЯП Python можно разрабатывать веб-приложения, решать задачи Data mining, создавать сценарии автоматизированного тестирования или скрипты для помощи системному администратору. Так же проводятся отдельные исследования по актуальности технологий. В работе [7] исследуется большое количество файлов исходного кода проектов, размешенных на GitHub c целью определить популярность языков программирования, а так же их совместимость друг с другом.\nПриведенные примеры показывают, что необходимо регулярно выполнять мониторинг и анализ потребностей рынка в специализациях, а так же отслеживать динамику популярности как специализаций в общем, так и отдельных требований. Для этого можно использовать открытые источники информации, такие как сайты объявлений о работе. На интернет-ресурсе HeadHunter (hh.ru) по запросу «Разработчик» находится более 30 тысяч вакансий по России.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nС 30 декабря 2017 г. вступил в силу приказ об утверждении стандарта следующего поколения ФГОС 3++ [3]. Одно из ключе-\nСовременные информационные технологии и ИТ-образование\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nТаблица 1. Классификация из 24 ИТ-должностей по версии рекрутинговых агентств группы «КАУС» Table 1. Classification of 24 IT duty positions according to the recruitment agencies of the KAUS group\nпрограммист JavaScript\tпрограммист IOS (Swift / ObC)\tпрограммист SQL / Oracle\nHTML-верстальщик\tпрограммист Android (java)\tDevOps\nweb-дизайнер\tпрограммист Unity3d (c#)\tадминистратор 1С\nпрограммист PHP\tпрограммист Unreal Engine (C++)\tSEO-специалист\nпрограммист Ruby\tпрограммист 1С\tменеджер проектов\nпрограммист Python\tпрограммист С++ / С\tруководитель отдела IT\nпрограммист Java\tсетевой инженер\tсистемный аналитик\nпрограммист C# (.NET)\tсистемный администратор\tтестировщик\nВостребованные специализации\nНовыетехнологии\nОтзывы о подготовке специалистов\nПредпочтения, уровень подготовки контингента\nФГОС,\nпроф. стандарты\nОбратная связь по\nрезультатам\nобучения\nпредыдущих наборов Ресурсы\nВыпускающая кафедра\nУправление ООП\nУправление профессиональными компетенциями\nУправление общеобразовательными и гуманитарными компетенциями\nУправление профессиональными дисциплинами\nУправление общеобразовательными и гуманитарными дисциплинами\nÎ\nÎ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМин. Обр. (ФГОС 3++)\nУчебно-методическое управление\nРис. 3. Детализация блока управления ООП Fig. 3. Detailing the control unit OOP\n10%\n■\tJava Python PHP\n■\tJavascript\n■\tObjective-C\n■\tSwift\n■\tRuby Delphi\n■\tGo\n2005\n2010\n2015\nРис. 4. Мировая динамика популярности языков программирования с 2002 по 2018 гг. по версии сервиса PYPL [6] Fig. 4. World dynamics of the popularity of programming languages from 2002 to 2018. according to the PYPL service version [6]\nVol. 14, no 4. 2G1S ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\nвых изменений в новом поколении стандартов заключается в том, что профессиональные компетенции должны быть определены на основе профессиональных стандартов из реестра Министерства труда. Таким образом, при подготовке нового учебного плана вуз может включить профессиональные компетенции, необходимые web-разработчику или администратору баз данных.\nТак профессиональный стандарт web-разработчика определяет основную цель вида профессиональной деятельности и трудовые функции, такие как верстка страниц интернет-ресурсов и кодирование на языках web-программирования.\nНесмотря на подробную детализацию, профессиональный стандарт не содержит описание конкретных технологий и инструментов, необходимых для выполнения профессиональных задач. Стандарт должен быть достаточно универсальным, а информационные технологии постоянно развиваются, и вместе с ними развиваются инструменты разработки, и периодически появляются новые. Однако указанные задачи можно решить, как правило, несколькими различными инструментами или технологиями. В табл. 1 представлены требования из двух вакансий веб-разработчика, которые, не смотря на ряд схожих требований заметно отличаются.\nТаблица 2. Сравнение требований из вакансий для\nвеб-разработчика Table 2. Comparison of vacancies' requirements for web developers\nФрагмент объявления о вакансии № 1\nТехнологии PHP7, MySQL, 1C-Bitrix\nПонимание принципов работы ООП, шаблонов проектирование Навыки работы с чужим кодом\nОпыт работы с SQL Умение планировать свою работу\nБазовые навыки работы с HTML5 и CSS3, использование jQuery Плюсом будет опыт работы с Git\nФрагмент объявления о вакансии № 2\nОпыт разработки на Python\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nОпыт web-разработки с применением\nDjango и/или Tornado\nОпыт разработки RESTful HTTP API на\nDjango REST Framework\nОпыт работы с nginx, Redis, MySQL\nПлюсом будет опыт client-side\nразработки: HTML, CSS, JavaScript,\njQuery, Angular JS и другие JavaScript-\nбиблиотеки\nПлюсом будут навыки системного администрирования Unix/Linux и знание GIT.\nПоэтому возникает задача связывания компетенций с технологиями. Кроме того, существующие стандарты охватывают далеко не весь спектр профессиональной деятельности, поэтому часть компетенций необходимо будет определять без них.\nВ работе [8] представлена семантическая сеть образовательного процесса подготовки магистрантов, на которой представлена связь между требованиями работодателей, компетенциями, должностями и задачами профессиональной деятельности (рис. 5), которую можно использовать при детализации процесса управления ООП.\nЛюбой процесс управления предполагает воздействие на какой-то объект для достижения им требуемого состояния. Однако, далеко не всегда сразу понятно, к какому состоянию необходимо стремиться. Поэтому для управления профессиональной частью ООП (рис.6) на первом этапе выполняется мониторинг рынка и анализ востребованных специализаций и требований.\nРис. 5. Семантическая сеть образовательного процесса подготовки магистрантов\nFig. 5. Semantic network of the educational process of preparing undergrad-uatesЗатем выполняется предварительное сопоставление специализаций и профессиональной части ООП. Это необходимо для того, чтобы определить координаты, в которых сейчас находится профессиональная часть ООП - какие специализации представлены лучше, а какие хуже. Данная оценка в первую очередь будет опираться на материалы профессиональных дисциплин учебного плана, как на наиболее полный источник информации о профессиональной части ООП.\nПолучив такую оценку, можно будет приступить к процедуре принятия решения о выборе целевого состояния профессиональной части ООП - насколько нужно улучшить соответствие тем или иным специализациям. При этом необходимо будет соблюдать множество ограничений. В первую очередь это ФГОС и ресурсы кафедры. В результате принятия решения будет определено целевое состояние ООП, для соответствия которому необходимо будет скорректировать набор ПК, а уже на основе него набор и структуру дисциплин.\nУправление профессиональными дисциплинами предполагает определение содержания дисциплин, распределение фонда зачетных единиц, определение порядка изучения и распределения по учебным семестрам. При этом потребуется учитывать обратную связь по предыдущим учебным семестрам, внутренние связи между дисциплинами, а также уровень контингента. Для выполнения перечисленных задач управления необходима формализация следующих сущностей:\n•\tспециализация;\n•\tтребование;\n•\tкомпетенция;\n•\tдисциплина;\n•\tресурсы кафедры;\n•\tограничения ФГОС;\n•\tуровень контингента;\n•\tобратная связь.\nДля анализа требований рынка труда определим модель специализации , которая обладает следующими атрибутами:\nСовременные информационные технологии и ИТ-образование\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nРис. 6. Схема управления профессиональной частью основной образовательной программы Fig. 6. Management scheme of the professional part of the main educational program\nS = {Р , D , R, Rp},\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nI ^ б' Б' г Б-\"\nгде:\nР8- востребованность (% отношение среди выборки);\nDs - динамика востребованности (за время наблюдений);\nRs - список требований к специализации;\nRps - значения приоритетов среди требований.\nМодель требования R определяется с помощью описания соответствующей требованию предметной области:\nRm - идентификатор требования;\nRr - вектор ключевых блоков предметной области {г0 г1 ... гм гД, где t - количество блоков.\nПри этом, разные специализации могут иметь общие требования, и наоборот.\nТаким образом, с помощью модели специализации можно описать как запросы на подготовку специалистов для конкретной организации, так и обобщенные требования по должностям, представленные на рынке труда.\nДля проверки определенной модели специализации был выполнен анализ требований рынка труда в ИТ-сфере. Сформированная тестовая выборка содержит 80 объявлений вакансий г. Брянска по запросам «Программист/Разработчик», полученных из открытых источников (сайтов объявлений и сайтов организаций).\nПостановка задачи:\n1)\tВыделить ключевые требования объявлений\n2)\tВыделить группы объявлений с похожими требованиями\n3)\tПроанализировать результаты группировки.\nИз объявлений были выделены ключевые требования к соискателю. Данная процедура была выполнена вручную, но её можно автоматизировать, если применить инструменты анализа естественного языка и сформировать вспомогательные онтологии.\nТаблица 3. Пример выделения требований Table 3. Example of highlighting the requirements\nФрагмент объявления о вакансии\tВыделенные требования\nТребования:\tJavaScript\nВысшее образование; Знание JavaScript;\tHTML5\nСемантическая вёрстка HTML5+CSS3;\tCSS3\nПонимание основных принципов ООП и\tООП\nобласти их применения в JavaScript;\tAngular.js\nЖелательно: Angular или React, системы\tReact.js\nсборки (Gulp или Webpack), CSS-фреймворк.\tGulp\nКлючевые навыки: JavaScript, HTML5, CSS3,\tWebpack\nООП AngiilarJS Front-end\nДля выделения групп похожих по требованиям объявлений было принято решение использовать алгоритм кластеризации ^ОРЕ, который оперирует данными, представленными в виде транзакций [9].\nВ табл. 4 продемонстрирован фрагмент получившихся транзакций на основе разбора объявлений. Всего получилось около 500 подобных транзакций.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТаблица 4. Пример транзакционных данных для одной вакансии\nTable 4. Example of transactional data for one vacancy\nИдентификатор\tИдентификатор\tНазвание требования\n81\t5\tAJAX\n81\tЗ2\tCSS\n81\tЗ1\tHTML\n81\tЗ5\tJAVASCRIPT\n81\t4\tJQUERY\n82\t1\tPHP\n82\t191\tSQL\n82\tЗ9\tXML\n82\t71\tЧИСТЫЙ КОД\nАлгоритм ^ОРЕ был предложен в 2002 году группой китайских ученых [10]. Он обеспечивает более высокую производительность и лучшее качество кластеризации в сравнении с ал-\nVol. 14, no 4. 2G1S ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\nгоритмом Largeltem и многими иерархическими алгоритмами. Задача кластеризации транзакционных данных состоит в получении такого разбиения всего множества транзакций, чтобы похожие транзакции оказались в одном кластере, а отличающиеся друг от друга - в разных кластерах.\nВ основе алгоритма кластеризации CLOPE лежит идея максимизации глобальной функции стоимости, которая повышает близость транзакций в кластерах при помощи увеличения параметра кластерной гистограммы.\nРассмотрим пример из 5 объявлений, в которых встречаются следующие требования:\na)\tJavaScript;\nb)\tPHP;\nc)\tCSS;\nd)\tSQL;\ne)\tС++;\nf)\tЧистый код.\nТак же данные объявления формируют 5 транзакций: {(a,b), (a,b,c), (a,c,d), (d,e), (d,e,f)}. Сравним два произвольных разбиения на кластеры:\n(1)\t{{ab, abc, acd}, {de, def}}\n(2)\t{{ab, abc}, {acd, de, def}}.\nДля этого в каждом варианте разбиения в каждом кластере определим количество вхождений в него каждого элемента транзакции. Далее вычислим высоту H и ширину W кластера. Например, кластер {ab, abc, acd} имеет вхождения a:3, b:2, c:2 с H=2 и W=4. На рис. 7 это представлено в виде гистограмм.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3\nгп\nabed def №=2.0, W=4 Я=1.67, W= Ъ {ab, abc, acd} {de, dej)\nabc H=\\ .67, №=3 {ab, abc}\nd e a с f H= 1.6, W=5 {acd, de, def]\nЩС) = |ЩС)|;\nЯ(С) = 5(С)/ЩС).\nГистограммой кластера С называется графическое изображение его расчетных характеристик: по оси ОХ откладываются объекты кластера в порядке убывания величины Осф, С), а сама величина Осс (^ С) - по оси OY (рис. 8).\n1\nН=1.6\n\"Г\"\n3 2 1 Û\ns=e\n-\nd е а с f\nобъект\nW=5\nРис. 7. Гистограммы с разбиениями кластеров Fig. 7. Cluster Split Histograms\nКачество разбиений кластеров оценим на основе высоты H и ширины W. Кластеры {de, def} и {ab, abc} имеют одинаковые гистограммы, поэтому считается, что они равноценны. Гистограмма для кластера {ab, abc, acd} содержит 4 различных элемента и имеет площадь 8 блоков (H=2.0, H/W=0.5), а кластер {acd, de, def} - 5 различных элементов с такой же площадью (H=1.6, H/W=0.32). Разбиение №1 лучше, поскольку обеспечивает большее наложение транзакций друг на друга (высота H выше).\nРассмотрим формальное описание алгоритма. Пусть имеется база транзакций D, состоящая из множества транзакций {tj, t2, ..., tn}. Каждая транзакция есть набор объектов {ц, ..., im}. Множество кластеров {Сг, ..., Ck} есть разбиение множества\n{tj.....tn}, такое, что ^U ...UCt = {tj.....tn} и С. J 0 л с П C=0, для 1<i,\nj<k. Каждый элемент С. называется кластером, n - количество транзакций, m - количество объектов в базе транзакций, k - число кластеров.\nКаждый кластер имеет следующие характеристики:\nD(C) - множество уникальных объектов;\nOcc(i,C) - количество вхождений (частота) объекта i в кластер C;\nS(C) = £te D(c)Occ (i,C) = 'Zttec\\ti\\';\nРис. 8. Иллюстрация гистограммы кластера Fig. 8. Cluster Histogram Illustration\nНа рис. 7 S (C) = 8, т.е. соответствует площади прямоугольника, ограниченного осями координат и пунктирной линией. Чем больше значение H, тем более похожи две транзакции. Поэтому алгоритм должен выбирать такие разбиения, которые максимизируют H.\nНо учитывать только значение высоты H недостаточно. Возьмем набор, состоящий из 2х транзакций: {abc, def}. Они не содержат общих объектов, но разбиение {{abc, def}} и разбиение {{abc}, {def}} имеют равную высоту H=1, а значит - оба варианта разбиения равноценны. Поэтому для оценки вместо H(C) лучше использовать градиентС(С) = Я(С)/Ж(С) = S(C)/W(C)2. Тогда разбиение {{abc},{def}} будет лучше (градиент каждого кластера равен 1/3 против 1/6 у разбиения {{abc, def}}).\nВыведем формулу глобального критерия - функции стоимости Profit(C):\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nг* SCQ\nProfit(C) =\nf=il Ci\nIÎ=1 IQI\nгде IQI - количество транзакций в /-том кластере, k - количество кластеров, r - положительное вещественное число большее 1.\nПараметр r называется коэффициентом отталкивания (repulsion), который регулирует уровень сходства транзакций внутри кластера, а так же влияет на финальное количество кластеров. Этот коэффициент подбирается пользователем. Чем больше r, тем ниже уровень сходства и тем больше кластеров будет сгенерировано.\nКластеризация была выполнена с помощью аналитической платформы Loginom 6.1 [10]. Коэффициент отталкивания кластеров был подобран опытным путем. В итоге получилось сформировать 19 кластеров, которые при дальнейшем анализе были объединены в 10. Ниже приведены примеры нескольких кластеров (табл. 5). В скобках после требования указано его количество в кластере. Полученные кластеры отражают одну из специализаций ИТ-специалиста.\nСовременные информационные технологии и ИТ-образование\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nТаблица 5. Примеры полученных кластеров специализаций Table 5. Examples of the obtained specialization clusters\nКластер\tСпециализация\n#1 (19 объявлений): JAVASCRIPT (lS), PHP (l4), MYSQL (l2), GIT (ll), ООП (lO), JQUERY (9), HTML (9), ШАБЛОНЫ ПРОЕКТИРОВАНИЯ (8), lC БИТРИКС (7), SQL (7), AJAX (б), CSS (6), LINUX (6), YII (S), HTMLS (S), РАБОТА С ЧУЖИМ КОДОМ (4), CSS3 (З), PHP7 (З), API (З), КОМАНДНАЯ РАЗРАБОТКА (З), MS SQL (2), PHP FRAMEWORK (2), PHPS (2), PYTHON (2), POSTGRESQL (2), REACT.JS (2), REST API (2), SEO (2), SVN (2), ЧИСТЫЙ КОД (2), NGINX (2), VAGRANT (2), YII2 (2).\tпрограммист PHP / JavaScript /1С Битрикс / Python\n#2 (11 объявлений): JAVASCRIPT (9), PHP (8), CSS3 (6), HTML (6), JQUERY (6), HTMLS (S), lC БИТРИКС (4), AJAX (4), MYSQL (4), CMS (З), CSS (З), GIT (З), XML (З), PHPS (З), АДАПТИВНАЯ ВЕРСТКА (2), КРОССБРАУЗЕРНАЯ ВЕРСТКА (2), CMS WORDPRESS (2), JAVA (2), ВЕРСТКА (2).\tпрограммист JavaScript / PHP / 1С битрикс / Java\n#3 (4 объявления): JAVASCRIPT (З), REACT.JS (З), ANGULAR.JS (2), CSS3 (2), GULP (2), HTMLS (2), WEBPACK (2), ООП (2).\tпрограммист JavaScript\n#4 (б объявлений): GIT (4), IOS (4), ООП (4), РАБОТА С ЧУЖИМ КОДОМ (4), КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА (З), ANDROID (2), C++ (2), JAVA (2), OBJECTIVE-C (2), REDMINE (2), КОМАНДНАЯ РАЗРАБОТКА (2), IOS CUSTOM UI (2).\tпрограммист iOS / Android\n#5 (4 объявления): C++ (З), C++ STL (З), АРХИТЕКТУРА WINDOWS (З), C++ BOOST (2), АНАЛИЗ МАШИННОГО КОДА (2), САОД (2), ШАБЛОНЫ ПРОЕКТИРОВАНИЯ (2).\tПрограммист С++\n#6 (5 объявлений): JAVA (S), РЕЛЯЦИОННЫЕ СУБД (4), ORACLE (З), C++ (2), JAVA EE (2), SPRING FRAMEWORK (2), SQL (2).\tПрограммист C++/Java\n#7 (5 объявлений): КОМАНДНАЯ РАЗРАБОТКА (S), РАЗРАБОТКА НА ПЛАТФОРМЕ lC (4), СКД (4), РАБОТА С ЧУЖИМ КОДОМ (4), lC ТИПОВЫЕ КОНФИГУРАЦИИ (З), КЛИЕНТ-СЕРВЕРНАЯ АРХИТЕКТУРА (З), ОПТИМИЗАЦИЯ ВСТРОЕННЫХ ЗАПРОСОВ (З), ОПТИМИЗАЦИЯ КОДА (З).\tПрограммист 1С\nПроанализировав полученные результаты кластеризации можно сделать следующие выводы:\n1.\tВ объявлениях разная детализация требований. В тестовой выборке для объявлений по веб-разработке требования описаны более детально, чем по другим направлениям. Как следствие для этого направления получилось несколько разных кластеров с различающимися требованиями.\n2.\tВ некоторых объявлениях указано требования сразу по нескольким ЯП.\n3.\tВ нескольких кластерах есть общие требования, которые не зависят от специализации (например, GIT и ООП).\nКоличество объявлений в кластере говорит о популярности специализации. Для получения более достоверной и полноценной информации необходимо регулярно выполнять мониторинг. Это позволит получить дополнительные данные, например, динамику востребованности.\nДля анализа соответствия дисциплин учебного плана и требований к специалистам определим модели дисциплины. В работе [12] представлено описание схожей задачи - анализа соответствия дисциплин учебного плана и требований к специалистам. Описанный подход не учитывает связи требований в рамках одной специализации, а также использует обобщенную модель дисциплины без детализации.\nОпределим модели дисциплины и модуля дисциплины на основе [13]. Модель дисциплины D:\nD = {Nd,Ed,Md},\nгде:\nNd - идентиф и катор учебной дисциплины;\nEd - труд о емкость учебной дисциплины, выраженная в зачетных единицах;\nMD - множество модулей, составляющих учебную дисциплину.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМодуль дисциплины M определяется моделью с атрибутами M = {Nm,Im,Dm,\nгде:\nNm - идентификатор модуля;\n1т, - индивидуальный код модуля;\n/)т - указатель пр инадлежности модуля к учебной дисциплине;\nЕт - общая трудоемкость модуля, выраженная в зачетных единицах;\nТт - множество термов, составляющих модуль;\nй£т- вектор связи модуля с требованиями\n■■■\t, где Щ.т -\nмера связи требования ; и модуля дисциплины т в выбранной числовой шкале.\nТогда суммарное соответствие множества профессиональных дисциплин требованию г определяется как:\nп\nКг = ^ Е-ПЦ X Т^Г.ПЦ' ¿=1\nгде т - общее количество модулей всех дисциплин в учебном плане.\nИтоговое соответствие дисциплин учебного плана специализации S определяется в виде вектора:\nк* = (ДГ0 ЯГ1 ■■■ Кгк_г Пгк),\nгде ^ - общее количество требований в специализации.\nДалее можно сопоставить вектор значений и значения приоритетов Яр5 - предполагается, что чем значимее требование, тем большее количество часов в рамках дисциплин должно ему соответствовать.\nМодель дисциплины D можно заполнить частично по содержанию документа рабочей программы дисциплины. Останется посчитать силу связей модулей дисциплин с требованиями. Один из очевидных способов это сделать - применить групповую экспертизу: пригласить нескольких преподавателей оценить необходимую метрику.\n_ хцк\nВ этом случае =\t- среднее арифметическое\nэкспертных оценок .Х^связи требования ; и модуля], п - количество экспертов, принимающих участие в экспертизе.\nВ учебном плане направления подготовки «Программная инженерия» 2014 г. набора 33 дисциплины с почти 300 разделами суммарно, связанные с профессиональными компетенциями. Со всеми разделами необходимо сопоставить 200 требований.\nVol. 14, no 4. 2G1S ISSN 2411-1473 sitit0.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\nТак, для этого понадобится задать суммарно 60000 вопросов экспертам, причем сделать это нужно будет несколько раз для получения нескольких оценок от разных экспертов. Подобный опрос будет провести проблематично, поэтому пока искусственно ограничим размерность задачи.\nВыберем часть дисциплин и отберем для них те требования, с которыми они могут иметь связи. Были выбраны следующие 9 дисциплин: базы данных; визуальное программирование; объектно-ориентированное программирование, программирование Windows-приложений, программирование в среде Microsoft .Net, программирование на платформе 1С Предприятие, разработка Web-узлов и приложений, сети ЭВМ и телеком-\nмуникации, специальные разделы Web-программирования;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДля каждой дисциплины была сформирована группа из трех экспертов. Цель опроса - для каждого раздела дисциплины определить силу связи с требованием специализации. Для опроса экспертов были сформированы специальные матрицы в формате XLSX (рис. 9).\nШкала оценивания силы связи:\n•\t«Сильная» (1.0);\n•\t«Средняя» (0,66);\n•\t«Слабая» (0,33);\n•\t«Отсутствует» (0.0).\nМодул ь\\Требование\tPOSTGRESQL\tMS SQL\tMYSQL\tСУБД\tSQL\tС++\tС#\tООП\tGIT\tJAVASCRIPT\tРНР\nВведение. Основные термины и\nопределения.\tслабая\tслабая\tслабая\tсредняя\tсредняя\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nБазовые понятия. Модели\nданных.\tслабая\tслабая\tслабая\tсредняя\tсредняя\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nРеляционная модель.\nНормализация БД\tслабая\tслабая\tслабая\tслабая\tслабая\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nОсновы работы с СУБД MS-SQL\nServer.\tслабая\tсильная\tслабая\tсильная\tсредняя\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nРеляционный язык\nманипулирования данными SQL\tсредняя\tсредняя\tсредняя\tсредняя\tсильная\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nМетоды поддержания\nреляционной целостности и\nзащита баз данных.\tсредняя\tсредняя\tсредняя\tсильная\tсредняя\tотсутс\tотсутств\tотсутству\tотсутству\tотсутствует\tотсутствует\nПерспективные направления\tслабая\tслабая\tслабая\tсильная\tсильная\tслаба)\tслабая\tслабая\tотсутству\tотсутствует\tотсутствует\nРис. 9. Фрагмент заполненной матрицы опроса для дисциплины «Базы данных» Fig. 9. Fragment of the completed survey matrix for the discipline \"Database\"\nОднако в данном случае, из-за выбранного ограничения количества дисциплин и требований, итоговая оценка будет неполноценной.\nТак же были зафиксированы другие метрики выбранного подхода:\n1)\tСреднее время ожидания результатов оценки от экспертов - 1 неделя (минимум 2 дня, максимум 25 дней);\n2)\tКоличество разных экспертов, которые были привлечены к опросу - 13 человек.\nДля оценки согласованности мнений экспертов использовался коэффициент конкордации Кендала. Коэффициент кон-кордации W изменяется от 0 до 1. В случае полного совпадения оценок экспертов W = 1, в случае полного расхождения мнений экспертов W = 0. Результаты оценки согласованности экспертных мнений представлены в табл. 6.\nТаблица 6. Результаты сравнения экспертных оценок Table 6. The results of the comparison of expert assessments\nМожно сделать следующие выводы. Опрос экспертов занял продолжительное время, при том, что в качестве экспериментальных данных было выбрано 9 дисциплин и требования из 80 вакансий. В условиях реального мониторинга требований к ИТ-вакансиям по всей России и сопоставления со всеми профессиональными дисциплинами из учебного плана, такой подход будет неэффективным.\nМежду оценками экспертов обнаружилось заметное расхождение, причина которого состоит в том, что одной лишь информации из рабочей программы дисциплины недостаточно для точного ответа. Необходимо также при оценке связи опираться на материалы методических указаний и конспектов лекций. Это увеличит время оценки, если не использовать никаких средств автоматизации. Можно добавить, что некоторые дисциплины допускают использование разных аналогичных технологий. То, какая технология будет использоваться в качестве вспомогательного инструмента для освоения материала дисциплины, определяется конкретным студентом. Эту информацию необходимо собирать дополнительно, например, анализируя исходный код решений в процессе обучения [7]. Для выполнения опроса было привлечено более 10 экспертов, что было довольно проблематично. Автоматизация процедуры оценивания должна так же уменьшить требуемое количество экспертов. Таким образом, методика оценки соответствия дисциплин требованиям работодателей требует доработки.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЗаключение\nПроцесс управления образовательной программой сложный и многогранный. Повышения эффективности управления можно достигнуть за счет улучшения управления разными\n№\tДисциплина\tКол-во экспертов\tКол-во вопросов\tКоэффициент конкордации\n1\tБазы данных\t3\t77\t0,9\n2\tВизуальное программирование\t3\t56\t0,75\n3\tОбъектно-ориентированное программирование\t3\t70\t0,72\n4\tПрограммирование Windows-приложений\t3\t104\t0,47\n5\tПрограммирование в среде Microsoft .Net.\t3\t90\t0,81\n6\tПрограммирование на платформе 1С Предприятие\t3\t126\t0,45\n7\tРазработка Web-узлов и приложений\t3\t476\t0,52\n8\tСети ЭВМ и телекоммуникации\t3\t120\t0,57\n9\tСпециальные разделы Web-про-граммирования\t3\t246\t0,52\nСовременные информационные технологии и ИТ-образование\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\nIT education: methodology, methodological support\nблоками. При этом одно из наиболее важных свойств образовательных услуг с точки зрения потребителя - будущая конкурентоспособность на рынке труда. Для сегмента информационных технологий конкурентоспособность определяется владением актуальными технологиями. Спектр ИТ-специализаций достаточно большой и динамично изменяется. Поэтому возникает задача отслеживания популярных специализаций и связанных с ними требований, а так же подстройки под них профессиональных компетенций и содержимого профессиональных учебных дисциплин. Данное воздействие будет способствовать улучшению конкурентоспособности образовательной программы.\nДля реализации данной задачи была разработана схема управления профессиональной частью ООП и подробно рассмотрены этапы мониторинга специализаций и оценки соответствия специализациям содержимого профессиональной части ООП на основе материалов рабочих программ дисциплин. Произведена апробация предложенных моделей и оценена размерность задачи.\nТребуется дальнейшая работа над математическим аппаратом. Разработанные модели специализаций, требований и дисциплин необходимо детализировать, а так же формализовать дополнительные сущности. Указанные модели предполагается использовать для реализации алгоритма определения целевого состояния профессиональной части ООП. При этом необходимо усовершенствовать подход к оценке соответствия модулей дисциплин и требований специализаций.\nНа основе предложенной схемы управления планируется реализовать автоматизированную систему, которая будет интегрирована с существующим специализированным программным обеспечением для управления контингентом, учебными планами и образовательными курсами.\nСписок использованных источников\n[1]\tЗахарова А.А. и др. Информационная система оценки образовательных программ на основе требований работодателей // Современные проблемы науки и образования. 2015. № 2-1. С. 136. URL: https://elibraryru/item. asp?id=24122969 (дата обращения: 12.08.2018).\n[2]\tПономарева Л.А., Голосов П.Е. Разработка математической модели учебного процесса в вузе для повышения качества образования // Фундаментальные исследования. 2017. № 2. С. 77-81. URL: https://elibrary.ru/item. asp?id=28800201 (дата обращения: 12.08.2018).\n[3]\tПриказ Министерства образования и науки РФ от 19 сентября 2017 г. № 920 «Об утверждении федерального государственного образовательного стандарта высшего образования - бакалавриат по направлению подготовки 09.03.04 Программная инженерия». URL: http://www. garant.ru/products/ipo/prime/doc/71687608/ (дата обращения: 12.08.2018).\n[4]\tОбзор заработных плат. Информационные технологии // КАУС - кадровое агентство. [Электронный ресурс]. URL: http://www.kaus-group.ru/knowledge/salaries/salary-it/ (дата обращения: 12.08.2018).\n[5]\tИльин Д.Ю., Никульчев Е.В., Бубнов ГГ., Матешук Е.О. Информационно-аналитический сервис формирования актуальных профессиональных компетенций на основе патентного анализа технологий и выделения профессиональных навыков в вакансиях работодателей // При-\nкаспийский журнал: управление и высокие технологии. 2017. № 2(38). С. 71-88. URL: https://elibrary.ru/item. asp?id=29767419 (дата обращения: 12.08.2018).\n[6]\tPYPL PopularitY of Programming Language [Электронный ресурс]. URL: http://pypl.github.io/PYPL.html (дата обращения: 12.08.2018).\n[7]\tBissyandS T.F., Thung F., Lo D., Jiang L., RSveillere L. Popularity, Interoperability, and Impact of Programming Languages in 100,000 Open Source Projects // Proceeding of 2013 IEEE 37th Annual Computer Software and Applications Conference. Kyoto, 2013. Pp. 303-312. DOI: 10.1109/C0MPSAC.2013.55\n[8]\tМартынов В.В., Филосова Е.И., Ширяев О.В. Организация подготовки и информационная поддержка реализации динамических образовательных программ, учитывающих требования работодателя // Управление экономикой: методы, модели, технологии. 2014. C. 110-113. URL: https://elibrary.ru/item.asp?id=22689661 (дата обращения: 12.08.2018).\n[9]\tWang K, Xu C, Liu B. Clustering transactions using large items // Proceedings of the eighth international conference on Information and knowledge management (CIKM '99). Susan Gauch (Ed.). ACM, New York, NY, USA, 1999. Pp. 483-490. DOI: 10.1145/319950.320054\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[10]\tYang Y., Guan H, You J. CLOPE: A fast and Effective Clustering Algorithm for Transactional Data // Proceedings of the eighth ACM SIGKDD international conference on Knowledge discovery and data mining (KDD '02). ACM, New York, NY, USA, 2002. Pp. 682-687. DOI: 10.1145/775047.775149\n[11]\tАналитическая платформа Loginom [Электронный ресурс]. URL: https://loginom.ru (дата обращения: 12.08.2018).\n[12]\tЧистова Н.А., Волкова В.Н. Модели анализа соответствия дисциплин учебного плана и требований к специалистам // Информатика и кибернетика (ComCon-2016). 2016. С. 33-36. URL: https://elibrary.ru/item.asp?id=26506456 (дата обращения: 12.08.2018).\n[13]\tХаритонов И.М. Моделирование процесса построения учебного плана на основе формализованного представления учебной дисциплины // Открытое образование. 2011. № 2-1. URL: С. 21-32. https://elibrary.ru/item. asp?id=16384632 (дата обращения: 12.08.2018).\nПоступила 12.08.2018; принята в печать 10.09.2018; опубликована онлайн 10.12.2018.\nReferences\n[1]\tZakharova A.A. et al. Information system of educational programs assessment on the basis of employers requirements. Sovremennye problemy nauki i obrazovaniya = Modern problems of science and education. 2015; 2-1:136. Available at: https://elibrary.ru/item.asp?id=24122969 (accessed 12.08.2018). (In Russian)\n[2]\tPonomareva L.A., Golosov P.E. Development of a mathematical model of the educational process at the university to improve the quality of education. Fundamental'nye issledovaniya. 2017; 2:77-81. Available at: https://elibrary.ru/item. asp?id=28800201 (accessed 12.08.2018). (In Russian)\n[3]\tPrikaz Ministerstva obrazovaniya i nauki RF ot 19 sentyabrya 2017 g. № 920 «Ob utverzhdenii federal'nogo\nVol. 14, no 4. 2018 ISSN 2411-1473 sitito.cs.msu.ru\nModern Information Technologies and IT-Education\nИТ-образование: методология,\tВ.В. Калевко, Д.Г. Лагерев,\nметодическое обеспечение\tА.Г. Подвесовский\ngosudarstvennogo obrazovatel'nogo standarta vysshego obrazovaniya - bakalavriat po napravleniyu podgotovki 09.03.04 Programmnaya inzheneriya». Available at: http:// www.garant.ru/products/ipo/prime/doc/71687608/ (accessed 12.08.2018). (In Russian)\n[4]\tObzor zarabotnyh plat. Informacionnye tekhnologii. KAUS -kadrovoe agentstvo. Available at: http://www.kaus-group. ru/knowledge/salaries/salary-it/ (accessed 12.08.2018). (In Russian)\n[5]\tIl'in D.Yu., Nikul'chev E.V., Bubnov G.G., Mateshuk E.O. Information analysis service to identify current professional competencies based on patent analysis of the technology market and required skills in the vacancies of employers. Caspian journal: management and high technologies. 2017; 2(38):71-88. Available at: https://elibrary.ru/item. asp?id=29767419 (accessed 12.08.2018). (In Russian)\n[6]\tPYPL PopularitY of Programming Language. Available at: http://pypl.github.io/PYPL.html (accessed 12.08.2018).\n[7]\tBissyandé T.F., Thung F., Lo D., Jiang L., Réveillère L. Popularity, Interoperability, and Impact of Programming Languages in 100,000 Open Source Projects. Proceeding of 2013 IEEE 37th Annual Computer Software and Applications Conference. Kyoto, 2013, pp. 303-312. DOI: 10.1109/C0MPSAC.2013.55\n[8]\tMartynov V.V., Filosova E.I., Shiryaev O.V. Organizaciya podgotovki i informacionnaya podderzhka realizacii dinamicheskih obrazovatel'nyh programm, uchityvayushchih trebovaniya rabotodatelya. Upravlenie ekonomikoj: metody, modeli, tekhnologii. 2014, pp. 110-113. Available at: https:// elibrary.ru/item.asp?id=22689661 (accessed 12.08.2018). (In Russian)\n[9]\tWang K., Xu C., Liu B. Clustering transactions using large items. Proceedings of the eighth international conference on Information and knowledge management (CIKM '99). Susan Gauch (Ed.). ACM, New York, NY, USA, 1999, pp. 483-490. DOI: 10.1145/319950.320054\n[10]\tYang Y., Guan H., You J. CLOPE: A fast and Effective Clustering Algorithm for Transactional Data. Proceedings of the eighth ACMSIGKDD international conference on Knowledge discovery and data mining (KDD '02). ACM, New York, NY, USA, 2002, pp. 682-687. DOI: 10.1145/775047.775149\n[11]\tAnaliticheskaya platforma Loginom. Available at: https:// loginom.ru (accessed 12.08.2018). (In Russian)\n[12]\tChistova N.A., Volkova VN. Modeli analiza sootvetstviya disciplin uchebnogo plana i trebovanij k specialistam. Informatika i kibernetika (ComCon-2016). 2016, pp. 33-36. Available at: https://elibrary.ru/item.asp?id=26506456 (accessed 12.08.2018). (In Russian)\n[13]\tKharitonov I.M. Modeling Process of Building Curriculum Based on Formal Presentation of Academic Discipline. Open Education. 2011; 2-1:21-32. Available at: https://elibrary.ru/ item.asp?id=16384632 (accessed 12.08.2018). (In Russian)\nSubmitted 12.08.2018; revised 10.09.2018; published online 10.12.2018.\njjöütjjeä—ШШШШШШШШШШШШШШ^\nViktor V. Kalevko, postgraduate student of Informatics and Software Engineering Department, Bryansk State Technical University (10-B Harkovskaya Str., Bryansk 241035, Russia), ORCID: http://orcid.org/0000-0001-8152-3265, kalevko.gp@gmail.com\nDmitri G. Lagerev, Candidate of Engineering Sciences, Associate Professor of Informatics and Software Engineering Department, Bryansk State Technical University (10-B Harkovskaya Str., Bryansk 241035, Russia), ORCID: http://orcid.org/0000-0002-2702-6492, lagerevdg@mail.ru Aleksandr G. Podvesovskii, Candidate of Engineering Sciences, Associate Professor, Head of Informatics and Software Engineering Department, Bryansk State Technical University (10-B Harkovskaya Str., Bryansk 241035, Russia), ORCID: http://orcid.org/0000-0002-1118-3266, apodv@tu-bryansk.ru\nThis is an Open Access article distributed under the terms ofthe Creative Commons Attribution License (http://creativecommons.org/licenses/by/4.0), which permits unrestricted reuse, distribution, and reproduction in any medium provided the original work is properly cited.\nСовременные информационные технологии и ИТ-образование\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТом 14 № 4 (2018) ISSN 2411-1473 sitito.cs.msu.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/upravlenie-obrazovatelnoy-programmoy-vuzov-v-kontekste-podgotovki-konkurentosposobnyh-razrabotchikov-programmnogo-obespecheniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/programmnye-instrumenty-i-tehnologii-analiza-potoka-internet-memov",
    "slug": "programmnye-instrumenty-i-tehnologii-analiza-potoka-internet-memov",
    "title": "ПРОГРАММНЫЕ ИНСТРУМЕНТЫ И ТЕХНОЛОГИИ АНАЛИЗА ПОТОКА ИНТЕРНЕТ-МЕМОВ",
    "abstract_description": "Меметика социальных сетей является востребованным разделом научных исследований. Рассматривается проблематика распространения мемов, математическое моделирование процессов распространения, инструментарий социально-политических исследований. Показано, что жизненный цикл потока интернет-мемов и отдельного мема имеет свою специфику и экологию. Задача идентификации реального этапа жизненного цикла (ЖЦ) существенно труднее, чем для экономического ЖЦ предприятия. В общем случае задача является некорректной, зависимой от наличия данных о выделенном потоке мемов в сети. Мониторинг сети для идентификации ЖЦ мема связан с системой запросов, технологией автоматического формирования баз данных (знаний) и последующим использованием ее в прогнозировании на основе вывода по аналогии с использованием нейросетевых подходов. Рассмотрен начальный этап проекта исследований ЖЦ потока интернет-мемов.",
    "full_text_body": "\n\n\n\n\uFEFFУДК: 004.89 MSC2010: 68T27\nПРОГРАММНЫЕ ИНСТРУМЕНТЫ И ТЕХНОЛОГИИ АНАЛИЗА\nПОТОКА ИНТЕРНЕТ-МЕМОВ1 © М. С. Германчук, М. Г. Козлова, В. А. Лукьяненко\nКрымский ФЕДЕРАЛЬНЫЙ УНИВЕРсИТЕТ ИМ. В. И. ВЕРНАДСКОГО ТАВРИЧЕСКАЯ АКАДЕМИЯ ФАКУЛЬТЕТ МАТЕМАТИКИ И ИНФОРМАТИКИ\nпросп. Академика Вернадского, 4, Симферополь, 295007, Российская Федерация e-mail: m.german4-uk@yandex.ru, art-inf@mail.ru, art-inf@yandex.ru\nSoftware tools and technologies for analyzing the flow of Internet memes.\nGermanchuk M. S., Kozlova M. G., Lukianenko V. A.\nAbstract. Memetics of social networks is a popular section of scientific research. The article deals with the problems of meme distribution, mathematical modeling of distribution processes, and tools for socio-political research. It is shown that the life cycle of a stream of Internet memes and a separate meme has its own specifics and ecology. The task of identifying the real stage of the life cycle (LC) is much more difficult than for the economic LC of the enterprise. In General, the problem is incorrect, depending on the availability of data about the selected meme stream in the network. Network monitoring for the identification of the meme LC is associated with the query system, the technology of automatic database formation (knowledge) and its subsequent use in forecasting based on the conclusion by analogy with the use of neural network approaches. The initial stage of the research project on the flow of Internet memes is considered.\nOnline social network communities act as consumers of information flows that build the \"artificial intelligence\" of their members. Among different types of information circulating within social networks, of particular interest are Internet Memes (IM). They are presented in a visual, easy to understand image-based form and have a viral spreading pattern. The already developed process of IM flow propagation contributes to the formation of both positive and negative stereotypes. Social and political effects of IM are mild and manageable. The information field is self-organized according to the principle of least resistance in a destructive direction, and a great effort is required to manage such a process. That said, comprehensive interdisciplinary studies aimed at examining the IM flow seem quite relevant and are in high demand. An emerging area of interdisciplinary research called \"memetics\" makes an impact on algorithms for solving the NP-hard problems of discrete optimization in the form of evolutionary algorithms related to the viral nature of information propagation on the Internet. And vice versa, the methods of studying high-dimensional complex networks together with associated optimization problems are implicated in the analysis of processes occurring in online networks. While it is possible to\nИсследование выполнено при финансовой поддержке РФФИ и ЭИСИ в рамках научного проекта № 20-011-31460. (Acknowledgments: The reported study was funded by RFBR and EISR, project number 20-011-31460)\nexamine the life cycle of a single meme, its circulation often gives rise to a flow of derivative memes. Depending on the introduced concept of a meaning proximity (analogy, precedence), the calculated flow rates and intensity parameters will be different. Taking into account the probabilistic nature of the process, it is still important to be able to work with a single meme or a small number of memes. Typically, the life cycle is qualitatively displayed as a graph of a function that depends on time, with a characteristic increase, maximum value, period of stabilization and degradation (the function value tends to zero). It is difficult to find out a stage related to the IM flow under examination. The needed parameters can be extracted from a close data set relevant to the analyzed memes as a result of regular monitoring of the process. At the same time, quantitative characteristics must be measured in different parts of a circulation network, which is complicated. As a result, to identify the life cycle of the IM flow, it is necessary to involve expert communities, mathematical modeling, as wells as the Big Data and Data Mining technologies. Based on the logic of dynamic systems, mathematical models of spread of viral diseases, rumors, diffuse processes, etc., require adaptation to networks that change over time. In the simplest-case scenario, it might be sufficient to obtain statistical data on the quantity, frequency, and so on for the flow of tested memes followed by regression and factor analyses. On the other hand, similar to high-dimension dynamical systems, one can expect the presence of channels and jokers low-dimension models that can qualitatively reflect the ongoing processes of IM propagation. The identification and prediction of the IM flow life cycle are primarily centered on studying the IM effects on the activist youth audience and effective management needed to eliminate possible destructive influences. For example, the life cycle of the IM \"cats\" would let us study the audience most sensitive to such an influence, and a corresponding cluster of related communities. Of note is that only indirectly measured data would be available for further analysis. The acts of creating and propagating one's own IM flow must comply with actual legal prohibitions and regulations. Of most interest is to find a prospective test IM, which appears to be quite doable given the contingent nature of meme emergence. That said, studying the IM life cycles is of great importance and implies the creation of relevant tools for accumulating data, analyzing the processes of IM propagation and making a corresponding software product to help process memes in automatic mode.\nThe paper provides the results of the initial stage of work on the project designed to study a spread dynamics of Internet memes. The importance of developing specific tools for collecting, processing and studying the IM life cycle is emphasized. Here we have elaborated a general structure, visualization methods and ways of implementing a software product in the life cycle analysis. For its further development, we intend to implement a neural network approach for the tasks of intellectualized processing of the flow of Internet memes in order to give an estimate of their impact on the audience of Internet communities.\nKeywords: Internet memes; analysis, modeling, identification, forecasting and management of the flow of Internet memes; technologies of socio-political use of memes\nВведение\nСообщества социальных интернет-сетей являются потребителями потока информации, которая формирует «искусственный интеллект» участников. В соцсетях среди распространенной информации выделаются интернет-мемы (ИМ), которые визуальны, образны, просты для восприятия и имеют вирусный характер распространения. Существует развитый процесс распространения потока ИМ, способствующий формированию как положительных, так и отрицательных стереотипов. Социально-политическое воздействие ИМ является мягким и управляемым. Самоорганизация информационного поля идет по принципу наименьшего сопротивления в деструктивном направлении и необходимы большие усилия для управления таким процессом. Поэтому всесторонние междисциплинарные исследования по изучению потока ИМ являются востребованными и актуальными. Формирующееся направление междисциплинарных исследований под названием «меметика» оказывает влияние на алгоритмы решения ЖР-трудных задач дискретной оптимизации в виде эволюционных алгоритмов, связанных с вирусным характером распространения информации в сети. И наоборот, методы исследования сложных сетей высокой размерности, соответствующие оптимизационные задачи находят отражение в анализе процессов, проходящих в интернет-сетях.\nВ работе ставится задача анализа жизненного цикла (ЖЦ) потока ИМ или выделенного по запросу мема. Вопросы разнообразных подходов по определению мемов, их классификации, проблематике исследований, а также разработке инструментов извлечения, обработки и анализа ИМ предварительно исследовались в работах [1, 2]. Распознавание изображений мемов, визуализация распространения в сети, аспекты интеллектуализации обработки данных потока мемов рассматривались в работах [3-6], социолого-политические подходы отражены в [7].\nМожно рассматривать ЖЦ одного мема, уже существующего, но, как правило, одновременно распространяется поток близких мемов. В зависимости от введенного понятия близости (аналогии, прецедентности) мощность потока и интенсивность будет различной. Отмечая вероятностный характер процесса, необходимо уметь работать с одним мемом или их небольшим количеством. Обычно качественно ЖЦ отображается в виде графика функции, зависящей от времени, с характерным ростом, максимальным значением, периодом стабилизации и деградации (значение функции стремится к нулю). Какому этапу соответствует рассматриваемый поток ИМ, определить трудно. Нужные для этого характеристики могут быть извлечены из близкого набора данных, соответствующих анализируемым мемам в результате регулярного\nмониторинга процесса. При этом должны измеряться количественные характеристики в разных частях сети распространения, что затруднительно. Из этого следует, что для идентификации ЖЦ потока ИМ необходимо привлекать экспертное сообщество, математическое моделирование, технологии сбора и обработки больших данных (BigData) и извлечения знаний из таких данных. С точки зрения динамических систем, математические модели распространения вирусных заболеваний, слухов, диффузных процессов и др. требуют адаптации на сети, изменяющийся во времени. В простейшем случае можно ограничиться статистическими данными по количеству, частоте и т. п. потока тестируемых мемов с последующим регрессионным и факторным анализом. С другой стороны, как и для динамических систем большой размерности, можно ожидать наличие русел и джокеров — моделей малой размерности качественно отображающих происходящие процессы распространения ИМ.\nИдентификация и прогнозирование ЖЦ потока ИМ прежде всего ориентировано на изучение влияния ИМ на активную молодежную аудиторию и возможность управления для ликвидации деструктивного воздействия. Например, ЖЦ ИМ «котики», позволяет изучать аудиторию, подверженную такому влиянию, а также соответствующий кластер близких сообществ. При этом для изучения, в основном, доступны данные косвенных измерений. Создание и распространение своего потока ИМ сопряжено с юридическими запретами и предписаниями. Наиболее интересно выявление будущего тестового ИМ, что вполне возможно в связи с событийным характером появления мемов. Таким образом, изучение ЖЦ ИМ является актуальной задачей и затрагивает разработку инструментов сбора информации, анализа процесса распространения ИМ и создания соответствующего комплекса программного обеспечения, предназначенного для автоматизированной работы с мемами.\n1. ЖИЗНЕННЫЙ цикл ИНТЕРНЕТ-МЕМОВ\nИнтернет-мем (англ. Internet meme) — информация или фраза, как правило, остроумная или ироническая, часто бессмысленная, спонтанно приобретшая популярность в интернет-среде посредством распространения в Интернете (по электронной почте, в мессенджерах, на форумах, в блогах и др.). Понятие «мем» вошло в употребление в середине первого десятилетия XXI века, применяется в средствах массовой информации, бытовой лексике и общении внутри Интернета. В эпоху Интернета практически все современные мемы становятся автоматически ИМ. Мемами могут считаться как слова и их сочетания, так и изображения. То есть любые аудиальные или визуальные сегменты Интернета, высказывания, картинки или звук, которые имели значение и распространились в сети Интернет.\nНовые ИМ появляются постоянно и, спустя некоторое время, исчезают. Основной характеристикой для ИМ является его актуальность: мем появляется в новостных лентах пользователей, его отправляют друг другу в личных сообщениях, его упоминают в неформальной беседе. Жизненный цикл для ИМ составляет: момент его появления, динамика распространения и затем потеря актуальности и завершение использования. Момент появления ИМ тяжело отследить, так как «вирусным» может стать любой контент, даже нескольколетней давности. Показателем актуальности или динамики ИМ могут являться количественные характеристики, часто используемые в социальных сетях или форумах: количество «лайков», «репостов», рейтинг и т. д. Однако, не стоит забывать, что помимо этих характеристик на релевантность ИМ также влияет его употребление пользователями соцсетей, мессенджераим, в блогах и т. д. В этом случае количественные характеристики получить в полной мере не представляется возможным. Затруднительным также является сбор количественных характеристик из соцсетей. Допустим, нужно исследовать определенный ИМ, и для этого будем отслеживать его актуальность, за счет мониторинга количественных характеристик в нескольких соцсетях (ВК, Твиттер, Фейсбук). В этом случае перед нами появляется сразу несколько трудностей.\nВо-первых, распознавание ИМ среди остального контента. Классификация изображения на предмет наличия в нем искомого мема является не тривиальной задачей. Распознавание ИМ в аудио и видео материалах соответственно представляется очень трудозатратным, почти невозможным.\nВо-вторых, отслеживание ИМ во всех группах, каналах или темах является слишком сложной задачей мониторинга и последующей обработки. Причиной этому служит большое число, перечисленных выше, путей распространения информации в социальных сетях. Количество групп в социальных сетях превышает сотни тысяч. Анализ содержимого всех этих каналов распространения ИМ не представляется возможным. Исследование ЖЦ ИМ существенно упростилось бы в рамках системы тотального сбора, обработки и прогноза всего интернет-контента.\n2. Математическая модель вирусного характера распространения ИМ среди пользователей социальных сетей\nРассмотрим простую математическую информационную модель динамики распространения ИМ среди пользователей сети. Такая модель позволяет оценить уровень необходимой входной информации и дать качественную и грубую количественную оценку прогнозных результатов количества новых потребителей (и распространителей) выбранных ИМ в зависимости от уже активных потребителей ИМ.\nПусть N — потенциальное число потребителей ИМ (Ж >> 1). Через х(Ь) обозначим число пораженных ИМ в момент времени ¿, а через у(Ь) — число еще не получивших и не среагировавших на распространяемый х(Ь) сообществом ИМ. То есть х(Ь) + у(Ь) = N. Число возможных участников за промежуток ДЬ пропорционально числу контактов между уже активными потребителями х(Ь) и потенциальными у(¿), т. е. приращение Дх = ах(Ь)у(Ь)^, где а — коэффициент пропорциональности. Переходя к пределу для приращения Дх = х(Ь + ДЬ) — х(Ь) при ДЬ ^ 0 получим уравнение\nх = ахШ — х),\n(1)\nх(^о) = хо\nРешение задачи Коши (1) получим в виде\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nx(t) =\nN - x0(1 - eaN(i-i<0) (N - x0)e-aN(i-i<0 + x0' Заметим, что lim x(t) = N. Найдем скорость изменения скорости распростране-\nния ИМ:\nх(Ь) = а;т(Ж — 2х) = а2х(Ж — х)(Ж — 2х). В ноль может обращаться только третий множитель\nN — 2х = 0 ^ (Ж — х0)е-а^(4-4о) — х0 = 0. Откуда следует, что\n1 , N — х0\\ ..\t/ 1 N — х0\nх > 0 при Ь 6 0, ¿0 +--1п- и х < 0 при Ь 6 1 -1п-,\n\\\tаN х0 )\t\\аN х0\nСледовательно, скорость х роста интереса к ИМ возрастает до момента ¿* = 1п М-Хо, а затем убывает. Параметр ¿* необходим для разработки системы управления динамикой распространения ИМ.\nПо отношению к различным потокам ИМ сообщество распадается на кластеры по интересам (в том числе деструктивным и конструктивным). Для каждого из со-\nобществ, состоящих из N (г = 1,п) участников ^ = ^ можно выписать свою\nг=1\nзадачу Коши (1) для хД£), Ь^, х^, а^.\nХарактеризовать процесс распространения будут интегральные характеристики по всем сообществам. Заметим, что задача восстановления исходных параметров по\nизвестным текущим является некорретной. Деструктивные участники распространения ИМ, как правило, пересекаются с игровыми компьютерно зависимыми участниками сети. Если для игровой зависимости существуют программы, осуществляющие профилактику, диагностику и лечение, то идентификация пользователей, попадающих под вирусное заражение деструктивными ИМ не проводится. Игровая зависимость поддерживается постоянным обновлением игр, а жизненный цикл ИМ — вбросом новых мемов. График кривой ЖЦ ИМ может быть представлен в виде линейной комбинации логистических кривых (решений задачи Коши (1)), если есть исходная информация. Фактический интерес представляют только активные периоды.\nДля сбора информации о жизненном цикле мема необходима информация об его актуальности на протяжении некоторого временного интервала. Одним из способов получения этой информации является выдача поискового сервиса, так как поисковые сервисы приоритезируют актуальную информацию. Несмотря на то, что результаты поиска могут не являться самыми новыми, они дают возможность составить реальную картину распространения мемов в сети интернет. Поэтому для получения выборки мемов используются результаты поиска Google search.\nТак как Google search является вебсайтом и не имеет открытого API для получения информации, появляется важная задача по извлечению информации из вебстраниц. Можно извлекать информацию вручную, что работает на небольших объёмах данных, либо автоматизировать данный процесс, что позволяет извлекать большие объёмы информации с сайтов.\nПроцесс извлечения структурированной полезной информации с сайта называется парсингом (parsing), а инструменты для реализации данного процесса — парсе-рами (parsers). Как правило, сайты разрабатываются с учётом того, что считывать информацию с их страниц будет человек. Но формат представленных данных, понятный человеку, зачастую не столь понятен программным средствам. Кроме того, структура представляемых данных варьируется от сайта к сайту, поэтому не существует универсального средства для извлечения информации.\nПарсеры — это программы для автоматизированного сбора и структурирования информации с сайтов. Как правило, разрабатываются для каждого сайта отдельно, с учетом его структурных и технических особенностей.\nТакже существуют готовые решения, позволяющие извлекать информацию с сайта после предварительной конфигурации, не написав ни единой строчки кода. Эти решения часто стоят дорого и не обладают той гибкостью, которую могут дать решения, разработанные под конкретный сайт.\nПроцесс извлечения информации может быть простым: загрузить URL, считать информацию и отдать получателю; а может быть и сложным: авторизоваться в системе, сконструировать запрос по информации из заголовков и значений JavaScript-переменных на странице, имя которых может меняться с каждым запросом, а JS-код находиться в минифицированном или обфусцированном виде. Если в первом случае всё достаточно просто, то во втором, чтобы за разумное время разработать парсер, стоит прибегнуть к использованию headless-браузеров (без графического интерфейса) с поддержкой сценариев вроде PhantomJS по извлечению данных для оптимизации времени на изучение того, как сайт взаимодействует с бэкендом. Также для этих целей можно прибегнуть к Selenium WebDriver с одним из реальных браузеров.\n3. Структура программного комплекса обработки\nИНТЕРНЕТ-МЕМОВ\nОсновной задачей работы явилась разработка кроссплатформенного комплекса программного обеспечения (ПО), со следующим функционалом:\n1)\tавтоматическое или ручное добавление изображений (мемов);\n2)\tхранение изображений;\n3)\tдобавление тэгов для изображений;\n4)\tагрегация изображений по тэгам;\n5)\tдобавление изображениям временных отметок.\n3.1. Структура серверной части. Серверная часть программного комплекса имеет модульную структуру (каждый из модулей при необходимости может быть заменен, без затрагивания остальных) и состоит из следующих компонентов:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tВеб сервер - Tagrun Server.\n2.\tБаза данных.\n3.\tСервис хранения файлов.\n4.\tСервис хэширования изображений.\n5.\tПрограмма автоматического сбора информации - Centaur.\nTagRun Server отвечает за обработку веб запросов (REST API) и связь всех остальных компонентов (кроме Centaur) в единый комплекс. Для хранения информации об изображениях, мониторинговых запросах, результатах мониторинга, а также тэгах и временных отметках необходима база данных. Так как между объектами хранения существует значительное количество взаимосвязей, имеет смысл использовать реляционную базу данных. Однако, база данных обеспечивает хранение только\nРис. 1. Структура серверной части\nинформации об объектах и их связях, но не обеспечивает хранение файлов изображений. Поэтому необходим сервис хранения для загружаемых файлов. Для определения схожести изображений (нахождения дубликатов) необходимо особым образом хэшировать эти изображения. Эту задачу на себя берет сервис хэширования изображений.\nДля наполнения базы данных актуальной информацией используется автоматический сборщик Centaur. Решение вынести логику сборки информации по поисковым запросам и обратному поиску изображений в отдельную программу связано с тем, что алгоритм сбора меняется в зависимости от ресурсов, с которых происходит сбор. Так как формат этих ресурсов не постоянный, то и программа будет нуждаться в частых изменениях.\n3.2. Структура базы данных. В базе данных определены следующие сущности: ObservedQueries (Мониторинговые запросы), SearchTimeStamps (Даты поиска), Images (Изображения), Tags (Тэги), WebResources (Ссылки на веб ресурсы), QuerySearchResults (Результаты поиска по запросу), ImageSearchResults (Результаты обратного поиска по изображению) и FilterPresets (Шаблоны фильтров).\nТаблица ObservedQueries содержит в себе информацию о поисковых запросах, которые используются для мониторинга. В неё входят следующие столбцы:\n•\tId - уникальный идентификатор мониторингового запроса;\n•\tText - текст запроса;\n•\tUpdatelnterval - интервал выполнения запроса (может принимать следующие значения: 1 - ежедневно, 2 - еженедельно, 3 - ежемесячно);\n•\tActive - означает, происходит ли мониторинг по данному запросу (1 - происходит, 2 - приостановлен);\n•\tPart и Total - обозначают процесс выполнения текущего мониторинга.\nРис. 2. Структура базы данных\nТаблица SearchTimeStamps хранит даты осуществления мониторинга по запросу или обратному поиску по изображению. Содержит идентификатор и дату.\nВ таблице Images находится информация о собранных в процессе мониторинга изображениях. В таблице представлены следующие столбцы:\n•\tId - уникальный идентификатор изображения;\n•\tWidth - ширина изображения;\n•\tHeight - высота изображения;\n•\tPath - идентификатор, для получения файла изображения из файлового сервиса;\n•\tHash - хэш изображения;\n•\tOriginId - идентификатор из таблицы WebResources, содерижт ссылку на оригинал изображения;\n•\tЧерез таблицу ImageTags осуществляется связь многие-ко-многим с таблицей тэгов.\nТаблица Tags хранит информацию о тэгах, которые могут быть присвоены изображениям. Содержит идентификатор тэга и его название.\nТаблица WebResources хранит информацию об ресурсе в интернете, где размещено изображение. В неё входят следующие столбцы:\n•\tId - идентификатор веб ресурса;\n•\tHeader - заголовок страницы, на которой размещено изображение;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tSource - ссылка на изображение;\n•\tSourcePage - ссылка на страницу, содержащую изображение;\n•\tDomen - домен веб ресурса, на котором размещено изображение.\nВ таблице QuerySearchResults содержатся результаты мониторинга поискового запроса за определенную дату. В таблице представлены следующие столбцы:\n•\tId - идентификатор результата поиска;\n•\tApproxCount - примерное количество результатов по поисковому запросу (информация, предоставленная поисковиком);\n•\tQueryId - идентификатор поискового запроса, по которому происходил мониторинг;\n•\tTimestampId - идентификатор даты мониторинга;\n•\tЧерез таблицу QuerySearchResultImages осуществляется связь многие-ко-многим с таблицей Images. Эта связь означает, что в результате этого мониторинга были получены связанные изображения;\nТаблица ImageSearchResults хранит в себе информацию о результатах обратного поиска по изображению. В ней содержаться следующие столбцы:\n•\tId - уникальный идентификатор результатов поиска по изображению;\n•\tApproxCount - примерное количество результатов по поисковому запросу (информация, предоставленная поисковиком);\n•\tImageId - идентификатор изображения, по которому происходил поиск;\n•\tTimestampId - идентификатор даты мониторинга;\n•\tЧерез таблицу ImageWebResources осуществляется связь многие-ко-многим с таблицей WebResources. Эта связь означает, что в результате этого мониторинга были получены связанные ссылки на веб-ресурсы.\nТаблица FilterPresets нужна для хранения шаблонов фильтра, которые можно сохранить и загрузить при использовании веб-приложения. Содержит идентификатор, название и содержание шаблона.\n3.3. Сервис хеширования изображений. При сборе изображений важным аспектом является нахождение одинаковых или схожих изображений. При этом для сопоставления изображений между собой нужно учитывать именно визуальную составляющую, а не размер или байтовое содержание файла. Поэтому традиционные способы хэширования файлов (такие как md5, sha2 или crc) для этого не подходят.\nДля определения схожести изображений используется следующий алгоритм хэширования:\n1.\tПроисходит сжатие изображения до определённого размера N х N пикселей (например, 8 х 8).\n2.\tВ полученном изображение уменьшается глубина цвета до определенного K бит (например, 1 бит - черно-белое изображение).\n3.\tПосле этого выписываются последовательно строки полученного изображения и получаем хэш длинной N х N, где каждый элемент содержит K бит информации.\n4.\tТеперь можно сравнивать полученные хэши между собой используя определенную метрику, которая гарантирует близость минимально отличных друг от друга хэшэй (например, расстояние Хэмминга).\nТаким образом получаем инструмент хэширования изображений, который позволяет нам с определенной точностью определять похожие изображения и гарантирует, что можно определить полностью одинаковые изображения.\n3.4. Автоматический сбор информации. Для обеспечения мониторинга необходимо с заданным интервалом производить сбор информации и сохранять полученные результаты. Эту функцию обеспечивает Centaur, который запускается отдельно от веб сервера каждый день в определенное время. После получения списка запросов мониторинга от сервера, Centaur определяет, по каким из них нужно производить поиск в данный момент (запрос должен быть активным и с момента последнего мониторинга должно пройти время, соответствующее интервалу мониторинга этого запроса). Далее работа состоит из двух этапов. На первом этапе с каждым из запросов выполняется следующий алгоритм:\n1.\tСоздается новый результат мониторинга.\n2.\tВыполняется поиск по тексту запроса в поисковике.\n3.\tБерутся результаты поиска из раздела изображения.\n4.\tПо каждому из этих изображений:\n4.1.\tЗагрузить изображение на сервер,\n4.2.\tЕсли изображение новое, получить тэги этого изображения используя поисковик и загрузить на сервер,\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n4.3.\tДобавить изображение к результату мониторинга,\n4.4.\tДобавить изображение в список для второго этапа,\n4.5.\tОбновить прогресс мониторинга.\nПосле того, как результаты поисковых запросов обработаны, Centaur переходит ко второму этапу работы. На этом этапе с каждым из сохраненных на первом этапе изображений осуществляется следующий алгоритм:\nРис. 3. Схема сбора данных по поисковому запросу\n1.\tСоздать новый результат поиска по изображению\n2.\tВыполить обратный поиск по изображению в поисковике\n3.\tВзять результаты поиска из раздела изображения\n4.\tПо каждому из этих результатов:\n4.1.\tК результату поиска по изображению добавить новый веб-ресурс, содержащий информацию об изображении;\n4.2.\tОбновить прогресс мониторинга.\nСтоит отметить, что поисковики не приветствуют их использование для автоматического сбора информации и стараются пресечь подобное использование. Чаще всего, если пользователь поисковика замечен в подозрительной активности ему ограничивают доступ к поисковику на определенное время. Для того, чтобы избежать подобного Centaur использует простые, но тем не менее, эффективные способы маскировки под обычного пользователя. В них входят: замена заголовка User-Agent в запросе и ограничение на количество запросов в определенный промежуток времени. Экспериментальным путем установлено, что для того, чтобы не вызвать подозрения у поисковика google нужно совершать не более чем один запрос в 5 секунд. Стоит отметить, что это также снижает скорость работы программы, так как на полную обработку одного поискового запроса уходит 5GG-6GG запросов к поисковику, а значит примерно час реального времени.\n4. Жизненный цикл mema\nРассмотрим задачу исследования жизненного цикла мема. Чтобы автоматизировать получение результатов поисковой выдачи из Google необходимо учитывать основные принципы взаимодействия с интернет сервисами, к которым и относится Google search. При создании интернет сервиса разработчик или компания принимает решение по созданию программного интерфейса (API) для того, чтобы сторонние разработчики своих проектов могли легко и удобно использовать их сервис. К сожалению, Google search не имеет публично доступного API, поэтому результаты поиска будем получать из HTML страниц. Этот подход лежит в части работы программы:\nСоздать поисковой запрос для Google\t\t\tПолучить HTML-страницу результатов\nИзвлечь информацию об изображениях\nСоздание web-запроса и получение результата в виде изображений, используя современные программные средства, не сложно, необходимо использовать следующий url запрос: https://www.google.com/search?q=Query&tbm=isch,\nгде вместо Query нужно подставить искомый запрос, например «мем».\nБолее сложную задачу представляет непосредственное извлечение информации из изображений. Для этого используются основные способы создания web-страниц, применяемые в современном интернет пространстве. Первый подразумевает генерацию страниц на стороне сервера и последующую отправку их клиенту (web-браузеру). Это более старый способ генерации страниц, предполагающий больший объем данных для передачи, используется, например, в php. Второй, более современный способ, состоит в создании минимальной html-страницы на сервере и загрузки на неё данных от клиента при помощи дополнительных запросов. Этот способ позволяет сэкономить трафик и ускорить время загрузки страниц. Google search использует модифицированную версию первого способа. При запросе клиенту возвращается наполовину заполненный HTML документ, часть информации в котором дополняется при помощи javascript.\nПосле анализа результата запросов было установлено, что основная информации об изображениях (ссылка на само изображение и страницу, откуда оно получено) находится в конце документа в виде javascript-объекта, который используется в дальнейшем для отображения элементов страницы.\nСледовательно, для того, чтобы получить информацию об изображениях необходимо проделать следующую цепочку операций:\nВзять содержимое тэг script\t\t\tОтделить объект с данными\nВзять в нем нужный массив\t\t\tВыбрать информацию об изображениях\nТаким образом, извлекаетсяинформация обо всех изображениях по поисковому запросу. Далее отслеживаются количественные показатели пребывания выделенного мема (потока ИМ) в информационном пространстве сообществ.\nРассмотрим реализацию технологии исследования ЖЦ мемов с помощью разработанного веб-приложения. В рамках совместной с социологами Крымского федерального университета научно-исследовательской работы с целью исследования ЖЦ ИМ и построения системы соцопросов была выбрана контрольная выборка изображений из сети интернет. Предварительная подготовка имеющихся данных с помощью разработанного программного обеспечения для:\n—\tгруппировка ИМ экспертной группой по определенным признакам;\n—\tвыборка ИМ по заданным признакам;\n—\tсоздание, сохранение и выполнение экспертных запросов в виде выражений математической логики для выборки ИМ;\n—\tвыделение областей на изображении ИМ с возможностью задания признаков этой области.\nПриложение FrontEnd написано на языке TypeScript, который является расширением языка JavaScript. Использование чистого JavaScript в больших приложениях повышает сложность разработки программного обеспечение, так как этот язык программирования обладает динамической типизацией и из-за этого во время исполнения кода могут возникать непредвиденные ошибки. TypeScript отличается от JavaScript возможностью явного статического назначения типов, поддержкой использования полноценных классов (как в традиционных объектно-ориентированных языках), а также поддержкой подключения модулей, что призвано повысить скорость разработки, облегчить читаемость, рефакторинг и повторное использование кода, помочь осуществлять поиск ошибок на этапе разработки и компиляции. В конечном итоге TypeScript компилируется в JavaScript и может быть выполнен, как в браузере, так и на платформе NodeJS [https://nodejs.org/en/].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДля создания UI выбрана библиотека ReactJS [https://ru.reactjs.org/], которая позволяет создавать графические пользовательские интерфейсы для веб-приложений. Для работы с Document Object Model (DOM) в React используется Virtual DOM — виртуальное дерево элементов веб-страницы. При изменении в Virtual DOM автоматически изменяется DOM в браузере так, чтобы он соответствовал Virtual DOM. React позволяет разрабатывать интерфейсы, используя компоненто-ориентированное программирование. В основе React лежат компоненты, которые являются самостоятельными, неиспользуемыми блоками, каждый из которых обладает своим собственным состоянием и функциональностью.\nДля управления состоянием приложения выбрана библиотека Redux, которая позиционируется как предсказуемый контейнер состояния (state) для JavaScript приложений. React.js в связке с Redux на клиентской стороне позволяет создать MVC архитектуру приложения. MVC (model, view, contrnller/модель-представление-контроллер) архитектура предполагает, что модель — это единственный источник истины и все состояние хранится там. Представления — это производные модели, которые должны быть синхронизированы, когда модель изменяет свое состояние. Приложение, написанное на связке React + Redux, является недетерминированным конечным автоматом.\nДля роутинга приложения (маршрутизация внутри приложения на стороне клиента) используется React.Router. Роутер определяет, какое представление нужно отобразить пользователю. Благодаря роутеру, удалось сделать приложение одностра-ничным (single page application, SPA). Это значит, что веб-приложение использует один HTML-документ и реализует взаимодействие с клиентом при помощи динамической подгрузки стилей и скриптов. Преимуществом SPA является то, что они\nпохожи на нативные приложения, за исключением того, что исполняются в рамках веб-браузера. Переход между страницами происходит более бесшовно и незаметно для пользователя, что позитивно сказывается на пользовательском опыте (UX) и позволяет увеличить скорость ответа страницы, так как приложению не нужно подгружать весь HTML файл целиком.\nСборка интерфейса осуществляется при помощи системы сборки JavaScript модулей webpack. Задачей webpack является сборка из JavaScript модулей, CSS и HTML файлов единого пакета веб-приложения.\nТакже используется Babel.js, который преобразует код, написанный на JavaScript последнего стандарта (в проекте используется ECMAScript 6) в JavaScript старого стандарта для поддержки старыми браузерами.\nДля задания стилей элементов на странице используется библиотека Bootstrap 4, разработанная компанией Twitter. Она упрощает задание стилей страницы, так как можно не писать кастомный CSS код, а использовать уже заготовленные классы для разметки.\nПриложение работает с сущностями:\nArea — область, выделенная на изображении — класс, содержащий информацию об области. Он хранит id картинки в базе, id области в базе, ее координаты и размер области, а также список тэгов, относящихся к ней.\nTag — сущность тэга, объект с полем id тэга в базе и его именем.\nImageinfo — основная сущность, объединяющая другие атомарные сущности. Является представлением изображения в приложении, агрегирует в себе id, параметры ширины и высоты изображения, дату его загрузки на сервер, массив с областями картинки, массив с тэгами, относящимися к самой картинке и url — ее расположение в файловой системе сервера.\nQuery — логическое выражение для выборки изображений из базы данных, т. е. представляет структуру в формате JSON, в виде дерева, где у каждого элемента есть тип (логический оператор или операнд), текстовое значение и массив дочерних элементов.\nКомпоненты приложения:\nTagSuggestSelect — предложения по тэгам из базы данных.\nTList — список передаваемых в него сущностей, выведенных в столбик.\nQueryBlockSuggestSelect — предложения для выбора элементов визуального представления запроса для выборки изображений.\nQueryBlock — блок визуального представления экспертного запроса.\nModal — всплывающее окно, которое перекрывает основной контент страницы.\nImageStrip — блок, который отображает картинки в виде «плиточек».\nРезультат поиска И фильтрации\tНайдено 30 мемов\nРис. 4. Отображение картинок в виде «плиточек» (ImageStrip)\nImageDetails — блок, в котором отображается информация об изображении, а также происходит основная работа с изображением.\nColoredRect — блок, в котором происходит работа с областями картинки.\nСоздание новой области происходит при помощи drag-n-drop. В основе блока лежит компонент React-konva (HTML5 canvas), приспособленный для работы с react и его data-flow.\nПредставления. Пользовательский интерфейс разделен на три представления, каждый из которых отвечает за свою часть функционала приложения. Первое представление — это форма загрузки изображений на сервер. Позволяет загружать. Пользователь нажимает на кнопку «Выберите файл» и выбирает изображение, расположенное на своем локальном хранилище. Файл записывается в state компонента. После нажатия на кнопку «Загрузить изображение» вызывается action uploadlmage и изображение отправляется на сервер для хранения. Второй экран — основное окно для работы с загруженными изображениями. Крайняя левая колонка представляет из себя блок TList. В этой колонке можно удалять теги и производить фильтрацию изображений по определенному тэгу. Также присутствует кнопка отображения всех изображений, независимо от их тэгов.\nСредняя колонка это компонент ImageStrip. При нажатии на изображение происходит выбор изображения и отрисовка крайнего правого компонента ImageDetails с данными о выбранном изображении.\nТретий экран — это страница запросов и состоит из трех блоков: TList, ImageStrip, и QueryBlock. Здесь осуществляются операции с запросами, такие как: создание, сохранение и поиск изображений по заданному запросу. Программно-аппаратная часть сервиса (Back-end) реализована на языке C#, в качестве системы управления базой данных используется MsSQL.\nКлючевой сущностью в приложении является информация об изображении, которая хранится в таблице Images, которая связана с таблицей Areas связью один-ко-многим и с таблицей Tags связью многие-ко-многим. Также таблица Areas связана с таблицей Tags связью многие-ко-многим.\nКонтроллеры. API состоит из трех контроллеров, каждый из которых отвечает за работу со своей сущностью. Каждый контроллер разделен на эндпоинты, каждый из которых выполняет свою задачу в зависимости от метода HTTP запроса и URL, на который был сделан запрос. Практически все эндпоинты возвращают данные клиенту в формате JSON, но есть эндпоинты, возвращающие пользователю файлы, расположенные на сервере.\n5. Визуализация модели жизненного цикла интернет-мемов\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВизуализацию модели жизни ИМ наглядно можно произвести, построив график зависимости популярности ИМ от времени. В качестве меры популярности будем использовать количество раз, которое ИМ был в поисковой выдаче за определенный промежуток времени. Например, если используется временной промежуток в течение одной недели и ИМ был в 5 поисковых выдачах, то он получит значение 5.\nВ рамках этой работы в течение нескольких месяцев были произведены ежедневные поисковые запросы. Результаты поисковых выдач по этим запросам сохранялись в базе данных. При помощи созданного программного комплекса визуализировались данные в виде графиков (рис. 5).\nРис. 5. Визуализация с неделями\nНа графике рис. 6 видна динамика популярности трех ИМ. По оси обозначены временные отметки. В данном случае используем недели для наглядности. Также есть возможность использовать в качестве временных промежутков месяца, однако, из-за короткого промежутка сбора информации этот график не обладает большой информативностью.\n2020.3\t2020.4\t2020.5\t2020.6\n-о- #45 -»-#57 -о-#3082\nРис. 6. Визуализация с месяцами\nПрогнозирование жизненного цикла ИМ осуществляется на основе накопленных данных, представленных на рис. 5, 6. Для достоверности получаемых прогнозов необходимо накопить достаточную базу данных по ИМ, выявить характерные классы кривых ЖЦ. Прогноз осуществляется по разработанному ранее алгоритму для ЖЦ предприятия (на основе экономических статистических данных) с использованием метода главных компонент и вывода по аналогии.\nЗаключение\nВ работе представлен этап реализации проекта по комплексному изучению процесса распространения интернет-мемов. Показана необходимость разработки инструментов сбора, обработки и изучения жизненного цикла ИМ. Представлена структура программного продукта, его визуализация и применение для анализа ЖЦ. Дальнейшее развитие предполагает применение нейросетевого подхода для задач интел-лектуализированной обработки потока интернет-мемов с целью оценки влияния на аудиторию интернет-сообществ.\nАвторы выражают благодарность Т. О. Габриеляну за участие в постановке задач, П. А. Гуржий и О. О. Макарову за активное участие в разработке программного комплекса.\nСПИСОК ЛИТЕРАТУРЫ\n1.\tГерманчук, М. С. Проблематика моделирования процессов распространения интернет-мемов / М. С. Германчук, М. Г. Козлова, В. А. Лукьяненко // Анализ, моделирование, управление, развитие социально-экономических систем: сборник научных трудов XII Международной школы-симпозиума АМУР-2018, Симферополь-Судак, 14-27 сентября 2018 / Под общей редакцией А. В. Сигала. — Симферополь: ИП Корниенко А. А., 2018. — C. 136-139.\nGERMANCHUK, M. S., KOZLOVA, M. G. & LUKIANENKO, V. A. (2018) Modelling of Internet memes. Analysis, Modeling, Management, Development of Socio-Economic Systems: XII Collection of Scientific Works of the International School-Symposium AMUR-2018, Simferopol-Sudak, 14-27 September 2018. / Edited by A. V. Segala. p. 136-139.\n2.\tГерманчук, М. С. Разработка инструментария обработки и анализа потока интернет-мемов / М. С. Германчук, М. Г. Козлова, В. А. Лукьяненко, А. Е. Пивовар // Сборник научных трудов Всероссийской научно-практической конференции МИКМО-2019 и Таврической научной школы-конференции студентов и молодых специалистов по математике и информатике / Под ред. В. А. Лу-кьяненко. — Симферополь: ИП Корниенко А. А., 2019. — 1. — C. 121-127.\nGERMANCHUK, M. S., KOZLOVA, M. G., LUKIANENKO, V. A. & PIVOVAR, A. E. (2019) Development of Internet Meme Flow Analysis and Processing Toolkit. Collection of scientific works of the All-Russian Scientific and Practical Conference MIKMO-2019 and the Tauri Scientific School-Conference of students and young specialists in mathematics and informatics. / Ad ed. B. A. Lukyanenko (1). p. 121-127.\n3.\tГерманчук, М. С. Распознавание, анализ и визуализация интернет-мемов / М. С. Германчук, М. Г. Козлова // Математические методы распознавания образов: Тезисы докладов 19-й Всероссийской конференции с международным участием, г. Москва 2019 г. — М.: Российская академия наук, 2019. — C. 351-355.\nGERMANCHUK, M. S. & KOZLOVA, M. G. (2019) Recognition, analysis and visualization of Internet memes. Mathematical methods of pattern recognition: Theses of the reports of the 19th All-Russian Conference with international participation. Moscow. p. 351-355.\n4.\tГерманчук, М. С. Особенности разработки интеллектуальной системы обработки потока интернет-мемов / М. С. Германчук, М. Г. Козлова, В. А. Лукьяненко // В сб. «Дистанционные образовательные технологии», Материалы IV Всероссийской научно-практической конференции (с международным участием) / Ответственный редактор В. Н. Таран. — Симферополь, 2019. — C. 258-265. GERMANCHUK, M. S., KOZLOVA, M. G. & LUKIANENKO, V. A. (2019) Features of Intelligent Internet Meme Flow Processing System Development. «Distance Educational Technologies», Materials IV of the All-Russian Scientific and Practical Conference (with international participation). / Responsible Editor V. N. Taran. p. 258-265.\n5.\tГерманчук, М. С. Интеллектуализация обработки данных потока интернет-мемов / М. С. Германчук, М. Г. Козлова, В. А. Лукьяненко // Материалы III Международной научной конференции «Осенние математические чтения в Адыгее». — Майкоп: изд-во АГУ, 2019. — C. 139-143.\nGERMANCHUK, M. S., KOZLOVA, M. G. & LUKIANENKO, V. A. (2019) Intelligent Processing of Internet Meme Stream Data. Materials of the 3rd International Scientific Conference «Autumn Mathematical Readings in Adygea». Mykop: from AGU. p. 139-143.\n",
    "download_url": "https://cyberleninka.ru/article/n/programmnye-instrumenty-i-tehnologii-analiza-potoka-internet-memov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-programmnogo-modulya-abiturient-dlya-volskogo-pedagogicheskogo-kolledzha-im-f-i-panfyorova",
    "slug": "razrabotka-programmnogo-modulya-abiturient-dlya-volskogo-pedagogicheskogo-kolledzha-im-f-i-panfyorova",
    "title": "Разработка программного модуля \"абитуриент\" для Вольского педагогического колледжа им. Ф. И. Панфёрова",
    "abstract_description": "В статье рассмотрены основные понятия, направления, связанные с вопросами использования информационных технологий. Выявлены основные направления использования цифровых технологий для создания on-line сервисов. Рассмотрены технологии создания on-line сервиса для образовательного учреждения.",
    "full_text_body": "\n\n\n\n\uFEFFЩекарев Д. В.\nГАПОУ СО «Вольский педагогический колледж им. Ф.И.Панфёрова»,\nг. Вольск, Россия Мерзликина Н.В.\nГАПОУ СО «Вольский педагогический колледж им. Ф.И.Панфёрова»,\nг. Вольск, Россия\nРАЗРАБОТКА ПРОГРАММНОГО МОДУЛЯ «АБИТУРИЕНТ» ДЛЯ ВОЛЬСКОГО ПЕДАГОГИЧЕСКОГО КОЛЛЕДЖА ИМ. Ф.И.ПАНФЁРОВА\nАннотация\nВ статье рассмотрены основные понятия, направления, связанные с вопросами использования информационных технологий. Выявлены основные направления использования цифровых технологий для создания on-line -сервисов. Рассмотрены технологии создания on-line - сервиса для образовательного учреждения.\nКлючевые слова: Веб - сервис, On-line - сервис, облачные технологии.\nShchukarev D. V.\nWolski education College. F.I. Panferova,\nVolsk, Russia Merzlikina N. V.\nWolski education College. F.I. Panferova,\nVolsk, Russia\nTHE DEVELOPMENT OF THE SOFTWARE MODULE «ENTRANT» VOLSKY PEDAGOGICAL COLLEGE. F.I. PANFEROVA\nAbstract\nThe article deals with the basic concepts, trends related to the use of information technology. The main directions of use of digital technologies for creation of on-line services are revealed. The technologies of creating an online service for an educational institution are considered.\nKeywords: Web service, Online service, cloud technologies.\nСовременный мир немыслим без новейших цифровых технологий и Интернета, который проник во все сферы нашей жизни, включая образование. Вряд ли найдется человек, не слышавший хоть раз в жизни о всемирной паутине. Благодаря Интернету мы имеем возможность получать новостную информацию, смотреть различные аудио и видео ресурсы, общаться в социальных сетях. Доступ в сеть дает возможность виртуального контакта с миром из любой точки земного шара. Всемирная паутина дает большие\nвозможности для развития образования: дистанционное обучение, доступ к большому количеству информации.\nВ современном обществе имеется большой объём информации, которую необходимо систематизировать. Систематизация помогает обработать информацию с целью приведения её к определенному виду.\nСущественным средством информатизации выступают информационные системы, позволяющие систематизировать информацию по определённым параметрам. Использование таких систем позволяет без особых усилий проводить мониторинг, формировать отчёты.\nСовременные информационные технологии предоставляют огромные возможности учебным заведениям в области повышения эффективности учебного процесса и оптимизации работы административных подразделений СПО. Однако, на пути внедрения новых технологий в образовании становится необходимость капитального обновления ИТ-инфраструктуры СПО: новое программное обеспечение не может быть установлено на устаревшие сервера, а недостаточно мощные каналы передачи данных не обеспечивают современных требований по доступу возросшего количества студентов к информационным ресурсам учебных заведений. При этом капитальная модернизация инфраструктуры требует, как правило, настолько значительных средств и времени, что инновационные технологии образования оказываются практически недоступными для учебных заведений.\nРешением этой проблемы может стать использование СПО так называемых «облачных технологий». При этом основная нагрузка на вычислительные мощности серверов и на каналы связи перекладывается на провайдера соответствующих услуг.\nМногие учебные заведения уже осознали необходимость внедрения автоматизированных средств управления приёмом в учебное заведение и учебным процессом и некоторые из них даже приняли попытки самостоятельной разработки и внедрения подобных систем.\nИспользование автоматизированной системы управления приёмом в учебное заведение и учебным процессом позволяет координировать потоки информации, ускорить процессы её обработки, оптимизировать процессы принятия управленческих решений, а так же обеспечить доступность обучения в данном учебном заведении из любой точки земного шара.\nРазработок в области автоматизации процессов, протекающих в учебных заведениях, существует немало. Однако среди них нет систем, явно лидирующих на рынке и позволяющих решать на основе единого подхода весь комплекс задач СУЗа. Поэтому СУЗ может пытаться внедрить существующие решения или вести самостоятельную разработку. При этом администрация учебного заведения будет вынуждена либо постоянно привлекать внешние фирмы, либо опираться на развитие собственных ИТ служб и инфраструктуры. Последнее предпочтительнее и обеспечивает стабильное и поступательное развитие.\nНами был разработан и размещён в сети Интернет on-line сервис «Абитуриент» для ГАПОУ СО «Вольский педагогический колледж им. Ф.И.Панфёрова».\nДля создания on-line - сервиса в настоящее время существует множество инструментов программирования. Мы остановили свой выбор на следующих языках программирования:\nHTML (от англ. HyperText Markup Language — «язык гипертекстовой разметки») - стандартизированный язык разметки документов во Всемирной паутине. Большинство веб-страниц содержат описание разметки на языке HTML (или XHTML). Язык HTML интерпретируется браузерами; полученный в результате интерпретации форматированный текст отображается на экране монитора компьютера или мобильного устройства.\nCSS (от англ. Cascading Style Sheets - каскадные таблицы стилей) -формальный язык описания внешнего вида документа, написанного с использованием языка разметки.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nPHP (от англ. HyperText Preprocessor — процессор гипертекста; первоначально Personal Home Page Tools — «Инструменты для создания персональных веб-страниц») - скриптовый язык общего назначения, применяемый для разработки веб-приложений. В настоящее время поддерживается подавляющим большинством хостинг-провайдеров и является одним из лидеров среди языков, применяющихся для создания динамических веб-сайтов.\nMySQL — свободная реляционная система управления базами данных. Разработку и поддержку MySQL осуществляет корпорация Oracle, получившая права на торговую марку вместе с поглощённой Sun Microsystems, которая ранее приобрела шведскую компанию MySQL AB. Продукт распространяется как под GNU General Public License, так и под собственной коммерческой лицензией. Помимо этого, разработчики создают функциональность по заказу лицензионных пользователей. Именно благодаря такому заказу почти в самых ранних версиях появился механизм репликации.\nMySQL является решением для малых и средних приложений. Входит в состав серверов WAMP, AppServ, LAMP и в портативные сборки серверов Денвер, XAMPP, VertrigoServ. Обычно MySQL используется в качестве сервера, к которому обращаются локальные или удалённые клиенты, однако в дистрибутив входит библиотека внутреннего сервера, позволяющая включать MySQL в автономные программы.\nSQL (от англ. structured query language — «язык структурированных запросов») - формальный непроцедурный язык программирования, применяемый для создания, модификации и управления данными в произвольной реляционной базе данных, управляемой соответствующей системой управления базами данных (СУБД). SQL основывается на исчислении кортежей.\nJavaScript - прототипно - ориентированный сценарный язык программирования. Является реализацией языка ECMAScript. JavaScript\nобычно используется как встраиваемый язык для программного доступа к объектам приложений. Наиболее широкое применение находит в браузерах как язык сценариев для придания интерактивности веб-страницам.\nВыполнив анализ предметной области, для которой разрабатывается программное обеспечение, определились со структурой системы._\nВеб - интерфейс абитуриента\nВеб - интерфейс администратора\nГлавная страница\n\\ 1\tБаза данных\nФорма подачи заявления\nФорма для входа\nв панель администратора\nПанель администратора\nРис. 1. Структура on-line сервиса «Абитуриент»\nУсловно система делится на две функциональные части. Веб - интерфейс для абитуриента: состоит из двух веб - страниц - главная страница и форма подачи заявления. Веб - интерфейс администратора - форма для входа в панель управления и панель администратора.\nОсновная информация хранится в базе данных. База данных состоит из двух таблиц - специальности и абитуриенты.\nОпишем процесс выбора программного обеспечения для реализации поставленной задачи и программирования.\nВ первую очередь учитываем то, что веб - сервис должен быть расположен в облаке и нам необходим хостинг.\nНаиболее оптимальным вариантом на наш взгляд является хостинг -провайдер Hostinger. Hostinger предлагает 100 Гб трафика в месяц, 2 Гб места на сервере, никакой рекламы, две базы данных MySQL, и всего за 30 рублей.\nДля хранения информации необходима база данных. База данных реализована с помощью инструментария Hostinger. MySQL - свободная реляционная система управления базами данных.\nВзаимодействие с базой данных осуществляется через инструментарий phpMyAdmin.\nБД (база данных) содержит две таблицы: Абитуриенты и Специальности.В таблице \"Специальности\" содержится список специальностей, на которые можно поступить. В таблицу \"Абитуриенты\" заносятся данные всех пользователей, подавших заявку на поступление на ту или иную специальность.\nВизуальная часть страниц сервиса реализована с помощью языка разметки гипертекста HTML, стилевое оформление CSS.\nГлавная страница выводит информацию из базы данных о всех специальностях, на которые ведётся набор абитуриентов.\nРис. 2. Главная страница on-line - сервиса «Абитуриент»\nПодключение к базе данных и к таблице специальностей написано на серверном языке программирования PHP и языке запросов SQL\nРабота кнопки раскрывающегося списка «Больше вариантов» написана на сценарном языке программирования JavaScript с использованием jQuery -библиотеки JavaScript, нацеленной на взаимодействие JavaScript и HTML.\nПрограммирование страницы регистрации абитуриента. Отправка данных форм в базу осуществляется через php, формы html и sql.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 3. Страница регистрации абитуриента\nПри подаче заявления автоматически формируется письмо с копией документов, которое отправляется на почту приёмной комиссии. Автоматическое формирование письма реализовано через службу Sendmail.\nПри отправке данных сервер проверяет не подаётся ли заявка повторно. Если заявка от абитуриента была уже подана ранее и он пытается это сделать повторно, сервис выводит сообщение, о том, что такая заявка имеется. Если заполнены не все поля, то выдаётся сообщение «Заявка не принята, вы не заполнили все поля».\nАдминистративная панель защищена паролем от входа постороннего человека.\nРис. 4. Форма входа администратора\nВ панели администратора реализована возможность сортировки, приёма и снятия заявлений. Весь функционал панели администратора выведен в отдельный скрипт на сервере, связь между панелью и сервером написана с помощью JavaScript и Ajax . Ajax - библиотека, которая позволяет реализовать «фоновый» обмен данными браузера с веб-сервером.\nЭкспортирование заявлений реализовано через php, sql и библиотеки PHPExcel. PHPExcel позволяет формировать таблицы для Excel.\nРис. 5. Рабочая панель администратора\nСозданный нами on-line - сервис «Абитуриент» размещён в сети Интернет. Сервис доступен 24 часа в сутки. Переход осуществляется со страницы «Абитуриенту», расположенной на сайте колледжа. Переход осуществляется по ссылке «Подать заявку на поступление».\nРис. 6. Страница «Абитуриенту» на сайте ГАПОУ СО «Вольский педагогический\nколледж им. Ф.И. Панфёрова»\nOn-line - сервис «Абитуриент» структурно представляет собой оконный интерфейс. Такой интерфейс является наиболее удобным для пользователей приложения. На каждой форме есть кнопки, с помощью которых осуществляются переходы, выполнение заданных действий. Цветовая гамма приложения не имеет ярких и насыщенных цветов, благодаря чему, не вызывает утомление глаз оператора или пользователя в течение долгого времени.\nПриложение отображает только необходимое для текущей работы количество информации, формы не перегружены различными иллюстрациями, ссылками, которые вынуждают пользователя отвлекаться, не дают сосредоточиться на основной работе.\nРазмер шрифта, используемого в оформлении интерфейса нашего приложения, легко поддается прочтению, при этом он не напрягает зрение, не имеет слишком большой размер.\nГлавная страница содержит перечень специальностей и направлений подготовки.\nДля всех специальностей предусмотрена возможность выбора уровня образования и формы обучения (очная и заочная).\nПосле того как абитуриент определился со специальностью он может перейти на страницу подачи заявления.\nНа странице регистрации абитуриент может заполнить специальную форму для подачи заявления. Сервис автоматически проверит заполнение всех полей, а также копий заявлений.\nСекретарь приёмной комиссии осуществляет обработку заявлений со страницы администратора. Панель администратора защищена от постороннего входа, это означает, что никто не сможет получить доступ к данным, не войдя в систему.\nЗащита on-line - сервиса - это важный этап в его проектировании и эксплуатации. Выделяют внутренние, внешние, локальные и сетевые угрозы. Одной из наиболее вероятных угроз для on-line - сервиса является угроза взлома. Негативными последствиями взлома являются: модификация контента сайта, внедрение вредоносного кода, внедрение ссылки, перенаправляющей на заражённый ресурс и так далее.\nДля повышения безопасности on-line - сервиса можно рекомендовать такие меры: выбирайте надёжный хостинг с хорошей технической поддержкой и репутацией; по максимуму ограничьте права доступа к файлам и папкам пользователям; используйте выделенный IP адрес для вашего сайта; используйте безопасные пароли, храните их в зашифрованном виде; проведите аудит безопасности, включающий анализ кода; информируйте пользователей о том, что сервис был взломан и т.д.\nПанель администратора имеет два активных окна и одно информационное. Первое и второе окно предоставляют информацию о поданных и принятых заявлениях. Панель администратора имеет функционал принятия, снятия заявлений. Ведётся статистика поданных и принятых заявлений. В дальнейшем функционал увеличится.\nСервис имеет адаптивный дизайн, благодаря которому его можно открывать с любого устройства.\nПроект обеспечивает возможность выпускникам общеобразовательных учебных заведений из любой точки земного шара получить информацию о направлениях подготовки специалистов в Вольском педагогическом колледже, понятный и удобный интерфейс программного продукта позволяет пользователю любого уровня подготовки подать заявку на поступление в приёмную комиссию колледжа. Секретарь приёмной комиссии имеет возможность оперативного получения информации о процессе подачи заявлений абитуриентов в электронном виде, а так же возможность быстрого рассмотрения и редактирования заявок.\nПредложенный программный продукт может быть полезен для любого учебного заведения. Приложение может использоваться не только в образовательных учреждениях, но и специалистами в других сферах деятельности.\nЛИТЕРАТУРА\n1.\tАлександр Мазуркевич. MB РНР: настольная книга программиста /Александр Мазуркевич, Дмитрий Еловой. — Мн.: Новое знание, 2015. - 480 с.\n2.\tАрхитектура информационных систем./ Б.Я.Советов, А.И. Водяхо.\n3.\tБрауде Э. Дж. Технология разработки программного обеспечения. - СПб.: Питер, 2012. - 245 с.\n4.\tВолкова В.Н. Информационные системы / Под ред. В.Н. Волковой, Б.И. Кузина. - СПб.: СПбГТУ, - 2014. - 216 с.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n5.\tГагарина Л.Г., Кокорева Е.В., Виснадул Б.Д. Технология разработки программного обеспечения / под ред. Л.Г. Гагариной. - М.: ИД ФОРУМ: НИЦ Инфра-М, 2016. - 400 с.\n6.\tГвоздева В.А. Информатика, автоматизированные информационные технологии и системы: Учебник.-М.: ИД ФОРУМ:НИЦ ИНФРА-М, 2015. -544 с.\n7.\tГвоздева Т.В. Проектирование информационных систем. / Т.В. Гвоздева, Б.А. Баллод. - Ростов н/Д: Феникс, 2015. -508 с.\n8.\tГрабер Мартин SQL. Справочное руководство; М.: Лори; Издание 2-е, 2014. - 354 с.\n9.\tЗаботина Н.Н. Проектирование информационных систем: Учебное пособие / Заботина Н.Н. -Братск: Филиал ГОУВПО «БГУЭП», 2012.-Ч.1-146 с.\n10.\tЗаботина Н.Н. Проектирование информационных систем: Учебное пособие / Заботина Н.Н. -Братск: Филиал ГОУВПО «БГУЭП», 2012.-Ч.2-132 с.\n11.\tКлещев Н.Т. Проектирование информационных систем: Учебное пособие. / Н.Т. Клещев, А.А. Романов, Под общей ред. К.И. Курбакова - М.: Рос. экон. акад., 2014. - 386 с.\n12.\tМартин Дж. Организация баз данных в вычислительных системах. -М.: Мир, 2015.\n13.\tПарамонов В.В., Шубина Н.В., Бужинская Н.В. Проектирование анализатора температуры хладоновой системы кондиционера на базе программируемого микроконтроллера // Проектирование и технология электронных средств. 2016. № 2. С. 29-33.\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-programmnogo-modulya-abiturient-dlya-volskogo-pedagogicheskogo-kolledzha-im-f-i-panfyorova/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/analiz-tsvetovoy-palitry-izobrazheniy-dlya-opredeleniya-preobladayuschih-tsvetovyh-tonov",
    "slug": "analiz-tsvetovoy-palitry-izobrazheniy-dlya-opredeleniya-preobladayuschih-tsvetovyh-tonov",
    "title": "Анализ цветовой палитры изображений для определения преобладающих цветовых тонов",
    "abstract_description": "Проанализированы программные средства определения доминирующих тонов изображения. Главным недостатком существующих аналогов является невозможность использования средства в сторонних веб-приложениях. Эти сервисы выдают готовую палитру цветов изображения, не предоставляя возможности внедрить данную технологию на собственные интернет-ресурсы. Также имеющиеся технологии не способны выделить доминирующий цвет изображения с учетом человеческого восприятия. Предложена реализация программного средства, позволяющая устранить указанные недостатки.",
    "full_text_body": "\n\n\n\n\uFEFFУДК [004.9:655](073)\nМ. С. Шмаков, А. А. Товмасян\nБелорусский государственный технологический университет\nАНАЛИЗ ЦВЕТОВОЙ ПАЛИТРЫ ИЗОБРАЖЕНИЙ ДЛЯ ОПРЕДЕЛЕНИЯ ПРЕОБЛАДАЮЩИХ ЦВЕТОВЫХ ТОНОВ\nПроанализированы программные средства определения доминирующих тонов изображения. Главным недостатком существующих аналогов является невозможность использования средства в сторонних веб-приложениях. Эти сервисы выдают готовую палитру цветов изображения, не предоставляя возможности внедрить данную технологию на собственные интернет-ресурсы. Также имеющиеся технологии не способны выделить доминирующий цвет изображения с учетом человеческого восприятия. Предложена реализация программного средства, позволяющая устранить указанные недостатки.\nРассмотрены этапы разработки системы обработки информации для определения доминирующих цветовых тонов изображения. Использованы два основных метода — конвертирование изображения в цветовое пространство HSV, с дальнейшим анализом параметров пикселей и использование кластеризации методом k-средних. Дополнительно предложено учитывать контрастность изображений, так как человеческое восприятие хорошо улавливает яркие или контрастные тона. Таким образом учитывается восприятие цвета человеком.\nВ качестве средств проектирования выбран язьгк программирования JavaScript, так как он подходит для различных интернет-ресурсов, а также интегрированная среда разработки PHP Designer.\nРазработаны схема работы системы обработки информации, алгоритм и программа. Интерфейс программного средства интуитивно понятен и прост в эксплуатации. Приведены примеры использования компьютерной программы для определения доминирующих цветовых тонов изображения.\nКлючевые слова: цвет, доминирующий цветовой тон, изображение, кластеризация, программное средство.\nМ. S. Shmakov, А. А. Tovmasyan\nBelarusian State Technological University\nTHE ANALYSIS OF THE COLOR PALETTE OF IMAGES FOR DETERMINATION OF THE PREVAILING COLOR TONES\nSoftware that determines the dominating tones of the image is analysed. The main lack of the existing analogs is the impossibility of using means in third-party web applications. These services give out a ready color palette of the image, without giving opportunities introductions of this technology on own Internet resources. Also technologies available aren't capable to mark out the dominating color of the image taking into account human perception. The realization of a software allowing to eliminate the specified defects is offered.\nDevelopment system stages of information processing for determination of the dominating color tones of the image are considered. Converting of the image in the HSV color space, with the further analysis of pixels parameters and use of a clustering by k-means method. In addition this offered to consider contrast of images as the human perception well catches bright or contrast tone. Thus the perception of color is considered by the person.\nAs design tools the JavaScript programming language is chosen, because it is suitable for various Internet resources and also the integrated environment of development of PHP Designer is chosen.\nThe work scheme information system processing, algorithm and the program is developed. The interface of a software is intuitively clear and easy-to-work. Examples of the computer program use for determination of the image dominating color tones are given.\nKey words: color, dominant hue image, image, clustering software tool.\nВведение. Цвет — качественная субъективная характеристика электромагнитного излучения оптического диапазона, определяемая на основании возникающего физиологического зрительного ощущения и зависящая от ряда физических, физиологических и психологических факторов. Восприятие цвета определяется ин-\nдивидуальностью человека, а также спектральным составом, цветовым и яркостным контрастом с окружающими источниками света, а также несветящимися объектами [1, 2].\nОпределение доминирующих цветовых тонов изображения — техника, используемая, например, для выбора палитры веб-сайта, элемен-\nтов пользовательского интерфейса. Также используется для сортировки изображения по цвету, что упрощает поиск для пользователей.\nОсновная часть. Цель работы — разработка системы обработки информации и программного обеспечения для определения доминирующих цветовых тонов изображений.\nДля реализации поставленной цели были решены следующие задачи.\n1.\tПроведен анализ существующих методик определения цветовых тонов изображений.\n2.\tРазработан и реализован поиск доминирующего цвета на изображении с учетом восприятия.\n3.\tРазработана система обработки информации для определения доминирующих тонов с использованием квантования изображений методом медианного сечения.\n4.\tОсуществлен выбор и обоснование средств разработки.\n5.\tРазработано и реализовано программное обеспечение в виде отдельных модулей с возможностью использования в веб-приложениях.\nВ настоящее время применение технологий для определения доминирующих тонов изображений приобрело большую популярность. Можно отметить следующие программные средства: РЬоШсора; Со1огИиШ;ег; Л^оЬеКи1ег; Р1еаси1ош. Все эти аналоги являются веб-сервисами, которые предоставляют цветовою палитру для вебстраниц. Подбор цветовой схемы осуществляется с помощью выделения доминирующих тонов загружаемого изображения.\nГлавным недостатком всех существующих аналогов является невозможность использования средства в сторонних веб-приложениях. Эти сервисы выдают готовую палитру цветов изображения, не предоставляя возможности внедрения данной технологии на собственные интернет-ресурсы. Также перечисленные аналоги не способны выделить доминирующий цвет изображения с учетом человеческого восприятия. Они не учитывают тот момент, что цвето-восприятия человека и компьютера не всегда совпадают.\nПрограммное обеспечение Л^ЬеКи1ег имеет расширенные возможности для получения необходимой цветовой палитры, в сравнении с остальными аналогами, что является его преимуществом.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПри разработке предлагаемой системы обработки информации основной акцент сделан на восприятии цвета человеком.\nОсновными достоинствами разработанного программного средства для определения доминирующих тонов является:\n- возможность использования в сторонних веб-приложениях;\n- выделение доминирующего цвета с учетом восприятия.\nДля реализации проекта определения доминирующих тонов изображений использованы два основных метода — определение отношения пикселя к заданному набору цветов (в пространстве HSV) и использование кластеризации методом k-средних (k-means) [2]. Первым способом картинка конвертируется в цветовое пространство HSV, а затем перебираются все пиксели изображения и по значениям H, S и V определяется цвет. Число таких пикселей каждого цвета подсчитывается. Сохраняются и RGB-составляющие для последующего усреднения. Использовать метод k-средних для определения доминирующих цветов также довольно просто. Фактически, решение задачи заключается в определении кластеров цветов на изображении. При решении задачи определения доминирующих цветов каждый пиксель изображения рассматривается как точка в трехмерном пространстве RGB, в котором вычисляется расстояние до центров масс кластеров. Для оптимизации работы алгоритма k-means картинку желательно предварительно уменьшить. В качестве языка программирования используется javascript, так как он подходит для любого интернет-ресурса, вне зависимости от технологии разработки этого ресурса. Также к плюсам этого языка разработки можно отнести огромную библиотеку готовых полезных скриптов и интеграцию с браузерами, что позволяет разгрузить сервер. Для работы с языком программирования javascript использована интегрированная среда разработки php Designer8, предназначенная для веб-разработок. С помощью данного редактора можно создавать интернет-проекты на PHP, CSS, JS и HTML, использовать встроенную библиотеку функций. Имеется поддержка всех PHP фрейм-ворков (Zend, CodeIgniter, Yii, SymfonyandPrado), а также javascript фреймворков (jQuery, Ext JS, Dojo, MooTools, Prototype и других).\nДля определения доминирующих тонов использован метод k-средних для кластеризации цветов на изображении. Идея метода при кластеризации любых данных заключается в том, чтобы минимизировать суммарное квадратичное отклонение точек кластеров от центров этих кластеров.\nНа первом этапе выбираются случайным образом начальные точки (центры масс) и вычисляется принадлежность каждого элемента к тому или иному центру. Затем на каждой итерации выполнения алгоритма происходит перевычисление центров масс — до тех пор, пока алгоритм не сходится. В применении к изображениям каждый пиксель позиционируется в трехмерном пространстве RGB, где вычисляется расстояние до центров масс.\nВ результате получаем массив с часто повторяющимися цветами. Каждому цвету соответствует определенное число вхождений. Исходя из количества вхождений того или иного цвета определяется доминирующий цвет. В каждом пикселе изображения содержится цвет, который образован некоторой комбинацией первичных цветов: красного, зеленого и синего.\nКаждый из этих цветов имеет значение яркости в диапазоне от 0 до 255 для цифрового изображения разрядностью 8 бит. RGB-гисто-грамма образуется, когда компьютер сканирует все значения яркостей RGB и считает количество яркостей от 0 до 255 в каждом из них. Существуют и другие типы гистограмм, но все они будут иметь отмеченный базовый вид.\nГистограмма может также описать степень контраста в изображении. Контраст является измерением разницы яркостей между светлым и темными частями изображения. Широкие гистограммы отражают сцены со значительным контрастом, тогда как узкие гистограммы означают, что контраст снижен, и изображение может оказаться плоским.\nВ связи с этим для получения доминирующего цвета необходимо учитывать контрастность изображений, так как человеческое восприятие хорошо улавливает яркие или контрастные тона. Была разработана функция построения гистограммы.\nС использованием рассмотренной методики разработана структура системы обработки информации для определения доминирующих тонов изображений, алгоритм и компьютерная программа определения доминирующих тонов изображений. Схема работы программного средства изображена на рис. 1.\nИнтерфейс приложения содержит два основных элемента: форма загрузки изображения и сам холст. На рис. 2 показана главная страница приложения.\nДля загрузки изображения используется HTML элемент управления input. При нажатии на кнопку «Выбрать» открывается окно для выбора файла, где можно указать, какой файл пользователь желает использовать. Для одновременной загрузки нескольких файлов необходимо указать атрибут multiple.\nРис. 1. Схема работы программного средства\n-! ^\tр\n1 Угюрцдачнгь Невм гыпм\t\t• и 0\n, ИяСрачнйГ\n* Зкрум«\n. Немение мест-! Я Р|бочяй стал Г АиЫиЬМ!\n^ Бн^лнтеси\nН Вндм Э ДжуМШЫ\n^ Мушкд\n2\n| Смсгеыгай ПЙПЫ Демлшгля гр^-лпа\nмин-.чр пит л\nМккют\n(-НСПЫпЛЙ ППЗ\n■ М Ьшпыен!^\nвЛВ- Снстми-Ч\" П^пг^!\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n'\tСсп,\nИып фщн.10-\n*\tфнМЫ\nИ-ф^Ге\nОпта\nПеренесите изображение в гту область\nРис. 2. Демонстрация загрузки изображения\nРис. 3. Результат поиска контрастного цвета\tРис. 4. Результат, определяющий девять наиболее\nчасто встречающихся тонов на изображении\nРезультаты определения доминирующих цветовых тонов изображений показаны на рис. 3, 4.\nЗаключение. Разработанная система обработки информации позволяет выделить доминирующий тон в изображении, а также составить палитру цветов. Ее можно применить при сортировке изображений по цвету, что позволяет ускорить и упростить поиск по цвету продукции в каталоге.\nК основным преимуществам данной системы в сравнении с другими существующими подобными сервисами можно отнести определе-\nние доминирующего тона на изображении с учетом цветовосприятия человеческого глаза, небольшой размер, простота использования, а также возможность использования в web-при-ложениях, независимо от технологии их разработки и создания.\nВ предложенной выше системе эффективно сочетается функциональность и простота использования, внедрение ее во внешний интернет-ресурс не вызывает у пользователя проблем, вопросов, непонятных ситуаций.\nЛитература\n1.\tКиппхан, Г. Энциклопедия по печатным средствам информации. Технологии и способы производства. М.: МГУП, 2003. 1280 с.\n2.\tДомасев М. В., Гнатюк С. П. Цвет. Управление цветом, цветовые расчеты и измерения. СПб.: Питер, 2009. 224 с.\nReferences\n1.\tKippkhan G. Entsiklpedia po pechatnym sredstvam informatsii. Techlologii i sposoby proizvodstva [The encyclopedia on printing means of information. Technology and production methods]. Moscow, MGUP, 2003. 1280 p.\n2.\tDomasev M. V. Gnatyuk S. P. Tsvet. Upravleniye tsvetom, tsvetovyye raschety i izmereniya [Color. Management of color, color calculations and measurements]. St. Petersburg, Piter Publ., 2009. - 224 p.\nИнформация об авторах\nШмаков Михаил Сергеевич — кандидат технических наук, доцент, заведующий кафедрой полиграфического оборудования и систем обработки информации, Белорусский государственный технологический университет (220006, г. Минск, ул. Свердлова, 13а, Республика Беларусь). E-mail: contr7@tut.by\nТовмасян Армонд Андрушевич — студент. Белорусский государственный технологический университет (220006, г. Минск, ул. Свердлова, 13а, Республика Беларусь). E-mail: armonster92@ gmail.com\nInformation on authors\nShmakov Mikhail Sergeyevich - Ph. D. Engineering, assistant professor, head of the Department of editing equipment and information processing systems, Belarusian State Technological University (13a, Sverdlova str., 220006, Minsk, Republic of Belarus). E-mail: contr7@tut.by\nTovmasyan Armond Andrushevich - student of the Publishing and Printing Faculty, Belarusian State Technological University (13a, Sverdlova str., 220006, Minsk, Republic of Belarus). E-mail: armon-ster92@gmail.com\nПоступила 07.04.2015\n",
    "download_url": "https://cyberleninka.ru/article/n/analiz-tsvetovoy-palitry-izobrazheniy-dlya-opredeleniya-preobladayuschih-tsvetovyh-tonov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/ohvat-rasshirennogo-sprosa-posredstvom-seo-stranits-sozdannyh-pod-filtry",
    "slug": "ohvat-rasshirennogo-sprosa-posredstvom-seo-stranits-sozdannyh-pod-filtry",
    "title": "ОХВАТ РАСШИРЕННОГО СПРОСА ПОСРЕДСТВОМ SEO-СТРАНИЦ, СОЗДАННЫХ ПОД ФИЛЬТРЫ",
    "abstract_description": "Помимо преимуществ удобного поиска и посетителей в интернет-магазинах, правильная настройка фильтров оказывает положительное влияние при продвижении. В SEO фильтры позволяют создать новую страницу входа с вашим собственным URL-адресом. Его контент максимально соответствует запросу пользователя, а хорошая оптимизация и открытый индексный фильтр страниц являются дополнительными источниками качественного целевого трафика.",
    "full_text_body": "\n\n\n\n\uFEFFНаучно-образовательный журнал для студентов и преподавателей «StudNet» №6/2021\nОХВАТ РАСШИРЕННОГО СПРОСА ПОСРЕДСТВОМ SEO-СТРАНИЦ, СОЗДАННЫХ ПОД ФИЛЬТРЫ\nREACH THE EXPANDED DEMAND THROUGH SEO PAGES CREATED\nUNDER FILTERS\nУДК 007\nБоженко Е.С., кандидат экономических наук, доцент, доцент кафедры «Маркетинга и коммуникаций в бизнесе» Южный Федеральный университет Россия, г. Ростов-на-Дону Сылко Д.А., студент 2 курс магистратуры, «Факультет Управления», Южный Федеральный университет Россия, г. Ростов-на-Дону Дорохин Ю.Н., студент 2 курс магистратуры, «Факультет Управления», Южный Федеральный университет Россия, г. Ростов-на-Дону\nBozhenko E. S., yurchik_dorokhin50@mail.ru Silko D. A. yurchik_dorokhin50@mail.ru Dorokhin Yu. N. yurchik_dorokhin50@mail.ru\nАннотация\nПомимо преимуществ удобного поиска и посетителей в интернет-магазинах, правильная настройка фильтров оказывает положительное влияние при продвижении. В SEO фильтры позволяют создать новую страницу входа с вашим собственным URL-адресом. Его контент максимально соответствует запросу пользователя, а хорошая оптимизация и открытый индексный фильтр страниц\tявляются\tдополнительными\nисточниками качественного целевого трафика.\nAnnotation\nIn addition to the advantages of convenient search and visitors in online stores, the correct setting of filters has a positive impact on promotion. In SEO, filters allow you to create a new login page with your own URL. Its content corresponds to the user's request as much as possible, and good optimization and an open index filter of pages are additional sources of high-quality targeted traffic.\nКлючевые слова: фильтрация, оптимизация, низкочастотный трафик, рост продаж, интернет-магазин.\nKeywords: filtering, optimization, low-frequency traffic, sales growth, online\nstore.\nSEO фильтр - это модуль, позволяющий генерировать неограниченное количество NC-страниц с отфильтрованными страницами каталога на основе параметров (свойств), которые могут быть использованы для фильтрации в смарт-фильтрах. Это помогает улучшить качество индекса сайта поискового робота и создать дополнительные целевые страницы. На самом деле задача seo-фильтров состоит в том, чтобы помочь SEO-специалистам быстро настроить качественные рекламные акции для низкочастотных запросов.\nНизкочастотники, они же длинные хвосты, - это набор поисковых запросов с низкой популярностью. Особенности таких ключей:\n-\tболее четко и узко сфокусировано. Это означает, что они приносят более качественный трафик и целевых посетителей. Те, кто приходит на ваш сайт с такими просьбами, точно знают, чего они хотят. Они вводят наиболее точный вопрос, и если содержание вашей страницы соответствует требованиям клиента, целевое действие будет выполнено в 90 из 100 случаев;\n-\tменее конкурентные запросы. Эти ключи менее востребованы среди целевой аудитории, поэтому их редко можно найти на сайтах конкурентов. Это означает, что продвигать товары на их основе проще, чем высокочастотные запросы.\nВысокочастотные запросы здесь не приносят конвертируемый трафик, это не удивительно - прежде чем купить товар, человек интересуется различиями между производителем, характеристиками, продукцией и читает отзывы. Запрос «модель» или «как выбрать» указывает на то, что пользователь просто изучает рынок. Он еще не знает, что купить. После того как человек определился с основными характеристиками, он начал изучать предложения интернет-магазинов. Изучает внимательно ассортимент, варианты критерий, цену. Вступают в силу показатели конкуренции в интернет-магазинах: стоимость товара, условия доставки, удобство покупки. И на этом этапе SEO-специалисты используют промежуточные и низкочастотные запросы, в том числе транзакционные. Запрос «приобрести» или «купить» приведет к покупке в\tбольшей\tстепени,\tчем\tинформация.\nПоскольку использование высокочастотных запросов не дает хороших результатов, многие магазины используют стратегию использования среднечастотных запросов. Для эффективного продвижения рекомендуется создавать отдельные страницы для каждого типа запроса, например по бренду «made in Belgium», по производителю «made in Belgium price» и т. д. Такой подход позволяет охватить определенную часть потребностей-людей, которые ищут товары в определенной категории, но могут еще не определиться с маркой, цветом и другими характеристиками.\nСистема фильтрации в интернет - магазине помогает сортировать предложения по атрибутам и помогает посетителям выбирать конкретные товары. В зависимости от ситуации свойства отмечаются флажками (цвет, производитель, размер и т.д). Например, на странице напольные покрытия вы можете выбрать ламинат, пробку или линолеум. В категории «ламинат» -выберите класс, производителя, цвет. Фильтр будет сортировать карточки товаров, соответствующие характеристикам тегов. Если человек находит в списке что-то, что его устраивает, включая цену и условия доставки, он может сделать заказ.\nЗадачи оптимизации фильтров под SEO:\n-\tповышения позиции в поисковой выдаче по низко- и среднечастотным запросам;\n-\tлояльности пользователей, благодарных за удобство сайта; уменьшения показателя отказов;\n-\tзначительной длительности пребывания на сайте;\n-\tувеличения конверсии за счёт быстрого нахождения продукции или информации по запросам с заданными характеристиками;\n-\tроста продаж.\nТаким образом, продвижение страниц фильтров может существенно повлиять на ранжирование сайта поисковыми системами и вывести его в ТОП без дополнительных вложений в рекламу.\nНет необходимости открывать все страницы фильтра для индексации. Более того, это может привести к очень нежелательным последствиям. Страницы со «сложными» фильтрами-пересечениями большого количества параметров, выделением нескольких признаков из единого семантического блока и т.д. - должно быть закрыто от индекса. Во-первых, создание уникального человекочитаемого URL для такой страницы значительно усложнит жизнь оптимизатору. Во-вторых, пользователи не часто оценивают длинные строки запросов при поиске, перечисляя все возможные параметры. Здесь нужно начать с собранного семантического ядра. Конечно, преимущества оптимизированных по индексу целевых страниц фильтра скоро станут очевидными. Так как SEO - фильтры являются отличным инструментом для привлечения низкочастотного трафика. Трудности могут возникнуть на этапах внедрения и настройки, но в целом технология максимально проста и понятна. Перед внедрением этого модуля мы рекомендуем вам разобраться в эталонном качестве, расширить область применения номенклатуры и улучшить ПФ.\nС одной стороны, использование фильтров требует большого внимания и может показаться довольно трудоемким. С другой стороны, это приносит значительные преимущества владельцам веб-сайтов и делает ресурсы более\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nудобными для пользователя. Кроме того, изначально тщательно настроив фильтр страницы, вам не придется постоянно касаться темы, лишь изредка использовать шаблон для создания нового URL при добавлении нового товара на сайт. SEO - фильтры отлично подходят для интернет-магазинов с большим количеством товаров из 1000 позиций.\nСписок литературы\n1.\t1PS.RU SEO-копирайтинг. RELOAD. Часть 1. Продажи на 100%: как превратить сайт в продавца 24/7 / 1PS.RU. - М.: Издательские решения, 2018. - 977 c.;\n2.\tВагин, В.Н. Достоверный и правдоподобный вывод в интеллектуальных системах / В.Н. Вагин, Е.Ю. Головина, А.А. Загорянская. - М.: [не указано], 2014. - 727 c.;\n3.\tВандюк, Джон К. CMS Drupal. Руководство по разработке системы управления сайтом / Вандюк, Джон К., Мэтт Вестгейт,. - М.: Вильямс,\n2017.\t- 400;\n4.\tГаевский, А.Ю. 100% самоучитель. Создание Web-страниц и Web-сайтов. HTML и JavaScript / А.Ю. Гаевский, В.А. Романовский. - М.: Триумф,\n2018.\t- 464 c.\n5.\tКлючевые принципы повышения конверсии веб-сайта. Проектирование прибыльных веб-сайтов. Повышение эффективности интернет-рекламы. Оптимизация целевых страниц для улучшения конверсии (комплект из 3 книг). - М.: Манн, Иванов и Фербер, 2018. - 976 c.;\n6.\tМелькин, Никита Искусство продвижения сайта. Полный курс SEO: от идеи до первых клиентов / Никита Мелькин. - М.: Инфра-Инженерия, 2017. - 376 c.;\n7.\tМиллсап Oracle. Оптимизация производительности / Миллсап, Хольт Кэри; , Джефф. - М.: СПб: Символ-Плюс, 2018. - 464 c.;\n8.\tТероу, Ш. Видимость в Интернете: поисковая оптимизация сайтов / - М.: Символ-плюс, 2018. - 270 c.4;\n9. Тероу, Шэри Видимость в Интернете: поисковая оптимизация сайтов. 2-е издание / Шэри Тероу. - М.: Символ-плюс, 2017. - 278 c.;\nList of literature\n1.\t1PS.EN SEO-copywriting. RELOAD. Part 1. Sale 100%: how to turn your website into a 24/7 salesperson / 1PS.RU. - M.: Publishing solutions, 2018. -977 c.;\n2.\tVagin, V. N. Authentic and believable conclusion in intelligent systems / V. N. Vagin, E. Y. Golovin, A. A. Zagoryanskiy. - M.: [not specified], 2014. - 727 c.;\n3.\tVandyk, John K. Drupal CMS. Guide to the development of a site management system / Vandyuk, John K., Matt Westgate,. - M.: Williams, 2017. - 400;\n4.\tGaevsky, A. Yu. 100% tutorial. Creating Web pages and websites. HTML and\nJavaScript / A. Yu. Gaevsky, V. A. Romanovsky. - M.: Triumph, 2018. - 464 p.\n5.\tKey principles for increasing website conversion. Designing profitable websites. Improving the effectiveness of online advertising. Optimization of landing pages to improve conversion (set of 3 books). - M.: Mann, Ivanov and Ferber, 2018. - 976 p.;\n6.\tMelkin, Nikita The art of website promotion. Full course of SEO: from the idea to the first clients / Nikita Melkin. - M.: Infra-Engineering, 2017. - 376 p.;\n7.\tOracle's Millsap. Performance optimization / Millsap, Holt Carey;, Jeff. - M.: SPb: Symbol-Plus, 2018. - 464 p.;\n8.\tTerow, Sh. Visibility on the Internet: search engine optimization of sites / - M.: Symbol-plus, 2018. - 270 p. 4;\n9.\tTerow, Shari Visibility on the Internet: search engine optimization of sites. 2nd edition / Shari Terou. - M.: Symbol-plus, 2017. - 278 p.;\n",
    "download_url": "https://cyberleninka.ru/article/n/ohvat-rasshirennogo-sprosa-posredstvom-seo-stranits-sozdannyh-pod-filtry/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/optimizatsiya-zatrat-na-realizatsiyu-programmnyh-proektov",
    "slug": "optimizatsiya-zatrat-na-realizatsiyu-programmnyh-proektov",
    "title": "ОПТИМИЗАЦИЯ ЗАТРАТ НА РЕАЛИЗАЦИЮ ПРОГРАММНЫХ ПРОЕКТОВ",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFОПТИМИЗАЦИЯ ЗАТРАТ НА РЕАЛИЗАЦИЮ ПРОГРАММНЫХ ПРОЕКТОВ\nС.А. ШЕЙПАК,\nВ.В. ШИЛОВ,\nкафедра «Проектирование вычислительных комплексов»,\n«МАТИ» - РГТУ имени К.Э. Циолковского\nМировая ИТ-индустрия, в частности индустрия оффшорной разработки прикладного программного обеспечения (ПО), в течение многих лет развивается крайне быстрыми темпами. Даже несмотря на то, что Россия вышла на новый рынок относительно недавно, ряд отечественных ИТ-компаний хорошо известны не только в стране, но и за рубежом. Бизнес всегда стремится к минимизации издержек, стремится производить больше, затрачивая при этом меньше ресурсов. Западные компании давно нашли эффективный способ снижать затраты на производство ПО, передавая его на территорию стран, в которых стоимость труда и затраты на обслуживание бизнеса (аренда, налоги, социальное страхование и т.д.) значительно ниже. Наиболее крупные центры оффшорного программирования сформировались в Китае, Индии, России, Восточной Европе. В целом динамика развития оффшорного программирования в России положительная, однако, принимая во внимание масштабы нашей страны и высокую квалификацию рабочей силы, достигнутый до настоящего времени его уровень представляется явно недостаточным. Одним из наиболее значимых факторов, не дающих возможности отечественным разработчикам на равных конкурировать с другими странами, является уровень оплаты труда, значительно более высокий в России, чем в странах - лидерах рынка, Индии и Китае \\ Так, если российские компании Ерат и Ьихой, по отечественным масштабам считающиеся крупными, имеют годовой оборот в десятки миллионов долларов, то ведущие индийские компании - свыше одного миллиарда долларов.\nТаким образом, поскольку стоимость труда в сфере отечественного ИТ-бизнеса не позволяет российским разработчикам на разных конкурировать с предложениями других участников рынка, необходимо искать другие способы и методы снижения стоимости разработки ПО.\nРассмотрим процесс разработки программного обеспечения. В нем присутствует множество производственных издержек, связанных с общей\n1 По данным китайской стороны, в 2008 г. их страна обошла Индию по объему привлеченных к разработке средств.\nвысокой сложностью задачи. Поскольку экономия на оплате труда команды разработчиков может крайне негативно сказаться на качестве продукта (чем сложнее проект, тем выше должна быть квалификация разработчиков, и тем выше будет стоимость их труда) или привести к тому, что проект вообще не будет реализован, следует рассмотреть другие возможности, в частности, организационные факторы, позволяющие снизить стоимость проекта.\nВ качестве примера рассмотрим разработку веб-приложения, как одного из наиболее востребованных типов ПО. При разработке современного веб-приложения применяется множество платформ, технологий, сред средств разработки. С одной стороны, такое технологическое изобилие дает разработчикам множество способов реализации поставленной задачи, с другой - повышает сложность, а также влечет за собой увеличение издержек.\nОдна из основных проблем, возникающих при разработке современных веб-приложений, связана как раз с изобилием средств и способов разработки. При росте количества используемых технологий растут число привлекаемых специалистов и, соответственно, фонд заработной платы, повышается сложность проекта. Увеличиваются сроки реализации проекта, поскольку растет время, необходимое на отладку и поиск ошибок. Кроме того, усложняется взаимодействие внутри проектной группы, потому что специалистам, использующим разные технологии, сложнее найти общий язык. Например, разработчику клиентской части веб-приложения и разработчику серверной части нужно договариваться о формате обмена данными. При этом если серверный программист прекрасно понимает принцип организации данных, то для программиста клиентской части они представляются некой абстракцией, он не понимает сути использования конкретного формата, что ведет к написанию неоптимального, избыточного кода, в котором, кстати, могут присутствовать ошибки. Этот небольшой пример наглядно демонстрирует проблемы, возникающие при реализации проекта.\nДля упрощения взаимодействия членов проектной команды предлагается применять как можно более родственные технологии, использующие одну платформу, что должно привести к снижению издержек и стоимости проекта. При этом в ходе анализа было установлено, что одна из основных проблем, связанных с пониманием, возникает при взаимодействии разработчиков клиентской и серверной части.\nВ настоящее время наиболее популярными технологиями разработки клиентской части веб-приложения являются Flash от компании Adobe и JavaScript. В области серверного программирования конкурируют PHP, Java и ASP.NET. При этом каждая из названных технологий имеет ряд средств разработки, упрощающих и ускоряющих процесс создания веб-\nприложения. Увеличение числа используемых дополнительных средств разработки также усложняет весь процесс создания веб-приложения.\nСнижение числа разнородных технологий приводит к уменьшению издержек, связанных с взаимодействием внутри проектной группы. Помимо снижения издержек, нужно заботиться, о том, чтобы выбранные технологии не создавали трудности пользователям при работе с веб-приложением. Использование технологии Flash накладывает существенное ограничение, - в браузере должен быть установлен специальный плагин, с помощью которого Flash-компоненты будут отображаться на клиенте. В связи с этим рациональнее применить JavaScript, поддерживаемый любым современным браузером. К сожалению, решение использовать JavaScript также создает определенные трудности для разработчиков. Программирование сложного пользовательского интерфейса на JavaScript сопряжено с трудностями написания кроссбраузерного кода, кода, который бы единообразно исполнялся в большинстве браузеров, а особенно в самых популярных: Internet Explorer, FireFox, Opera, Safari.\nДля разработки многопользовательской онлайн-игры, являющейся веб-приложением со сложнейшим клиентским интерфейсом, предлагается использовать специальный фреймворк (инструментарий) Google Web Toolkit. Применение этого инструментария позволяет программистам разрабатывать сложные интерфейсы, писать кроссбраузерный код, единообразно исполняемый во всех популярных браузерах. Идея фреймворка заключается в том, что программист пишет код на языке Java, затем, в процессе компиляции и сборки веб-приложения, Java-код автоматически транслируется в кроссбраузерный JavaScript. Несмотря на то, что озвученный метод выглядит довольном сложным, на практике программист получает удобнейший инструмент, существенно ускоряющий и упрощающий процесс разработки приложения. Структурно написанный код похож на код, применяющий другой известный Java-фреймворк - Swing. Данный фреймворк предназначен для разработки пользовательских интерфейсов для обычных приложений, исполняемых в рамках графической оболочки операционной системы, а не в браузере. Swing известен любому опытному Java-программисту, т.к. его знание требуется для овладения базовыми навыками написания приложений на Java-платформе.\nПроизводственная и экономическая выгода от применения инструментария Google Web Toolkit очевидна, с одной стороны снижается время на разработку отладку приложения. С другой стороны, если серверная часть приложения использует Java-платформу, стирается грань между клиентской и серверной частью, программисты клиентской и серверной части используют схожие технологии, степень интеграции повышается, что ведет к существенному сокращению издержек, а значит и стоимости проекта.\nВ настоящее время платформа Java стала стандартом де-факто для разработки крупных, сложных веб-проектов, к которым относятся много-\nпользовательские онлайн-игры. При наличии мощного инструмента разработки клиентской части веб-приложения, использующего Java-технологии, целесообразно использовать для разработки серверной части платформу Java. Гибкость архитектуры фрейморка Google Web Toolkit позволяет применять его с такими современными инструментами разработки веб-приложений на платформе Java, как, например Hibernate и Struts. Hibernate - это инструмент для применения технологии ORM (Object Relational Mapping, отображение объектов, имеющих многомерную структуру на двумерную структуру таблиц). Такой инструмент может существенно упростить взаимодействие с реляционной базой данных (БД), а также ускорить написание кода и упростить его отладку. При использовании Hibernate программист не обращается напрямую к БД, инструментарий выполняет работу за него. Программист оперирует только объектами. Второй инструментарий, Struts, предназначен для ускорения процесса разработки логики работы веб-приложения.\nОчевидно, что разумное применение современных технологий повышает скорость разработки, а значит, снижает стоимость проекта.\nПосле решения ряда технических задач, связанных с проектированием архитектуры приложения, созданием объектной модели приложения, диаграмм взаимодействия, сценариев поведения пользователя и прочих задач, связанных с планированием и подготовкой проекта, обратимся к ключевому вопросу - стоимости реализации поставленных технических задач.\nДопустим, для разработки клиентской части решено применять инструментарий Google Web Toolkit, а в качестве серверной платформы выбрана платформа Java. В этом случае диапазон специализаций работников сильно сужается. Особенность инструментария Google Web Toolkit, как было сказано выше, заключается в том, что можно отказаться от услуг JavaScript-программиста, а также верстальщика страниц, т.к. все страницы создаются динамически в браузере пользователя, и их элементы располагает Java-программист. Другая особенность фреймворка заключается в возможности решать практически все программные задачи параллельно. Логически приложение представляется в трех частях: пользовательский интерфейс (кнопки, поля ввода, обработчики событий, реагирующие на ввод значений в поля или нажатия на кнопки), интерфейсы приема и отправки данных, а также классы, имплементирующие их, серверные контроллеры, принимающие запрос пользователя, обрабатывающие и отправляющие его.\nТаким образом, логично нанять трех Java-программистов, каждый из которых будет вести свои работы, результаты которых будут совмещены в системе контроля версий (SVN). Помимо программистов, необходимо иметь в штате дизайнера, который подготавливает эскизы для разработчика пользовательского интерфейса. Роль системного архитектора, а по совместительству ведущего разработчика, контролирующего качество напи-\nсания кода, может исполнять один из Java-программистов. Кроме программистов, работающих над веб-приложением, необходим программист баз данных, который возьмет на себя ответственность за проектирование модели данных, написание запросов, процедур и функций. Если будет принято решение в пользу ORM, т.е. от традиционного взаимодействия с реляционной базой данных откажутся, то имеет смысл заменить программиста БД на еще одного Java-программиста, который занимался бы решением задач, связанных с ORM, а также настройкой инфраструктуры приложения. Под инфраструктурой здесь понимается подключение модулей ORM, настройка сервера приложения и написание скриптов развертывания.\nОпределившись с кадровым составом проектной группы, необходимо решить, какое программное обеспечение будет использовано для запуска проекта. В качестве сервера приложений рекомендуется выбрать Glass-Fish, являющийся аналогом Sun Java System Server и выведенный компанией Sun в область открытых разработок. В качестве базы данных рекомендуется выбрать MySQL (компания MySQL AB была куплена зимой 2008 г. компанией Sun). Данный сервер баз данных идеально подходит для решения задач разработки онлайн-игры, как по соотношению цена-качество, так и по соотношению цена-функционал. По этим параметрам MySQL значительно опережает конкурирующие продукты: сервер баз данных компании IBM DB2, Oracle и Microsoft MSSQL.\nЗакончив с утверждением программной платформы, нужно составить смету проекта. В смету проекта разработки онлайн-игры мы не будем включать типовые расходы, связанные с арендой площадей, налоговыми отчислениями с зарплат, поскольку в общем случае они одинаковы для любых проектов подобного рода. Существенно уменьшить их, не нарушая трудового и налогового законодательства, не представляется возможным. Точно так же в базовую смету не будет включена стоимость аппаратуры, поскольку существенно минимизировать эту графу расходов не представляется возможным.\nТаким образом, мы будем учитывать только ту часть стоимости разработки, которая складывается из размера заработных плат и затрат на приобретение программного обеспечения. Зарплаты сотрудников - это самая затратная статья бюджета проекта. На рынке труда сейчас наблюдается нехватка квалифицированных специалистов в области информационных технологий. Именно поэтому их зарплаты растут весьма быстро, и, следовательно, лучше оградить проект от рисков, связанных с уходом членов проектной группы. Специфика проекта такова, что при найме нового программиста взамен покинувшего проект придется потратить много времени на введение нового сотрудника в курс дела. Высокие же зарплаты снижают вероятность ухода сотрудника.\nРеализация проекта предполагает использование следующих специалистов:\n1.\tМенеджер проекта с месячным окладом 60.000 руб. и с условием получения бонуса по завершению проекта (отчисление процента от дохода с проекта в течение некоторого времени). Мотивация бонусом, получаемого менеджером после запуска проекта, является хорошей практикой, стимулирует самоотдачу сотрудника, а также снижает вероятность того, что руководитель проектной группы покинет группу до окончания работ.\n2.\tДизайнер с окладом 50 тыс. руб.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3.\tСистемный архитектор с окладом 80 тыс. руб. Системный архитектор является ключевой фигурой во всем проекте, в его задача входит координация и контроль деятельности технических специалистов. Целесообразно привлечь к работе высококвалифицированного специалиста, привлечь его высокой зарплатой.\n4.\tДва 1ауа-программиста с окладом 40 тыс. руб. каждый.\n5.\tПрограммист БД с окладом 40 тыс. руб. Если будет принято решение использовать ОЯМ, то на место программиста БД будет нанят 1ауа-программист.\nВ среднем разработка проекта типа онлайн-игры занимает от полугода до года. Этап проектирования, во время которого к работам привлекаются менеджер и системный архитектор, называется нулевым этапом. Обычно через 6-8 месяцев после начала работ выпускается бета-версия игры. Целесообразность выделения первого этапа заключается, с одной стороны, в том, что новая игра получает известность, привлекаются игроки и формируется игровое сообщество, с другой стороны - наличие бета-версии позволяет программистам оперативно устранять обнаруженные ошибки в ходе тестирования игры пользователями, а также расширять функционал, корректируя задачи под требования пользователей. Этап разработки до выпуска бета-версии назовем первым, а этап доработки игры - вторым этапом.\nОсобенности предлагаемой нами архитектуры проекта позволяют сократить сроки разработки в полтора-два раза благодаря тому, что распараллеливание задач, решаемых техническими специалистами, существенно ускоряет процесс разработки, и уменьшает время, затрачиваемое на отладку приложения и поиск ошибок.\nКроме того, нет смысла набирать весь штат сразу. Вначале следует нанять только менеджера проектов и системного архитектора. Менеджер проекта будет заниматься подготовкой требований, расчетом бюджета проекта и начнет планирование; системный архитектор на основании требований менеджера займется разработкой технического задания и проектированием архитектуры многопользовательской онлайн-игры. В среднем подготовительные работы такого рода занимают не более одного месяца.\nОриентировочно затраты на проект в этом случае составят в первый месяц 140.000 (60.000+80.000) руб., а за четыре месяца до выпуска бета-версии - 1.040.000 руб. [4х(80.000+40.000+140.000]. После выпуска бета-версии от услуг одного Java-программиста можно отказаться. Еще два месяца потребуется на подготовку рабочей версии; за это время затраты составят 440.000 руб. [2х(40.000+40.000+140.000)].\nТаким образом, общие затраты составят 1.620.000 руб.; кроме того, стоимость лицензии на использование сервера баз данных составляет 17.630 руб.\nВ табл. 1 приведены данные, демонстрирующие разницу между двумя подходами в сроках выполнения работ и затратах на проект. При этом мы принимаем крайние сроки выполнения основных задач, таких как выпуск бета-версии, а затем релиз рабочей версии онлайн-игры.\nТаблица 1.\nСравнительные затраты на реализацию проекта онлайн-игры.\nСпециалист\tОклад <1»У»>\tМесяц\t\t\t\t\t\t\t\t\t\tСтоимость (руб.)\tРазница\n1\t2\t3\t4\t5\t6\t7\t3\t9\t10\nМенеджер\t60 000\t0\t1\t1\t1\t1\t2\t2\t\t\t\t420 000\tISO 000\n0\t1\t1\t1\t1\t1\t1\t2\t2\t2\t600 000\nСистемный архитектор\tSO 000\t0\t1\t1\t1\t1\t2\t2\t\t\t\t560 000\t240 000\n0\t1\t1\t1\t1\t1\t1\t2\t2\t2\tS00 000\n1а\\7а- пр о гр амм и с т 1\t40 000\t\t1\t1\t1\t1\t2\t2\t\t\t\t240 000\t120 000\n1\t1\t1\t1\t1\t1\t2\t2\t2\t360 000\n.Тал а - пр о гр амм и с т 2\t40 000\t\t1\t1\t1\t1\t\t\t\t\t\t160 000\tSO 000\n1\t1\t1\t1\t1\t1\t\t\t\t240 000\nПрограммист БД\t40 000\t\t1\t1\t1\t1\t2\t2\t\t\t\t240 000\t120 000\n1\t1\t1\t1\t1\t1\t2\t2\t2\t360 000\nДизайнер\t50 000\t\t1\t1\t1\t1\t2\t2\t\t\t\t300 000\t150 000\n1\t1\t1\t1\t1\t1\t2\t2\t2\t450 000\nВерстальщик\t30 000\t\t1\t1\t1\t1\t1\t1\t2\t2\t2\t270 000\t270 000\nПрограммист клиентской части\t50 000\t\t1\t1\t1\t1\t1\t1\t2\t2\t2\t450 000\t450 000\nОбщая стоимость проекта при использовании интеграционного решения\t\t\t\t\t\t\t\t\t\t\t\t1 920 000\t1 610 000\nОбщая стоимость проекта при использовании традиционного подхода\t\t\t\t\t\t\t\t\t\t\t\t3.530 000\nВ таблице учтено, что при использовании традиционной методологии разработки требуется иной состав проектной группы. К команде добавятся разработчик клиентской части (программист, пишущий на JavaScript с окладом 50 тыс. руб.) и верстальщик с окладом 30 тыс. руб.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nОтметим, что процесс разработки ПО носит итеративный характер, причем участие разработчика клиентского интерфейса и верстальщика необходимо практически на каждой итерации. В связи с тем, что увеличивается количество используемых технологий, взаимоотношения внутри проектной группы между техническими специалистами существенно усложняются. Поэтому сроки разработки и отладки приложения увеличатся.\nОриентировочно, цикл разработки от нулевой стадии до стадии релиза рабочей версии увеличится до 10-12 месяцев. Даже если срок завершения проекта увеличится только на 4 месяца, бюджет проекта значительно возрастет.\nИспользование предлагаемой архитектуры приложения снижает риск необоснованного затягивания завершения проекта, поскольку параллелизм труда разработчиков позволяет реализовать проект в максимально сжатые сроки. В целом же грамотное планирование процесса разработки и оптимальный выбор архитектуры программных проектов может позволить существенно сократить издержки при их реализации и тем самым увеличить конкурентоспособность отечественных разработчиков на мировом рынке программного обеспечения.\n",
    "download_url": "https://cyberleninka.ru/article/n/optimizatsiya-zatrat-na-realizatsiyu-programmnyh-proektov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/informatsionnaya-sistema-prognozirovaniya-dinamiki-lesnyh-resursov",
    "slug": "informatsionnaya-sistema-prognozirovaniya-dinamiki-lesnyh-resursov",
    "title": "Информационная система прогнозирования динамики лесных ресурсов",
    "abstract_description": "В статье рассматривается разработанная информационная система для лиц, принимающих решения по рациональному использованию лесных ресурсов на основе компьютерного анализа и прогнозирования их состояния. Описываются базы знаний системы автоматической параметрической идентификации математических моделей динамики лесных ресурсов. Рассматриваются входящие в информационную систему инструментальные средства, которые позволяют пользователям создавать на ее основе свои приложения.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.415.2\nИнститут динамики систем и теории управления СО РАН ул. Лермонтова, 134, Иркутск, 664033 E-mail: chudnenko@icc.ru\nИНФОРМАЦИОННАЯ СИСТЕМА ПРОГНОЗИРОВАНИЯ ДИНАМИКИ ЛЕСНЫХ РЕСУРСОВ\nВ статье рассматривается разработанная информационная система для лиц, принимающих решения по рациональному использованию лесных ресурсов на основе компьютерного анализа и прогнозирования их состояния. Описываются базы знаний системы автоматической параметрической идентификации математических моделей динамики лесных ресурсов. Рассматриваются входящие в информационную систему инструментальные средства, которые позволяют пользователям создавать на ее основе свои приложения.\nКлючевые слова: математическое моделирование, лесные ресурсы, искусственный интеллект, Java, Prolog.\nВведение\nПроблема формирования политики использования лесных ресурсов (ЛР) является чрезвычайно важной задачей для лиц, принимающих решения (ЛПР) в управлении лесопромышленным регионом. Эффективность принимаемых ЛПР решений в первую очередь зависит от объема, вида и качества исходных данных о состоянии ЛР, а также прогнозов развития ЛР в зависимости от принимаемых ЛПР решений (политики заготовки ЛР). В связи с этим возникла необходимость создания информационно-аналитических систем поддержки принятия решения в области управления лесными ресурсами и прогнозирования их динамики. Такая система позволит удовлетворить постоянно возрастающие требования к качеству информации о состоянии лесных ресурсов в текущий момент и на перспективу путем повышения ее достоверность и надежности, а также оперативности получения.\nРассматриваемое исследование посвящено разработке инструментальных средств, направленных на решение задач автоматизации поддержки принятия решений по рациональному использованию лесных ресурсов, функционирующих на основе современных средств обработки пространственно-распределенной информации - геоинформационных системах (ГИС). В основе подхода к анализу возможных решений, принимаемых ЛПР, лежит анализ свойств исследуемой природной системы в будущем при некотором допустимом решении ЛПР, т. е. анализ прогнозов динамики исследуемого объекта при помощи соответствующего математического и программного обеспечения, реализованного в рамках некоторой системы поддержки принятия решений (СППР). СППР являются человеко-машинными объектами, которые позволяют ЛПР использовать разнообразные методы, данные, знания, объективные и субъективные модели для анализа и решения слабоструктурированных и неструктурированных задач. Идея СППР возникла как попытка автоматизации естественных человеческих действий по анализу имеющейся информации, планированию действий и т. п. с целью решения конкретной заданной задачи. В решении рассматриваемой задачи СППР строится на основе анализа результатов расчета прогноза динамики ЛР по соответствующим математическим моделям.\nИнформационная система прогнозирования состояния лесных ресурсов\nИнформационная система предназначена для прогнозирования состояния лесных ресурсов на основе приложения системы математических моделей к конкретному природному объекту в условиях реализации некоторой гипотетической политики использования лесных ресурсов, заданной набором параметров модели. Информационная система для поддержки\nISSN 1818-7900. Вестник НГУ. Серия: Информационные технологии. 2008. Том 6, выпуск 3 © А. К. Попова, 2008\nпринятия решений построена как интеллектуальная система анализа данных, использующая специализированные в предметной области подсистемы математического моделирования. Процесс принятия решения в таких системах состоит из этапов выбора класса задачи, идентификации модели исследуемого объекта, при этом используется база данных, содержащая исходные данные об этом объекте. Затем, на основе информации об исходной задаче, в частности, множестве допустимых решений ЛПР, формируется набор изменяемых параметров модели, строятся их комбинации, порождая сценарии возможного развития объекта в будущем. На следующем этапе производится компьютерный расчет сценариев и вычисление критериев оценки этих сценариев. На последнем этапе осуществляется, в общем случае, многокритериальная оптимизация сценариев, и, если становится возможным, выбор наилучшего с точки зрения некоторого набора критериев сценария. Полученный сценарий или набор сценариев представляется ЛПР в некотором виде, в частности, в виде графических изображений. Отличительной особенностью таких информационных систем является использование математического моделирования для получения дополнительной информации об исследуемом объекте.\nИнформационная система представляет собой совокупность трех базовых подсистем: ГИС, подсистемы математического моделирования и системы автоматизации логических рассуждений (системы искусственного интеллекта). Компоненты информационной системы формируют инструментальное средство, при помощи которого возможна разработка как производных ИС, так и отдельных информационных систем из отдельных компонент системы.\nВ информационной системе реализованы модели «Динамики управления древостоем» (ДУД) и «Лесные ресурсы» [Модели управления..., 1981; Черкашин, 1984]. Модель ДУД предназначена для расчета временной динамики лесных ресурсов территории ранга области и лесхоза по категориям земель и группам возраста. Модель позволяет решать теоретические и практические задачи прогнозирования динамики ЛР с учетом последствий различного вида хозяйственной деятельности и катастрофических смен. При построении модели принимаются во внимание возникновение пожаров и проведение плановых вырубок, изъятия лесов лесного фонда в результате капитального строительства.\nИсходные данные для модели ДУД хранятся в БД формата Microsoft Excel и представляют собой значения площадей лесов 53 лесхозов Иркутской области по 7 породам и 6 классам возраста, а также численность населения для каждого лесхоза.\nВ модели «Лесные ресурсы» учитываются динамика леса на обширных пространствах и особенности хозяйственного освоения территории. Модель позволяет выбирать такой вариант территориальной организации рубок главного пользования и создавать такую систему лесоэксплуатации, которые учитывали бы как цели лесозаготовительной промышленности, так и задачи воспроизводства лесных ресурсов, а также ландшафтно-защитные, средообразующие, рекреационные и другие функции лесов. Данная модель позволяет описать изменение структуры лесов от уровня области в целом до динамики внутреннего площадного строения лесонасаждений отдельного лесного квартала.\nИсходные данные для модели «Лесные ресурсы» хранятся в БД формата *.dbf и содержат значения площадей лесов Усть-Илимского района по кварталам и 3 группам возраста. В БД ГИС входит цифровая топографическая основа Иркутской области (для модели ДУД) и Усть-Илимского района (для модели «Лесные ресурсы»).\nМодель ДУД описывает породовозрастную структуру лесных ресурсов на более крупном уровне и предназначена для решения более общих задач, чем модель «Лесные ресурсы», которая, в свою очередь, позволяет более детально анализировать последствия проведения рубок. Кроме того, модель «Лесные ресурсы» является пространственно-распределенной.\nПри расчетах по математическим моделям в той или иной мере используются пространственно-распределенные данные, что требует обеспечения тесного взаимодействия с современными ГИС, используемыми, в частности, для представления результатов прогнозных расчетов в виде цифровых карт.\nПодсистема искусственного интеллекта позволяет автоматизировать процесс построения математической модели природного объекта. Ее средствами осуществляется выбор из базы моделей такой математической модели, которая наиболее соответствует задаче прогнозирования и рангу исследуемого объекта.\nПодсистема искусственного интеллекта реализована на основе базы знаний, содержащей знания о базовой структуре каждой модели, об идентификации модели на основе данных об исследуемом объекте, а также поиска начальных условий модели. Правила базы знаний позволяют гибко определять такие антропогенные воздействия на ЛР как объемы рубок, насаждений в зависимости от набора параметров. Например, объем рубок изменяется на каждом шаге интервала прогнозирования отдельно для каждого моделируемого участка, в зависимо -сти от расчетных данных.\nИнформационная система разрабатывается на основе программной технологии Java, которая является объектно-ориентированной, платформо-независимой, многопоточной. Использование технологии Java при разработке системы позволило использовать возможности имеющихся java-библиотек (например, для работы с картами, обработки Пролога), реализовать управление отдельными модулями системы с помощью скриптов на основе JavaScript, создать вариант системы в виде апплета.\nПодсистема математического моделирования представлена блоком численных расчетов, базой данных и моделей; подсистема искусственного интеллекта - блоками параметрической идентификации, запросной подсистемой, базой знаний; графическая подсистема - блоками ГИС, визуализации результатов (рис. 1).\nРис. 1. Информационные потоки системы\nБлок интерфейса пользователя взаимодействует с основными блоками программного комплекса, передавая им начальные данные об объекте моделирования и поставленной задаче, получая от них результаты расчетов в разных форматах (см. рис. 1). На основе полученных данных запросной подсистемой на основе базы знаний осуществляется подбор модели. Исходные данные для идентификации модели и вычисления начальных условий загружаются из баз данных. Запросы к базам данных генерируются запросной подсистемой в процессе построения формализованного представления модели конкретного исследуемого объекта. На основе дальнейшего анализа задачи и выбранной модели блоком параметрической идентификации устанавливается множество параметров модели и начальные условия. Комбинации значений параметров отображают управляющее воздействие на объект (гипотетическое решение ЛПР). Далее запросной подсистемой осуществляется построение выбранной модели: определяется последовательность смены состояний участка территории в зависимости от рассчитанных параметров модели.\nПрогнозные расчеты проводятся блоком численных расчетов, каждый расчетный сценарий оценивается по заданному набору критериев, из полученного множества альтернатив выделяется множество парето-оптимальных решений.\nРезультатные данные передаются в блок визуализации результатов и ГИС. В информационной системе предусмотрена возможность создания карты по результатам прогнозных расчетов, на которой каждая расчетная единица (например, лесхоз) обозначается некоторым\nцветом в зависимости от численного значения расчетной характеристики. Поэтому, после проведения расчетов по всем лесхозам области пользователь имеет возможность посмотреть, как распределяются лесные ресурсы по территории области. Для создания картографического произведения необходимо выбрать характеристику лесных ресурсов - переменную модели или некоторое математическое выражение над переменными, которая должна быть отображена. После этого данные расчетной базы данных разделяются на группы в зависимости от установленных диапазонов значений, и различным объектам карты присваиваются соответствующие значения раскраски. Для раскраски берутся относительные значения характеристики, например, отношение площади молодняков сосны к общей площади лесхоза. Более темные цвета соответствуют большему значению характеристики, более светлые - меньшему.\nДля отображения результатов в виде картографического произведения данные из базы данных расчета передаются в ГИС-подсистему, которая производит их отображение с привязкой к топооснове и сетке границ выделов. В качестве топоосновы в настоящее время используется карта лесхозов Иркутской области. Система позволяет строить картографические произведения для любого момента времени расчета модели, при этом существует возможность экспортировать изображения в файл (формата JPEG).\nТакже ГИС-подсистема позволяет для каждой стадии расчета динамики лесов формировать новое изображение как новый слой тематической карты. Динамика объекта исследования представляется серией картографических слоев, помеченных соответствующим моментом времени. Эти слои при последовательном подключении формируют картографическую анимацию, отображающую изменение во времени и в пространстве различных характеристик лесов.\nИнструментальные средства информационной системы\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБазовые блоки информационной системы позволяют рассчитывать динамику лесных ресурсов. Описание задачи прогнозирования, объекта моделирования, задание критериев анализа результатов производится в процессе диалога с подсистемой пользовательского интерфейса.\nОднако при решении некоторых задач пользователю может потребоваться расширение возможностей информационной системы. Для этого в состав информационной системы включены инструментальные средства, позволяющие пользователям создавать на его основе свои приложения.\nДанные средства призваны обеспечить пользователя возможностью самому управлять функционированием программы, изменяя некоторые ее модули. При этом изменяемые модули создаются на языках, программирование на которых не требует наличия специальной программной среды. С помощью таких инструментальных средств можно решать, например, задачу задания критериев анализа результатов, полученных в ходе расчетов системы.\nМеханизм программирования пользовательских приложений реализован при помощи интерпретатора языка программирования JavaScript и специальной библиотеки jsCalc, что позволяет интегрировать множество базовых функций и объектов в рамках одного приложения. Библиотека реализована в виде модуля СППР, она предоставляет доступ к различным функциям программы, например, построению графиков. Блок работы со скриптами взаимодействует с пользователем не через основной пользовательский интерфейс информационной системы; его процедуры вызываются непосредственно скриптом на языке JavaScript. В программу-приложение JavaScript должна включаться загрузка модуля jsCalc, который непосредственно производит расчет по математической модели заданного сценария. Рассчитанные значения результата доступны через функции модуля jsCalc.\nМодуль jsCalc содержит следующие компоненты: расчет сценариев модели динамики управления древостоем, конструирование графиков и диаграмм по результатам расчетов, реализованное на основе библиотеки JFreeChart. Пользовательский интерфейс программы строится на основе библиотеки Swing, доступ к которой также обеспечен через средства JavaScript.\nВзаимодействие между Java-модулем и интерпретатором JavaScript осуществляется с помощью библиотек Rhino и Sepia.\nSeppia - оболочка для создания и использования Java-приложений. Seppia позволяет интерпретатору JavaScript управлять приложением, при этом программный код JavaScript использует библиотеки Java (jar-архивы).\nИнтерфейс прикладного программирования (API, Application Programming Interface) модуля расчетов jsCalc представлен следующими функциями:\npublic double[] getData(String lesh, String porod, String kl) - возвращает массив данных по лесам лесхоза lesh, породы porod, класса возраста kl. Параметры функции являются строковыми переменными;\npublic double[] getDataLR(int kl) - возвращает массив данных по лесам класса возраста kl; public void defineData(String name, double[] ar) - добавляет к графику массив данных ar с названием (заголовком, который будет отображаться на легенде графика) st;\npublic void makeMap(int year, String por, String vozr) - создает карту для лесов на заданный год моделирования year породы por класса возраста vozr;\npublic void CalcDUD() - запускает расчет по модели с учетом указанных параметров. Функция CalcDUD() использует для расчетов следующие переменные модуля jsCalc: int time - количество лет интервала моделирования, целое число;\nString lesh - название лесхоза, для которого необходимо произвести расчет, строка; boolean mlt - логическая переменная, указывает, будет расчет производится по одному конкретному лесхозу (false) или по всем (true), значение по умолчанию - false;\nString uh, gp, pz - соответственно уровни проведения рубок ухода, рубок главного пользования и пожаров, строковая переменная со значениями low, middle, high.\npublic void CalcLR() - запускает расчет по модели «Лесные ресурсы» с учетом указанных параметров:\nint time - количество лет интервала моделирования, целое число; int U- максимальный объем рубок в год, целое число.\nРассмотрим пример приложения JavaScript. Вначале необходимо произвести инициализацию модулей:\nvar frame = Packages.javax.swing.JFrame //модуль для формы\nvar label = Packages.javax.swing.JLabel // метки полей в интерфейсе пользователя\nvar jsc = Packages.first.jsCalc // модуль расчетов\nvar ar = java.lang.reflect.Array. newInstance(java.lang.Double.TYPE, 31); //массив для хранения результатов\nvar ar1 = java.lang.reflect.Array.newInstance(java.lang.Double.TYPE, 31); var ar2 = java.lang.reflect.Array.newInstance(java.lang.Double.TYPE, 31);\nОсновной текст скрипта выглядит следующим образом:\nvar fr = new frame(); // создаем форму\nvar lb = new label(); // создаем метку интерфейса\nvar js = new jsc(); // создаем экземпляр модуля расчетов\njs.time = 30; // задаем величину интервала моделирования\njs.lesh = \"Марковский\"; // задаем лесхоз\njs.uh = \"high\"; //уровень рубок ухода - высокий\njs.gp = \"high\"; //уровень рубок главного пользования - высокий\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\njs.pz = \"low\"; //уровень пожаров - низкий\njs.CalcDUD(); // запускаем расчет по заданным данным\njs.defineData(\"Марковский, сосна, молодняки 1кл\",\njs.getData (\"Марковский\", \"сосна\", \"молодняки 1кл\")); // добавляем к графику данные по молоднякам 1 класса сосны Марковского лесхоза\nar1 = js.getData(\"Марковский\", \"ель\", \"приспевающие\"); // получаем данные по приспевающим елям Марковского лесхоза\nar2 = js.getData(\"Марковский\", \"ель\", \"молодняки 2кл\"); // получаем данные по молоднякам 2 класса елей Марковского лесхоза for (i = 0; i<30; i++)\nar[i] = ar1[i]-ar2[i]; // создаем массив со значениями разницы приспевающих и молодняков 2 класса ели Марковского лесхоза\njs.defineData(\"MapKOBcm^ ель, приспевающие-молодняки 2 кл.\", ar); // добавляем полученный массив к графику\nvar image = js.chart(); // создаем объект изображение\nlb.setIcon(new Packages.javax.swing.ImageIcon(image)); //отображаем график на метку fr.getContentPane().add(lb); // добавляем метку на форму fr.show(); //показываем форму\nСозданное приложение проводит расчеты по модели ДУД, с высоким уровнем рубок ухода и главного пользования и низким уровнем пожаров. Из полученных данных выделяются и добавляются к графику временной ряд значений площадей молодняков 1 кл. сосны Марковского лесхоза и ряд, который представляет собой разницу приспевающих и молодняков 2 класса ели Марковского лесхоза. Полученный график (объект-изображение) помещается на созданную форму и отображается пользователю (рис. 2).\nДанный механизм позволяет управлять не только выводом графиков, но и такими возможностями информационной системы как расчеты по моделям, построение цифровых карт в ГИС.\nДля того, чтобы вывести с помощью скрипта результаты расчетов на карту, у нему надо добавить строку:\n]к.такеМар(10,”сосна”,”спелые и перестойные”); //карта для спелых и перестойных сосен десятого года интервала моделирования.\nПолученное приложение будет отображать карту площадей спелых и перестойных сосен десятого года интервала моделирования по лесхозам Иркутской области. Причем, чем темнее цвет окраски лесхоза на карте, тем больше в нем площадей указанной породы и класса возраста.\nВозможность программирования скрипта является удобным инструментом для разработчиков. Например, с помощью скрипта можно создавать собственный интерфейс, импортировать исходные данные из форматов, неподдерживаемых информационной системой, анализировать результатные данные и т.д. Таким образом, модуль программирования javascript позволяет на основе Java-библиотеки jsCalc разработчикам создавать собственные варианты программного обеспечения для моделирования лесных ресурсов.\nИнтеллектная подсистема параметрической идентификации моделей\nПри большом разнообразии исходных данных, математических моделей и их параметров очень важно так организовать систему, чтобы она могла гибко настраиваться на проведение конкретных расчетов и специфику исходных данных. Поэтому в состав программной системы включена интеллектная подсистема, реализованная при помощи логического языка программирования Prolog. Она содержит базу знаний (БЗ) о структурной и параметрической\nидентификации моделей динамики лесных ресурсов. Кроме того, интеллектная подсистема реализует вопросно-ответную подсистему, при помощи которой можно делать запросы к внутренней структуре модели и результатам компьютерного моделирования.\nПодсистема языка Пролог в программную систему встроена при помощи Java-библиотеки tuProlog 1.3, которая позволяет любые сущности Java (объекты, классы, пакеты) представлять в виде термов Пролога.\nКогда пользователь начинает расчет прогноза состояния ЛР с помощью информационной системы то ему необходимо указать некоторые начальные данные о природном объекте (например, тип геосистемы) и задаче прогнозирования (например, длительность). Далее дана основе знаний, хранящихся в базе знаний, будет произведен поиск соответствующей модели. Например, начальные данные для модели ДУД имеют следующий вид:\nmodels(dud, problem(model_dinam), rang(land), type(les), progn(desytilet)), т.е., начальные данные - это утверждение, представленное в виде факта языка Пролог. В приведенном примере утверждение означает, что для модели ДУД характерно моделирование динамики объекта ранга ландшафта, тип ландшафта - лес, временной интервал моделирования - десятилетия.\nПосле того, как с помощью БЗ и механизма логического вывода будет найдена модель, подходящая для конкретной задачи прогнозирования, начнется построение выбранной модели. Например, для модели ДУД состояние объекта моделирования в начальный момент времени t0 получаем, используя правило:\nfs0(model(dud), Lesh, S, Snep, Nas) s0(Lesh, t0, S, Snep, Nas).\nРезультатом работы правила будут значения общей площади лесхоза S, не покрытой площади Snep и численности населения Nas для лесхоза Lesh.\nДалее для расчетов необходимо получить исходные данные о площадях, занятых породой определенного класса возраста. Для этого применяются правила вида:\nsquare(Lesh, Prd, vozrast(”молодняки 1кл \"), t0, S) :- sq(Lesh, Prd, _, S,_, _, _, _).\nСтруктура типа sq(Lesh, Prd, S, Sm1, Sm2, Ssr, Spr, Ssp) содержит данные о площадях лесхоза Lesh породы Prd: общей S, молодняков 1 кл. Sm1 и 2 кл Sm2, средневозрастных Ssr, приспевающих Spr, спелых и перестойных Ssp.\nПосле того, как из БЗ получены все исходные данные, начинается построение последовательности смены участками леса своих возрастных классов по модели ДУД с помощью следующего правила:\nperehod(model(dud), Prd, Kl, Kl2, In) :-smena(Kl2, Kl), intens(Prd, In).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n«В модели ДУД переход леса породы Prd из класса Kl в класс Kl2 с интенсивностью In осуществляется, если Kl2 сменяет Kl и интенсивность для породы Prd равна In».\nСмена классов возраста представлена термами вида smena(\"молодняки 2кл\", \"молодняки 1кл\").\nИспользуя это правило, строится матрица коэффициентов перехода площадей леса из одного состояния в другое, проводятся численные расчеты. Также при этом может быть учтено проведение в лесах рубок главного пользования и рубок ухода. Правило проведения рубок выглядит следующим образом:\nrubkaGP(model(dud), porod(K), vozrast(V), Vr) :-porodRub(K), rubkaGP type(V), rubGP(K, Vr).\nrubkaGP_type(\"спелые и перестойные\").\n«В модели ДУД рубки главного пользования по породе K возраста V объемом Vr проводятся, если порода K может вырубаться, ее возраст V подлежит вырубке и объем ее рубки составляет Vr».\nПри этом породами, которые могут вырубаться porodRub() являются сосна, лиственница, пихта, ель, береза и осина (кроме кедра). Также для рубок главного пользования предназначены только деревья спелого и перестойного класса возраста rubkaGP_type().\nДалее по построенной структуре модели и полученным исходным данным информационной системой проводятся прогнозные расчеты. Для задачи автоматизации идентификации модели ДУД определены следующие входные данные:\n1)\tхарактеристики исследуемого объекта (термы ранг геосистемы rang(), тип ландшафта type_land());\n2) формулировка решаемой задачи, например, моделирование динамики, расчеты вырубок, пожаров и т.п. (термы problem());\n3)\tвиды пород леса (термы porod());\n4)\tхарактеристики смены классов возраста в процессе роста леса (термы smena());\n5)\tхарактеристики интенсивности смены классов возраста в процессе роста леса (термы intens());\n6)\tвиды пород леса, вырубаемых на рассматриваемой территории (терм porodRub( ));\n7)\tтипы классов возраста леса (термы vozrast());\n8)\tклассы возраста леса, который можно вырубать (термы rubkaGP_type());\n9)\tхарактеристики рубок главного пользования (термы rubGP());\n10)\tхарактеристики рубок ухода (термы rubUh());\n11)\tхарактеристики начального состояния объекта моделирования (термы s0());\n12)\tхарактеристики начального состояния объекта моделирования по породе и классу возраста (термы sq()).\nАлгоритм загрузки кода Пролога и обработки его результатов выглядит следующим образом: Prolog engine = new Prolog(); // создаем экземпляр класса Prolog\nengine.setTheory(new Theory(new FileInputStream(\"model.pl\"))); // загрузка файла базы знаний SolveInfo info=engine.solve(quer); // запрос к базе if (info.isSuccess()){ //если есть решение, то...\nString res = info.getSolution(). toString(); // получаем решение if (engine.hasOpenAlternatives()) //если есть еще решения info = engine.solveNext(); // обрабатываем следующее else break; // иначе заканчиваем\nБаза знаний содержит правила, позволяющие производить автоматическую идентификацию математической модели. Это делает наглядным процесс моделирования, дает возможность описывать сложные закономерности динамики природных объектов. Также для гибкой подстройки модели к условиям региона не требуется изменять код программной системы расчета прогноза, а необходимо лишь внести требуемые данные в базу знаний или дополнить ее новыми правилами.\nСписок литературы\nМодели управления природными ресурсами / Под ред. В. И. Гурмана. М.: Наука. Гл. ред. физ.-мат. лит., 1981. 204 с.\nЧеркашин А. К. Система математических моделей леса // Планирование и прогнозирование природно-экономических систем. Новосибирск: Наука, 1984. С. 46-57.\nМатериал поступил в редколлегию 20.05.2008\nA. K. Popova\nThe Information System for Forest resources Dynamic Prediction\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nThe developed information system for taking decisions of forest resources conservation by computer analysis and state prediction is considered. The knowledge bases of automatic parametric identification of forest resources dynamic mathematical models are described. The software tools of the software system which allow users to make own applications are considered.\nKeywords: mathematical modeling, forest resources, artificial intelligence, Java, Prolog.\n",
    "download_url": "https://cyberleninka.ru/article/n/informatsionnaya-sistema-prognozirovaniya-dinamiki-lesnyh-resursov/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/reshenie-zadachi-obespecheniya-zadannoy-proizvoditelnosti-vychislitelnyh-kompleksov-pri-postroenii-zaschischennyh-informatsionnyh",
    "slug": "reshenie-zadachi-obespecheniya-zadannoy-proizvoditelnosti-vychislitelnyh-kompleksov-pri-postroenii-zaschischennyh-informatsionnyh",
    "title": "Решение задачи обеспечения заданной производительности вычислительных комплексов при построении защищенных информационных систем",
    "abstract_description": "Проводится анализ необходимости применения в информационных системах многопроцессорных вычислительных систем. Предлагается подход для автоматизации процесса выбора эффективной конфигурации разнородных многопроцессорных вычислительных систем.",
    "full_text_body": "\n\n\n\n\uFEFFСекция «Методы и средства зашиты информации»\nУДК 004.056\nВ. С. Фейгин Научный руководитель - В. А. Терсков Сибирский государственный аэрокосмический университет имени академика М. Ф. Решетнева, Красноярск\nРЕШЕНИЕ ЗАДАЧИ ОБЕСПЕЧЕНИЯ ЗАДАННОЙ ПРОИЗВОДИТЕЛЬНОСТИ ВЫЧИСЛИТЕЛЬНЫХ КОМПЛЕКСОВ ПРИ ПОСТРОЕНИИ ЗАЩИЩЕННЫХ ИНФОРМАЦИОННЫХ СИСТЕМ\nПроводится анализ необходимости применения в информационных системах многопроцессорных вычислительных систем. Предлагается подход для автоматизации процесса выбора эффективной конфигурации разнородных многопроцессорных вычислительных систем.\nСовременные информационные системы (ИС) характеризуются большим количеством пользователей и высокими вычислительными мощностями. В настоящее время, для информационных систем неотъемлемой частью их функционирования является обеспечение безопасности обрабатываемой информации и выполняемого системой информационного процесса.\nРеализация обеспечения информационной безопасности требует отвлечения определенного количества вычислительной мощности информационной системы. В различных ИС ресурсы на обеспечение надежности и безопасности могут составлять от 5-20 % до 100-300 % от ресурсов, используемых на решение функциональных задач, то есть в некоторых случаях для систем реального времени они могут превышать последние в 2-4 раза [1]. При этом для выполнения основного алгоритма информационной системы должен сохраняться заданный уровень производительности.\nДля повышения уровня производительности и надежности ИС возможны два подхода: либо изменение в программной части, либо в аппаратной.\nПовысить производительность программно можно за счет оптимизации программного кода, разработки новых алгоритмов, реорганизации вычислительных процессов и т. д.\nДля аппаратного повышения производительности вычислительной системы требуется изменение архитектуры аппаратной части вычислительных средств. На сегодняшний день активно применяется подход перехода от однопроцессорных архитектур к многопроцессорным вычислительным системам (МВС). Такой подход позволяет повысить производительность за счет организации параллельных процессов и вычислений, а так же позволяет повысить надежность за счет резервирования элементов аппаратной составляющей ИС. Также повысить производительность можно используя специализацию процессоров на выполнение часто встречающихся и занимающих наибольшее время при выполнении операций, т. е. разрабатывать разнородные МВС [2].\nПрименение при обеспечении информационной безопасности средств криптографической защиты требует значительных вычислительных ресурсов. В то же время, алгоритмы шифрования содержат в себе повторение большого количества ресурсоемких операций. Применение их аппаратной реализации позволит существенно снизить нагрузку на процессоры, выполняющие основной информационный процесс.\nС другой стороны, это так же позволит снизить временные затраты на работу средств криптографической защиты, и, следовательно, ускорить информационный обмен.\nПодход с разработкой разнородных МВС приводит к появлению необходимости предварительной оценки и выбора эффективной конфигурации аппаратной части МВС. Такие решения, как правило, принимаются проектировщиками на основе их богатого опыта и интуиции. Однако, поскольку полный перебор всех возможных вариантов архитектуры МВС невозможен за приемлемое время, существует необходимость создания систем поддержки принятия решений (СППР) для автоматизации процесса принятия промежуточных решений и предварительного отбора вариантов конфигураций вычислительной системы. Поэтому создание таких СППР является актуальной проблемой в настоящее время [2].\nПри детализации процессов проектирования возникают задачи выбора эффективных вариантов, обладающих наилучшими значениями критериев качества. Свойства возникающих оптимизационных задач: мно-гокритериальность с противоречивыми критериями, наличие существенных ограничений, разношкаль-ность, алгоритмическое задание целевой функции. Оптимизационные задачи такого класса должны решаться методами прямого поиска [2].\nАнализ появившихся в последнее время подходов к решению сложных задач многокритериальной оптимизации позволяет прийти к заключению о том, что методы математического программирования и человеко-машинные процедуры, применяемые для многокритериальной оптимизации, в основном себя исчерпали и не дают возможности дальнейшего продвижения по мере усложнения решаемых задач. Очевидно так же, что перспективным подходом для использования в качестве основной оптимизационной процедуры являются эволюционные алгоритмы.\nПри создании СППР поиска эффективной конфигурации необходимо решить следующие задачи:\n•\tразработать и протестировать программную реализацию генетического алгоритма;\n•\tразработать программную систему выбора эффективного варианта МВС.\nДанная система основана на моделях и алгоритмах, предложенных в работе [2]. Она позволяет выполнять оценку основных показателей качества специализированных МВС как по аналитическим, так и по имитационным моделям, а также осуществлять\nАктуальные проблемы авиации и космонавтики. Информационные технологии\nвыбор оптимальной структуры МВС с помощью комплекса алгоритмов адаптивного поиска. В результате работы системы поддержки принятия решений пользователь получает набор структур специализированных МВС, эффективно и надежно решающих задачу построения защищенных информационных систем.\nБиблиографические ссылки\n1. Липаев В. В. Основные факторы, определяющие технологическую безопасность информационных\nсистем URL: http://www.info-\nsystem.ru/security/security_pr_tech_security.html (дата обращения: 10.09.2011).\n2. Терсков В. А. Модели функционирования и методы оптимизации структуры многопроцессорных вычислительных систем : монография. Красноярск : Сиб. юрид. ин-т МВД России, 2001.\n© Фейгин В. С., 2012\nУДК 004.45\nА. С. Хеирхабаров Научный руководитель - В. Г. Жуков Сибирский государственный аэрокосмический университет имени академика М. Ф. Решетнева, Красноярск\nБЕЗОПАСНОСТЬ HTML5\nHTML5 - новый стандарт языка разметки документов в сети Интернет. В докладе рассмотрены некоторые новые возможности, появившиеся в HTML5, с точки зрения безопасности.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПринятие\tИТМЬ5(англ.\nHyperTextMarkupLanguage, version 5) как всеобщего стандарта намечено на 2022 год, но некоторые из его спецификаций уже поддерживаются новыми версиями браузеров и используются на многих сайтах. Однако такие нововведения, как Cross-OriginResourceSharing, WebSQL, WebMessaging и другие дают новые возможности для разработчиков, и в то же время порождают новые векторы атак для злоумышленников.\nВ HTML5 вводится концепция локального хранилища под названием WebStorage, позволяющая сайту сохранять данные на компьютере пользователя и впоследствии обращаться к ним через JavaScript. Выделяют два типа веб-хранилищ: локальные (могут содержать любые текстовые данные и хранятся до тех пор, пока не будут явно удалены пользователем или веб-приложением) и сессионные (аналогичны локальным, за исключением того, что данные удаляются после закрытия браузера или вкладки в нем). Для каждого домена создается отдельное хранилище. В отличие от cookie, которые имеют максимальный допустимый размер 4 кб и имеют срок хранения, данные в Web Storage не имеют срока хранения, а также защищены политикой ограничения домена, т. е. куки, принадлежащие одному сайту, не могут быть доступны другому, даже если они находятся на одном сервере. Проблема безопасности заключается в том, что эти данные пользователь не может считать напрямую, они доступны только веб-браузерам через интерфейс Java Script API. Это повышает риски от уязвимостей вида XSS (Cross Site Scripting), в том числе возможность заполучить аутентификационные данные [1]. Кроме того, есть вероятность, что злоумышленник внедрит JavaScript сценарий, способный манипулировать данными или переслать их на другой домен [2]. Также, аналогично использованию куки, локальные хранилища можно использовать для идентификация пользователей и DNS-спуфинг атак [1].\nДля решения некоторых проблем, связанных с WebStorage, следует:\n-\tдля поддержки сессий следует использовать куки, которые могут быть лучше защищены с помощью флага HTTPonly [3];\n-\tне хранить конфиденциальные данные в локальном хранилище;\n-\tразделять данные для приложений, находящихся на одном домене [2];\nЕщё одним нововведением HTML5 является Cross-Origin Resource Sharing (CORS), что дает возможность сайтам получать доступ к ресурсам на других доменах. HTML5 позволяет посылать XML Http Request-запросы между доменами на основе заголовка Access-Control-Allow-Origin [4]. Эти запросы передаются без уведомления пользователя, что является достаточно серьезной проблемой безопасности. CORSможет использоваться злоумышленниками для отсылки конфиденциальных данных на свои сервера, запуска удаленного шелл-кода на пользовательском агенте, поиска существующих доменных имен во внутренних се-тях(на основании времени ответа на XML Http Re-quest-запросы), создания ботнета или, комбинируя с WebWorker, для DDoS-атак. Такжес помощью CORSможет быть реализована уже существующая угроза Cross-Site-Request-Forgery, но уже без участия пользователя [2,5].Некоторые риски, связанные с угрозой, можно избежать следующими способами:\n-\tограничение доменов, имеющих право делать XMLHttpRequest-запросы;\n-\tне проводить контроль доступа только по заголовку Access-Control-Allow-Origin;\n-\tнастройка Web Application Firewall (WAF) на фильтрацию слишком частых CORS-запросов [2].\nWeb Messaging - ещё одна новая возможность в HTML5 - реализует два механизма коммуникации между HTMLдокументами. Перекрестный обмен данными позволяет документам обмениваться сообщениями независимо от их исходного домена, при этом\n",
    "download_url": "https://cyberleninka.ru/article/n/reshenie-zadachi-obespecheniya-zadannoy-proizvoditelnosti-vychislitelnyh-kompleksov-pri-postroenii-zaschischennyh-informatsionnyh/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/analiz-web-tehnologiy-dlya-sozdaniya-onlayn-ploschadki",
    "slug": "analiz-web-tehnologiy-dlya-sozdaniya-onlayn-ploschadki",
    "title": "Анализ web-технологий для создания онлайн-площадки",
    "abstract_description": "Рассмотрены технологии для создания онлайн-площадки с помощью языков программирования (HTML, CSS, PHP), CMS (WordPress, Modx, Joomla, Drupal) и конструкторов сайтов. Цель исследования выявление оптимального способа для создания web-ресурса. Результаты работы позволили сформулировать рекомендации по выбору системы.",
    "full_text_body": "\n\n\n\n\uFEFFУДК004.4\nАНАЛИЗ WEB-ТЕХНОЛОГИИ ДЛЯ СОЗДАНИЯ ОНЛАИН-ПЛОЩАДКИ\nВ. В. Мальцева, А. С. Фролова\nДонской государственный технический университет (г. Ростов-на-Дону, Российская Федерация)\nРассмотрены технологии для создания онлайн-площадки с помощью языков программирования (HTML,CSS,PHP), CMS (WordPress, Modx, Joomla, Drupal) и конструкторов сайтов. Цель исследования — выявление оптимального способа для создания web-ресурса. Результаты работы позволили сформулировать рекомендации по выбору системы.\nКлючевые слова: веб-ресурс, сайт, конструктор, CMS, WordPress, Modx, Joomla, Drupal, языки программирования, HTML, CSS, PHP,система управления контентом.\nANALYSIS OF WEB-TECHNOLOGIES FOR CREATING ONLINE PLATFORM V. V. Maltseva, A. S. Frolova\nDon State Technical University (Rostov-on-Don, RussianFederation)\nThis article describes the technologies for creating an online platform using programming languages (HTML,CSS,PHP), CMS (WordPress, Modx, Joomla, Drupal) and various constructors. The purpose of this article is to identify the optimal way to create a web-resource. The results of the article are recommendations for the choice of the system.\nKeywords: web resource, website, constructor, CMS, WordPress, Modx, Joomla, Drupal, programming languages, HTML, CSS, PHP, content management system.\nВведение. Многие предприятия и организации размещают в интернете свой контент и создают собственные сайты. В рамках данной работы предполагается выявить оптимальные способы создания онлайн-площадки. Для этого необходимо изучить и проанализировать технологии создания web-ресурсов.\nОсновная часть. Web-сайт необходим для продвижения товаров, услуг и пр.В большинстве случаев сайты (онлайн-площадки) создаются с помощью: —языков программирования, —конструкторов,\n—системы управления контентом (content management system, CMS).\nИтак, сайт можно сделать «вручную», с помощью языков программирования. Для создания структуры используется HTML (от англ. hypertext markup language — язык разметки гипертекста) [1],а для визуализации—CSS^ англ. cascadingstylesheets — каскадные таблицы стилей) [2].HTML появился почти одновременно с интернетом. За эти годы он зарекомендовал себя как один из самых простых, надежных и понятных инструментов. В новой версии HTM5.3 расширены возможности создания сайтов. Обновился функционал, с помощью которого можно хранить данные локально в браузерах пользователей, более безопасно передавать контент, легче достигать кроссбраузерности. Что касается CSS—это язык, который отвечает за визуальное представление документов пользователю.\nЕще один язык программирования— серверный PHP (от англ. hyper text preprocessor — препроцессор гипертекста). Главная его задача — связать сайт с сервером и его базой данных. Все команды и скрипты, написанные на PHP, выполняются именно на сервере. После этого сервер передает результат браузеру, который, в свою очередь, придает данным вид, удобный для пользователя. То есть процесс обработки проходит в два этапа:\nL4QQ/J\n—\tPHP-интерпретатор (обработчик) работает с PHP-кодом, и пользователь получает HTML-код;\n—\tбраузер обрабатывает полученный результат [3].\nЕсли задействован только HTML, ограничивается функциональность web-страницы, так как нельзя править определенные страницы. Для «оживления» онлайн- ресурса используется технология JavaScript. С помощью такого кода программист определяет, как страница отреагирует на действия пользователя. В браузере JavaScript может выполнять многие операции, в частности перечисленные ниже:\n—\tменять стили элементов,\n—\tреагировать на действия пользователя, клики мыши или перемещения курсора,\n—\tсоздавать,удалять иредактировать HTML-теги,\n—\tработать с технологиями AJAX (от англ. asynchronous JavaScript and XML, технология взаимодействия с сервером без перезагрузки страницы).\nИными словами, при использовании Java Scripta (или) PHP веб-ресурс действует по заданным алгоритмам в зависимости от выполнения или невыполнения определенных условий.\nТаким образом, создание сайта «вручную» позволяет обеспечить как внешнюю, так и внутреннюю работу приложения. Вышеперечисленные технологии дают возможность контролировать работу сайта и выстраивать внутреннюю иерархию. Данный способ подойдет для простых сайтов, которые не требуют большой работы с базами данных (например, сайт-визитка или узко специализированные интернет-магазины с небольшим ассортиментом).\nСледующий способ создания сайта предполагает использование CMS. В этом случае можно добавлять и редактировать контент сайта, не меняя внутренний механизм организации и вывода страниц. Условно данная технология предполагает наличие двух хранилищ информации. Первое — это базы данных с контентом страниц, во втором содержатся элементы интерфейса (графика, картинки, текст, шаблоны и т. д.) [4]. Для удобства информационного наполнения сайта большинство движков задействуют визуальный редактор WYSIWYG (от англ. what you see is what you get — что видишь, то и получишь). Эта программа создает HTML-код из разметки, облегчающей пользовательское форматирование текста. Поэтому в процессе работы с текстом сразу виден конечный результат.\nОсновныепреимуществаCMS [5]:\n—\tдоступность разработки,\n—\tпростота разработки,\n—\tэкономия времени,\n—\tобновление контента,\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n—\tмобильность,\n—\tвозможность удаленного доступа.\nПо составу CMS бывают разными. Одни состоят из множества блоков, другие обладают неделимой архитектурой, есть платные и бесплатные решения. Самая популярная CMS — WordPress. Согласно данным Web Technology Surveys на ноябрь 2018 года, на этом движке работает 32,3 % от общего числа существующих сайтов. Еще пару лет назад эту систему использовали 24 % ресурсов на CMS [6]. Анализ различных CMS представлен в табл. 1.\nТаблица1\nАнализхарактеристикCMS\nCMS\tБитрикс\tWordPress\tJoomla!\tDrupal\tModx\nСложность интерфейса\tДля продвинутых\tДля новичков\nШаблоны, расширения, дополнения\tБольшой выбор, в том числе бесплатных\t\t\t\tУзкий выбор\nУровень защиты\tВысокий\tНизкий\t\tВысокий\tНизкий\nЗагрузка сайта\tБыстрая\t\tМедленная\tБыстрая\nОсвоение\tНаличие русскоязычных книг\tБольшое количество материалов по изучению\t\t\tОграниченное количество\nУсловия доступа\tПлатно\tБесплатно\nПродвижение\tЕсть\nОфициальная техподдержка\tЕсть\tНет\t\tЕсть\tНет\nСистема с Разделением прав\tЕсть\nОбновления\tПо лицензии\tЕсть\nСерьезные веб-проекты лучше создавать на CMS или самописных движках. Однако иногда такой способ оказывается долгим и трудозатратным. И тогда лучшим решением являются визуальные конструкторы. Суть их реализации заключается в перемещении блоков и настраивании внешнего интерфейса. При этом не нужно исправлять исходный код и разбираться в тегах. Однако из-за шаблонных решений (исходный код закрыт) конструктор не позволяет создать уникальный дизайн. Еще один недостаток —нельзя самостоятельно добавлять новые плагины, скрипты и коды. Конструкторы сайтов предлагают бесплатно минимум услуг, за важные функции необходимо заплатить. Таким образом, конструктор представляет собой простой, но недешевый способ создания сайта, поэтому его используют для следующих задач:\n—\tхорошая визуальная интерпретация идей,\n—\tбыстрая разработка и запуск небольших проектов,\n—\tтестирование идеи.\nТаким образом, при выборе способа создания веб-ресурса необходимо исходить из направленности сайта, требуемого функционала и имеющихся ресурсов. Основные преимущества и недостатки способов создания сайта представлены в табл. 2.\nТаблица2\nДостоинстваинедостаткиспособовсозданиясайта\nСпособы программирования\tДостоинства\tНедостатки\nЯзыки программирования\t1. Позволяет полностью контролировать работу сайта 2. Нет ограничений функционала\t1. Трудозатратный 2. Необходимо углубленное знание языков программирования\nКонструктор\t1. Не используется программирование 2. Готовая структура сайта 3. Экономия времени (высокая скорость)\t1. Шаблонный дизайн 2.\tДолгая загрузка из-за большого объема 3.\tНевозможно редактировать код вручную 4.\tОграничены структура и наполняемость сайта 5.\tПривязка к определенной площадке 6. Нет возможности расширять сайт (ограниченный функционал) 7. Ограничены или отсутствуют возможности продвижения веб-ресурса\nCMS\t1. Экономия времени (высокая скорость) 2. Простота разработки сайта 3.\tШирокий функционал 4.\tБыстрая загрузка сайта 5. Редактирование контента отдельно от функциональных элементов и дизайна 6. SEO-оптимизация 7. Мобильность 8. Удаленный доступ 9. Регулярное обновление\t1. Низкая безопасность сайта 2. Однотипность сайтов 3. Ограниченный функционал Расширения модулей\nЗаключение. Проведенный анализ позволил установить, что способ создания web-ресурса зависит от направленности, задачи требуемого функционала, материальных ресурсов, а также квалификации программиста. Языки программирования целесообразно использовать для разработки небольших и простых сайтов (визитка или узкоспециализированный интернет-магазин с небольшим ассортиментом). Если необходимо оперативно создать web-ресурс и исключить трудоемкую работу с исходным кодом, можно воспользоваться сайтом-конструктором. Если же в итоге должен получиться подчеркнуто индивидуальный сайт, следует задействовать инструментарий CMS-движков (Битрикс, WordPress, Joomla, Drupal, Modx).\nL4QQ/J\nБиблиографическийсписок\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tЯзыки программирования web-сайтов / Hinex // hinex.ru : [сайт]. — URL : http://hinex.ru/yazyki-programmirovania-web-saitov.php(датаобращения07.12.2019).\n2.\tЧто такое CSS?/ Mozilla and individual contributors // MDNwebdocs : [сайт]. —\nобращения:11.11.2019).\n3.\tНауменко, Д. О. HTML, CSS, PHP, JavaScript, SQL — что и зачем? / Д. О. Науменко // Codeharmony.ru. В гармонии с кодом : [сайт]. — URL :http://codeharmony.ru/materials/125 (дата обращения: 18.11.2018).\n4.\tЧто такое CMS и как ее использовать / Rookee // Rookee powered by ingate :[сайт]. — URL :https://wiki.rookee.ru/cms/ (дата обращения: 22.11.2019).\n5.\tПреимущества и недостатки сайта CMS / Denisov // Denisov : [сайт].— URL :https://sdvv.ru/articles/testovyy-razdel/preimushchestva-i-nedostatki-sayta-na-cms/\t(дата обращения: 22.11.2019).\n6.\tКак создать сайт на WordPress: полное руководство для новичков / TexTerra // Tex Terra : [сайт].—URL :https://texterra.ru/blog/kak-sozdat-sayt-na-wordpress-polnoe-rukovodstvo-dlyanovichkov.html (дата обращения: 10.11.2019).\nОб авторах:\nМальцева Виктория Васильевна, студент Донского государственного технического университета (344000, РФ, г. Ростов-на-Дону, пл. Гагарина, 1), Vikamalt643 @gmail. com\nФролова Анна Сергеевна, доцент кафедры «Медиаменеджмент и медиапроизводство» Донского государственного технического университета (344000, РФ, г. Ростов-на-Дону, пл. Гагарина, 1), кандидат философских наук, frannser@gmail. com\nMaltseva Victoria Vasilevna, student, Don State Technical University (344000, Russian Federation, Rostov-on-Don, Gagarina sq. 1),Vikamalt643@gmail.com\nFrolova Anna Sergeevna, associate professor, the department of «Media management and media production» (344000, Russian Federation, Rostov-on-Don, Gagarina sq. 1), candidate of philosophy science, frannser@gmail.com\nURL :https://developer.mozilla.org/ru/docs/Web/Guide/CSS/Getting_started/What_is_CSS\n(дата\nAuthors:\n",
    "download_url": "https://cyberleninka.ru/article/n/analiz-web-tehnologiy-dlya-sozdaniya-onlayn-ploschadki/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/veb-orientirovannaya-sreda-vizualizatsii-mnogomernogo-fronta-pareto",
    "slug": "veb-orientirovannaya-sreda-vizualizatsii-mnogomernogo-fronta-pareto",
    "title": "Веб-ориентированная среда визуализации многомерного фронта Парето",
    "abstract_description": "Предлагается веб-ориентированная среда для визуализации аппроксимации фронта Парето (П-аппроксимации). Рассматриваются существующие приложения для решения данной задачи и формулируются требования к разрабатываемому веб-приложению. С использованием этого приложения выполнено сравнительное исследование эффективности различных алгоритмов визуализации. Результаты исследования показали удобство использования приложения.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 519.6\nВЕБ-ОРИЕНТИРОВАННАЯ СРЕДА ВИЗУАЛИЗАЦИИ МНОГОМЕРНОГО\nФРОНТА ПАРЕТО Белоус Валентина Владимировна\nК.т.н., ст. преподаватель каф. «Системы автоматизированного проектирования»,\ne-mail: walentina.belous@gmail.com Грошев Сергей Владимирович Ст. преподаватель каф. «Системы автоматизированного проектирования»,\ne-mail: sgro@newmail.ru Карпенко Анатолий Павлович Д.ф-м.н, профессор, заведующий каф. «Системы автоматизированного проектирования», ФГБОУ «Московский Государственный технический университет им. Н.Э. Баумана», 105005\nг. Москва, 2-я Бауманская ул. д. 5, e-mail: akarpenko@bmstu.ru\nАннотация. Предлагается веб-ориентированная среда для визуализации аппроксимации фронта Парето (П-аппроксимации). Рассматриваются существующие приложения для решения данной задачи и формулируются требования к разрабатываемому веб-приложению. С использованием этого приложения выполнено сравнительное исследование эффективности различных алгоритмов визуализации. Результаты исследования показали удобство использования приложения.\nКлючевые слова: многокритериальная оптимизация, множество Парето, парето-аппроксимация, визуализация многомерных данных\nВведение. Задача многокритериальной оптимизации возникает в различных областях науки и техники, и в настоящее время известно значительное число различных способов ее решения. Один из современных способов основан на предварительном построении конечномерной аппроксимации Парето-оптимального множества решений этой задачи. Существуют различные методы построения такой аппроксимации (П-аппроксимации) [5], а также способы оценки ее качества [1]. Обзор программных систем, решающих эти задачи приведен в работах [2, 4].\nСамостоятельной задачей, решаемой при оценке качества Парето-аппроксимации, является представление в наглядной форме полученных данных - задача визуализации П-аппроксимации. Традиционные инструменты, используемые для визуализации данных -графики и диаграммы - оказываются малопригодными в случае, когда возникает необходимость изобразить более трех взаимосвязанных величин. В этом случае часто используют подходы к визуализации, основанные на снижения размерности исходных данных [3].\n1. Программные системы для визуализации многомерных данных. Рассмотрим подходы к разработке систем визуализации на примере наиболее известных из них.\nВ системе VidaExpert [7] воплощена идея метода упругих карт для отображения данных. С этой целью создаются объекты типа слой, которые отвечают за отрисовку входных\nданных на экране. Карта может быть различным образом раскрашена (свойство «Тип раскраски»). Реализовано несколько типов раскрасок данных:\n-\tпо значению заданного критерия оптимальности;\n-\tпо двумерной плотности точек;\n-\tпо двумерной плотности выделенного подмножества;\n-\tпо многомерной плотности точек;\n-\tпо многомерной плотности выделенного подмножества;\n-\tпо расстоянию от точки данных до ближайшей точки карты.\nДостоинство данной программы заключается в принципе «красной кнопки», который состоит в том, что пользователю необходимо нажать минимальное число для получения стандартного приемлемого результата. Согласно этому принципу пользователь должен получать результат, не владея всеми тонкостями методов настройки и конфигурации проекта.\nЯзык программирования R [8] широко распространён для анализа данных и фактически стал стандартом для статистических программ. R поддерживает широкий спектр методов анализа и является хорошо расширяемым с помощью пакетов и библиотек. В базовой поставке этого языка присутствует более 4000 пакетов. Язык R в современном мире используется как один из самых популярных инструментов для визуализации данных. Язык имеет в своем арсенале все популярные методы визуализации: пиктограммы, лица Чернова, графики параллельных координат, метод главных компонент, дендограммы, многомерные шкалирования, и т.д.\nТакже с помощью данного языка легко выполнять операции кластеризации, классификации и другие виды дискриминантного анализа. Недостатком этого метода визуализации является высокий входной порог вхождения.\n2. Требования к распределенным и масштабируемым веб-системам. Целью разработки системы визуализации многомерных данных, представленной в данной работе, являлось создание приложения, которое может быть использовано как автономно, так и в составе комплекса средств анализа качества Парето-аппроксимации. За основу выбран подход к построению приложения по принципу клиент-сервер. Для обмена информацией между клиентами и сервером используется протокол HTTP, что позволяет строить распределенные системы, в которых клиент и сервер могут быть физически разнесены в пространстве.\nРазработка велась с использованием фреймворка Ruby on Rails, представляющего собой полноценный, многоуровневый фреймворк с открытым программным кодом. Один из главных принципов этого фреймворка - Don't repeat yourself, то есть максимизация повторного использования кода. Ruby on Rails реализован на основе архитектурного шаблона MVC (Model-View-Controller) (рис. 1) для веб-приложений.\nГлавными компонентами таких приложений являются модели (сущности). Они предоставляют остальным компонентам приложения объектно-ориентированное отображение данных. Объекты моделей отвечают за загрузку и сохранение данных в реляционной базе данных и реализуют бизнес-логику. В Ruby on Rails присутствуют плагины для работы как с реляционными, так и с нереляционными базами данных.\nРис. 1. MVC архитектура веб-приложения\nВторым компонентом в связке MVC является View - представление. Оно реализует пользовательский интерфейс с полученными от контроллера данными. Также представление передает запросы пользователя на манипуляцию данными в контроллер. Представление описывается при помощи шаблона ERB - файла HTML с включением Ruby кода (Embedded Ruby). Вывод, сгенерированный встроенным кодом Ruby, включается в шаблон, и вся страница возвращается контроллеру, который направляет её пользователю. Кроме ERB существует ещё более 20 шаблонизаторов, в том числе и Haml.\nКонтроллер отвечает за вызов методов модели и запускает формирование представления. Открытые методы контроллера называются действиями (actions). Обычно каждому действию контроллера соответствует определенное представление. Например, по запросу пользователя admin/index будет вызван метод index класса AdminController и затем использовано представление index.html.erb из директории views/admin.\nПредпочтительным способом интеграции с веб-сервером является проксирование, когда веб сервер выступает прокси-сервером перед сервером приложения. Ruby on Rails использует интерфейс Rack, который позволяет подключаться к веб-серверам и с легкостью обрабатывать HTTP запросы. Ruby on Rails умеет работать со всеми современными HTTP-серверами, такими как, Apache, Lighttpd и др.\nПредставляемое веб-приложение использует фреймворки для CSS верстки - Bootstrap и для JavaScript - jQuery. Использование в проекте этих фреймворков гарантирует корректную работу в популярных браузерах, при этом существенно экономится время на разработку клиентской части.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nBootstrap - это свободно распространяемая библиотека инструментов для верстки сайтов и веб-приложений. Включает в себя HTML и CSS шаблоны оформления для графики, веб-форм, кнопок, меток, блоков навигации и прочих компонентов веб-интерфейсов, включая JavaScript расширения. Bootstrap использует сетки с заранее заданным размером колонок, которые можно сразу же использовать. Также используются средства оформления\nтаблиц, классы для оформления форм, вкладок, страниц, меню. Библиотека предоставляет широкие возможности при работе с диалоговыми окнами, подсказками и всплывающими окнами. В нашем проекте Bootstrap используется при верстке всех основных страниц.\n3. Метод диагонального пересчета гиперпространства (HSDC). Одним из методов визуализации, используемых в предлагаемом веб-приложении, является метод диагонального пересчета гиперпространства HSDC [6], который был специально разработан для облегчения анализа данных задачах многокритериальной оптимизации. Метод основан на теореме Кантора, которая доказывает, что всегда существует однозначно заданное соответствие один-к-одному между пространством произвольной размерности и линейным пространством. Таким образом, и-мерное пространство всегда можно отобразить на одномерное. Для того, чтобы отобразить исходное пространство на одномерное пространство, исходное пространство разбивается на подобласти (далее ячейки), которые линейно упорядочиваются простым перечислением (рис. 2). Затем пронумерованные ячейки отображаются на дискретную координатную ось в соответствии со своими порядковыми номерами.\n/ \\\ni 1\n(1,1) (1,2) (1,3) (1,4)\n(2, 4)\n(3, 4)\n(4, 4)\nРис. 2. Пример диагонального пересчета двухмерного пространства\nВ методе HSDC пространство данных размерностью N = т + п разделяют на два подпространства размерности тип. Данные проецируют на эти подпространства и получают два множества данных. Затем подпространства разбивают на ячейки, и с помощью диагонального пересчета одно подпространство отображается на ось абсцисс, другое - на ось ординат координатной плоскости. Таким образом, происходит понижение размерности исходного пространства до двух. Точка многомерных данных получает координаты (х, у) на координатной плоскости, если ячейки, в которые точка попадает при проецировании на подпространства, имеют порядковые номера х и у. Метод удобен тем, что позволяет отобразить сразу все множество исходных данных на плоскости. Метод диагонального пересчета позволяет работать с пространствами практически любой размерности без существенных потерь данных.\nПриведем шаги алгоритма HSDC.\n1) Запоминаем в качестве входных данных многомерный фронт Парето в виде набора точек Р] = (р1, р2 , ..., рI) в пространстве критериев/1,, ...,/„.\n2)\tНаходим минимальное (p )min и максимальное (p )max значения для каждого\nкритерия fj среди всех точек/V Вычисляем интервал R, = (pj)max ~(р{ )mm.\n3)\tОпределяем число подынтервалов, на которое планируется разбить каждый из этих интервалов.\n4)\tРазбиваем интервалы на вычисленное число подынтервалов.\n5)\tРазделяем критерии на две упорядоченные группы\nFx = {/?:геСс[1:и]}, FY = {fh : h e H, G kjH = [1: n\\}.\n6)\tВыбираем из набора входных точек точку Pj = (p1 , p2 , ■■■, p„)- Для каждой координаты p определяем порядковый номер dj интервала, в который она попадает.\nПолучаем координаты ячейки дискретного подпространства Dj =(d(,dJ2,...,dJn),B которую\nпопадает точка.\n7)\tСогласно произведенному разбиению критериев разделяем указанные дискретные координаты на две группы dx , DY. С помощью процедуры диагонального пересчёта HSDC для каждой группы получаем значения индексов x и у. Отображаем их в виде точки на двумерной координатной плоскости;\n8)\tПовторяем процедуру для всех точек.\n4. Интерфейс веб-приложения и сценарии работы. Рассмотрим интерфейс предлагаемого веб-приложения. Первым шагом, который должны выполнить пользователи сервиса, является авторизация. Пользователь входит в проект, вводя логин и пароль. В случае отсутствия учетной записи пользователь проходит регистрацию. Неавторизованным пользователям доступна только общая информация о системе и контакты разработчиков.\nСистема регистрации обрабатывает следующие ошибки: попытка введения уже существующего имени в базе данных пользователей, отсутствие имени вообще в форме ввода, отсутствие пароля в форме ввода, различие введенных паролей. В случае если пользователь введет некорректные данные, система выведет подсказки. При успешной аутентификации приложение установит сессионную cookie и пользователь сможет продолжить работу с сервисом. После успешной аутентификации пользователь перенаправляется на страницу списка проектов.\nДля создания нового проекта необходимо пройти по соответствующей ссылке. Каждая визуализация будет создана в рамках какого-либо проекта. Между проектами и визуализациями существуют связи belongs_to и has_many: визуализация принадлежит какому-либо проекту (belongs_to) и каждый проект имеет несколько визуализаций (has_many). Для того, чтобы просмотреть список визуализаций, принадлежащих какому-либо проекту, необходимо зайти на страницу этого проекта, нажав кнопку «Просмотреть». Для создания новой визуализации необходимо нажать «Добавить визуализацию». Приложение предлагает следующие возможности:\n-\tсоздание новой визуализации с названием Name;\n-\tзагрузка файла с координатами точек аппроксимации многомерного фронта Парето;\n-\tуказание числа, на которое будут разбиты диапазоны каждого из критериев, в приложении они называются levels (это необходимо для работы метода HSDC);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-перенаправление на построенную визуализацию.\nФайл аппроксимации фронта Парето представляет собой обычный текстовый файл, в котором координаты точек перечислены через пробел, а каждая новая точка соответствует новой строке в текстовом файле. Если оценка качества П-аппроксимации успешно выполнена, то пользователь автоматически перенаправляется на страницу визуализации. Также в проекте реализована возможность сравнения качества нескольких П-аппроксимаций. Для этого необходимо нажать на ссылку «Add comparison». Средствами javascript отображение блока изменится, в нем появятся дополнительные поля, в которые можно ввести данные о второй П-аппроксимации.\nПри нажатии любой из кнопок «Go» выполняется построение визуализации, и пользователь автоматически перенаправляется на страницу с построенными П-аппроксимациями (рис. 3).\nРис. 3. Пример визуализации аппроксимации многомерного фронта Парето\nЗаключение. Представлена программная реализация веб-приложения для визуализации конечно-мерных аппроксимаций многомерных фронтов Парето в задаче многокритериальной оптимизации. Рассмотрена реализация клиентской части веб-приложения с использованием клиентских фреймворков. Описан процесс разработки серверной части МКС-приложения и сервера обработки расчетов. Рассмотрен вопрос взаимодействия между серверами, показаны основные элементы интерфейса приложения. Приведен обзор сценариев работы пользователя с проектом.\nРабота поддержана РФФИ (проект № 16-07-00287).\nСПИСОК ЛИТЕРАТУРЫ\n1.\tБелоус В.В., Грабик А.В., Грошев С.В., Шибитов И.А. Качество Парето-аппроксимации в задаче многокритериальной оптимизации // XVIII Байкальская Всероссийская конференция «Информационные и математические технологии в науке и управлении». Часть 1. Иркутск: ИСЭМ СО РАН. 2013. С 6-12.\n2.\tБелоус В.В., Грошев С.В., Карпенко А.П., Шибитов И.А. Программные системы для оценки качества Парето-аппроксимации в задаче многокритериальной оптимизации. Обзор // Наука и образование. МГТУ им. Н.Э. Баумана. Электрон. журн. 2014. №4.\nРежим доступа: http://technomag.bmstu.ru/doc/709198.html. (дата обращения 15.02.17) DOI:10.7463/0414.0709198,\n3.\tБелоус В.В., Грошев С.В., Карпенко А.П., Остроушко В.А. Методы визуализации фронта Парето в задаче многокритериальной оптимизации. Обзор // Труды XX Байкальской Всероссийской конференции «Информационные и математические технологии в науке и управлении». Часть I. Иркутск: ИСЭМ СО РАН. 2015. C. 22-29.\n4.\tГрошев С.В., Карпенко А.П., Сабитов Д.Р., Шибитов И.А. Программная система PARETO RATING для оценки качества Парето-аппроксимации в задаче многокритериальной оптимизации // Наука и образование. МГТУ им. Н.Э. Баумана. Электрон. журн. 2014. № 7. (http://technomag.bmstu.ru/doc/720253.html) (дата обращения 15.02.17). DOI:10.7463/0714.0720253\n5.\tКарпенко А.П., Митина Е.В., Семенихин А.С. Популяционные методы аппроксимации множества Парето в задаче многокритериальной оптимизации // Наука и образование. МГТУ им. Н.Э. Баумана. Электрон. журн. 2012. №4. (http://www.technomag.edu.ru/doc/363023.html) (дата обращения 15.02.17).\n6.\tG. Agrawal, K. Lewis, K. Chugh, C.-H. Huang, S. Parashar, C. L. Bloebaum. Intuitive visualization of Pareto frontier for Multi-objective optimization in n-dimensional performance // Structural Dynamics & Materials Conference AIAA 2005-1813.\n7.\tGorban A.N., Pitenko A., Zinovyev A. ViDaExpert: user-friendly tool for nonlinear visualization and analysis of multidimensional vectorial data // ArXiv:1406.5550 (дата обращения 15.02.17)\n8.\tThe R Project for Statistical Computing, https://www.r-project.org/ (дата обращения 15.02.17)\nUDK 519.6\nWEB-ORIENTED ENVIRONMENT FOR VISUALIZATION OF MULTIDIMENSIONAL PARETO FRONT Valentina V. Belous\nSenior lecturer, chair «Computer Aided Design», e-mail: walentina.belous@gmail.com\nSergey V. Groshev Senior lecturer, chair «Computer Aided Design», e-mail: sgro@newmail.ru\nAnatoly P. Karpenko Dr, Professor, head of chair «Computer Aided Design», Bauman Moscow State Technical University, 105005 r. Moscow, 2-nd Baumanskaya str 5, e-mail: akarpenko@bmstu.ru\nAbstract. The paper contains requirements to drawing up the papers for journal \"Information and mathematical technologies in science and management\" using Microsoft Word text editor. Necessary title Data is shown, which must present in the article, text sizes, rules of text and formula design are shown also. The presented paper can be used as template for paper preparing. All text elements are proposed with using Word styles. The examples of figures and tables are given.\nKeywords: multicriteria optimization, Pareto set, Pareto approximation, Pareto Front, multidimensional data visualization.\nReferences\n1.\tBelous V.V., Grabik A.V., Groshev S.V., Shibitov I.A. Kachestvo Pareto-approksimacii v zadache mnogokriterial'noj optimizacii [Quality of Pareto-approximation in the problem of multicriteria optimization] // XVIII Bajkal'skaja Vserossijskaja konferencija «Informacionnye i matematicheskie tehnologii v nauke i upravlenii» Chast' 1.- Irkutsk: ISJeM SO RAN. 2013. Pp. 6-12. (in Russian)\n2.\tBelous V.V., Groshev S.V., Karpenko A.P., Shibitov I.A. Programmnye sistemy dlja ocenki kachestva Pareto-approksimacii v zadache mnogokriterial'noj optimizacii. Obzor [Software systems for assessing the quality of Pareto-approximation in the problem of multicriteria optimization. Overview] // Nauka i obrazovanie MGTU im. N.E. Baumana = Science and Education of the Bauman MSTU. 2014. № 4. Available at: http://technomag.bmstu.ru/doc/ 709198.html. (accessed 15.02.17) DOI: 10.7463/0414.0709198 (in Russian)\n3.\tBelous V.V., Groshev S.V., Karpenko A.P., Ostroushko V.A. Metody vizualizacii fronta Pareto v zadache mnogokriterial'noj optimizacii. Obzor [Pareto front visualization methods in the problem of multi-criteria optimization. Overview] // Trudy XX Bajkal'skoj Vserossijskoj konferencii «Informacionnye i matematicheskie tehnologii v nauke i upravlenii», 1-7 ijulja 2015. Chast' I. Irkutsk: ISJeM SO RAN. 2015. Pp. 22-29. (in Russian)\n4.\tGroshev S.V., Karpenko A.P., Sabitov D.R., Shibitov I.A. Programmnaja sistema PARETO RATING dlja ocenki kachestva Pareto-approksimacii v zadache mnogokriterial'noj optimizacii [PARETO RATING software system for Pareto-approximation quality estimation in the multicriterion optimization problem] // Nauka i obrazovanie MGTU im. N.E. Baumana = Science and Education of the Bauman MSTU. 2014. № 7. Available at: http://technomag.bmstu.ru/doc/720253.html. (accessed 15.02.17) DOI:10.7463/0714.0720253 (in Russian)\n5.\tKarpenko A.P., Mitina E.V., Semenihin A.S. Populjacionnye metody approksimacii mnozhestva Pareto v zadache mnogokriterial'noj optimizacii [Population methods for approximating the Pareto set in the multicriteria optimization problem] // Nauka i obrazovanie MGTU im. N.E. Baumana = Science and Education of the Bauman MSTU. 2012. №4. Available at: http://www.technomag.edu.ru/doc/363023.html. (accessed 15.02.17) (in Russian)\n6.\tG. Agrawal, K. Lewis, K. Chugh, C.-H. Huang, S. Parashar, C. L. Bloebaum. Intuitive visualization of Pareto frontier for Multi-objective optimization in n-dimensional performance //Structural Dynamics & Materials Conference AIAA 2005-1813.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n7.\tGorban A.N., Pitenko A., Zinovyev A. ViDaExpert: user-friendly tool for nonlinear visualization and analysis of multidimensional vectorial data. Available at: http://ArXiv:1406.5550 (accessed 15.02.17)\n8.\tThe R Project for Statistical Computing. Available at: https://www.r-project.org/ (accessed 15.02.\n",
    "download_url": "https://cyberleninka.ru/article/n/veb-orientirovannaya-sreda-vizualizatsii-mnogomernogo-fronta-pareto/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/uvelichenie-proizvoditelnosti-http",
    "slug": "uvelichenie-proizvoditelnosti-http",
    "title": "Увеличение производительности http",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFУвеличение производительности HTTP\nЕгоров Андрей Алексеевич\nБакалавр НИУ МИЭТ, Россия, г. Москва E-mail: Eqorov andrey 1994@mail.ru Россия, г. Москва\nОдин из аспектов понятия «производительность Web» заключается в том, чтобы уменьшить наблюдаемые пользователем задержки; получить готовую к работе страницу как можно быстрее. В отношении протокола HTTP это подразумевает, что идеальный протокол связи выглядит примерно\nКлиент шлёт минимально необходимое количество данных, чтобы описать свой запрос, а сервер отдаёт ему минимально необходимое количество данных для отображения страницы и всё это происходит за минимально возможное количество раундов связи. Лишние данные, пересылаемые на сервер или получаемые с сервера, означают увеличение времени загрузки и повышение шансов потери пакетов, перегруженность канала связи. Лишние циклы отправки\\приёма данных из-за «болтливости» протокола и задержки (особенно в мобильных сетях, где 100ms —лучшее возможное время отклика) тоже ухудшают ситуацию.\nИтак, если мы описали идеальный случай — соответствует ли ему протокол HTTP? И можем ли мы ещё как-нибудь улучшить его?\nНТТР/1.1\nНТТР/1.1 это хороший протокол по целому ряду причин, но, к сожалению, производительность не одна из них по причине того, как современные веб-приложения его используют. А используют они его сегодня вот так:\nSerrer\"\n1\n_____HTML.\nA fc>^ hlob of CUSS ^ ièn/ Ыд ír^rvwivor^jts\n/tooJkieSj rííererj t/Se^^fvA..)\nSort-it jp^L^^S\nСЬЕ- i IFVI^ÇS (хлЛ-f-U iLOckii-üj referez\nSo «-Vie /Viorv\nС-\t\t\\\nServïr\nНе очень-то хорошо.\nИспользование веб-приложениями протокола HTTP/1 достаточно «болтливо», поскольку клиент обращается к серверу снова и снова для загрузки необходимых ему файлов; сначала загружается HTML, затем CSS и Javascript. Загрузка каждого следующего файла добавляем в наш «разговор» с сервером новую главу, увеличивает общую задержку загрузки страницы, нарушая наше правило «минимальности необходимых раундов связи».\nБолее того, даже сами запросы к ресурсам уже добавляют много лишних данных, нарушая правило «минимальности необходимых данных». Это происходит из-за наличия заголовков вроде Referer, User-Agent и, конечно же, Cookie, которые повторяются в каждом запросе, умножаясь иногда в сотню раз от минимально необходимого их количества (по количеству ресурсов, необходимых средней страницей современного Веба).\nНу и наконец, из-за присущего протоколу HTTP/1 явлению HOL-блокировки, стало общей практикой помещать несколько отдельных ресурсов в один (например,CSS-spriting). Все эти изящные хаки протокола HTTP/1, тем не менее, имеют свою цену; они вынуждают клиента загружать больше данных, чем ему необходимо в данный момент для показа конкретной страницы, что нарушает описанный нами идеальный случай, а значит мы не покажем страницу так быстро, как это только возможно.\nНесмотря на всё сказанное, HTTP/1.1 всё же не так плох, даже в плане производительности. Например, в нём есть кеширование, что избавляет вас от повторной загрузки неизменённых ресурсов, а также условные запросы, что позволяет вам понять, нужно ли загружать новую версию файла.\nHTTP/2\nПротокол HTTP/2 пытается решать проблемы 1.1 несколькими путями:\n1. Полное мультиплексирование означает решение проблемы HOL-блокировки. Вы можете\nзагружать все ресурсы своей страницы по одному HTTP-соединению и не волноваться о том,\nсколько для этого понадобится сделать запросов. «Оптимизации» со склеиванием файлов в\nодин можно оставить в прошлом.\n2.\tСжатие заголовков решает проблему их избыточности. Теперь вы можете вместить десятки (или даже сотни) запросов в буквально несколько ^-пакетов. Это серьёзно приближает нас к «минимально необходимому набору данных» нашего идеального протокола.\n3.\tHTTP/2 позволяет серверу отправлять данные клиенту ещё до их запроса клиентом, исходя из предположения, что они ему скоро понадобятся. Это уменьшает количество раундов связи клиента и сервера.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nТаким образом, сеанс связи с использованием протокола HTTP/2 выглядит так:\nЗдесь вы можете увидеть, как сервер начинает пересылку CSS и Javascript клиенту ещё до того, как клиент об этом попросил. Сервер знает, что клиент, запросивший HTML, с большой вероятностью запросит и относящиеся к нему CSS и Javascript файлы, а значит можно отправить их, не дожидаясь самого запроса. Таким образом, мы теряем меньше времени на ожидание, используем сеть более рационально.\nСледует отметить, всё это работает не так уж просто. До сих пор в HTTP/2 есть открытые вопросы, касающиеся того, что и когда сервер должен считать необходимым к отправке без запроса клиента.\nTCP\nДавайте поговорим о влиянии на общую производительность других протоколов, используемых браузером для загрузки страниц. А оно тоже может быть существенным: TCP использует троекратное рукопожатие ещё до того, как первый байт стоящего выше HTTP будет переслан:\nSer-^^í\"\nSYN С fc=í \"¿\"O i. rbv-f pB.fe.íVl^/í\"/—s. )\nSYN¿-A^C^LfcC С 1 ^joV\" -f/^CJie pa.ra.'Vie^erS, urejV^ ри^н.^^/^/\"\"s. )\nAdK Cf ¿^crf-'s ■f^ít.\")\n(3ET~/р^це CfWíy, so^e HTTPI\")\nЭто добавляет «болтливости» каждому сеансу связи.TCP Fast Open позволяет приложениям отправлять данные прямо в SYN и SYN+ACK пакетах. К сожалению, это в данный момент поддерживается только в Linux и OSX, и более того, есть некоторые особенности применения TCP Fast Open именно с протоколом HTTP, над которыми сейчас работает сообщество. Например, не гарантируется, что данные, прикреплённые к SYN-пакету, будут пересланы лишь один раз. Это открывает уязвимость с потенциальными повторными запросами, которая может быть использована для атак. Таким образом, запрос POST — не лучший кандидат для применения TCP Fast Open. Более того, некоторые GET-запросы тоже имеют заметные побочные эффекты, а браузеры не имеют никаких средств, чтобы отличить такие запросы от тех, которые таких эффектов не имеют.\nHTTP/next\nTCP Fast Open и TLS 1.3 уменьшают количество циклов связи клиента и сервера при открытии соединения. Другой способ достичь того же — переиспользовать уже ранее открытое соединение. Сейчас идёт дискуссия о том, как объединять соединения HTTP/2 более агрессивно; это позволит не только избежать затрат на открытие новых соединений, но и более эффективно использовать уже имеющиеся — протокол TCP наиболее хорош именно в долгоживущих, плотно заполненных данными соединениях. Это включает в себя отправку клиентам сертификатов, доказывающих, что соединение может быть безопасно переиспользовано для работы с другими источниками.\nСейчас обсуждаются даже более кардинальные эксперименты: замена TCP на UDP, навроде QUIC. Есть много спорных моментов, но сама перспектива свести начальный обмен данным фактически до нуля — очень привлекательна. Более того, возможность получить доступ к данным не в том порядке, как они были отправлены, тоже может быть очень полезна. Это ещё один способ избежать HOL-блокировок в TCP (протоколе с упорядоченной доставкой пакетов). Мы можем выбрать из потока пакетов нужные нам, понять, что какие-то были потеряны, запросить их повторно — и продолжить обработку следующих, не дожидаясь результатов повторного запроса.\nQUIC только начинает свой путь, так что мы ещё не увидим хорошей его реализации какое-то время (а может быть и никогда вообще). Один из возможных вариантов — изучить на примере QUIC все плюсы и минусы подхода, чтобы понять, как мы можем улучшить производительность TCP, не ударяясь в столь кардинальные изменения архитектуры Web.\n",
    "download_url": "https://cyberleninka.ru/article/n/uvelichenie-proizvoditelnosti-http/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/sovremennye-osobennosti-razvitiya-meditsinskih-informatsionnyh-sistem",
    "slug": "sovremennye-osobennosti-razvitiya-meditsinskih-informatsionnyh-sistem",
    "title": "Современные особенности развития медицинских информационных систем",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFСОВРЕМЕННЫЕ ОСОБЕННОСТИ РАЗВИТИЯ МЕДИЦИНСКИХ ИНФОРМАЦИОННЫХ СИСТЕМ\nС.В. Фролов\nТамбовский государственный технический университет, г. Тамбов, Россия\nВ течение двух ближайших лет на внедрение современных информационных систем в здравоохранении предполагается правительством РФ направить порядка 24 млрд руб. Актуальным является исследование тенденций развития современных медицинских информационных систем (МИС). Нами предпринята попытка провести анализ и отметить некоторые особенности развития современных МИС. Были изучены и проанализированы 190 МИС. Название МИС, разработчик, адрес МИС в Интернете, краткое описание были оформлены в виде таблицы, которая размещена нами в Интернете по адресу http://www.telemed.tstu.ru.\nВ этой таблице помещена наиболее полная, на наш взгляд, современная информация обо всех имеющихся отечественных МИС.\nОсновными источниками информации явились: Шєгпє^ медицинские профильные и периодические издания, монографии, а также научные конференции, форумы и выставки. Была проведена классификация МИС по назначению. Все системы были разделены на два класса: диагностика и лечение, остальные.\nЗа исследуемый период, начиная с 1998 г. отмечается рост доли лечебно-диагностических МИС по отношению к остальным системам. Лечебно-диагностические системы составляют 32 % в 2009 г. по отношению к общему числу МИС. В 1998 г. доля этих систем была около 10 %, в 2005 г. - 18 %.\nВ процентном соотношении при классификации 190 МИС по видам решаемых задач они распределяются следующим образом на 2009 г. (рис. 1).\nРис. 1. Классификация МИС по видам решаемых задач (2009 г.)\nИз данной диаграммы видно, что основную долю изученных МИС (190 программных продуктов, 54 фирм разработчиков) занимают лечебно-диагностические (32 %), организационно-экономические (14 %) и комплексные (12 %).\nЧто же касается количества внедрений информационных систем для медицины, то тут можно говорить о большем использовании ор-\nганизационно-экономических общего назначения и специализированных МИС для решения административно-управленческих задач.\nПричинами несбалансированности в обеспечении информационных потребностей лечащих врачей и административного персонала считаются высокая стоимость приобретения, нежелание врачей осваивать работу с компьютером, неудобство использования\n3. Механизмы развития инновационных процессов в эпоху информационного общества\n(пригодность) МИС медперсоналом и ее функциональность. Имеется значимый разрыв между информационными системами лечебно-профилактических учреждений (ЛПУ) для врача и для администрации.\nОсновной технологический процесс в лечебно-профилактическом учреждении (ЛПУ) - лечебно-диагностический процесс (ЛДП), и автоматизация должна быть средством его оптимизации, инструментом для оказания качественной медицинской помощи. Говоря о целях автоматизации ЛДП, медицинскую практику необходимо сравнить с производственным процессом и одновременно с исследованием свойств болезни, а также действенности медицинских методов. Из этого сравнения вытекает, что повышение производительности труда врача и более глубокое познание самого ЛДП являются двумя истинными целями автоматизации.\nНеобходимо выделить три главные цели использования МИС в клинике: увеличение эффективности лечения, снижение числа врачебных ошибок, оптимизация расходов на лечение. Для достижения любой из перечисленных целей требуется поддержка принятия решений медперсонала в реальном времени. Из вышесказанного следует, что наиболее актуальной и сложной задачей разработки МИС является разработка систем поддержки принятия решений (СППР) врача. СППР в медицине (здравоохранении) - это проблемно ориентированные системы (или программно-аппаратные комплексы), реализующие технологию информационной поддержки процессов принятия лечебно-диагностических и/или управленческих решений медицинским персоналом. В англоязычной литературе\nСППР в медицине получили название CDSS (Clinical Decision Support Systems).\nНеобходимость в применении СППР возникает в случае ограниченности ресурсов, недостатка времени, дефицита экспертов, неопределенности информации об окружающем мире и исследуемом объекте. Именно такая ситуация является типичной для большинства задач принятия решений в медицинской диагностике и лечении, в частности в сферах высокотехнологичной медицинской помощи.\nИзвестны и хорошо себя зарекомендовали такие СППР в медицине, как «ДОКА+», «СаrеSшte», «ИНТЕРИС», «Гарвей», «Айболит», «Миррор».\nРаспределение разработчиков по городам показывает, что разработчики к 2009 г. сосредотачиваются в Москве - 62 %, Санкт-Петербурге - 13 %. Причем по сравнению с 2005 г. прирост разработчиков в Москве увеличился на 17 %, а в Санкт-Петербурге - только на 3 %. Доля разработчиков МИС в других городах сократилась на 20 %. Таким образом, мы наблюдаем негативную тенденцию сосредоточения высокотехнологичных разработок в центре, что ведет к снижению активности в регионах. Это не способствует активному внедрению МИС равномерно по России.\nВ результате проведенного анализа можно утверждать, что необходимо расширять географию как производителей, так и внедрений МИС, так как пока большая часть разработчиков и внедрений сосредоточена только в крупных городах России.\nТехнологии разработок МИС, информация по которым была представлена в открытых источниках, показаны в таблице 1.\nТаблица 1\nТехнологии разработки МИС\nНазвание МИС\tТехнология разработки\n«Артемида»\tCache-технология (постреляционная СУБД фирмы InterSystem).\n«Гиппократ»\tMicrosoft SQL Server\nDentalBase\tPHP\ne-Hospital\tMicrosoft Visual C++\nEleks Avalon\tOracle 7/8\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\neVitae Med\tPHP 4 с использованием СУБД MySQL, сервер Apache и MS Windows, Модули Delphi, XML.\nMedTrack\tCache\nMedWork\tMicrosoft SQL server\nАИС АМУЛЕТ\tMicrosoft Visual.NET.\nДока+\tPHP и JavaScript\nИНТЕРИН\tOracle Server 8.x/9.x\nКВД 2000\tСУБД FireBird v l.Q (или Interbase версии 6.Q1)\nКлиФ\tСУБД Sybase SQL Anywhere или Sybase Adaptive Server.\nКОНДОПОГА\t«Lotus Notes/Domino» фирмы «Lotus Development».\nМедИС - Т\tСУБД Oracle Si, Сервер приложений Citrix\nМедОфис\tWinNT 4.0/2000, MS SQL server 7.0\nПоликлиника (КРОК)\tWindows NT 4.0 MS SQLServer 7.0\nПоликлиника(Тонлайн)\tDOS и Windows.\nПоликлиника(Торинс)\tСУБД FoxPro 2.6 for Dos.\nСтационар (Тонлайн)\tDOS и Windows.\nСтационар (Торинс)\tFOX PRO v2.6(X) for MS-DOS v5.0\nФИРРС АРМ\tFOX PRO v2.6(X) for MS-DOS v5.0\nЭверест\tFOX PRO v2.6(X) for MS-DOS v5.0\nИз таблицы видно, что большинство МИС построено в архитектуре «клиент -сервер», в основном применяются: Microsoft SQL Server, Oracle, Borland Interbase Server, Cache. В качестве инструментария разработки явных фаворитов нет. Например, система ДОКА+ разрабатывается на PHP и JavaScript, e-Hospital - в среде Microsoft Visual C++, МИС «Амулет» - в среде Microsoft Visual.NET.\nТаким образом, в ходе исследования были выявлены основные современные особенности развития рынка медицинских информационных систем в 2QQ9 г. Отмечен рост доли лечебно-диагностических МИС по от-\nношению ко всем за исследуемый период. Также проведена классификация МИС по видам решаемых задач (2009 г.), из которой видно, что основную долю изученных МИС (190 программных продуктов, 54 фирм разработчиков) занимают лечебно-диагностические (32 %), организационно-экономические (14 %) и комплексные (12 %). При анализе МИС было установлено, что 75 % компаний-разработчиков находятся в г. Москва и Санкт-Петербург, и эта тенденция является устойчивой. В результате исследований не было выявлено доминирующей технологии разработки МИС.\n",
    "download_url": "https://cyberleninka.ru/article/n/sovremennye-osobennosti-razvitiya-meditsinskih-informatsionnyh-sistem/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/optimizatsiya-veb-interfeysa-na-storone-klienta-dlya-raboty-s-tablichnymi-dannymi",
    "slug": "optimizatsiya-veb-interfeysa-na-storone-klienta-dlya-raboty-s-tablichnymi-dannymi",
    "title": "Оптимизация веб-интерфейса на стороне клиента для работы с табличными данными",
    "abstract_description": "В работе описана задача создания клиентской части эффективного веб-интерфейса для работы с табличными данными на основе возможностей HTML5, а также приведены основные принципы программной реализации такого интерфейса.",
    "full_text_body": "\n\n\n\n\uFEFFструктуры и моделирование 2013. № 2(28). С. 80-87\nУДК 004.4\nОПТИМИЗАЦИЯ ВЕБ-ИНТЕРФЕЙСА НА СТОРОНЕ КЛИЕНТА ДЛЯ РАБОТЫ С ТАБЛИЧНЫМИ ДАННЫМИ\nЕ.А. Илюшечкин, И.С. Молодых\nВ работе описана задача создания клиентской части эффективного веб-интерфейса для работы с табличными данными на основе возможностей HTML5, а также приведены основные принципы программной реализации такого интерфейса.\nВведение\nС развитием глобальных сетей и веб-технологий веб-приложения стали одним из наиболее распространённых средств обработки удалённо хранящихся данных. В современных веб-приложениях приходится сталкиваться с задачей модификации больших массивов однотипных записей, которые могут быть представлены в виде таблицы. В дальнейшем подобные данные будем называть табличными.\nКак правило, модификация табличных данных организуется по следующей схеме: пользователю предлагается выбрать запись из (возможно, отфильтрованного по некоторому критерию) списка, после чего он попадает в режим редактирования записи. По завершению работы с записью новые данные отсылаются на сервер, а пользователь вновь возвращается к списку. Данный подход обладает двумя недостатками.\n1.\tБольшие накладные расходы на пересылку: к полезному трафику в каждом запросе добавляется служебный заголовок. При наличии куки большого объёма, что является весьма типичным для корпоративных приложений, длина заголовка может превышать длину данных.\n2.\tБольшая нагрузка на сервер: для каждого запроса необходимо разобрать заголовок, выполнить проверки, связанные с авторизацией, инициализировать некоторый контекст.\nМожно избавиться от этих недостатков, если кэшировать на стороне пользователя сделанные изменения, а затем передавать данные обо всех изменённых\nCopyright © 2013 Е.А. Илюшечкин, И.С. Молодых\nОмский государственный университет им. Ф.М. Достоевского E-mail: ilushechkinea@yandex.ru, jairinka@gmail.com\nзаписях одним запросом (в пакетном режиме). Подключив механизмы браузеров Local Storage и Application Cache, относящиеся к стандарту HTML5, возможно кэшировать и веб-страницы, а сами данные сохранять на неопределенный срок. Помимо снижения расходов на пересылку и обработку данных, долгосрочное кэширование данных и веб-страниц на стороне пользователя позволяет реализовать две дополнительные возможности:\n1.\tОтложенное редактирование. Пользователь может приостанавливать работу с данными, сохраняя сделанные изменения локально, и отсылать результат по завершении редактирования всех записей. Тем самым пользователь управляет целостностью вносимых изменений и может отложить публикацию результата, например, для консультации с более компетентным специалистом.\n2.\tОффлайновый режим работы. Можно вносить изменения в локальную копию данных при отсутствии подключения к сети, например, в дороге, и посылать результат при выходе в сеть.\nПоскольку обрабатывать табличные данные приходится во многих приложениях с веб-интерфейсом, целесообразно создать типовое и гибкое решение, лишённое перечисленных недостатков и обладающее указанными возможностями. Данная работа описывает опыт создания такого решения.\n1. Постановка задачи и инструментарий\nЛюбое веб-приложение делится на серверную часть, выполняющуюся на веб-сервере, и клиентскую часть, выполняющуюся в браузере пользователя. Создать единое универсальное решение для серверной части приложения невозможно, так как серверная часть может быть написана на различных, не совместимых между собой языках программирования. Напротив, клиентская часть всегда выполняется в интерпретаторе языка JavaScript, встроенном в любой популярный браузер. Поэтому в данной работе рассматривается реализация клиентской части и интерфейс взаимодействия между клиентом и сервером.\nВ обсуждаемой реализации для передачи структурированных данных между клиентом и сервером используется формат JSON: он имеет малые накладные расходы (по сравнению, например, с иногда используемым XML) и хорошую встроенную поддержку в языке JavaScript. Вся передача данных осуществляется в фоновом режиме без перезагрузки страницы - используется стандартная технология AJAX. Для кэширования данных на стороне клиента используется встроенная во все современные браузеры технология Local Storage (далее -локальное хранилище) [1].\nЧасто значение определённого поля таблицы может выбираться из нескольких фиксированных вариантов, из некоторого справочника. Для реализации автономной работы эти справочники также необходимо загружать на сторону клиента. Вот минимальный набор методов, предоставляемых серверной стороной:\n1.\tloadData - запрос текущих данных таблицы;\n2.\tsaveData - сохранение сделанных изменений на сервере;\n3.\tloadDictionary(name) - запрос справочника с уникальным именем name.\nНесмотря на то, что все современные браузеры имеют встроенный интерпретатор JavaScript, единый стандарт на набор доступных из скрипта объектов, их полей и методов до сих пор не реализован. Для решения проблемы кроссбра-узерности, то есть, возможности одинакового выполнения клиентской части приложения во всех стандартных браузерах, предлагается использовать библиотеку, абстрагирующую разработчика от особенностей конкретных браузеров и предоставляющую набор универсальных примитивов. В настоящее время существует несколько подобных библиотек. Авторами была выбрана библиотека jQuery, имеющая большую популярность, множество расширений и богатый функционал. Данный выбор, однако, не является единственно возможным и наиболее эффективным. В частности, для решения частных случаев рассматриваемой задачи можно выбрать более легковесные и быстрые библиотеки.\nБиблиотека jQuery [2] предоставляет удобный способ расширения своего функционала в виде плагина - подключаемого модуля определённой структуры. Предлагаемое здесь решение было выполнено именно в такой форме, поскольку методы плагина вызываются в том же стиле, что и методы самой библиотеки. Это делает код приложения более унифицированным и, учитывая популярность jQuery, более читаемым сторонними разработчиками.\nПлагин выполняет следующие основные функции:\n1.\tОтрисовка графического интерфейса: таблицы с данными и элементов для ввода информации.\n2.\tОбщение с сервером: асинхронное получение данных таблицы и справочников, пакетная отправка списка сделанных изменений.\n3.\tОтслеживание изменений: формирование текущего списка изменений в виде объекта, который может сохраняться в локальном кэше или отправляться на сервер.\n4.\tОтложенное редактирование: сохранение изменений в локальном кэше, их автоматическое наложение после запуска страницы, очистка кэша.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n5.\tОффлайновый режим работы: определение наличия связи с сервером или, по меньшей мере, подключения к сети и выполнение соответствующих действий при отсутствии связи.\nМожно выделить ряд дополнительных функций, упрощающих взаимодействие пользователя с таблицей: сортировка по столбцам, постраничная разбивка, клавиатурная навигация, отображение панели управления (например, в описываемой реализации на страницу выводилась панель с кнопками «Обновить с сервера», «Сохранить на сервер», «Сохранить локально»).\nАвторами был проведен обзор существующих библиотек для работы с таблицами на стороне клиента. Ни одна из рассмотренных библиотек (Flexigrid [3], jqGrid [4], Ingrid [5]) не выполняла всех перечисленных функций, в частности, везде отсутствовала возможность отложенного редактирования и оффлайнового режима работы (табл. 1).\nТаблица 1. Реализация возможностей в других библиотеках\nПлагин\tFlexigrid jqGrid Ingrid\nОтрисовка графического интерфейса Асинхронный обмен данными с сервером Пакетная передача данных об изменениях Отложенное редактирование Возможность оффлайн-работы\t+ + + + + + - + -\n2. Архитектура плагина\nЦелесообразно разбить разработку плагина на несколько относительно независимых, взаимодействующих друг с другом компонентов, которые можно реализовать, например, в виде объектов JavaScript:\n1.\tМодуль общения с сервером отправляет AJAX-запросы на заданный адрес и обрабатывает ответы сервера. В результате он либо возвращает данные другому компоненту плагина (менеджеру словарей или модулю отображения данных), либо передаёт информацию об ошибке модулю оповещений. Запросы могут генерироваться как действиями пользователя (нажатие на определённую кнопку), так и вызовами от других компонентов.\n2.\tМенеджер словарей управляет информацией о словарях, предоставляет эту информацию, когда нужно отобразить список выбора для определённого поля таблицы. При необходимости подгружает отсутствующую информацию с сервера с помощью модуля общения с сервером, либо из локального хранилища.\n3.\tМенеджер локального хранилища позволяет кэшировать данные таблиц, словарей, список внесённых изменений в локальное хранилище браузера и загружать их по требованию.\n4.\tМодуль отображения данных отвечает за отображение табличных данных и полей их редактирования. Сюда же выносятся дополнительные функции, обеспечивающие интерактивность работы пользователя вроде сортировки, постраничной разбивки и клавиатурной навигации.\n5.\tМонитор изменений отвечает за формирование списка изменений со времени последнего обновления данных с сервера.\n6.\tМенеджер блока управления отображает панель с кнопками для вызова методов сохранения данных на сервер, помещения изменений в локальный кэш, обновления данных с сервера. Здесь же задаются параметры фильтрации данных на стороне клиента. Может быть объединён с модулем отображения данных.\n7.\tМодуль оповещений уведомляет пользователя об ошибках, доступности сервера и различных событиях, а также выводит отладочные сообщения в консоль браузера.\n3. Принципы реализации\nПредлагаемое решение для работы с табличными данными, выполненное в виде плагина библиотеки jQuery, состоит из трёх файлов: ядра, файла настроек и файла CSS, первый из которых не зависит от среды применения, а два других могут изменяться под конкретные нужды. Прилагающийся файл настроек изначально содержит настройки по умолчанию и одновременно является справочником по доступным для изменения параметрам. Настройки выполнены в форме единого JavaScript-объекта и состоят из:\n1.\tПеречня словарей с указанием ссылок для их получения с сервера.\n2.\tНабора столбцов таблицы и их параметров (заголовок, доступность для редактирования, привязанный словарь и т. д.).\n3.\tШаблонов html-разметки.\n4.\tШаблонов селекторов.\n5.\tГлобальных параметров таблицы (CSS-класс контейнера таблицы, идентификатор таблицы для различения нескольких таблиц на странице).\n6.\tПользовательских обработчиков для некоторых событий.\n3.1. Шаблонизация как средство достижения гибкости\nВ общем случае шаблон - это описание некоторой универсальной абстрактной структуры данных или алгоритмов, которая при заполнении реальными данными позволяет решать класс схожих задач. Шаблонизация библиотеки является основой её гибкости - ядро, оперирующее шаблонами, может использоваться везде без изменений, изменяться будет лишь файл настроек, приспосабливающий это ядро под конкретную среду применения. Подобное разделение ядра и настроек позволяет легко обновлять библиотеку без необходимости повторения внесённых в предыдущую версию модификаций. Кроме того, файл настроек имеет (в отличие от файла, содержащего код) декларативный характер и представляет контекст применения библиотеки в гораздо более читаемом виде.\nЧтобы выводимая таблица гармонично вписывалась в веб-интерфейс, для её элементов может понадобиться особая разметка (например, иногда необходимо оборачивать данные ячеек таблиц в дополнительные блоки). Если жёстко задать html-разметку выводимой таблицы в коде библиотеки, то для использования библиотеки в составе конкретного сайта может понадобиться модификация её кода. Поэтому, чтобы сделать плагин универсальным, имеет смысл использовать шаблоны разметки - переменные, содержащие фрагменты разметки с заполнителями, замещающимися на реальные данные. Например, для ячейки таблицы шаблон может иметь вид <td><div>{data}</div></td>. При выводе на страницу параметр {data} замещается на реальные данные ячейки функцией плагина, получающей на вход имя шаблона и список фактических значений его аргументов. Вынесение шаблонов в файл настроек позволяет не только достичь большей гибкости, но и отделить код от данных, что является хорошей практикой разработки.\nПараметры, отвечающие за внешний вид блоков html-разметки (цвет, форму, отступы и т. д.), в современных веб-приложениях сконцентрированы в файлах CSS-стилей. Элементам страницы приписываются неуникальные атрибуты class и уникальные атрибуты id, а в CSS-файле сосредоточены правила отображения при определённой комбинации значений этих и некоторых других атрибутов. Хотя наличие или отсутствие CSS-файла не влияет на функционал скрипта в образце файла настроек, распространяемом с плагином, все шаблоны html-разметки используют файл стилей для определения всех параметров отображения описываемых ими элементов. При изменении настроек рекомендуется сохранять этот принцип и не использовать в шаблонах html-разметки атрибутов, непосредственно влияющих на внешний вид блоков. Использование такого подхода способствует дальнейшей структуризации данных за счёт разделения информации об отображении и о структуре.\nДля поиска элементов страницы и манипуляции ими в jQuery и её аналогах применяются выражения специального вида - селекторы. Поскольку селекторы используются в коде неоднократно, а гибкая разметка может вносить изменения в исходную структуру таблицы, имеет смысл отделить селекторы от кода и сосредоточить их в одном месте - в файле настроек. При этом некоторые селекторы тоже необходимо задавать в виде шаблонов. Например, шаблон селектора для выбора содержимого n-й ячейки имеет по умолчанию вид td:eq('{n}') > *, а для приведённого выше примера разметки -td:eq('{n}') > div > *.\nЧтобы без модификации ядра менять не только внешний вид отображаемых элементов, но и поведение плагина, при разработке применялся принцип проектирования, называемый шаблонным методом [6]. Код библиотеки содержит функции-заглушки, вызываемые там, где пользователю, вероятно, понадобится дополнить стандартную обработку данных и событий своими действиями. Эти функции могут быть наполнены реальным содержанием, если пользователь определит их в файле настроек. Поскольку jQuery, как и другие библиотеки, позволяет пользователю создавать собственные события, для получения аналогичной возможности допустимо использовать событийно-ориентированный\nподход: вместо вызова функции-заглушки генерировать специальное событие. Тогда пользователь будет не переопределять в настройках функции-заглушки, а указывать обработчики для этих специальных событий. Сравнение этих двух подходов может быть предметом отдельного исследования.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3.2.\tОсобенности работы с локальным хранилищем\nЛокальное хранилище в современных браузерах позволяет хранить строковые пары ключ-значение. Для сохранения объектов JavaScript в виде строки и их последующего восстановления можно использовать встроенные методы сериализации и десериализации, предоставляемые скриптовыми движками браузеров.\nКак правило, квота хранимых данных на один домен составляет 5МБ. Очевидно, для обеспечения работы с большим объёмом данных необходимы некоторые организационные меры. Например, можно опубликовать на сайте инструкции по увеличению квоты в настройках различных браузеров.\nДля экономии используемого в локальном кэше места стоит применять методы сжатия данных. Если учесть, что при сериализации имена полей объектов попадают в результат, можно перед публикацией библиотеки пропустить её через так называемый минификатор (программы для уменьшения размера скрипта), который в том числе может уменьшить длину имён всех используемых переменных до 2-3 символов.\n3.3.\tОсобенности создания оффлайн-приложения\nДля обеспечения работы с локально кэшированными данными без подключения к сети необходимо использовать механизм современных браузеров, позволяющий кэшировать файлы веб-страниц,- Application Cache [1]. По сути, это требует лишь перечисления всех кэшируемых элементов в файле манифеста и указания этого файла в атрибутах страницы. Файл манифеста никак не зависит от кода библиотеки, но, чтобы избежать проблем с обновлением прочих страниц сайта, рекомендуется иметь отдельную версию страницы, подлежащую кэшированию, которая содержит непустой атрибут манифеста.\nБиблиотека должна уметь определять наличие подключения к сети. Браузеры позволяют отслеживать доступность сети с помощью специального объекта navigator, и во многих случаях этого достаточно. Однако оказывается, что таким образом отслеживается не подключение к Интернет или корпоративной сети, а лишь наличие активного сетевого интерфейса. Например, при тестировании библиотеки выяснилось, что браузер считает, что он находится в сети, даже если сеть недоступна, но активен один из виртуальных сетевых интерфейсов для связи с виртуальной машиной. Эту особенность стоит учесть в реализации и вместо проверки стандартного объекта браузера выполнять тестовый запрос на сервер веб-приложения.\nЗаключение\nВ данной работе была рассмотрена задача создания эффективного пользовательского интерфейса веб-приложения для работы с табличными данными, а также предложен путь её универсального решения на основе опыта авторов. Безусловно, это не единственный возможный способ решения описанной задачи. Кроме того, современные возможности веб-браузеров стоит применить и для решения прочих проблем, связанных с улучшением интерфейса пользователя.\nРазвитие предложенного здесь решения можно продолжить по нескольким направлениям.\n1.\tКорректная обработка конфликтов редактирования - ситуаций, когда одна запись редактируется несколькими пользователями.\n2.\tПоиск наилучшего способа сжатия данных в кэше для более эффективного использования локального хранилища.\n3.\tВозможность редактирования связанных таблиц и валидация табличных связей на стороне клиента.\nЛитература\n1.\tMark Pilgrim. Dive into HTML5. URL: http://diveintohtml5.info/index.html (дата обращения: 11.10.2013).\n2.\tjQuery API documentation. URL: http://api.jquery.com (дата обращения: 11.10.2013).\n3.\tFlexigrid. Official site. URL: http://flexigrid.info (дата обращения: 11.10.2013).\n4.\tjqGrid. Official site. URL: http://www.trirand.com/blog (дата обращения: 11.10.2013).\n5.\tIngrid. Official site. URL: http://reconstrukt.com/ingrid (дата обращения: 11.10.2013).\n6.\tГамма Э., Хелм Р., Джонсон Р., Влиссидес Дж. Приёмы объектно-ориентированного проектирования. Паттерны проектирования. СПб. : Питер, 2001. 368 с.\n",
    "download_url": "https://cyberleninka.ru/article/n/optimizatsiya-veb-interfeysa-na-storone-klienta-dlya-raboty-s-tablichnymi-dannymi/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/prognozirovanie-urozhaynosti-na-osnove-analiza-kross-regionalnyh-dannyh",
    "slug": "prognozirovanie-urozhaynosti-na-osnove-analiza-kross-regionalnyh-dannyh",
    "title": "Прогнозирование урожайности на основе анализа кросс-региональных данных",
    "abstract_description": "Проблема адекватного математического моделирования и достоверного прогнозирования урожайности сельскохозяйственных культур является важной для оптимального планирования и организации аграрного производства. Определены базовые статистические характеристики для ВР урожайностей зерновых в целом по Волгоградской области начиная с 1955 г. Анализ показывает, что применение классических подходов математического моделирования, а также современных методов нелинейной динамики приводит к недостаточно адекватным результатам, особенно в острозасушливых условиях Нижнего Поволжья. Поэтому требуется применение классов математических моделей, основанных на искусственных нейронных сетях (ИНС). В работе рассмотрены вопросы построения генеративных состязательных ИНС, их конфигурации и структурной оптимизации, а также методов их обучения для прогнозирования урожайности зерновых по регионам РФ. Ввод данных и предпроцессирование реализовано с помощью библиотеки BrainJS. Разработаны рекомендации по предварительной обработке данных на основе кросс-регионального анализа массивов экономико-климатологических данных. Анализ построенных ИНС показал, что наилучшим методом предобработки оказалась линейная нормализация индексов роста, при этом увеличение количества итераций обучения положительно сказывается на качестве прогнозирования. Применение разработанных нейронных систем обеспечивает решение задачи прогнозирования урожайности на примере зерновых культур, на основе кросс-регионального анализа экономических и климатологических данных.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.82; 004.832.23\nПРОГНОЗИРОВАНИЕ УРОЖАЙНОСТИ НА ОСНОВЕ АНАЛИЗА КРОСС-РЕГИОНАЛЬНЫХ ДАННЫХ\nTHE FORECASTING OF CROP PRODUCTIVITY BASED ON THE ANALYSIS OF CROSS-REGIONAL DATA\nА.Г. Гагарин1, кандидат экономических наук, доцент А.Ф. Рогачев1'2, доктор технических наук, профессор\n1 2 A.G. Gagarin , A.F. Rogachev\n1Волгоградский государственный технический университет 2Волгоградский государственный аграрный университет\n1 Volgograd State Technical University 2Volgograd State Agrarian University\nПроблема адекватного математического моделирования и достоверного прогнозирования урожайности сельскохозяйственных культур является важной для оптимального планирования и организации аграрного производства. Определены базовые статистические характеристики для ВР урожайностей зерновых в целом по Волгоградской области начиная с 1955 г. Анализ показывает, что применение классических подходов математического моделирования, а также современных методов нелинейной динамики приводит к недостаточно адекватным результатам, особенно в острозасушливых условиях Нижнего Поволжья. Поэтому требуется применение классов математических моделей, основанных на искусственных нейронных сетях (ИНС). В работе рассмотрены вопросы построения генеративных состязательных ИНС, их конфигурации и структурной оптимизации, а также методов их обучения для прогнозирования урожайности зерновых по регионам РФ. Ввод данных и предпроцессирование реализовано с помощью библиотеки BrainJS. Разработаны рекомендации по предварительной обработке данных на основе кросс-регионального анализа массивов экономико-климатологических данных. Анализ построенных ИНС показал, что наилучшим методом предобработки оказалась линейная нормализация индексов роста, при этом увеличение количества итераций обучения положительно сказывается на качестве прогнозирования. Применение разработанных нейронных систем обеспечивает решение задачи прогнозирования урожайности на примере зерновых культур, на основе кросс-регионального анализа экономических и климатологических данных.\nThe problem of adequate mathematical modeling and reliable prediction of crop yields is important for optimal planning and organization of agricultural production. The basic statistical characteristics for VR yields of cereals in the whole of the Volgograd region have been determined since 1955. Analysis shows that the application of classical approaches to mathematical modeling, as well as modern methods of nonlinear dynamics, leads to insufficiently adequate results, especially in the driest conditions of the Lower Volga region. Therefore, the application of classes of mathematical models based on artificial neural networks (ANN) is required. In the work the questions of construction of generative controversial ANN, their configuration and structural optimization, as well as methods of their training for forecasting grain yield by regions of the Russian Federation are considered. Data input and preprocessing is implemented using the Brain JS library. Recommendations for preliminary data processing based on cross-regional analysis of economic and climatological data files have been developed. Analysis of the constructed ANN showed that the best method of preprocessing was the linear normalization of growth indices, while increasing the number of iterations of training positively affects the quality of forecasting. Application of the developed neural systems provides the solution of the problem of forecasting the yield, using the example of cereals, on the basis of cross-regional analysis of economic and climatological data.\nКлючевые слова: прогнозирование урожайности, нейронные сети, математические методы, корреляция.\nKey words: yieldforecasting, neural networks, mathematical methods, correlation.\nВведение. Проблема математического моделирования и достоверного прогнозирования урожайности сельскохозяйственных культур является важной для планирования аграрного производства. В то же время влияние ряда природно-климатических, биологических и организационно-технологических групп факторов оказывает разнонаправленное воздействие на результаты прогнозирования, приводя к недопустимо высокой, более 15 %, погрешности [1, 5]. Применение классических подходов математического моделирования, таких как построение многофакторных регрессионных моделей, систем эконометрических уравнений, различного вида адаптивных моделей, а также современных методов нелинейной динамики [1, 6, 11, 12], не всегда приводит к адекватным результатам, особенно в острозасушливых условиях Нижнего Поволжья. Поэтому требуется применение и исследование новых классов экономико-математических моделей, одним из перспективных направлений среди которых можно считать искусственные нейросетевые структуры, формируемые на ЭВМ.\nМатематические модели класса искусственных нейронных сетей (ИНС), по мнению ряда отечественных исследователей в сфере прогнозирования аграрных проблем (Е. Бочаров, А. Ильченко, Л. Кальянов, О. Солдатова, М. Суменков и др.) и зарубежных специалистов в области компьютерного моделирования (С. Хайкин, Я. Потмешил, Х. Уайт и др.), позволяют успешно решать трудно формализуемые экономические задачи, такие как распознавание образов, многомерная классификация, диагностика безопасности, прогнозирование временных рядов (ВР) сложной внутренней структуры, характерные для рядов урожайности сельскохозяйственных культур [1, 7, 8, 9, 11].\nВследствие громоздкости структуры искусственной нейронной сети (ИНС), практическая реализации ее возможна только на основе некоторого программного средства, в качестве которого нами были проанализированы коммерческие программные средства (ПС), такие как аналитическая платформа DEDUCTOR, пакет статистического анализа STATISTIKA, а также ряд авторских разработок исследователей Санкт-Петербурга. Для обоснованного выбора предпочтительного ПС была разработана многофакторная вспомогательная структура в форме электронной таблицы с весовыми коэффициентами, обобщающая экспертные оценки опрошенных специалистов. По максимальному количеству функциональных возможностей, удобству интерфейса и доступности для вузовских исследований предпочтение было отдано первому из упомянутых ПС.\nМетоды и материалы. На основе данных с официального сайта Федеральной службы государственной статистики (http://www.gks.ru/) была получена выборка данных об урожайности озимой пшеницы по субъектам РФ с 1996 по 2016 гг. Субъекты с неполными данными были отброшены, в результате чего осталось 54 временных ряда урожайности со значениями за 21 год. Урожайность озимой пшеницы представляет собой нестационарный ВР, требующий обоснования специфических математических подходов и методов для моделирования и прогнозирования, в частности, искусственных нейронных сетей. В качестве передаточной функции нейронов ИНС ряд исследователей [7, 8] рекомендует сигмоидальную функцию (1), обеспечивающую, благодаря существенной нелинейности активации, достаточную обучаемость проектируемых ИНС.\n/(*) = г^*\t(1)\n1 + е\nКроме того, для возможности применения в рамках обучения ИНС метода обратного распространения ошибки накладываются определенные условия на передаточную функцию, в частности, дифференцируемость.\nИЗВЕСТИЯ'\n№ 2 (50) 2018\nРисунок 1 - Обобщенная структура многослойной ИНС для распознавания образов\nПроцесс обучения нейронной сети требует набора примеров для ее желаемого\nповедения - целевых выходов ^°Р и входов Н [8]. При обучении нейронной сети рассчитывается некоторый функционал, который характеризует качество обучения исследуемой сети [9]:\n1 Q\nз=1XX ^Г)\n^ q=1 Р=1\n(2)\nс/т\nгде 3 - функционал; Q - объем выборки; М - число слоев сети; д - номер выборки; S - число\nвектор желаемых\nхич\tш д°рР\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nнейронов выходного слоя; т - вектор сигнала на выходе сети; т\n(целевых) значений сигнала на выходе сети для выборки с номером д.\n2\n, II\nб»1* » - ^ ь.«*» Л и^в ,лЧ6г> ЛОсС ое^ .С«»*\t' I\n«еС „орР1** об^ ~ «г\"0\"\"** ао******\t,\nРисунок 1 - Диаграмма урожайности озимой пшеницы за 1996-2016 гг.\nЗагрузка данных из формата CSV осуществлялась с помощью парсера PapaParse [9], моделирование нейронной сети проводилось с использованием библиотеки BrainJS [10].\nНа языке JavaScript был реализован скрипт, выполняющий следующие функции: загрузка данных об урожайности из файла в формате CSV; предобработка данных: логарифмирование, нормализация, расчет индексов роста; циклический перебор конфигураций нейронной сети (изменение количества нейронов во входном слое, количества скрытых слоев и нейронов в них); обучение нейронной сети определенной конфигурации с заданными порогом ошибки и максимальным количеством итераций обучения.\nНа этапе обучения нейронная сеть восстанавливает целевую функцию по множеству наборов обучающей выборки, т.е. решает задачу интерполяции [2, 3, 9]. На этапе использования обученной нейронной сети (получении прогноза) она будет использовать восстановленную зависимость для получения прогнозируемой величины, т.е. решать задачу экстраполяции.\nСходимость метода обратного распространения является весьма медленным процессом. Подстройка весов осуществляется независимо для каждой пары образов обучающей выборки. При этом улучшение функционирования некоторой заданной пары может привести к ухудшению работы на предыдущих образах. Обучение сети для определения весов входов нейронов второго слоя, а также третьего слоя производственного сегмента нейронной системы не требуется.\nРезультаты и обсуждение. Отработка методики обучения ИНС проводилась на ВР урожайности зерновых культур, который характеризуется выраженным осциллированием.\nВычисленные основные статистические характеристики для ВР урожайностей зерновых в целом по Волгоградской области, начиная с 1955 года, представлены на рисунке 3.\n12 10 8 6 4 2 0\n1,2\n1,0\n0,8 .о ' н\nо\n0,6 I\nо\nср ф\n0,4 m\n0,2\n0,0\n5,3 7 8,7 10,4 12,1 13,8 15,5 17,2 18,9 20,6\nВариант ]f--fn -Fn • F\nРисунок 3 - Сравнение эмпирических частот распределения урожайностей зерновых культур с нормальным законом распределения: f - эмпирические частоты по интервалам; йп - теоретические частоты нормального распределения; F - накопленные эмпирические частоты; Fn - интегральная кривая\nнормального распределения\nДля расчёта теоретических значений вероятности для нормального распределения использовалась встроенная в Excel функция Плотности нормального распределения (НОРМРАСП).\nДля совокупности урожайностей зерновых в целом расчетное значение критерия X (Хи-квадрат Пирсона) превысило 19,8, (критическое табличное значение 9,95, рассчитанное при уровне значимости а = 0,05 и числе степеней свободы v = q - k - 1 = 4). Для наглядности графического сопоставления исследуемого эмпирического распределения урожайности зерновых в целом с нормальным законом, оба распределения представлены на рис. 3, где слева по оси ординат приведены значения эмпирических и теоретических частот, а справа - соответствующих вероятностей как дифференциального, так и интегрального распределений.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИсследуемый ВР урожайности характеризуется выраженным несоответствием распределения нормальному закону\nДля корректного решения задачи экстраполяции как задачи интерполяции необходимо обеспечить стационарность временного ряда признаков, распределение значений ряда должно быть инвариантно относительно момента времени, для которого оно построено. Алгоритм применения ИНС для решения задачи прогнозирования ВР включает этапы предпрогнозного анализа, обоснования и формирования структуры, обучения сети, оценки погрешности и качества прогноза, проведения непосредственно прогнозирования.\nНейронная сеть обучалась 200, 1000 и 5000 эпох. Размер входного слоя d варьировался от 3 до 19 нейронов, в качестве входных значений подавались предварительно обработанные значения урожайности за d последовательных периодов, на выход - предварительно обработанное значение урожайности за следующий период.\nДля генерации вариантов конфигурации скрытых слоев использовались следующие соотношения:\n•\tколичество скрытых слоев hlCount варьируется от 1 до числа нейронов во входном слое, деленное на два;\n•\tколичество нейронов в /-ом слое рассчитывается по формуле:\nhlt = d-i* (d~2) .\t(3)\n1\thlCount\tv 7\nТакой подход позволяет получать конфигурации вида 3х2х1, 8х6х4х2х1, 15х11х7х2х1 и т.д. Количество вариантов конфигураций - 98, что гораздо меньше числа конфигураций, получаемых при полном переборе (порядка 1013).\nСгенерированные конфигурации нейронных сетей обучались на тестовых данных, в которые не входили показатели за 2016 год, используемые в качестве контрольного примера для независимой оценки ошибки прогнозирования.\nВид структуры и форма передаточных функций нейронов выбирались исходя из выявленной на предпрогнозном этапе мультичастотном характере цикличности исследуемых ВР урожайности.\nАнализ построенных ИНС показал, что наилучшим методом предобработки оказалась линейная нормализация индексов роста, при этом увеличение количества итераций обучения положительно сказывается на качестве прогнозирования (рисунок 4). С ростом количества скрытых слоев средняя ошибка прогноза растет.\nСреди лучших конфигураций можно рекомендовать: 5x2x1, 5x4x2x1, 8x5x2x1, 9x6x2x1, 8x2x1, которые обеспечивали величину погрешности для трехслойной ИНС в пределах 15.. .25 %.\n***** ИЗВЕСТИЯ *****\nНИЖНЕВОЛЖСКОГО АГРОУНИВЕРСИТЕТСКОГО КОМПЛЕКСА, НАУКА И ВЫСШЕЕ ПРОФЕССИОНАЛЬНОЕ ОБРАЗОВАНИЕ\n№ 2 (50) 2018\n35,00%\n......200 --- 1000\t5000\t£\t*\nРисунок 4 - Распределение средних ошибок прогноза (предобработка - линейная нормализация)\nНа следующем этапе исследования планируется разработка программного комплекса для автоматизации процедуры обучения семейства состязательных ИНС для прогнозирования урожайности различных зерновых, овощных и кормовых культур, учитывающих особенности их возделывания в острозасушливых условиях Нижнего Поволжья.\nЗаключение. На основаниии вышеизложенного можно сделать следующие выводы:\n1.\tДля создания математической модели урожайности с использованием технологии ИНС, на основе проведенных предпрогнозных численных экспериментов и анализа статистических характеристик ВР урожайности исследованных сельскохозяйственных культур, была обоснована структура ИНС, выполнено ее «обучение» и доказана возможность получения краткосрочных прогнозов с погрешностью в пределах 15.. .20 %.\n2.\tПрименение разработанных генеративных состязательных нейронных систем обеспечивает решение задачи прогнозирования урожайности на примере зерновых культур на основе кросс-регионального анализа экономических и климатологических данных.\nБиблиографический список\n1.\tГагарин А.Г. Программная инженерия [Текст] / А.Г. Гагарин. - Волгоград: Волгоградский государственный технический университет, 2016. - 96 с.\n2.\tЕжов, А.А. Нейрокомпьютинг и его применения в экономике и бизнесе [Текст] / А.А. Ежов, С.А. Шумский; под ред. проф. В.В. Харитонова. - М.: МИФИ, 1998. - 224 с. Серия «Учебники экономико-аналитического института МИФИ».\n3.\tИльченко, А.Н. Экономико-математические методы [Текст]/ А.Н. Ильченко. - М.: Финансы и статистика, 2009. - 288 с.\n4.\tКачановский, Ю.П. Предобработка данных для обучения нейронной сети [Текст] / Ю.П. Качановский, Е.А. Коротков // Фундаментальные исследования. - 2011. - № 12-1. - С. 117-120.\n5.\tРогачев, А.Ф. Оценка прогнозного уровня урожайности на основе нейросетевых моделей динамики [Текст] / А.Ф. Рогачев, М.Г. Шубнов // Известия Нижневолжского агроуниверситетского комплекса: наука и высшее профессиональное образование. - 2012. - № 4. - С. 226-231.\n6.\tРогачев, А.Ф., Математическое моделирование экономической динамики в аграрном производстве [Текст] : монография / А.Ф. Рогачев. - Волгоград: Изд-во Волгоградского ГАУ, 2014. - 172 с.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n7.\tТихонов, Э.Е. Методы прогнозирования в условиях рынка [Текст] : учебное пособие / Э.Е. Тихонов. - Невинномысск, 2006. - 221 с.\n8.\tЧерний, О. Нейронные сети на Javascript [Электронный ресурс] / О. Черний. - 2016. - Дата обновления: 01.07.2016. - Режим доступа : https://habrahabr.ru/post/304414/ (дата обращения: 25.10.2017).\n9.\tPapa Parse - Powerful CSV Parser for JavaScript [Электронный ресурс]. - Режим доступа: http://papaparse.com (дата обращения: 25.10.2017).\n10.\tSimple feed-forward neural network in JavaScript [Электронный ресурс]. 2014. Дата обновления: 20.10.2017. - Режим доступа: https://github.com/BrainJS/brain.js (дата обращения: 25.10.2017).\n11.\tRogachev, A.F. Economic and Mathematical Modeling of Food Security Level in View of Import Substitution // Asian Social Science Vol. 11, No. 20, 2015. - P. 178-185.\n12.\tRogachev, A.F. Manufacturing and Consumption of Agricultural Products as a Tool of Food Security Management in Russia / Rogachev, A.F., Shokhnekh, A.V., Mazaeva, T.I. // REVISTA GALEGA DE ECONOMÍA (RGE) Vol. 25-2. July-December - 2016.\nReference\n1.\tGagarin A. G. Programmnaya inzheneriya [Tekst] / A. G. Gagarin. - Volgograd: Vol-gogradskij gosudarstvennyj tehnicheskij universitet, 2016. - 96 s.\n2.\tEzhov, A. A. Nejrokomp'yuting i ego primeneniya v jekonomike i biznese [Tekst] / A.A. Ezhov, S. A. Shumskij; pod red. prof. V. V. Haritonova. - M.: MIFI, 1998. - 224 s. Seriya \"Uchebniki jekonomiko-analiticheskogo instituta MIFI\".\n3.\tIl'chenko, A. N. Jekonomiko-matematicheskie metody [Tekst]/ A. N. Il'chenko. - M.: Fi-nansy i statistika, 2009. - 288 s.\n4.\tKachanovskij, Yu. P. Predobrabotka dannyh dlya obucheniya nejronnoj seti [Tekst] / Yu. P. Kachanovskij, E. A. Korotkov // Fundamental'nye issledovaniya. - 2011. - № 12-1. - S. 117-120.\n5.\tRogachev, A. F. Ocenka prognoznogo urovnya urozhajnosti na osnove nejrosetevyh mod-elej dinamiki [Tekst] / A. F. Rogachev, M. G. Shubnov // Izvestiya Nizhnevolzhskogo agrouniversi-tetskogo kompleksa: nauka i vysshee professional'noe obrazovanie. - 2012. - № 4. - S. 226-231.\n6.\tRogachev, A. F., Matematicheskoe modelirovanie jekonomicheskoj dinamiki v agrarnom proizvodstve [Tekst] : monografiya / A. F. Rogachev. - Volgograd: Izd-vo Volgogradskogo GAU, 2014. - 172 s.\n7.\tTihonov, Je. E. Metody prognozirovaniya v usloviyah rynka [Tekst] : uchebnoe posobie / Je. E. Tihonov. - Nevinnomyssk, 2006. - 221 s.\n8.\tChernij, O. Nejronnye seti na Javascript [Jelektronnyj resurs] / O. Chernij. - 2016. - Data obnovleniya: 01.07.2016. - Rezhim dostupa : https://habrahabr.ru/post/304414/ (data obrascheniya: 25.10.2017).\n9.\tPapa Parse - Powerful CSV Parser for JavaScript [Jelektronnyj resurs]. Rezhim dostupa: http://papaparse.com (data obrascheniya: 25.10.2017).\n10.\tSimple feed-forward neural network in JavaScript [Jelektronnyj resurs]. 2014. Data obnovleniya: 20.10.2017. Rezhim dostupa: https://github.com/BrainJS/brain.js (data obrascheniya: 25.10.2017).\n11.\tRogachev, A.F. Economic and Mathematical Modeling of Food Security Level in View of Import Substitution // Asian Social Science - 2015. - Vol. 11, No. 20/ - P. 178-185.\n12.\tRogachev, A.F. Manufacturing and Consumption of Agricultural Products as a Tool of Food Security Management in Russia / Rogachev, A.F., Shokhnekh, A.V., Mazaeva, T.I. // REVISTA GALEGA DE ECONOMÍA (RGE) - Vol. 25-2. July-December 2016.\nE-mail: rafr@mail.ru\nУДК 664.1.033\nИЗУЧЕНИЕ ПРОЦЕССА ЭЛЕКТРОИМПУЛЬСНОГО ПЛАЗМОЛИЗА\nРАСТИТЕЛЬНОГО СЫРЬЯ\nSTUDY OF THE PROCESS OF ELECTROPULSIVE PLASMOLYSIS OF PLANT RAW MATERIALS\nИ.В. Юдаев, доктор технических наук, профессор Р.Г. Кокурин, аспирант; Ю.В. Даус, магистрант\nI.V. Yudaev, R.G. Kokurin, Yu.V. Daus\nАзово-Черноморский инженерный институт -филиал ФГБОУ ВО «Донской государственный аграрный университет», г. Зерноград\nAzov-Black Sea Engineering Institute -branch of FSBEI HE «Don State Agrarian University», Zernograd\nВ настоящее время вопросам внедрения интенсивных, энергосберегающих технологий, минимально негативно влияющих на экологическую и пищевую безопасность, уделяется особое внимание, особенно при производстве продуктов питания. К таким технологическим операциям относится и электроимпульсный плазмолиз объектов растительного происхождения (плоды, овощи, бахчевые культуры и т.п.). Обработка растительного сырья применяется на предварительном этапе перед экстрагированием или сушкой продуктов для обеспечения сохранности полезных веществ в продукте, что сокращает время его приготовления и снижает потребление энергии на его производство. Для осуществления электрического воздействия на обрабатываемое сырье специально разработан генератор импульсного напряжения, который полностью отвечает требованиям технологического процесса, формирует на своем выходе импульсы с экспоненциальным срезом амплитудой -13 кВ; длительностью - 65 мкс; временем нарастания фронта импульса - 300 нс; временем среза импульса - 63 мкс. Работа генератора в комплексе с экспериментальной установкой позволила исследовать процесс электроимпульсного плазмолиза растительной ткани яблок и тыквы. Интенсивное соковыделение наблюдается из тех образцов, к которым подводилось количество воздействующих высоковольтных импульсов до 100 штук, при этом масса выделяемого прессованием сока увеличивается, в сравнении с количеством сока, полученного от электрически необработанной массы яблок, при напряженности электрического поля в растительной ткани 5 кВ/см - в 9,7 раза, 10 кВ/см - в 15,6 раза, 15 кВ/см - в 16,7 раза, 20,0 кВ/см - в 15,3 раза. Подобная закономерность прослеживается и при изучении изменения сопротивления растительной ткани образцов тыквы, только в направлении уменьшения, что справедливо, так как при электрическом повреждении электропроводимость растительных тканей повышается.\nAt present, special attention is paid to the issues of introducing intensive, energy-saving technologies that have a minimal negative impact on environmental and food safety, especially in food production. Such technological operations include electroimpulse plasmolysis of objects of plant origin (fruits, vegetables, melons, etc.). Processing of plant raw materials is used at the preliminary stage before extracting or drying products, ensuring the preservation of useful substances in the product, reducing the time of its preparation and energy consumption for its production. To implement electric effect on the processed raw materials, there was specially designed pulse voltage generator which fully meets the requirements of the technological process by forming pulses with an exponential amplitude cutoff of 13 kV at its output; with a duration of 65 ^s; the rise time of the pulse front is 300 ns; the pulse cutoff time is 63 ^s. The operation of the generator in combination with the experimental setup made it possible to study the process of electro-pulse plasmolysis of apples and pumpkin plant tissue. Intensive squeezing is observed from those samples\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n",
    "download_url": "https://cyberleninka.ru/article/n/prognozirovanie-urozhaynosti-na-osnove-analiza-kross-regionalnyh-dannyh/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/prodvinutoe-keshirovanie-i-optimizatsiya-veb-prilozheniy-s-pomoschyu-tehnologii-swr",
    "slug": "prodvinutoe-keshirovanie-i-optimizatsiya-veb-prilozheniy-s-pomoschyu-tehnologii-swr",
    "title": "ПРОДВИНУТОЕ КЕШИРОВАНИЕ И ОПТИМИЗАЦИЯ ВЕБ-ПРИЛОЖЕНИЙ С ПОМОЩЬЮ ТЕХНОЛОГИИ SWR",
    "abstract_description": "В данной статье анализируются продвинутые методики для кеширования запросов данных и оптимизации веб-приложений, а также практические примеры для веб-приложений, написанных на таких технологиях как React.JS и Next.JS.",
    "full_text_body": "\n\n\n\n\uFEFFПРОДВИНУТОЕ КЕШИРОВАНИЕ И ОПТИМИЗАЦИЯ ВЕБ-ПРИЛОЖЕНИЙ С ПОМОЩЬЮ\nТЕХНОЛОГИИ SWR\nКнязев И.В.\nСтарший разработчик программного обеспечения в June Homes\nБелгород, Россия\nTHE ADVANCED WEB APPLICATIONS CACHING AND OPTIMIZATION USING SWR\nKniazev I.\nSenior Software Developer at June Homes Belgorod, Russia\nАННОТАЦИЯ\nThe article analyzes the advanced approaches for data caching and optimization as well as implementation on practical examples for web-apps including ReactJS and Next.JS.\nABSTRACT\nВ данной статье анализируются продвинутые методики для хеширования запросов данных и оптимизации веб-приложений, а также практические примеры для веб-приложений, написанных на таких технологиях как React.JS и NextJS.\nКлючевые слова: swr, javascript, reactjs, nextjs.\nKeywords: swr, javascript, reactjs, nextjs.\nКеширование данных и оптимизация веб-приложений являются самыми актуальными темами последних нескольких лет. Очевидно, что грамотное построение приложения, его архитектура, выбор технологий и дальнейшая его оптимизация влияют на такие показатели как расширяемость, переиспользуемость и эффективность.\nПоследние исследования 2021 года показывают, что большинство современных веб-приложений уже используют фреймворки, которые облегчают работу с ними, делают его быстрым и эффективным. К сожалению, большинство из них работают с данными, полученными от бекенда нерационально: на каждый запрос получают новые и заново пересохраняют их внутри приложения. Все это занимает много времени, делает код сложным и громоздким. Но есть одна технология, которая работает совершенно по другому принципу, за счет чего позволяет работать с данными намного эффективнее.\nВ данной статье мы рассмотрим, как можно эффективно кешировать данные с работать с ними с помощью, набирающей популярность и зарекомендовавшей себя в крупных компаниях технологии SWR.\nГоворя о кешировании данных в современных веб-приложениях, стоит отметить стратегию инва-лидации HTTP-кеша (RFC-5861). Данный протокол описывает то, как должны обновляться закеширо-ванные данные: загружаются сразу же, а обновляются «на лету».\nВ некоторых веб-приложениях кэш-память может кэшировать данные, которые используются редко. В этой ситуации обновления могут быть вызваны только после повторной загрузки данных на клиент в случае ошибки. Если же кэш содержит данные о пользователях и их действиях, а время выполнения запроса в браузере составляет несколько\nсекунд, то кеширование данных может быть бесполезным. Например, некоторые веб-сайты не используют кэширование из соображений безопасности.\nТехнология SWR позволяет с минимальным количеством кода обрабатывать уже обновленный контент, что является отличным компромиссом между эффективностью веб-приложения и пользовательским опытом.\nБазовое использование выглядит так: const fetcher = (...args) => fetch(...args).then(res => res.json())\nЗатем вы можете импортировать хук useSWR из библиотеки SWR и начать использовать его внутри любых функциональных компонентов: import useSWR from 'swr' function Profile () {\nconst { data, error } = useSWR('/api/user/123', fetcher)\nif (error) return <div>failed to load</div> if (!data) return <div>loading...</div>\nreturn <div>hello {data.name}!</div> }\nПо умолчанию SWR использует глобальный кеш для хранения и обмена данными между всеми компонентами. Теперь есть новый способ настроить его с помощью собственного поставщика кеша. Новая cache конфигурация и createCache API теперь представлены в swr@beta. Они предназначены для решения проблем использования SWR с более настраиваемыми хранилищами и обеспечения прямого доступа к кеш-памяти.\nРассмотрим пример того, как создать пользовательский кеш. Для этого в библиотеке SWR есть функция createCache. Этот API получает в provider качестве аргумента и кеш-основу. Возвращает объект с кеш-экземпляром, который может быть использован перехватчиками SWR, и mutate API для\nуправления соответствующим кешем. Обратите внимание, что это не глобальный mutate API:\nconst { mutate, cache } = createCache(provider) Вы можете перейти вниз с помощью SWRCon-fig или useSWR:\nimport { SWRConfig, createCache } from 'swr'\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nconst provider = new Map()\nconst { mutate, cache } = createCache(provider)\n// передайте context в SWR\n<SWRConfig value={{ cache }}>\n<Page/>\n</SWRConfig>\n// или передайте его в параметры хука useSWR useSWR(key, fetcher, { cache }) Обратите внимание, что createCache не должен вызываться внутри рендера, он должен быть глобальным синглтоном.\nПоставщик (provider) используется, чтобы позволить пользователю напрямую управлять значениями кеша, а интерфейс должен соответствовать следующему определению:\ninterface Cache<Data = any> { get(key: string): Data | null | undefined set(key: string, value: Data): void\ndelete(key: string): void\n}\nЭти методы используются внутри SWR для управления кешем. Помимо самого SWR, теперь пользователь может с помощью provider напрямую обращаться к кэшированным ключам и значениям. Например, если provider является экземпляром карты, вы сможете получить доступ к используемым ключам через поставщика, используя Map.prototype.keys(). В SWR это возможно благодаря тому, что у карт и узлов есть одно и то же имя и один и тот же экземпляр provider. Например, в Java 6 на карту можно напрямую ссылаться из файла ресурсов или через provider (через code-in-use), а также через поставщика. В SWR для этого используется один и тот же поставщик. Так как в SWR используется только один поставщик, вы можете добавить столько ключей, сколько захотите или как пожелаете.\nВ большинстве случаев вам не следует напрямую манипулировать кэшированными данными. Вместо этого всегда используйте mutate, чтобы сохранить согласованность состояния и кеширова-ния.\nИспользование mutate функции, возвращаемой createCache, аналогично глобальной mutate функции. Например, если вы хотите повторно проверить некоторые ключи из данного кеша:\nconst { cache, mutate } = createCache(new Map()) export default function App() { return (\n<SWRConfig value={{ cache }}> <div className=\"App\"> <Section />\n<button onClick={() => mutate('A')}>revalidate A</button>\n<button onClick={() => mutate('B')}>revalidate B</button>\n</div>\n</SWRConfig>\n) }\nБлагодаря гибкости этих атомарных API-интерфейсов вы можете составлять их со своей собственной логикой, такой как планирование частичных мутаций. В приведенном ниже примере matchMutate можно получить выражение регулярного выражения в качестве ключа и использовать его для изменения тех, кто соответствует этому шаблону.\nfonction matchMutate(matcher, data, shouldRevalidate = true) { const keys = []\nif (matcher instanceof RegExp) { // provider\" это ваша имплементация cache, например, \"Map()'\nfor (const k of provider.keys()) { if (matcher.test(k)) {\nkeys.push(k)\n}\n}\n} else {\nkeys.push(matcher)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n}\nconst mutations = keys.map((k) => mutate(k, data, shouldRevalidate))\nreturn Promise.all(mutations)\n}\nmatchMutate(/Akey-/) // ревалидирует ключи начиная с key-'\nmatchMutate('key-a') // ревалидирует 'key-a' Возможно, вы захотите синхронизировать свои кэшированные состояния localStorageв некоторых особых случаях, чтобы в следующий раз легче восстанавливать данные из сохраненного состояния при перезагрузке приложения. fonction createProvider() { const map = new Map(localStorage.getItem('app-cache') || [])\nwindow.addEventListenerCbeforeunload', () => {\nlocalStorage.setItem('app-cache', map.entries()) })\nreturn map\n}\nconst provider = createProvider()\nconst { cache, mutate } = createCache(provider)\nЗаключение\nТаким образом, кэширование играет одну из основных ролей в быстродействии сайтов и сравнительно просто настраивается на стороне сервера. Веб-разработчики часто сталкиваются с кэшированием, ибо браузеры и проксирующие серверы, пытаясь ускорить работу сайтов для пользователя, очень часто стараются сохранить у себя максимально большое количество документов в локальном кэше.\nИспользование SWR значительно упрощает и ускоряет разработку. Основным преимуществом является то, что запрос кэшируется и отправляется на сервер всего один раз, что положительно влияет на эффективность и производительность приложения.\nС помощью всего одной строчки кода вы можете упростить логику получения данных в своем проекте, а также получить все эти удивительные функции прямо «из коробки»: быструю, легкую и многоразовую выборку данных, встроенный кеш и дедупликацию запросов, независимость от протокола, строгую типизация, умную повторную вали-дацию и многое другое.\nЛитература\n1.\tДокументация SWR / [Электронный ресурс], 2021. Режим доступа: https://swr.vercel.app/ (дата обращения: 01.07.2021).\n2.\tРепозиторий GitHub / SWR. [Электронный ресурс], 2021.\tРежим\tдоступа: https://github.com/vercel/swr/ (дата обращения: 01.07.2021).\n3.\tДокументация React.JS / [Электронный ресурс], 2021. Режим доступа: https://reactjs.org/ (дата обращения: 01.07.2021).\n4.\tДокументация Next.JS / [Электронный ресурс], 2021. Режим доступа: https://nextjs.org/ (дата обращения: 01.07.2021).\n5.\tРепозиторий GitHub / SWR. [Электронный ресурс], 2021.\tРежим\tдоступа: https://github.com/vercel/next.js (дата обращения: 01.07.2021).\n6.\tВебсайт ВикиЧтение / Глава 3. Кеширование. [Электронный ресурс], 2021. Режим доступа: https://it.wikireading.ru/2580 (дата обращения: 01.07.2021).\n",
    "download_url": "https://cyberleninka.ru/article/n/prodvinutoe-keshirovanie-i-optimizatsiya-veb-prilozheniy-s-pomoschyu-tehnologii-swr/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/issledovanie-sredstv-postroeniya-modeley-ishodnogo-koda-programm-na-yazykah-c-i-c",
    "slug": "issledovanie-sredstv-postroeniya-modeley-ishodnogo-koda-programm-na-yazykah-c-i-c",
    "title": "Исследование средств построения моделей исходного кода программ на языках c и C++",
    "abstract_description": "Проведен сравнительный анализ моделей исходного кода программ на языках C и C++. Предложена универсальная модель, наиболее подходящая для решения задач статиñòèческого анализа программного кода. Проанализированы альтернативные подходы к формированию моделей программ и выбран оптимальный для построения универсальной модели программного кода..Comparative analysis of source code models is done in this article. Source code model optimized for program static analysis is proposed. Different source code model extraction techniques are analyzed, optimal technique is selected",
    "full_text_body": "\n\n\n\n\uFEFF-►\nВычислительные машины и программное обеспечение\nВ. М. Ицыксон, М. И. Глухих, А. В. Зозуля, А. С. Власовских\nИсследование средств построения моделей исходного\nкода программ на языках С и С+ +\nВ последние годы компьютерная индустрия бурно развивается, и ее развитие неразрывно связано с увеличением количества используемых программных продуктов, а также с увеличением их сложности. В настоящее время объем программного кода некоторых продуктов составляет миллионы строк. В то же время известно, что даже при тщательном тестировании в программном коде остаются ошибки. По этой причине в настоящее время актуальны задачи автоматизированного поиска ошибок в программном коде. Особенно это касается языков С и С++, которые являются популярными уже более двадцати лет и включают в себя целый ряд низкоуровневых конструкций, использование которых может увеличить количество ошибок в программном коде.\nДля повышения качества программных систем используются различные подходы, основанные как на анализе только исходных кодов (методы статического анализа), так и на использовании информации времени выполнения (методы динамического анализа). Динамические методы (например, тестирование) просты в реализации, не требуют больших вычислительных затрат, но при этом позволяют выявлять ошибки только для конкретных трасс исполнения программы. Методы статического анализа характеризуются высокой вычислительной сложностью, но при этом позволяют обнаруживать ошибки во всех возможных\nтрассах исполнения. В последнее время с ростом производительности компьютеров актуальность методов статического анализа возрастает.\nОбщая схема применения статического анализа приведена на рис. 1.\nПервым этапом является синтаксический разбор исходного кода с формированием представления, удобного для обнаружения дефектов — далее будем называть такое представление дшг^ль/о исходного кода. На втором этапе построенная модель анализируется и уточняется, с ее помощью происходит обнаружение программных дефектов. Эффективность всего статического анализа и его производительность существенно зависят от характеристик построенной модели.\nЦель данной работы — исследование моделей исходного кода, применяемых для проведения статического анализа, и сравнение имеющихся средств построения моделей исходного кода на языках С и С++.\nМодель исходного кода должна обеспечивать доступ ко всем объектам программного кода, поддерживать быструю навигацию между связанными объектами, а также снижать трудоемкость применения методов статического анализа. Наиболее распространенные модели исходного кода рассмотрены в первом разделе данной статьи.\nВвиду сложности современных языков программирования реализация синтакси-\nИсходный код на языке С/С++\nПостроение\nмодели _\nяр: ■ шШ\nмодель\t\tОбнаружение\nисходного\t\tпрограммных\nкода\t\tдефектов\nРис. I. Общая схема статического анализа\nческого разбора исходного кода довольно трудоемкая задача. Она может решаться как путем разработки собственного парсера', так и с использованием существующих программных средств, позволяющих формировать модели исходного кода на языках С и С++. Рассмотрению этих подходов, анализу их достоинств и недостатков посвящен второй раздел данной статьи.\nМодели исходного кода программ\nВ настоящее время при проведении статического анализа используются следующие модели исходного кода [1,3]:\nабстрактное синтаксическое дерево (abstract syntax tree, AST);\nабстрактный семантический граф (abstract semantic graph, ASG);\nграф потока управления (control flow graph, CFG):\nграф зависимостей по данным (data dependency graph. DDG):\nпредставление на основе статического однократного присваивания (static single assignment form, SSA).\nКаждая из перечисленных моделей имеет свою область применения, связанную с целью проведения разбора (компиляция, оптимизация, распараллеливание, анализ и т. п.). Наиболее важными для проведения статического анализа являются следующие свойства модели: полнота представления исходного кода; наличие семантических связей, позволяющих проводить навигацию по элементам модели:\nналичие информации о типах данных, областях видимости, порядке выполнения инструкций:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nналичие связей элементов модели с исходным кодом.\nПроанализируем перечисленные модели исходного кода с точки зрения наличия и степени реализации указанных свойств.\nАбстрактное синтаксическое дерево Результатом разбора исходного кода согласно формально заданной грамматике является дерево разбора (parse tree) [1]. Его внутренние вершины сопоставлены с нетерминалами формальной грамматики, а листья — с терминалами. Такое представление слишком громоздко для выполнения статического анализа. Поэтому дерево подвергается упрощению за счет отбрасывания нетерминальных узлов с единственным нетерминальным потомком, преобразования части терминалов в атрибуты узлов. Также могут быть введены новые узлы с большей семантической нагрузкой (например. Expression). В результате образуется абстрактное синтаксическое дерево (abstract syntax tree, AST) [1].\nПример AST приведен на рис. 2. AST построено для следующей программы: int main(void) { int n — 10, f= 1: do { f *= n; J while (~n): return f:\n}\nAST содержит информацию обо всем исходном коде программы с возможностью его\nfunction (main)\nparameters\ntype (int)\ndeclaration\ncompound statement\ntype (void)\ntype (int)\ninitializer\ninitializer\niteration (do while)\njump (return)\nexpr (*=)\nexpr (--)\nРис. 2. Абстрактное синтаксическое дерево\nЗдесь и далее под термином \"парсер\" будем понимать средство синтаксического разбора исходного кода программ.\nвосстановления. Такой информации достаточно для проведения статического анализа. Несмотря на это. применение его для решения задач статического анализа неэффективно — навигация по дереву требует обхода большого числа вершин, что связано с отсутствием в модели семантической информации. Поэтому перед выполнением статического анализа обычно осуществляется модификация AST с последующим построением других моделей исходного кода.\nАбстрактный семантический граф Абстрактный семантический граф (abstract semantic graph. ASG) является расширением AST [1]. ASG по сравнению с AST дополнен различными семантическим дугами, отображающими соответствующие семантические свойства программы и упрощающими навигацию по исходному коду, например:\nдуга от места использования переменной к ее объявлению:\nдуга от места вызова функции к ее определению:\nдуга от текущей инструкции к следующей. Пример ASG приведен на рис. 3.\nДанная модель обладает необходимой полнотой для всестороннего анализа исходного кода программы. Для ряда методов статического анализа целесообразно применение упрощенных видов ASG. рассматриваемых как отдельные модели. Подобные модели концентрируются на определенных семантических аспектах, за счет чего размерность и сложность моделей сокращаются.\nГраф потока управления Граф потока управления (control flow graph, CFG) —модель программы, представляющая в виде орграфа поток управления в программе [3]. В этой модели сохраняются только инструкции программы, а также информация о возможной передаче управления между инструкциями. В качестве узлов CFG могут использоваться элементарные блоки инструкций (basic blocks). При построении CFG необходимо учитывать следующие языковые конструкции, присущие большинству императивных языков программирования:\nбезусловные переходы;\nветвления;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nциклы:\nid(n)\tс (10)\tid (f)\tс(1)\njump (return) -—-1-\ntype (int)\ninitializer\ninitializer\ntype (int)\ncompound statement\ntype (void)\ndeclaration\nРис. 3. Абстрактный семантический граф\nПри анализе программ на основе А5С обычно решаются задачи определения области видимости переменных, проводятся анализ потока управления, анализ зависимостей по данным и др. Особенности модели АЯС — большое количество типов узлов и связей между ними, а также простота связи с исходным кодом. При необходимости А50 можно расширить за счет включения дополнительной семантической информации.\nвызовы функций; исключения.\nПример CFG приведен на рис. 4.\nРис. 4. Граф потока управления\nПостроение CFG упрощает решение некоторых задач оптимизации и анализа кода. CFG\nиспользуется в задачах поиска недостижимых участков кода, поиска неинициализированных переменных и т. д.\nГраф зависимостей по данным Граф зависимостей по данным (Data dependency graph. DDG) — модель программы, представляющая в виде направленных дуг зависимости по данным между узлами-инструкциями [I]. Дуга связывает два узла тогда и только тогда, когда между соответствующими инструкциями есть зависимость по данным. Зависимость по данным может иметь один из трех типов: \"запись-чтение\", \"чтение-запись\", \"запись-запись\".\nПример DDG приведен на рис. 5.\nРис. 5. Граф зависимостей поданным\nDDG используется при решении задач оптимизации, а также задач автоматизации распараллеливания выполнения. Особенностями данной и предыдущей модели являются относительно небольшое количество типов узлов и связей между ними, простота доступа и навигации.\nТаким образом, модели на основе CFG и DDG применимы для отдельных аспектов анализа кода, отражая лишь часть имеющихся зависимостей, и не обладают необходимой полнотой для всестороннего анализа исходного кода.\nПредставление на основе статического однократного присваивания\nПредставление на основе статического однократного присваивания (static single assignment, SSA) [4] — представление исходного кода программы, в котором:\nкаждой локальной переменной значение присваивается только один раз:\nвводится версионирование для локальных переменных, которые в исходном коде имеют неоднократные присваивания:\nдля локальных переменных вводятся ф-функции на выходе условных конструкций, объединяющие несколько ветвей программы и определяющие их окончательное значение;\nциклы заменяются инструкциями ветвления и безусловных переходов:\nсложные выражения заменяются цепочками выражений в трехоперандной форме.\nДанное представление может быть записано ограниченным набором конструкций исходного языка (таких, как if и goto для языка С), или может быть изображено в CFG-форме. Пример SSA-представления в CFG-форме приведен на рис. 6.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n| п'=|0 - 1 '1*1 :\n(JiiXri 13!\nи\n1 'ЗЛ? п\t*] гЗдпМ |\t1\nРис. 6. Представление на основе ББА\n55А-представление широко применяется при решении различных задач анализа кода: определение неиспользуемого кода, устранение избыточных конструкций, машинно-независимая оптимизация и т. д.\nПо сравнению с другими моделями исходного кода программ БЗА-представление имеет следующие преимущества:\nф-функции упрощают использование некоторых методов статического анализа (например, в методах на основе ограничений);\nтрехоперандная форма выражений сокращает число различных типов анализируемых конструкций;\nупрощенные циклические конструкции удобны для методов анализа потока управления.\nОдним из недостатков использования 88А-представления в алгоритмах статического анализа кода является отсутствие явной информации об областях видимости переменных, что затрудняет поиск используемых неременных в различных точках программы.\nПо результатам рассмотрения различных моделей можно сделать вывод, что все они удобны при решении частных задач, но в полной мере не удовлетворяют требованиям, предъявляемым к моделям для проведения статического анализа.\nНа основе анализа достоинств и недостатков рассмотренных моделей для реализации методов статического анализа предлагается использовать универсальную модель, объединяющую достоинства всех рассмотренных моделей. Для построения такой модели необходимо:\nпреобразование исходного кода к SSA-форме;\nпостроение CFG на основе SSA-формы; дополнение модели недостающей семантической информацией (например, об областях видимости переменных, типах данных и т.п.).\nФормирование модели исходного кода\nВ настоящее время существует несколько альтернативных подходов к формированию моделей исходного кода, отличающихся требованиями к входным данным, видами формируемых моделей, сложностью реализации. Наиболее распространенными являются следующие подходы:\nиспользование генераторов парсеров; использование самостоятельных (standalone) парсеров;\nиспользование парсеров в составе средств разработки:\nиспользование средств компиляции. Данные подходы реализуются различными средствами. При выборе подходящего средства формирования моделей исходного кода ключевыми являются следующие критерии:\nсовместимость со стандартами С и С++ (ANSI С. С99. ISO С++98);\nвозможность формирования различных моделей;\nполнота построения моделей (наличие информации, достаточной для проведения статического анализа);\nналичие открытого исходного кода: наличие поддержки разработчика: производительность и требовательность к ресурсам.\nГенераторы парсеров\nОдним из широко распространенных подходов к созданию средств анализа исходного кода является применение генераторов парсеров на основе формальных грамматик. Существует большое количество генераторов парсеров для разных типов грамматик языка (JavaCC, ANTLR. Bison, YACC и другие), большинство из них являются средствами с открытым исходным кодом. Обзор современных генераторов парсеров приведен в [2].\nДля создания средств работы с исходным кодом необходимо описание грамматики языка в форме, специфичной для конкретного генератора парсеров. Наиболее производительными являются LL(k) и LALR-парсеры, имеющие сложность не выше квадратичной от числа терминалов. Их недостатком является необходимость включать в описание грамматики просмотры вперед (look-ahead) для разрешения неоднозначностей при разборе, что существенным образом усложняет исходную грамматику. Использовать грамматику непосредственно в форме Бэкуса-Наура, обычно приводимой в стандартах языков, позволяют GLR-парсеры. Однако алгоритмы GLR-парсеров характеризуются кубической сложностью, что может быть существенным ограничением при анализе больших программных модулей.\nИспользование генераторов парсеров оправдано при необходимости создания средств работы с новым или модифицированным языком, для которого не существует готовых парсеров (отдельных или в составе компиляторов). В случае построения моделей языка на основе конкретного стандарта трудоемкость задачи разработки парсера. соответствующего стандарту, довольно высока. Предпочтительным решением является применение готовых парсеров, совместимых со стандартом и разрабатываемых на постоянной основе в рамках отдельных проектов.\nСамостоятельные парсеры\nСамостоятельные (standalone) парсеры представляют собой законченные программные средства, позволяющие сформировать определенную модель исходного кода (чаше всего AST) по заданному файлу с исходным кодом. Одним из характерных представителей этого класса программных средств является парсер Elsa [8].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПарсер Elsa первоначально был создан в университете Беркли в 2002 году [5]. Позднее активную поддержку проект получил в корпорации Mozilla в рамках проекта Pork [14]. предназначенного для рефакторинга программного кода на языке С++.\nВходом Elsa является модуль C/C++, обработанный препроцессором. Выходом является AST модуля в текстовом формате или в формате XML (при этом одному узлу AST соответствует один узел XML); межмодульный анализ не осуществляется. Дополнительно Elsa выполняет некоторые элементы семантического\nанализа в частности проводится анализ типов и перегруженных операций. Elsa (за некоторыми исключениями) поддерживает стандарты K.&R С, С90. С99, С++03. а также некоторые расширения GNU.\nElsa основан на лексическом анализаторе Flex и генераторе GLR-парсеров Elkhound (входящем в состав проекта Elsa). Анализ больших проектов может быть выполнен путем подстановки парсера вместо компилятора и последующего запуска стандартной процедуры сборки проекта. >\tElsa не предъявляет существенных требо-\nваний к ресурсам и имеет среднюю производительность. Скорость работы парсера составляет несколько сотен строк исходного кода в секунду на компьютере класса Pentium 4.\nОсновным недостатком Elsa является неполная поддержка заявленных стандартов. Например:\nдля языка С не вполне корректно поддерживаются символы Unicode (тип wchar_t), имеются проблемы с поддержкой безымянных структур и объединений;\nдля языка C++ имеется ряд проблем с поддержкой шаблонов и ромбовидного наследования.\nПеречисленные недостатки не позволяют i\tиспользовать Elsa для полноценного статичес-\nкого анализа.\nПарсеры в составе средств разработки\nАльтернативным подходом к решению задачи разбора исходного кода является использование парсеров. интегрированных в среды разработки. Некоторые среды разработки с открытым исходным кодом (например. NetBeans и Eclipse) предоставляют интерфейс для доступа к сформированным после разбора структурам данных. Рассмотрим эти средства подробнее.\nСреда разработки NetBeans [13], разработанная корпорацией Sun Microsystems, включает в себя дополнительный модуль (plug-in) для поддержки языков С и С++ [12]. Данный модуль обеспечивает поддержку процесса разработки проектов на языках С и С++ со всеми стандартными возможностями редактирования (подсветка синтаксиса, поддержка выравнивания, сворачивание и разворачивание функций и т. д.). Для сборки проектов используется внешний компилятор (разработчик рекомендует использовать компилятор GCC).\nМодуль поддержки С и С + + в среде NetBeans также предоставляет возможность\nнаписания простых инструментов для статического анализа кода, интегрируемых в исходную среду. Для этого разработчику предоставляется интерфейс ко всем объектам AST построенного в процессе анализа исходного кода. В отличие от парсера Elsa па peep среды NetBeans строит AST для всего проекта в целом, т. е., осуществляет анализ межмодульных связей. В качестве входного языка поддерживается как С, так и С++ (стандарты С99 и С++98. соответственно). В NetBeans версии 6.5 дополнительно реализована возможность построения графа вызовов функций.\nВвиду того, что проект NetBeans разрабатывается на языке Java, он является довольно требовательным к ресурсам. Производительность разбора кода для больших проектов составляет несколько сотен строк исходного кода в секунду на компьютере класса Pentium 4. При использовании NetBeans инструменты статического анализа интегрируются в готовую среду, что позволяет в удобной форме указать местонахождение найденных дефектов.\nК сожалению, парсер C/C + + в среде NetBeans имеет серьезные недостатки. Поскольку основная его цель — поддержка оформления программного кода и навигации по программному коду, а не статический анализ, некоторые языковые конструкции разбираются неполностью, например, не осуществляется разбор выражений.\nПодобный недостаток делает невозможным реализацию многих видов статического анализа с помощью парсера среды NetBeans — в частности, невозможно проведение интервального анализа, поиска неинициализированных переменных и т. д. Впрочем, данный парсер пока еще находится на стадии разработки, и в будущих версиях среды можно ожидать появления версии парсера. полностью поддерживающей все конструкции исходных языков.\nСреда интегрированной разработки C/C++ Development Tools (CDT) [6], основанная на платформе Eclipse, является полноценным средством разработки и отладки C/C++ приложений: ее возможности аналогичны возможностям NetBeans. Платформа Eclipse и среда разработки CDT поддерживаются независимой компанией Eclipse Foundation, основанной IBM в 2001 году.\nДля решения ряда вспомогательных задач CDT имеет собственные реализации парсеров языков С и С++. Версия CDT 5.0.1 в своем со-\n>\nсгаве имеет реализацию нескольких парсеров языков С и С++. Результатом работы парсеров является AST исходного кода модуля (единицы трансляции). Связывание AST модулей не производится. Единица трансляции представляет собой файл исходного кода с включенными заголовочными файлами. Парсеры можно разделить на две группы: DOM-парсеры и LPG-парсеры.\nDOM-парсеры (Document Object Model) — исторически первая реализация парсеров в CDT. DOM-парсеры поддерживают стандарты С99. С++98, а также большинство расширений GNU С и GNU С++. Можно выделить следующие ключевые возможности DOM-парсеров:\nпостроение AST и связь его с исходным кодом:\nдополнение AST различными семантическими связями;\nподдержку отображения содержимого файла с исходным кодом;\nвозможность расширения AST путем добавления новых вершин;\nпостроение индекса PDOM (Persisted Document Object Model), предназначенного для поддержки навигации по исходному коду;\nреализацию шаблона \"посетитель\" ( Visitor) для обхода AST.\nОсновным недостатком DOM-парсеров является неполнота реализации стандартов языков и их расширений. На практике этот недостаток проявляется в получении AST с не полностью разобранными вершинами.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНовой реализацией парсеров являются LPG-парсеры. В версии CDT 5.0.1 представлены реализации для стандартов ANSIС99 и UPC (Unified Parallel С). В разработке находится LPG-napcep для С++.\nИсходные коды LPG-парсеров в отличие от DOM-парсеров являются результатом работы генератора LALR-парсеров [11]. Исходными данными для генератора LPG является файл грамматики соответствующего языка. Использование формальной грамматики является важным преимуществом LPG-napcepa. поскольку позволяет сделать процесс разбора кода предсказуемым и избавляет от необходимости разбираться в тонкостях реализации парсера. LPG-парсеры имеют те же возможности для расширения, построения семантических связей и обхода AST, что и DOM-парсеры.\nCDT-парсеры обладают приемлемой ресур-соемкостью и производительностью, сопоставимой с показателями парсеров среды NetBeans.\nТаким образом, парсеры языков С и С++, входящие в состав CDT, — удобное средство при решении задач анализа исходного кода, для которых требование полной поддержки стандартов языков не является критическим.\nИспользование парсеров в составе средств разработки позволяет абстрагироваться от решения таких второстепенных задач, как реализация пользовательского интерфейса, поддержки работы с проектом (набором файлов исходного кода), обеспечение обратной связи с анализируемым исходным кодом и других.\nПарсеры в составе компиляторов\nСтандартом де-факто в области кросс-плат-форменной компиляции является семейство трансляторов GCC [9]. Компиляторы GCC непрерывно развиваются, функционируют на различных аппаратных платформах под управлением различных операционных систем и поддерживают основные стандарты языков С и С++ (С90. С99. С++98. С++03 и расширения GNU). Компиляторы включают в себя интерфейс для подключения внешних модулей (plug-ins), позволяющих получить доступ к внутренним структурам компилятора. Примеры таких модулей средства анализа Dehydra и Treehydra. распространяющиеся по лицензии GPL.\nСемейство средств анализа Dehydra разрабатывается корпорацией Mozilla [7] для решения внутренних задач по статическому анализу исходного кода браузера Firefox. Основные задачи. решаемые компанией при помощи Dehydra, заключаются в поиске некорректно передаваемых параметров функций и обнаружении неиспользуемого кода. С 2008 года в рамках проекта начата разработка библиотеки Treehydra, позволяющей получать доступ к различным типам древовидных представлений кода.\nСредство Dehydra построено как подключаемый модуль для компилятора GCC [9], производящий обратный вызов функций на языке JavaScript из кода компилятора. Пользовательский код по работе с представлениями исходного кода C/C++ создается на JavaScript и интерпретируется модулем Dehydra. При помощи изменения исходных кодов в GCC добавляется функциональность, реализующая взаимодействие с разделяемой библиотекой Dehydra с помощью ее интерфейсных функций. При этом в список проходов GCC добавляется дополнительный проход \"plugin\", на котором GCC вызывает функции модуля, передавая ука-\nзатели на узлы AST. Существует возможность выбора прохода, после которого выполняется проход \"plugin\". Это позволяет получить доступ ко многим представлениям кода, таким, как AST и ряд его упрощенных форм. SSA с информацией о CFG и DDG.\nОсобенность использования расширений является необходимость изменения исходного кода GCC и, как следствие, зависимость от конкретной версии компилятора.\nИспользование языка сценариев JavaScript позволяет ускорить процесс разработки средств анализа. В частности, после изначальной сборки GCC с добавлением дополнительного прохода компилятора новых пересборок не требуется. Кроме этого, разработка на JavaScript происходит быстрее, чем на языке С. С другой стороны, использование JavaScript приводит к снижению производительности анализа.\nК недостаткам подхода с расширением GCC можно отнести и относительную нестабильность внутренних структур данных и программных интерфейсов работы с компилируемым деревом GCC. Эти интерфейсы описаны в руководстве GCC Internals [10] и в исходных кодах GCC лишь частично, к тому же они меняются от версии к версии.\nРеализация средств статического анализа на основе средств Dehydra и Treehydra имеет большой потенциал. К сожалению, оба указанных проекта сейчас находятся в стадии разработки, что несколько ограничивает их использование.\nПо результатам исследования наиболее распространенных способов формирования моделей исходного кода на языках С и С++ могут быть сделаны следующие выводы.\n1. Наиболее полноценную поддержку основных стандартов языка имеют средства анализа на основе компилятора GCC. Подобные средства анализа обеспечивают доступ к таким моделям исходного кода, как CFG. DDG. SSA, в то время как другие ограничиваются построением AST или ASG.\n2.\tВсе рассмотренные средства, за исключением IDE NetBeans, обладают полнотой построенной модели.\n3.\tРассмотренные средства имеют близкую производительность. Dehydra и Treehydra несколько уступают остальным из-за использования интерпретируемого языка для формирования модели.\n4.\tСредства построения моделей на основе генераторов парсеров потенциально могут иметь высокую производительность и могут обеспечить полноту построения модели. Однако реализация на их основе полноценной поддержки стандартов языка является довольно трудоемкой задачей.\nТаким образом, по итогам рассмотрения различных моделей исходного кода был сделан вывод о необходимости использования универсальной модели на основе CFG и SSA для реализации комплексных методов статического анализа. Учитывая этот результат, при выборе средства формирования модели важной становится возможность построения различных представлений исходного кода. Такой возможностью обладают средства, создаваемые на основе компилятора GCC — Dehydra и Treehydra.\nПри реализации простых методов статического анализа может быть достаточно формирования моделей более низкого уровня, таких как AST или ASG. В этом случае целесообразно использовать инструменты на базе сред разработки, например, на базе IDE Eclipse.\nИсследование выполнено в рамках работ по государственному контракту № 02.514.11.4081 \"Исследование и разработка системы автоматического обнаружения дефектов в исходном коде программного обеспечения\" Федерального агентства по науке и инновациям в рамках Федеральной целевой программы \"Исследования и разработки по приоритетным направлениям развития научно-технологического комплекса России на 2007-2012 годы\".\nСПИСОК ЛИТЕРАТУРЫ\n1.\tАхо А., Сети Р., Ульман Дж. Компиляторы: принципы, технологии и инструменты. Вильяме, 2001. 768 с.\n2.\tЧемоданов И. С., Дубчук Н. П. Обзор современных средств автоматизации создания синтаксических анализаторов // Системное программирование: Сб. статей. СПб.: Изд-во СПбГУ. 2006. Вып. 2. С. 268-296\n3.\tAllen F. E. Control Flow Analysis// Proceedings of a Symposium on Compiler Optimization. 1970. P. 1-19.\n4.\tCytron R. et al. Efficiently Computing Static Single Assignment Form and the Control Dependence Graph // ACM Transactions on Programming Languages and Systems. ACM New York, 1991. Vol. 13, № 4. P. 451-490.\n",
    "download_url": "https://cyberleninka.ru/article/n/issledovanie-sredstv-postroeniya-modeley-ishodnogo-koda-programm-na-yazykah-c-i-c/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/poisk-effektivnogo-nabora-vzaimodei-stvuyuschih-komponentov-programmnyh-sistem-na-osnove-roevogo-intellekta",
    "slug": "poisk-effektivnogo-nabora-vzaimodei-stvuyuschih-komponentov-programmnyh-sistem-na-osnove-roevogo-intellekta",
    "title": "Поиск эффективного набора взаимодействующих компонентов программных систем на основе роевого интеллекта",
    "abstract_description": "В статье рассмотрено применение роевого интеллекта для решения актуальной задачи выбора компонентов распределенной информационной системы на основе экспериментальных оценок критериев качества взаимодействия программных компонентов. Для реализации роевого интеллекта использован алгоритм искусственной пчелиной колонии. Произведена формализация задачи выбора программных компонентов Node.js, разработан общий критерий качества взаимодействия программных компонентов на основе линейной свертки 14 частных критериев качества взаимодействия. Произведена модификация алгоритма искусственной пчелиной колонии для работы с натуральными наборами программных компонентов с учетом введенного дополнительного условия останова алгоритма на основе заданного критерия сходимости. Полученное решение указывает на более высокую скорость сходимости алгоритма искусственной пчелиной колонии в сравнении с генетическим алгоритмом при решении задачи выбора программных компонентов. Полученное решение может использоваться при разработке распределенных информационных систем на основе Node.js с использованием рассмотренных в исследовании программных компонентов.",
    "full_text_body": "\n\n\n\n\uFEFFCloud of Science. 2019. T. 6. № 3 http://cloudofscience.ru\nПоиск эффективного набора взаимодействующих компонентов программных систем на основе роевого интеллекта1\nА. А. Гусев\nКубанский государственный университет 350040, Россия, Краснодар, ул. Ставропольская, 149\ne-mail: alexandrgsv@gmail. com\nАннотация. В статье рассмотрено применение роевого интеллекта для решения актуальной задачи выбора компонентов распределенной информационной системы на основе экспериментальных оценок критериев качества взаимодействия программных компонентов. Для реализации роевого интеллекта использован алгоритм искусственной пчелиной колонии. Произведена формализация задачи выбора программных компонентов Node.js, разработан общий критерий качества взаимодействия программных компонентов на основе линейной свертки 14 частных критериев качества взаимодействия. Произведена модификация алгоритма искусственной пчелиной колонии для работы с натуральными наборами программных компонентов с учетом введенного дополнительного условия останова алгоритма на основе заданного критерия сходимости. Полученное решение указывает на более высокую скорость сходимости алгоритма искусственной пчелиной колонии в сравнении с генетическим алгоритмом при решении задачи выбора программных компонентов. Полученное решение может использоваться при разработке распределенных информационных систем на основе Node.js с использованием рассмотренных в исследовании программных компонентов. Ключевые слова: качество систем и программ, QoS, эффективность взаимодействия программ, эволюционные вычисления, роевой интеллект, алгоритм пчелиной колонии.\n1. Введение\nРоевой интеллект является разновидностью коллективного интеллекта, проявляемого в живой природе общественными насекомыми. Интерес к изучению поведения общественных насекомых обусловлен их высокой эффективностью в решении оптимизационных задач, таких как нахождение кратчайшего пути между муравейником и источником пищи или оптимальное распределение рабочих ролей в пчелином улье. Несмотря на то что эти насекомые сами по себе сравнительно просто\n1 Работа выполнена при финансировании Министерства науки и высшего образования Российской Федерации, проект 25.13253.2018/12.1 «Разработка технологической концепции Дата-центра междисциплинарных исследований в образовании».\nустроены, взаимодействуя друг с другом и образуя рой, они способны демонстрировать достаточно сложное поведение, направленное на решение оптимизационных задач. В последние два десятилетия значительное число исследований посвящены разработкам и практическому применению [1-3] алгоритмов численной оптимизации, вдохновленных моделями поведения роя общественных насекомых. Наиболее распространенными методами данной группы являются метод искусственной муравьиной колонии [4, 5], метод роя частиц [6, 7], метод искусственной пчелиной колонии [8, 9], алгоритм светлячков [10, 11], алгоритм поиска кукушки [12, 13], алгоритм летучей мыши [14] и др. Среди указанных методов алгоритм искусственной пчелиной колонии (АПК) является достаточно новым и в то же время уже показавшим свою эффективность [15] методом, используемым при решении задач управления программной разработкой.\nЦелью данной работы является решение задачи выбора компонентов информационной системы на основе экспериментально вычисляемых критериев качества взаимодействия на примере выбора компонентов фреймворка Node.js с помощью АПК.\nАктуальность решения данной задачи обусловлена тем, что по мере развития и повсеместного внедрения распределенных информационных систем в области цифровой экономики, оказания государственных услуг, телемедицины важной становится задача проектирования таких информационных систем с учетом требований к качеству обслуживания\tв конкретных условиях функционирования.\nЭффективным программно-математическим средством обеспечения QoS в современных программных системах, разрабатываемых с использованием компонентно-ориентированного подхода, является методика выбора программных компонентов на этапе разработки информационной системы с учетом экспериментально вычисляемого критерия качества взаимодействия программных компонентов. Базовым элементом такой методики является методика проведения воспроизводимых экспериментов [16, 17] по оценке качества взаимодействия компонентов.\nРанее было получено решение задачи выбора программных компонентов с использованием генетического алгоритма [18]. Однако было отмечено немонотонное убывание целевого функционала качества взаимодействия, что указывает на плохую сходимость генетического алгоритма в решении данной задачи и требует исследования применения иных методов эволюционных вычислений, таких как АПК, в решении данной задачи.\nСтатья состоит из 5 разделов, первый раздел — Введение, во втором разделе сформулирована задача, в третьем разделе приводится описание метода решения задачи, в четвертом разделе представлены результаты поиска эффективного выбора\nкомпонентов информационной системы на основе экспериментальных оценок, пятый раздел завершает статью.\n2. Постановка задачи\nПусть имеется набор fx,..., fn булевых параметров, характеризующих функциональные возможности разрабатываемой программной системы. Функциональные возможности требуется реализовать альтернативным набором программных компонентов. Сопоставим каждому f ,i = 1, n набор альтернативных программных компонентов di = (qj,..., qi_1, qj, qj+1, ...), i = 1,n. Обозначим все такие наборы, как D=(d1,..., dn).\nОбозначим Q — множество всех возможных уникальных конфигураций, соответствующих выбору по одной альтернативе qi из каждого d е D для реализации каждого f , i = 1, n .\nОбозначим Ч(ш),й£Q — экспериментально оцениваемый общий функционал, определяющий качество взаимодействия программных компонентов:\nNr j=i\nгде N — общее количество рассматриваемых частных критериев качества R;\nZNr\tл\n-\\wj = 1.\nИспользуются следующие частные критерии качества R : R — время работы\nмикропроцессора, затраченное на инициализацию эксперимента (мкс); R — время работы микропроцессора, затраченное на исполнение системных функций в ходе инициализации эксперимента (мкс); R — прирост утилизируемого объема оперативной памяти, отмечаемый по завершении инициализации эксперимента (включая heap, code segment и stack) (байт); R — прирост размера heap (кучи), отмечаемый по завершении инициализации эксперимента (байт); R — прирост объема используемой heap (кучи), отмечаемый по завершении инициализации эксперимента (байт); R — прирост объема памяти, используемой объектами C++, связанными с JavaScript объектами, отмечаемый по завершении инициализации эксперимента (байт); R — реальное время, затраченное на инициализацию эксперимента (нс); R — время работы микропроцессора, затраченное на эксперимент (мкс); R — время работы микропроцессора, затраченное на исполнение системных функций в\nходе эксперимента (мкс); R10 — прирост утилизируемого объема оперативной памяти, отмечаемый по завершении эксперимента (включая heap, code segment и stack) (байт); Rn — прирост размера heap (кучи), отмечаемый по завершении эксперимента (байт); Л12 — прирост объема используемой heap (кучи), отмечаемый по завершении эксперимента (байт); R — прирост объема памяти, используемой объектами C++, связанными с JavaScript объектами, отмечаемый по завершении эксперимента (байт); R14 — реальное время, затраченное на эксперимент (нс).\nИспользуются следующие весовые коэффициенты Wj, задающие цели в области QoS: w1 = w3 = ... = w10 = w12 ... = w14 = 0.07;w2 = wn = 0.08.\nЗадача эффективного выбора программных компонентов на основе экспериментальной оценки качества взаимодействия формулируется следующим образом:\n¥ (ю)^ min.\t(2)\nv ' юеП\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВ табл. 1 приведен набор используемых функций и компонентов, реализующих эти функции в эксперименте.\nТаблица 1. Перечень используемых функций и компонентов\nФункция\tКомпоненты, реализующие функцию\tОписание\nFilter\tLodash Underscore\tПоследовательно проверяет все элементы массива на предмет соответствия условию и возвращает массив, состоящий из элементов, для которых проверка дала значение «Истина»\nFirst\tLodash Underscore\tВозвращает первый элемент массива\nFsRead\tFs-extra Fs\tСчитывает данные из файла\nFsReaddir\tFs-extra\tСчитывает содержимое каталога, возвращая массив имен файлов и директорий в каталоге\nFsReaddirRecursive\tRecursive-readdir\tРекурсивно считывает содержимое каталога, возвращая массив имен файлов и директорий в каталоге\nHashMD5\tHasha md5 Ts-md5\tВычисляет МБ5-хеш от заданного набора данных\nMap\tLodash Underscore Средства языка JavaScript\tПрименяет заданную функцию ко всем элементам массива, возвращая тем самым новый массив, состоящий из преобразованных элементов\nPathResolve\tPath\tФормирует полный пусть к файлу или директории на основе заданного массива элементов пути\nStringReplace\tСредства языка JavaScript\tНаходит и заменяет подстроку в переданной строке\nZipCompress\tAdm-zip Jszip Zipit\tПроизводит архивацию переданного массива файлов и возвращает сформированный Zip-архив\n3. Метод\nАлгоритм пчелиной колонии — это полиномиальный эвристический метод оптимизации, имитирующий поведение медоносных пчел при сборе нектара [6]. АПК относится к методам роевого интеллекта.\nТремя основными компонентами модели поведения роя медоносных пчел являются:\n-\tисточники питания: значение источника питания зависит от многих факторов, таких как близость к улью, питательность и простота извлечения нектара;\n-\tрабочие фуражиры: агенты, связанные с конкретным источником питания, на котором они «трудоустроены». Агенты переносят информацию о своем источнике, расстоянии до него и его выгодности и делятся этой информацией с некоторой вероятностью;\n-\tнерабочие фуражиры: агенты, постоянно находящиеся в поиске новых источников питания. Выделяется два типа нерабочих фуражиров: разведчики, исследующие среду вокруг улья в поисках новых источников питания и наблюдатели, ожидающие в улье и осваивающие новый источник питания с помощью информации, которой делятся рабочие фуражиры.\nБлок-схема АПК приведена на рис. 1.\nВ математической форме потенциальные решения оптимизационной задачи представляются АПК в виде кортежа переменных (координат источника питания или решения):\nх =(Х,п ) ,\t(3)\nгде X обозначает г -е решение в популяции; п — размерность решения.\nДля улучшения положения источника питания рабочая пчела использует следующее уравнение:\n^ = Х +&у(Ху _^),\t(4)\nгде к е|1, 2,..., БМ}; БМ — количество рабочих пчел; ] е|1, 2,..., п}, к и ] — случайно выбираемые индексы с условием к Ф j; — случайное число от -1 до 1.\nЗначение функции приспособленности проверяется и, если оно оказывается лучше, чем значение х, происходит замена х{- на ^, в противном случае х сохраняется в следующей итерации.\nI\nОтправить разведчиков на начальные источники\nI\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nОтправить рабочих на\nисточники и\nопределить их запасы\nнектара\nВычислить вероятности\nпредпочтения\nнаблюдателями\n1\t\t■\nОстановить\nэксплуатацию\nистощенных пчелами\nисточников\nV\nСлучайно разослать\nразведчиков в область\nпоиска для обнаружен ля\nновых источников\nЗапомнить лучший\nнайденный к\nнастоящему моменту\nисточник\nу/ Условия\nвыполнены\nРисунок 1. Блок-схема алгоритма пчелиной колонии\nКак только все рабочие пчелы завершат оптимизационный процесс на своих источниках, они делятся информацией о своих улучшенных источниках с наблюдателями в процессе танца в улье. После этого наблюдающая пчела выбирает г -й источник с вероятностью, задаваемой следующим уравнением:\nР\t(5)\nг Ж '\t(5)\n] =1\nгде — значение функции приспособленности /-го решения или, другими словами, отношение количества рабочих пчел к количеству нектара в источнике, идентифицируемом позицией г; БЫ — количество источников питания, равное количеству рабочих пчел ВЫ. Если /-е решение оказывается лучшим, вероятность выбора\n7-го источника будет выше. Если положение источника не улучшается после предопределенного количества итераций, источник отвергается.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЗатем пчела-разведчик ищет новый источник питания X* для замены отвергнутого источника X в соответствии с уравнением\nx* = Ibj + rand(0,1) х (ubj _ lbj ),\t(6)\nгде ub и lb — верхняя граница и нижняя граница соответственно; rand (0,1) — случайное число между 0 и 1.\nПроцесс работы алгоритма продолжается, пока не будет достигнуто предопределенное число итераций или выполнены иные условия остановки.\nДля численного представления конфигураций выбора программных компонентов вводится отображение кодирования G '. Q —> А с: N\". Таким образом, каждой конфигурации 0)еQ соответствует натуральный набор (^=(7 (со), coeQ, ^gAcN\", называемый позицией источника. В процессе работы АПК позиции источников представляются как ü,kp= (af ...akn ), k=1,| 0p|, где каждая ak принимает значения от 1 до \\dt |, соответствующие порядковому номеру выбранной альтернативы из di; 0р — множество позиций источников (популяция решений), принадлежащих p-й итерации АПК. Вводится также обратное отображение G : Л ^ Q, осуществляющее преобразование положения источника в соответствующий ему выбор программных компонентов. С учетом введенных обозначений Ч(ш) можно рассматривать как ценовую функцию АПК, а исходная задача (2) сводится к задаче\nmin ,\t(7)\nffl^G-1^),^©,™,!\nгде 0term — последняя популяция решений перед остановкой АПК.\nПоскольку исследуемые наборы компонентов при решении задачи (7) являются натуральными, в уравнениях (4) и (6) дробная часть второго слагаемого отбрасывается, случайное число принимает значение в интервале (0;1) в обоих случаях. Остановка алгоритма осуществляется как при достижении предопределенного количества итераций, так и при превышении заданного количества последовательных итераций, в которых модуль изменения лучшего решения между двумя последовательными итерациями не превосходит заранее заданный порог сходимости алгоритма.\nКонфигурация экспериментального стенда:\n_ характеристика вычислительной системы — микропроцессор: Intel®Core™ i7—7700; количество ядер: 4; логических процессоров: 8, тактовая частота: 3,60 ГГц; оперативная память: 12,0 ГБ;\n-\tпрограммное обеспечение — операционная система (Хост): Ubuntu 16.04 LTS; версия MATLAB: R2018a; версия Vagrant: 2.2.4; версия Node.js: 10.15.3;\n-\tпараметры виртуальной машины: 2 ядра процессора; 2,0 ГБ ОЗУ; Ubuntu 16.04 LTS; используемое средство провизии: Ansible; используемые средства обмена файлами с виртуальной машиной: NFS-сервер + BindFS внутри виртуальной машины;\n-\tустановленное дополнительное системное ПО; git, make, htop, iotop, rsync, node-gyp;\n-\tпараметры роевого алгоритма — размер улья: 20; количество пчел-наблюдателей: 20; предел оставления источника: 120; предельное количество итераций: 100; предельное количество стагнирующих итераций: 10; порог сходимости алгоритма: 0.001.\n4. Результаты\nВ результате осуществления 16 итераций эволюционного поиска было найдено решение задачи (3), соответствующее значению функционала качества взаимодействия программных компонентов 0.216. Эволюционный поиск занял 96 секунд и завершился после 10 стагнирующих итераций в соответствии с заданным порогом сходимости алгоритма. Экспериментальные замеры для терминальной итерации эволюционного поиска представлены в табл. 2, найденное решение идентифицировано в табл. 4.\nТаблица 2. Взвешенные экспериментальные замеры и значение\nв терминальной итерации\n№ источника, i\twi R1\tw2R2\tW3R3\tw4 R4\tw5 R5\tw6 R6\tw7R7\tw8 R\n1\t0.0168\t0\t0.0185\t0.048\t0.0192\t0.0127\t0.035\t0.028\nW9 R\tw10 R10\tw11R11\tw12 R12\tw13R13\tw14 R14\t¥(ю)\n0\t0\t0\t0.0129\t0.0672\t0.0374\t0.2957\n2\t0.0168\t0\t0.0222\t0.048\t0.0216\t0.0137\t0.0322 0.028\nw9 R9\tw10 R10\tw11R11\tw12 R12\tw13R13\tw14 R14\t¥(ю)\n0\t0\t0\t0.0121\t0.0672\t0.0335\t0.2953\n3\t0.0168\t0\t0.0207\t0.0443\t0.0207\t0.0124\t0.0282 0.028\nw9 R9\tw10 R10\tw11R11\tw12 R12\tW13R13\tw14 R14\t¥(ю)\n0\t0\t0\t0.013\t0.0672\t0.0357\t0.287\n4\t0.0196\t0\t0.0213\t0.0443\t0.0215\t0.0143\t0.0288 0\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nw9 R9\tw10 R10\tw11R11\tw12 R12\tw13R13\tw14 R14\t¥(ю)\n0\t0.0146\t0\t0.0118\t0.0672\t0.0287\t0.2723\n5\t0.0168\t0\t0.0167\t0.0517\t0.0194\t0.0126\t0.0303 0.028\nw9 R9\tw10 R10\tw11R11\tw12 R12\tW13R13\tw14 R14\tТ(ю)\n0\t0\t0\t0.0121\t0.0672\t0.0339\t0.2887\nОкончание таблицы 2.\n№ источника, 1\t\tщ2е2\tщЕ\tщ4 е4\tщЕ\tщ Е6\tщЕ\tЩ Е8\n6\t0.0112\t0\t0.0055\t0.0367\t0.0036\t0.0047\t0.0302\t0\nw9 Е9\tщ10 Е10\tщ11Е11\tЩ12Е12\tщ13 Е13\tщ14Е14\n0\t0.0169\t0\t0.012\t0.0672\t0.028\t0.216\n7\t0.0168\t0\t0.0186\t0.0443\t0.0183\t0.0116\t0.0269\t0.028\nw9 Е\tЩо Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\t¥(ю)\n0\t0\t0\t0.0131\t0.0672\t0.0349\t0.2797\n8\t0.014\t0\t0.0168\t0.0407\t0.0181\t0.0116\t0.0348\t0.028\nw9 R9\tщ10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\tТ(ю)\n0\t0\t0\t0.0129\t0.0672\t0.0382\t0.2822\n9\t0.014\t0\t0.0168\t0.0443\t0.0157\t0.009\t0.0275\t0.028\nw9 Е9\tщ10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\n0\t0\t0\t0.013\t0.0672\t0.0352\t0.2707\n10\t0.0168\t0\t0.0189\t0.0443\t0.0208\t0.0133\t0.0299\t0.028\nw9 R9\tщ10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\n0\t0\t0\t0.0131\t0.0672\t0.0326\n11\t0.014\t0\t0.0166\t0.0553\t0.0158\t0.0091\nw9 R9\tщ10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\n0\t0\t0\t0.013\t0.0672\t0.0315\n12\t0.0196\t0\t0.0204\t0.048\t0.0216\t0.0143\nw9 Е9\tщ10 Е10\tщ11Е11\tЩ12Е12\tщ13 Е13\tЩ14Е14\tТ(ю)\n0\t0\t0\t0.0121\t0.0672\t0.0309\t0.2849\n13\t0.0196\t0\t0.0187\t0.048\t0.0194\t0.0126\t0.0296\t0.028\nW9 Ед\tщ10 Е10\tщпЕп\tщ12Е12\tщ13 Е13\tщ14Е14\tТ(ю)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n0\t0\t0\t0.0121\t0.0672\t0.0294\t0.2801\n14\t0.014\t0\t0.0208\t0.0443\t0.0207\t0.0133\t0.0347\t0.028\nw9 Е9\tw10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\tТ(ю)\n0\t0\t0\t0.0118\t0.0672\t0.0294\t0.2803\n15\t0.0168\t0\t0.0186\t0.048\t0.0216\t0.0143\t0.0311\t0\nw9 Е9\tщ10 Е10\tщпЕп\tЩ12Е12\tщ13 Е13\tЩ14Е14\tТ(ю)\n0\t0.0143\t0\t0.0118\t0.0672\t0.0278\t0.2715\n16\t0.014\t0\t0.016\t0.0443\t0.0155\t0.009\t0.0261\t0.028\nw9 Е9\tщ10 Е10\tщ11Е11\tЩ12Е12\tщ13 Е13\tЩ14Е14\tТ(ю)\n0\t0.0152\t0\t0.013\t0.0672\t0.0353\t0.2836\n17\t0.014\t0\t0.0167\t0.0407\t0.0148\t0.0074\t0.0259\t0.028\nw9 Е9\tщ10 Е10\tщ11Е11\tщ12Е12\tщ13 Е13\tщ14Е14\tТ(ю)\n0\t0\t0\t0.0128\t0.0672\t0.0347\t0.2622\n18\t0.0196\t0\t0.0186\t0.0443\t0.0214\t0.0137\t0.0337\t0\nw9 Е9\tщ10 Е10\tщпЕп\tЩ12Е12\tщ13 Е13\tЩ14Е14\tТ(ю)\n0\t0.0206\t0\t0.0118\t0.0672\t0.0296\t0.2807\n19\t0.0168\t0\t0.0167\t0.0553\t0.0159\t0.0091\t0.0249\t0.028\nw9 Е9\tщ10 Е10\tщ11Е11\tЩ12Е12\tщ13 Е13\tЩ14Е14\tТ(ю)\n0\t0\t0\t0.013\t0.0672\t0.0366\t0.2835\n20\t0.0168\t0\t0.0205\t0.048\t0.0216\t0.0143\t0.0301\t0\nw9 Е9\tщ10 Е10\tщпЕп\tщ12Е12\tщ13 Е13\tщ14Е14\tТ(ю)\n0.028\t0\t0\t0.012\t0.0672\t0.0285\t0.287\nТаблица 3. Найденное решение\nПозиция источника\tСоответствующий выбор программных компонентов\nФункция\tКомпонент\nFilter\tUnderscore\nMap\tUnderscore\nFirst\tUnderscore\nPathResolve\tСредства языка JavaScript\n[2 3 2 1 1 1 1 2 1 1]\tStringReplace\tСредства языка JavaScript\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nZipCompress\tAdm-zip\nHashMD5\tHasha\nFsRead\tFs\nFsReaddir\tFs-extra\nFsReaddirRecursive\tRecursive-readdir\nГрафик эволюции решений представлен на рис. 2.\n0.236\n| 0.234\nI 0.232 £\n0\t0.23\n| 0.228\n01\nI 0.226 и\n| 0.224 п\n£ 0.222 Э\n,§• 0.22 0.218\nО 2 4 6 8 10 12 14 16 Номер итерации алгоритма\nРисунок 2. График эволюционного поиска выбора компонентов информационной системы на основе минимизации общего критерия качества взаимодействия программных\nкомпонентов ¥(ш)\nГрафик эволюционного поиска демонстрирует монотонное убывание ^(ю), что указывает на то, что АПК сходится при решении данной задачи.\n5. Обсуждение и выводы\nВ статье рассмотрена целочисленная модификация вещественного алгоритма искусственной пчелиной колонии для управления поиском эффективного набора программных компонентов, проведены экспериментальные исследования и представлены их результаты.\n1.\tПолученное решение задачи выбора компонентов распределенной информационной системы с помощью модифицированного алгоритма искусственной пчелиной колонии отличается монотонностью графика эволюционного поиска, указывая на лучшую сходимость АПК в сравнении с генетическим алгоритмом, примененным для решения этой задачи ранее [18].\n2.\tДанный результат согласуется с сравнительными исследованиями генетических алгоритмов и методов роевого интеллекта в управлении разработкой программ, обзор которых приведен в [15].\n3.\tРешение, аналогичное полученному ранее с помощью генетического алгоритма [18], было найдено за 6 итераций эволюционного поиска с помощью АПК, что говорит о значительно более высокой скорости сходимости АПК в сравнении с генетическим алгоритмом при решении задачи выбора программных компонентов.\nДальнейшие исследования будут направлены на разработку модификаций АПК, обладающих более высокими показателями скорости сходимости и качества получающихся решений для использования в экспериментальном выборе эффективных наборов программных компонентов распределенных информационных систем.\nЛитература\n[1]\tSaurabh B., Kunwar A., Samaresh M., Madhabananda D. A Swarm intelligence based chaotic morphological approach for software development cost estimation // International Journal of Intelligent Systems and Applications. 2018. Vol. 9. P. 13-22.\n[2]\tJain D. K., Kumar A., Sangwan S. R., Nguyen G. N., Tiwari P. A Particle Swarm Optimized Learning Model of Fault Classification in Web-Apps // IEEE Access. 2019. Vol. 7. P. 1848018489.\n[3]\tChiang H. S., Sangaiah A. K., Chen M. Y., Liu J. Y. A Novel Artificial Bee Colony Optimization Algorithm with SVM for Bio-inspired Software-Defined Networking // International Journal of Parallel Programming. 2018. P. 1-19. (https://doi.org/10.1007/s10766-018-0594-6)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[4]\tGülcü §., Mahi M., Baykan Ö. K., Kodaz H. A parallel cooperative hybrid method based on ant colony optimization and 3-Opt algorithm for solving traveling salesman problem // Soft Computing. 2018. Vol. 22. No. 5. P. 1669-1685.\n[5]\tWei W., Tian Z., Peng C., Liu A., Zhang Z. Product family flexibility design method based on hybrid adaptive ant colony algorithm // Soft Computing. 2018. P. 1-12. (https://doi.org/10.1007/s00500-018-3622-y)\n[6]\tRan C., Yaochu J. A social learning particle swarm optimization algorithm for scalable optimization // Information Sciences. 2015. Vol. 291. P. 43-60.\n[7]\tDelgarm N., Sajadi B., Kowsary F., Delgarm S. Multi-objective optimization of the building energy performance: A simulation-based approach by means of particle swarm optimization (PSO) // Applied Energy. 2016. Vol. 170. P. 293-303.\n[8]\tKaraboga D., Basturk B. J. A powerful and efficient algorithm for numerical function optimization: artificial bee colony (ABC) algorithm // Journal of Global Optimization. 2007. Vol. 39. No. 3. P. 459-471.\n[9]\tXue Y., Jiang J., Zhao B., Ma T. A self-adaptive artificial bee colony algorithm based on global best for global optimization // Soft Computing. 2018. Vol. 22. No. 9. P. 2935-2952.\n[10]\tMarinaki M., Marinakis Y. A Glowworm Swarm Optimization algorithm for the Vehicle Routing Problem with Stochastic Demands // Expert Systems with Applications. 2016. Vol. 46. P. 145-163.\n[11]\tLi Y., Ni Z., Jin F., Li J., Li F. Research on Clustering Method of Improved Glowworm Algorithm Based on Good-Point Set // Mathematical Problems in Engineering. 2018. Vol. 2018. Article ID 8724084.\n[12]\tWang G. G., Gandomi A. H., Zhao X., Chu H. C. E. Hybridizing harmony search algorithm with cuckoo search for global numerical optimization // Soft Computing. 2016. Vol. 20. No. 1. P. 273-285.\n[13]\tShehab M., Khader A. T., Al-Betar M. A. A survey on applications and variants of the cuckoo search algorithm // Applied Soft Computing. 2017. Vol. 61. P. 1041-1059.\n[14]\tAdarsh B. R., Raghunathan T., Jayabarathi T., Yang X. S. Economic dispatch using chaotic bat algorithm // Energy. 2016. Vol. 96. P. 666-675.\n[15]\tBrezocnik L., Fister I., Podgorelec V. Solving Agile Software Development Problems with Swarm Intelligence Algorithms. // New Technologies, Development and Application II NT Lecture Notes in Networks and Systems. Vol 76. ed. I. Karabegovic. — Springer, Cham, 2019. P. 298-309.\n[16]\tИльин Д. Ю., Гусев А. А. Проведение воспроизводимых экспериментов по оценке эффективности работы компонентов программного обеспечения // Прикладные исследования и технологии ART 2019: сб. тр. рег. конф. — М. : МТИ, 2019. С. 54-56.\n[17]\tИльин Д. Ю., Никульчев Е. В., Колясников П. В. Выбор технологических решений для разработки программного обеспечения распределенных информационных систем // Современные информационные технологии и ИТ-образование. 2018. Т. 14. № 2. С. 344354.\n[18]\tИльин Д. Ю., Гусев А. А., Никульчев Е. В. Генетический алгоритм выбора компонентов информационных систем на основе экспериментальных оценок критериев качества //\nПрикаспийский журнал: управление и высокие технологии. 2019. № 2. C. 113-125.\nАвтор:\nАлександр Алексеевич Гусев — преподаватель кафедры прикладной математики, Кубанский\nгосударственный университет; соискатель кафедры управления и моделирвоания систем,\nМИРЭА — Российский технологический университет\nSwarm intelligence search for an effective set of interacting software components\nA. A. Gusev\nKuban State University, 149 Stavropolskaya st., Krasnodar, Russia 350040 e-mail: alexandrgsv@gmail.com\nAbstract. The paper deals with the application of swarm intelligence to solve the topical problem of selecting components of a distributed information system based on experimental evaluations of the software interaction quality criteria. The swarm intelligence is implemented using the artificial bee colony algorithm. The formalization of the problem of selecting Node.js software components is made in the paper, the general software components interaction quality criterion is presented as a linear convolution of 14 quality criteria. The algorithm of artificial bee colony was modified to work with natural sets of software components considering the additional stop condition of the algorithm based on a given criterion of convergence. The obtained solution indicates a higher rate of convergence of the artificial bee colony algorithm in comparison with the genetic algorithm in solving the problem of selecting software components. The resulting solution can be used in the development of similar distributed information systems.\nKeywords: system and software quality, QoS, software interaction efficiency, evolutionary computation, swarm intelligence, artificial bee colony.\nReferences\n[1]\tSaurabh B., Kunwar A., Samaresh M. & Madhabananda D. (2018) IJISA, 9:13-22.\n[2]\tJain D. K., Kumar A., Sangwan S. R., Nguyen G. N. & Tiwari P. (2019) IEEE Access, 7:18480-18489.\n[3]\tChiang H. S., Sangaiah A. K., Chen M. Y., & Liu J. Y. (2018) International Journal of Parallel Programming, 1-19. (https://doi.org/10.1007/s10766-018-0594-6)\n[4]\tGulcu §., MahiM, Baykan O. K., & KodazH. (2018) Soft Computing, 22(5): 1669-1685.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n[5]\tWei W., Tian Z., ... & Zhang Z. (2018) Soft Computing, 1-12. (https://doi.org/10.1007/s00500-018-3622-y)\n[6]\tRan C., Yaochu J. (2015) Information Sciences, 291:43-60.\n[7]\tDelgarm N., Sajadi B., Kowsary F. & Delgarm S. (2016) Applied Energy, 170:293-303.\n[8]\tKaraboga D. & Basturk B. J. A (2007) Journal of Global Optimization, 39(3):459-471.\n[9]\tXue Y, Jiang J., Zhao B. & Ma T. (2018) Soft Computing, 22(9):2935-2952.\n[10]\tMarinaki M. & Marinakis Y. (2016) Expert Systems with Applications, 46:145-163.\n[11]\tLi Y, Ni Z., Jin F., Li J. & Li F. (2018) Mathematical Problems in Engineering, 2018:8724084.\n[12]\tWang G. G., Gandomi A. H, Zhao X. & Chu H. C. E. (2016) Soft Computing, 20(1):273-285.\n[13]\tShehab M., Khader A. T. & Al-Betar M. A. (2017) Applied Soft Computing, 61:1041-1059.\n[14]\tAdarsh B. R., Raghunathan T., Jayabarathi T. & YangX. S. (2016) Energy, 96:666-675.\n[15]\tBrezocnik L., Fister I. & Podgorelec V. (2019) Lecture Notes in Networks and Systems, 76: 298-309.\n[16]\tIlin D. Y., Gusev A. A. (2019) Provedenie vosproizvodimyh eksperimentov po ocenke effektivnosti raboty komponentov programmnogo obespecheniya. In Proc. conf. ART 2019. P. 54-56. [In Rus]\n[17]\tIlin D. Y., Nikulchev E. V., Kolyasnikov P. V. (2018) Sovremennyye informatsionnyye tekhnologii i IT-obrazovaniye, 14(2):344-354. [In Rus]\n[18]\tIlin D. Y., Gusev A. A., Nikulchev E. V. (2019) Prikaspiyskiy zhurnal: upravleniye i vysokiye tekhnologii, (2): 113-125. [In Rus]\n",
    "download_url": "https://cyberleninka.ru/article/n/poisk-effektivnogo-nabora-vzaimodei-stvuyuschih-komponentov-programmnyh-sistem-na-osnove-roevogo-intellekta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/bezopasnost-html5",
    "slug": "bezopasnost-html5",
    "title": "Безопасность HTML5",
    "abstract_description": "HTML5 новый стандарт языка разметки документов в сети Интернет. В докладе рассмотрены некоторые новые возможности, появившиеся в HTML5, с точки зрения безопасности.",
    "full_text_body": "\n\n\n\n\uFEFFАктуальные проблемы авиации и космонавтики. Информационные технологии\nвыбор оптимальной структуры МВС с помощью комплекса алгоритмов адаптивного поиска. В результате работы системы поддержки принятия решений пользователь получает набор структур специализированных МВС, эффективно и надежно решающих задачу построения защищенных информационных систем.\nБиблиографические ссылки\n1. Липаев В. В. Основные факторы, определяющие технологическую безопасность информационных\nсистем URL: http://www.info-\nsystem.ru/security/security_pr_tech_security.html (дата обращения: 10.09.2011).\n2. Терсков В. А. Модели функционирования и методы оптимизации структуры многопроцессорных вычислительных систем : монография. Красноярск : Сиб. юрид. ин-т МВД России, 2001.\n© Фейгин В. С., 2012\nУДК 004.45\nА. С. Хеирхабаров Научный руководитель - В. Г. Жуков Сибирский государственный аэрокосмический университет имени академика М. Ф. Решетнева, Красноярск\nБЕЗОПАСНОСТЬ HTML5\nHTML5 - новый стандарт языка разметки документов в сети Интернет. В докладе рассмотрены некоторые новые возможности, появившиеся в HTML5, с точки зрения безопасности.\nПринятие\tИТМЬ5(англ.\nHyperTextMarkupLanguage, version 5) как всеобщего стандарта намечено на 2022 год, но некоторые из его спецификаций уже поддерживаются новыми версиями браузеров и используются на многих сайтах. Однако такие нововведения, как Cross-OriginResourceSharing, WebSQL, WebMessaging и другие дают новые возможности для разработчиков, и в то же время порождают новые векторы атак для злоумышленников.\nВ HTML5 вводится концепция локального хранилища под названием WebStorage, позволяющая сайту сохранять данные на компьютере пользователя и впоследствии обращаться к ним через JavaScript. Выделяют два типа веб-хранилищ: локальные (могут содержать любые текстовые данные и хранятся до тех пор, пока не будут явно удалены пользователем или веб-приложением) и сессионные (аналогичны локальным, за исключением того, что данные удаляются после закрытия браузера или вкладки в нем). Для каждого домена создается отдельное хранилище. В отличие от cookie, которые имеют максимальный допустимый размер 4 кб и имеют срок хранения, данные в Web Storage не имеют срока хранения, а также защищены политикой ограничения домена, т. е. куки, принадлежащие одному сайту, не могут быть доступны другому, даже если они находятся на одном сервере. Проблема безопасности заключается в том, что эти данные пользователь не может считать напрямую, они доступны только веб-браузерам через интерфейс Java Script API. Это повышает риски от уязвимостей вида XSS (Cross Site Scripting), в том числе возможность заполучить аутентификационные данные [1]. Кроме того, есть вероятность, что злоумышленник внедрит JavaScript сценарий, способный манипулировать данными или переслать их на другой домен [2]. Также, аналогично использованию куки, локальные хранилища можно использовать для идентификация пользователей и DNS-спуфинг атак [1].\nДля решения некоторых проблем, связанных с WebStorage, следует:\n-\tдля поддержки сессий следует использовать куки, которые могут быть лучше защищены с помощью флага HTTPonly [3];\n-\tне хранить конфиденциальные данные в локальном хранилище;\n-\tразделять данные для приложений, находящихся на одном домене [2];\nЕщё одним нововведением HTML5 является Cross-Origin Resource Sharing (CORS), что дает возможность сайтам получать доступ к ресурсам на других доменах. HTML5 позволяет посылать XML Http Request-запросы между доменами на основе заголовка Access-Control-Allow-Origin [4]. Эти запросы передаются без уведомления пользователя, что является достаточно серьезной проблемой безопасности. CORSможет использоваться злоумышленниками для отсылки конфиденциальных данных на свои сервера, запуска удаленного шелл-кода на пользовательском агенте, поиска существующих доменных имен во внутренних се-тях(на основании времени ответа на XML Http Re-quest-запросы), создания ботнета или, комбинируя с WebWorker, для DDoS-атак. Такжес помощью CORSможет быть реализована уже существующая угроза Cross-Site-Request-Forgery, но уже без участия пользователя [2,5].Некоторые риски, связанные с угрозой, можно избежать следующими способами:\n-\tограничение доменов, имеющих право делать XMLHttpRequest-запросы;\n-\tне проводить контроль доступа только по заголовку Access-Control-Allow-Origin;\n-\tнастройка Web Application Firewall (WAF) на фильтрацию слишком частых CORS-запросов [2].\nWeb Messaging - ещё одна новая возможность в HTML5 - реализует два механизма коммуникации между HTMLдокументами. Перекрестный обмен данными позволяет документам обмениваться сообщениями независимо от их исходного домена, при этом\nСекция «Методы и средства зашиты информации»\nон разработан таким образом, чтобы не позволить злоумышленникам атаковать сценарии сайтов. Канальный обмен позволяет некоторым приложениям (в разных HTML документах) независимо обмениваться между собой сообщениями. При использовании WebMessaging, сервер не может контролировать все данные (т. к. данные приходят от других доменов), а обмен между HTML-документами (iframe) происходит на стороне пользовательского агента, что может быть использовано для обхода контроля со стороны сервера. При неправильной настройке, конфиденциальные данные могут быть отправлены не тому iframe-у. Также, iframe-ы могут посылать сообщения любому другому iframe-у. Если iframe-получатель не проверяет источник или некорректно обрабатывает входные данные, на него может быть проведена атака [2]. Часть проблем может быть решена следующими способами:\n-\tявно устанавливать цель сообщения;\n-\tпроверять получаемые сообщения;\n-\tпроверять домен-отправитель;\nHTML5 позволяет некоторым веб-приложениям регистрироваться в качестве обработчиков для определенных протоколов (SMS, факс и др.) или некоторых MIME-типов (Multipurpose Internet Mail Extensions или многоцелевые расширения интернет-почты). Запуск зарегистрированных обработчиков происходит со стороны пользовательского агента. Так как в качестве обработчика может быть зарегистрировано пользователем любое веб-приложение, злоумышленник может обманом заставить зарегистрировать свое приложение, тем самым предоставив ему доступ к обрабатываемым данным. Риски, связанные с этой проблемой, можно уменьшить, создав список проверенных рекомендуемых обработчиков.\nВведение новых тегов и атрибутов упрощает процесс написания страниц на HTML. Но с помощью некоторых из них можно осуществить выполнение произвольного JavaScript кода (например <video>^ <autofocus>), а с помощью все того же тега <video>можно узнать точную версию браузера. Для уменьшения рисков следует настроить WAi^ Intrusion Detection System(IDS) [1].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nWebSQL подразумевает под собой встроенную в браузер базу SQLite.WebSQL имеет такие же проблемы, как и WebStorage. Кроме того, это дает новые возможности для проведения SQL-инъекций. Для их предотвращения достаточно выполнять правильно параметризированные SQL-запросы [1].\nHTML5 предоставляет возможности для кэширования сайтов и веб-приложений, для работы с ними в оффлайне. В HTML4.0 реализуются атаки с отправлением КЭШа (например, кэша приложений с внедренным в него вредоносным кодом), в HTML5 возможности для таких атак значительно расширяются, так как теперь кэширование может осуществляться без применения дополнений к браузеру и часть решений о доступе к данным происходит на стороне клиента [2].\nНа сегодняшний день стандарт HTML5 имеет множество проблем, связанных с безопасностью, в особенности клиентской части: множество новых способов внедрения произвольного кода и сбора конфиденциальной информации. Однако это стандарт продолжает активно развиваться, и разработчики немалое внимание уделяют вопросам безопасности.\nБиблиографические ссылки\n1.\tИващенко Т., Сидоров Д. HTML5 - взгляд через призму безопасности //Хакер. 2010. № 143.\n2.\tSchmidtMichael HTML5 Web Security: 2010.URL:http://media.hacking-\nlab.com/hlnews/HTML5 Web Security_v1.0.pdf (дата обращения: 7.03.2012).\n3.\tRequest\tFor\tComments\t2965. URL:http://www.ietf.org/rfc/rfc2965.txt (дата обращения: 7.03.2012)\n4.\tКонсорциум Всемирной Паутины w3c. URL: http://www.w3.org (дата обращения: 21.02.2012)\n5.\tГордейчик С. Cross-SiteRequestForgery - много шума из ничего. URL: http://www.securitylab.ru/ ana-lytics/292473.php (дата обращения: 8.03.2012)\n6.\tHTML5 Security Cheatsheet. URL: http://html5sec.org/ (дата обращения: 3.03.2012).\n© Хеирхабаров А. С., 2012\nУДК 004.056\nА. А. Шаляпин Научный руководитель - В. Г. Жуков Сибирский государственный аэрокосмический университет имени академика М. Ф. Решетнева, Красноярск\nПРИМЕНЕНИЕ ПРЕЦЕДЕНТНОГО АНАЛИЗА В ЗАДАЧЕ КЛАССИФИКАЦИИ ИНЦИДЕНТОВ ИНФОРМАЦИОННОЙ БЕЗОПАСНОСТИ\nРассматривается применение прецедентного анализа в задаче классификации инцидентов информационной безопасности.\nМеждународный стандарт ISO 27001:2005 обращает особое внимание на необходимость создания процедуры управления инцидентами информационной безопасности - очевидно, что без своевременной реакции на инциденты безопасности и устранения их\nпоследствий невозможно эффективное функционирование системы управления информационной безопасностью. Инцидентом информационной безопасности является нежелательное событие информационной безопасности (или совокупность событий), которое\n",
    "download_url": "https://cyberleninka.ru/article/n/bezopasnost-html5/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/gps-navigatsiya-v-avtomatizirovannyh-sistemah-dispetcherizatsii-i-monitoringa-dvizheniya-transporta",
    "slug": "gps-navigatsiya-v-avtomatizirovannyh-sistemah-dispetcherizatsii-i-monitoringa-dvizheniya-transporta",
    "title": "GPS навигация в автоматизированных системах диспетчеризации и мониторинга движения транспорта",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFGPS навигация в автоматизированных системах диспетчеризации и мониторинга движения транспорта\nД.В. Величко, Д.О. Окольничева\nБелгородский государственный технологический университет им. В.Г. Шухова e-mail: vevaldidva@yandex.ru\nНа сегодняшний день основным инструментальным средством обеспечения безопасности транспортных средств, а также контроля и оптимизации передвижения транспорта, является система диспетчеризации и мониторинга транспорта. Эта система находит широкое применение во всех сферах деятельности, объединяя в себе технологии определения местоположения, средства обработки и визуализации информации и современные средства беспроводной связи.\nАвтоматизированная система диспетчеризации и мониторинга (АСДМ) транспортных средств позволяет:\n•\tоперативно и быстро находить транспортные средства и контролировать маршрут их перемещений, при использовании динамической карты;\n•\tпресечь нецелевое использование груза или транспорта, расходного материала (а именно, снизить расход топлива, контролировать реальный пробег, время простоя и скорость движения автомобиля);\n•\tконтролировать состояние установленных датчиков;\n•\tобеспечить сохранность перевозимых грузов;\n•\tповысить общую безопасность транспортных средств.\nТакая система мониторинга состоит из трех основных сегментов. Во-первых, мобильных устройств (модулей мониторинга подвижных объектов), устанавливаемых на транспортное средство, таких как, датчик контроля уровня топлива в баке, датчик скорости, бортовой контроллер и др. Во-вторых, подсистемы связи (интернет-сервера с установленным программным обеспечением) со свободным выходом в интернет и с хранимыми на нем базами данных. В-третьих, АРМ диспетчера (диспетчерских рабочих мест с установленными ПО и подключенных к интернет-серверу). Каждый из выше перечисленных сегментов рассмотрим более подробно.\nОсновным оборудованием автоматизированной системы диспетчеризации и мониторинга транспорта являются:\n•\tмобильные GPS терминалы, предназначенные для установки на транспортное средство и передающие на сервер данные о местопо-\nложении объекта и информацию о состоянии датчиков, подключенных к ним же (бортовой контроллер, GPS-приемник, GSM-модем);\n•\tперсональные GPS-трекеры, в основном используемые для определения местоположения объекта и для послания тревожного сообщения (тревожная кнопка);\n•\tдатчики, которые устанавливаются на транспортное средство и применяются для отслеживания его состояния, скорости движения, пробега.\nВся информация, полученная от датчиков и GPS устройств через спутниковый канал связи, передается на сервер, где хранится в базах данных и далее предоставляется диспетчерам в удобной визуальной форме. За эту связь отвечает такой программный комплекс, как подсистема связи - сервер.\nДиспетчер со своего рабочего места видит местоположение транспортных средств на электронной карте Google Map, анализирует получаемую информацию и в случае необходимости оперативно реагирует на ситуацию.\nДиспетчерское программное обеспечение написано с использованием таких языков web-программирования, как PHP, JavaScript, XHTML. Диаграмма архитектуры такого программного обеспечения показана на рис 1. Каждая страница представлена блоком, а связывающие их линии символизируют ссылки.\nПри оформлении данной программы использовался внешний файл с таким блочным стилем CSS, чтобы страницы разных браузеров отображались одинаково. Но предпочтительнее не использовать IE (Internet Explorer), так как хотя на сегодняшний день этот браузер является лучшим, все же он остался замороженным в прошлом, несовместимым со стандартами.\nГлавная страница ПО в виде рекламы АСДМ размещается в интернете, и пользователи могут просматривать основную информацию о принципе работы данной системы, о ее структуре в целом и при желании связаться с разработчиком АСДМ для подписания соглашения о совместной работе на предприятии.\nРис.1. Диаграмма архитектуры АРМ диспетчера\nСамо же диспетчерское ПО в полном объеме установлено на сервере, к которому по выделенному каналу, как к домену, прописав IP адрес сервера-домена, подключаются АРМ диспетчеров для мониторинга транспорта. Обязательно должен на сервере быть доступ в интернет, так как все данные со спутников (снимаемая информация с датчиков и определение координат движущегося объекта) поступают в базу данных, хранимую на сервере.\nДля отображения и местоположения транспорта используется динамическая карта Google Map API с сервера google.ru. Google Map позволяет управлять картой с помощью языка JavaScript. Для ее привязки к своей внешней странице для начала нужно получить API KEY - разрешение на размещение карты на странице и ее использовании в своих целях. После получения разрешения, нужно проинициализировать карту на своей странице и создать аккаунт, используя следующий скрипт: <script\nsrc=\"http://maps.googlexom/maps?füe=api&v=2&key=#разрешение(ключ)#\" type=\"text/j avascript\"> </script>\nhttp://www.google.com/accounts/NewAccount\nДалее добавляем функцию для создания объекта карты и задаем ее центр. Так как рассматриваем конкретную трассу по передвижению транспортных средств Белгород - Москва, через города Курск, Орел, Тулу, то центрируем карту на Орел: map.SetCenter (new GLatLng(55.752,37.616)), где 55.752 - 550 северной широты, а 37.616 -370 восточной долготы. Теперь диспетчер сможет просмотреть карту и\nузнать координаты транспорта, в какой точке на трассе находится объект.\nВся информация отображается в удобной форме - в таблицах. Диспетчер не может изменять, удалять или добавлять данные о состоянии датчиков, данные полученные со спутника. Эти данные поступают на сервер. Продолжительность поступления информации, через какой интервал времени - все это обсуждается и договаривается с провайдером спутниковой связи. Диспетчеру доступна для редактирования только основная информация о водителях, грузах, пунктах назначения через текстовый файл с расширением txt, далее эта информация отображается в таблицах.\nВодителям, через программное обеспечение автоматизированной системы диспетчеризации и мониторинга транспорта, можно отправлять sms-сообщения разного плана: об изменении маршрута движения, предупреждения о низком уровне бензина в топливном баке, о лимите времени передвижения и т.д. Чтобы была возможность отправки сообщения через интернет водителям, разработчиками системы тоже было получено разрешение с сайта www.smsline.biz. Скрипт отправки sms-сообщения приведен ниже: <script> function ch(ndx)\n{p = new Array();p[0] = '8 050';p[1] = '8 067';p[2] = '8 096';p[3] = '8 099';p[4] = '8 068';p[5] = '8 068';p[6] = '+7';p[7] = 'E-mail:'; document. getElementById( \"prefix\" ).innerHTML=p[ndx] ;} function smslen() { document. getElementById( \" sms_len\").innerHTML=document. getElementById( \"input_me ssage\" ). value.length;} </script>\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВсю полученную информацию можно распечатать для более наглядного отображения в виде отчета о движении, журнала событий или путевого листа водителя. Для того чтобы при распечатке информации, выводилась именно нужная информация без использования специальной popup-страницы, а не вся страница целиком использовался следующий скрипт с помощью JavaScript: function varitext(text) { text=document\nprint(text)} <span>........</span>\nДля входа в систему использовалась специальная функция на PHP с использованием базы данных MySQL, которая считывала только фамилию и имя диспетчера и уникальный для каждого пользователя пароль.\nДля полноценной работы системы диспетчеризации и мониторинга транспорта на каждое АРМ диспетчера устанавливается ПО и\nSQL-сервер для подключения к домену (рис.2), подключается локальная сеть к серверу-домену, прописывается IP-адрес и создается алиас в источниках данных ODBC, через который ПО производит обращение к базе данных.\nrti-r >i i \\v№im? mssush« Рис.2. Подключение SQL-сервера к домену\nДля создания базы данных сервера следует воспользоваться центром управления «MS SQL Server - Enterprise Manager». Для этого нужно зайти в «Microsoft SQL Server», запустить «Enterprise Manager» и раскрыть группу «Console Root - Microsoft SQL Server - SQL Server Group» в списке групп администрирования «SQL Server», на группе «Database» вызвать контекстное меню правой кнопкой мыши и выбратьв нём «New Database...». Далее настраиваем свойства этой базы данных и добавляем пользователя с определённым именем и паролем. Таким пользователем является пользователь с именем «dba» и паролем «sql».\nТеперь вся информация, принимаемая со спутников через провайдеров, сохраняется в созданной базе данных, и эта база выгружается для диспетчера по запросу.\nАвтоматизированная система диспетчеризации и мониторинга движения транспорта позволяет контролировать маршрут передвижений, сохранить и обезопасить груз и транспортные средства, пресечь халатность работников. Вся информация предоставляется в удобной форме в виде таблиц и динамической карты. Для большей наглядности можно произвести распечатку нужных документов, а также по мере необходимости при конкретной ситуации сообщить водителям об измененных планах.\n",
    "download_url": "https://cyberleninka.ru/article/n/gps-navigatsiya-v-avtomatizirovannyh-sistemah-dispetcherizatsii-i-monitoringa-dvizheniya-transporta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/razrabotka-modulya-upravleniya-urovnem-osveschyonnosti-lokalnyh-zon-mnogofunktsionalnogo-pomescheniya-na-osnove-obektno",
    "slug": "razrabotka-modulya-upravleniya-urovnem-osveschyonnosti-lokalnyh-zon-mnogofunktsionalnogo-pomescheniya-na-osnove-obektno",
    "title": "Разработка модуля управления уровнем освещённости локальных зон многофункционального помещения на основе объектно-ориентированного подхода",
    "abstract_description": null,
    "full_text_body": "\n\n\n\n\uFEFFФункционал класса toJSON заключается в том, чтобы входные данные конвертировать в данные формата json и затем хранить их. Классы Collapse и BuildObject преобразуют данные, хранящиеся в классе toJSON, в данные формата json, учитывая особенности библиотеки JIT, и хранят эти данные. Класс Paint на основе преобразованных данных и средств библиотеки JIT строит графики. То, как преобразуются входные данные во времени, можно увидеть на диаграмме последовательности, рис.2.\nБыли изучены возможности библиотеки JIT и реализован функционал по преобразованию данных: конвертация входных данных в json-формат, преобразование данных в json-формат с особой структурой данных. Был реализован функционал рисования графиков.\nПример вывода графика представлен на рис. 3.\nДальнейшие направления исследований включают в себя:\n•\tДобавление новых форматов входных данных.\n•\tРазмещение в сети Интернет, тестирование программного продукта.\n•\tДобавление визуализации онтологических моделей в продукт «OntoEditor».\nЛитература\n1.\tОфициальный\tсайт\tGoogle Analytics.\t-\t[электронный\tресурс].\t-\tРежим\tдоступа:\nhttp://www.google.com/analytics/\n2.\tОфициальный\tсайт\tЯндекс-метрика.\t-\t[электронный\tресурс].\t-\tРежим\tдоступа:\nhttps://metrika.yandex.ru/\n3.\tОфициальный сайт построения онтологических моделей. - [электронный ресурс]. - Режим доступа: http://www.ontoprojects.ru/\n4.\tОфициальный\tсайт\tбиблиотеки JIT.\t-\t[электронный\tресурс].\t-\tРежим\tдоступа:\nhttp://philogb.github.io/jit/\n5.\tОфициальный сайт Plone. - [электронный ресурс]. - Режим доступа: http://www.prone.org/\n6.\tОфициальный сайт UML. - [электронный ресурс]. - Режим доступа: http://www.uml.org/\n7.\tJacob Gube. 20 Frash JavaScript Data Visualization Libraries. - [электронный ресурс]. - Режим доступа: http://sixrevisions.com/javascript/20-fresh-javascript-data-visualization-libraries/\n8.\tSteve Jobs. Thoughts on Flash. - [электронный ресурс]. - Режим доступа: http://www.apple.com/hotnews/thoughts-on-flash/\n9.\tГрегер С.Э. Редактор метамодели онтологической системы // Объектные системы - 2012: материалы VI Международной научно- практической конференции (Ростов-на-Дону, 10-12 мая 2012 г.) / Под общ. ред. П.П. Олейника. — Ростов-на-Дону: ШИ ЮРГТУ (НПИ), 2012. — c. 88-92.\nУДК 004. 891\nРАЗРАБОТКА МОДУЛЯ УПРАВЛЕНИЯ УРОВНЕМ ОСВЕЩЁННОСТИ ЛОКАЛЬНЫХ ЗОН МНОГОФУНКЦИОНАЛЬНОГО ПОМЕЩЕНИЯ НА ОСНОВЕ ОБЪЕКТНО-ОРИЕНТИРОВАННОГО ПОДХОДА\nСергеев Евгений Владимирович, студент, Комсомольский-на-Амуре государственный технический университет, Россия, Комсомольск-на-Амуре, eugenejay@mail.ru Горькавый Михаил Александрович, канд. техн, наук, доцент, Комсомольский-на-Амуре государственный технический университет, Россия, Комсомольск-на-Амуре, idpo@knastu.ru\nВведение\nНа сегодняшний день энергосбережение является одной из самых актуальных проблем энергетики. Многие учёные занимаются вопросом о разработке новых источников энергии и более эффективных способов её использования. В настоящее время правительство очень заинтересованно в данной проблеме, созданы органы управления в этой отрасли и нормативные документы. Одним из самых распространённых способов экономии\n49\nэлектроэнергии является оптимизация потребления электроэнергии на освещение. Существует множество рекомендаций и мероприятий для решения этой проблемы. Таких, как максимальное использование дневного света, оптимальное размещение световых источников, замена ламп накаливания на люминесцентные и др. Одним из актуальных решений этой проблемы является установка интеллектуальных систем управления освещением.\nВ ФГБОУВПО «КнАГТУ» в ЛПИП ведутся разработки интеллектуальной системы управления, основанной на оценке и сравнении сигналов естественного и искусственного освещения.\nОсновные задачи:\n•\tСоздание модели помещения.\n•\tРасчёт КЕО, %.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tРасчёт искусственного освещения.\n•\tКлассификация локальных зон помещения.\n•\tСоздание Интеллектуального блока управления.\n•\tПроверка и отладка системы.\nСоздание модели помещения\nМодель необходима для тестирования интеллектуальной системы энергопотребления.\nРис. 1 - Упрощённая схема модели интеллектуальной системы управления\nНа представленном рисунке представлены следующие блоки с установленными взаимосвязями:\n•\tблок «датчик освещённости» - это набор измерительных устройств для сбора данных об освещённости на улице;\n•\tблок КЕО - предназначен для расчёта коэффициентов естественного освещения в локальных зонах внутри помещения;\n•\tблок учёта - выполняет функцию счётчика;\n•\tблок «искусственное освещение» - предназначен для расчёта коэффициентов искусственного освещения в локальных зонах внутри помещения;\n•\tИ. Б. - это интеллектуальный блок, предназначенный для повышения эффективности энергопотребления. Подробнее об интеллектуальном блоке в работе [2].\nНа вход 1 системы приходит сигнал с датчика, измеряющий освещённость на улице, и входит в Блок с рассчитанным коэффициентом естественной освещённости. На выходе из Блока КЕО мы получаем освещённость в каждой из локальных зон. На вход 2 поступает мощность и проходя через блок учёта мощности попадает в блок с рассчитанными коэффициентами искусственного освещения, на выходе получаем освещённость в локальной зоне, создаваемую искусственным освещением. После чего сигналы попадают в\n50\nинтеллектуальный блок, где они сравниваются и производится необходимое регулирование. Для качественного регулирования сигналы сравниваются в локальных зонах.\nОпределение локальной зоны на основе объектно-ориентированного подхода\nРабота технических устройств будет основываться на интеллектуальном алгоритме [2]. Каждая из локальных зон наследует следующие атрибуты субъекта управления ЭВМ с установленным ПО:\tтакие как фунциональные возможности, класс точности и\nфункциональное назначение. Кроме того, субъект управления использует данные о локальных зонах: такие как расположение локальной зоны от окна, данные о расположении искуственного освещения над локальной зоной и информацию о виде работ.\nДля создания диаграммы классов применялась общепринятая система обозначений [1].\nНа данной диаграмме изображены классы локальных зон. Наличие естественного освещения - определяет данные о расположении локальной зоны от светового проёма, т.е. расположена локальная зона близко либо далеко от окна.\nРис. 2 - Диаграмма классов\nНаличие искусственного освещения - определяет наличие искусственного освещения над локальной зоной. Центрированное искусственное освещение - это когда источник света будет находиться непосредственно над локальной зоной. Такое расположение источника света будет способствовать качественному регулированию.\nВид работ - определяет, какая работа будет осуществляться в многофункциональном помещении. От этого класса будет зависеть выбор разряда зрительной работы и определение количества локальных зон.\nВид работ - будет выбираться в зависимости от рода предприятия или организации и его специфики.\nДиаграмма классов будет использоваться в интеллектуальном блоке. Она будет определять локальные зоны.\nЗаключение\n51\nРазработанная диаграмма классов для определения локальных зон помещения позволяет точно определить количество локальных зон, необходимых в регулировании освещения. Она позволяет полноценно оценить факторы, влияющие на работу системы. По данной диаграмме можно определить локальные зоны в любом помещении, так как классы, выбранные в качестве характеристик помещений, являются унифицированными.\nЛитература\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.\tБуч, Г. Объектно-ориентированный анализ и проектирование с примерами приложений на C++ / Г. Буч; пер. с англ. И. Романовского; под ред. Ф. Андреева - М.: Невский Диалект, 2000. - 359 с.\n2.\tБолдырев, В.В. Концепция интеллектуального алгоритма автоматизированной системы\nэнергопотребления/ В.В. Болдырев, М.А. Горькавый // Технические и математические науки: актуальные проблемы и перспективы развития: материалы междунар. науч.-практ. конф., Саратов, 14.11.2013г., С. 19 -24.\nУДК 004.43:378.09\nСЕРИАЛИЗАЦИЯ И ДЕСЕРЕАЛИЗАЦИЯ ОБЪЕКТОВ PYTHON В YAML - ФОРМАТ\nМясникова Нелли Александровна, доцент, Южно-Российский государственный политехнический университет (НПИ), Россия, Новочеркасск, mnela@list.ru Шепилов Владислав Александрович, студент, Южно-Российский государственный политехнический университет (НПИ), Россия, Новочеркасск, ship3000@mail.ru\nКомпания «Delmar» торгует ювелирными изделиями и сотрудничает с таким компаниями, как Sterling, Walmart, Commercehub, Ebay, Zulily, и многими другими. В своей деятельности для внутренних бизнес-процессов эта компания использует CRM-систему на базе OpenERP 6.1. Главной задачей для обеспечения работоспособности системы является унификация входных данных от покупателей. Система OpenERP написана на языке программирования Python 2.7, дополнительные модули, специфичные для компании «Delmar», также написаны на языке программирования Python. Поэтому в статье унификация входных/выходных данных и примеры будут рассмотрены для этого языка.\nУпрощенная схема бизнес-процесса покупки показана на рисунке 1.\nРис. 1 - Упрощенная схема бизнес-процесса покупки\nПри разработке программного обеспечения часто возникает необходимость передачи данных между разными программными продуктами/частями программного продукта/сброса данных в базу данных. Сериализация - процесс перевода какой-либо внутренней (для языка программирования) структуры данных во внешнее представление в каком-либо из общеиспользуемых форматов обмена данными. Обратной к операции сериализации является операция десериализации (структуризации) - восстановление начального состояния структуры данных из внешнего представления[4].\nЗа время эволюции компьютерной техники и программного обеспечения появилось множество человекочитаемых форматов данных и языков разметки. Наиболее известные: XML, YAML, JSON. Начиная с исследования форматов, следует учитывать, что\n52\n",
    "download_url": "https://cyberleninka.ru/article/n/razrabotka-modulya-upravleniya-urovnem-osveschyonnosti-lokalnyh-zon-mnogofunktsionalnogo-pomescheniya-na-osnove-obektno/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/arhitektura-mobilnogo-trenazhera-pogruzochno-razgruzochnogo-ustroystva",
    "slug": "arhitektura-mobilnogo-trenazhera-pogruzochno-razgruzochnogo-ustroystva",
    "title": "Архитектура мобильного тренажера погрузочно-разгрузочного устройства",
    "abstract_description": "В работе рассматривается проблема построения архитектуры мобильного тренажера прорузочно-разгрузочного устройства, включающего в себя кран и пульт крановщика, а также способ решения этой проблемы. Работа выполнена при финансовой поддержке Минобрнауки РФ (договор № 13.G25.31.0093) в рамках реализации Постановления Правительства РФ № 218 «О мерах государственной поддержки развития кооперации российских высших учебных заведений и организаций, реализующих комплексные проекты по созданию высокотехнологичного производства»",
    "full_text_body": "\n\n\n\n\uFEFFАрхитектура мобильного компьютерного тренажера погрузочно-разгрузочного устройства\nЕ.В. Долгова, Р.А. Файзрахманов, Д.С. Курушин, А.Б. Федоров, А.Ф. Хабибулин, А.А Шаронов\nМировой опыт тренажеростроения показывает высокую эффективность программ подготовки, обучения и контроля знаний, закладываемых на основе применения компьютерных моделей, объектов трехмерной графики, методов и алгоритмов имитации условий работы оператора и т. п. [1-4]. Однако проблемы вопросы построения тренажеров на основе этих технологий актуальны, поскольку существующие решения не в полной мере удовлетворяют потребностям исследуемой предметной области. И не всегда позволяют имитировать действия команды и отдельных операторов в реальном времени с высокой степенью достоверности проблематика данной работы связана с исследованием форм и методов организации обучения и построение эффективных компонентов обучающих систем на основе компьютеризированных технологий обработки информации, проработка основных элементов математического, информационного, алгоритмического, программного, технического, сетевого обеспечения.\nИмитационно-тренажерный комплекс системы управления представляет собой сложный аппаратно-программный комплекс, включающий центр управления, контрольно-управляющую систему (моделирующий комплекс), систему имитации визуальной обстановки (систему визуализации). Система имитации акустических шумов воспроизводит звуки, происходящие в процессе работы системы. Система визуализации имитационно-тренажерного комплекса является одной из основных. Она производит синтез изображения трехмерного пространства на экране ноутбука. Для создания изображения система использует виртуальную трехмерную модель пространства (виртуальную 3D сцену), которая описывает параметры объектов (положение, ориентацию, форму и т.д.), источников освещения, камер, анимационных треков и других составляющих этого пространства. Для полноценной работы тренажера визуализация виртуальной сцены должна происходить в режиме реального времени и обеспечивать эффект непрерывного движения динамических объектов, что соответствует выводу изображения на экраны с частотой, не менее 30 раз в секунду.\nДанная архитектура представлена на рис. 1^.\nРис. 1 - Общая архитектура тренажерного комплекса\nСтруктурная модель тренажерного комплекса разработана на основе архитектуры тренажерного комплекса. Данная модель представлена на рисунке 2|. Структура тренажерного комплекса состоит из: имитатора пульта крановщика; имитатора пульта «З»; средств подготовки данных; средства передачи данных; портативного персонального компьютера; беспроводной сети передачи данных.\nРис. 2 - Структура тренажерного комплекса\nБеспроводные сети позволяют объединить в единую систему локальные сети или отдельные компьютеры, что обеспечивает доступ большого количества (возможно десятков или сотен) удаленных абонентов к общим ресурсам сети. В нашем тренажерном комплексе они позволит соединить между собой имитаторы пультов крановщика и «З» с мобильным персональным компьютером.\nПри разработке тренажера рассматривались два вида топологии: «звезда» и «шина».\nТопология «звезда» — базовая топология компьютерной сети, в которой все компьютеры сети присоединены к центральному узлу (сервер), образуя физический сегмент сети. Топология типа общая шина, представляет собой общий кабель (называемый шина или магистраль), к которому подсоединены все рабочие станции. При разработке тренажерного комплекса использовалась топология «Звезда», так как она более подходит для реализации обмена информацией между персональными компьютерами операторов, виртуальными пультами с сервером.\nНа рис. 3| представлена структура сети мобильного тренажера устройства. Мобильный тренажер состоит из центрального сервера, реализованного на мобильном ПК и имитаторов пультов. К серверу с использованием технологии WiFi, подразумевающей использование сетевой топологии «звезда», подключено два пульта управления.\nСУБД\nРис. 3 - Структура сети мобильного тренажера\nКран с гидроаппаратурой служит для подъема и опускания груза, погрузки и разгрузки его с грунта (стеллажа), и машин. Управление краном производится с помощью рукояток управления, расположенных на гидрораспределителе, и лимба дросселя. Задача заключается в частичном повторении внешнего вида рукоятей управления краном.\nПользовательский интерфейс может состоять, из набора стандартных средств, входящих в состав Android SDK или же отрисовываться самостоятельно. Примером набора стандартных средств могут послужить стандартные кнопки, трэк-бары и т.п., входящие в состав Android SDK. Преимущества этого метода очевидны. Это сокращение время разработки приложения и упрощение разработки. Но также это в свою очередь приводит и к недостаткам, таким как не возможность изменения формы и функционала в широких пределах. Поэтому были созданы сторонние библиотеки позволяющие создавать пользовательский интерфейс из шаблонов, например входящих в дополнительную библиотеку AndEngine. Данная библиотека позволяет с помощью шаблонов, создать 2D, 3D пользовательский интерфейс. Этот подход сокращает время разработки 2D, 3D интерфейса и позволяет создать на основе шаблона то что необходимо, не задумываясь об ограничениях стандартных шаблонов, за счет довольно сильного усложнения программной части. Если нам не нужен большой функционал или 3D графика, намного проще создать свой собственный пользовательский интерфейс. Преимущества данного подхода — это создание именно того что нам нужно, за короткое время и усложнения программного кода, в разумных пределах. В нашем случае необходимо создать пользовательский интерфейс максимально похожий на оригинальные пульты в довольно коротко время, поэтому нам идеально подходит разработка пользовательского интерфейса самостоятельно. Пусть необходимо создать пользовательский интерфейс максимально похожий на оригинальные пульты. Из этого можно выделить основные требования к пользовательскому интерфейсу:\n1.\tМинимальное время оклика интерфейса на действие пользователя -Обработка одновременного качания (до 5 точек)\n2.\tКнопки, тумблеры и индикаторы должны максимально походить на оригинальные\n3.\tПрограммно имитировать действия соответствующие кнопкам, тумблерам и индикаторам\nЛогическую структуру пульта крановщика мы можем представить в виде схемы (рис. 4).\nИнтерфейс:\tо\tЛогика\n• onDraw()\t\t• onClick()\n• onTouchEvent()\t\t• getSettings()\nРис. 4 - Логическая структура пульта крановщика\nВ методах onClick и GetSettings происходят основные процессы по взаимодействию пульта крановщика с сервером. Эти методы могут быть вызваны системой, происходить по расписанию или вызваны действиями пользователя. Основные процессы происходящие в логике системы:\n1.\tПередача информации между интерфейсом и сервером, этот процесс заключается в проверке и форматированию исходящих запросов на сервер.\n2.\tОтображение интерфейса по критериям пользователя системы\n3.\tФормирование статуса работы системы. В системе предусмотрено 6 статусов:\n1)\t«Не введен адрес сервера» — этот статус формируется при отсутствии адреса сервера\n2)\t«Нет ping» — данный статус формируется если по какой то причине доступ к серверу невозможен (например не найден DNS сервер).\n3)\t«Ожидает обработки» — после получения доступа к серверу, система ждет от него настроек системы (варианты настроек варьируются в зависимости от типа интерфейса)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n4)\t«Загрузка» — на данном этапе происходит загрузка с сервера так называемого скина (если его нет в системе), который будет отображаться в интерфейсе.\n5)\t«Готов» — данный статус присваивается системе, которая успешно прошла настройки,\nи служит для обозначения того, что пользователь может приступить к работе.\n6)\t«Ошибка» — этот статус, служит сигналом для администратора системы, говоря о том, что на каком то из этапов произошла ошибка и необходимо ручное устранение ошибки.\n4.\tМодульная подсистема, подсистема подключения модулей для расширения возможности системы (модуль проверки индексации).\nЛогическая часть интерфейса обрабатывает полученные от метода onTouchEvent запросы и относительно них перерисовывает интерфейс и отсылает данные в метод опСНск. В части оформления, содержаться шаблоны элементов интерфейса. Данная схема очень удобна в виду того, что мы отделяем визуальную часть от содержимого. Это влияет на понятность кода, а так же на возможности, расширяемости, редактирования и тестирования кода пульта крановщика.\nПриложение состоит из трех классов (см. рис.5).\nРис. 5 - Фрагмент диаграммы классов\nОсновнеой класс DragdropActivity реализует «активность» приложения и служит для интеграции с платформой Android. Фрагмент листинга класса см. алг. 1.1|. Класс DragdropActivity реализует запуск приложения-имитатора пульта и позволяет запускать диалог настройки.\nВесомую часть клиентского приложения составляет графический интерфейс. Рассмотрим две самых распространенных технологии (SVG и HTML5 Canvas) для реализации графики.\nПреимущества Canvas:\n-\tвысокая производительность при отрисовке любых 2D объектов;\n-\tстабильная производительность — все есть пиксель, производительность падает только при увеличении разрешения изображения;\n-\tможно сохранить полученное изображение в PNG или JPG файл;\n-\tлучше всего подходит для создания растровой графики (например, в играх, фракталов и\nт.п.), редактирования изображений и операций, требующих манипулирования на уровне пикселей.\nПреимущества SVG:\n-\tнет зависимости от разрешения — SVG лучше подходит для кроссплатформенных пользовательских интерфейсов, так как позволяет масштабировать изображение при различных разрешениях экрана;\n-\tSVG очень хорошо поддерживает анимацию. Элементы могут быть анимированы с использованием описательного синтаксиса или с помощью JavaScript;\n-\tможно получить полный контроль над каждым элементом, используя SVG DOM API в JavaScript.\nSVG хранится в формате XML, что предоставляет больше возможностей браузерам по обеспечению доступности SVG документов по сравнению с элементом canvas. Таким образом, SVG выглядит лучшим решением для пользовательских интерфейсов веб-приложений.\nНедостатки Canvas:\n-\tотрисовка основана на пикселях;\n-\tне существует API для анимации. Вам придется прибегать к использованию таймеров и других событий для обновления канвы;\n-\tслабые возможности по рендерингу текста.\nТаким образом, canvas — возможно, не самый лучший выбор, когда доступность имеет решающее значение. Канва предоставляет вам поверхность для рисования в выбранном контексте (2D и 3D). Можно указать альтернативный контент внутри элемента canvas, который будет показан браузером при невозможности отображения графики. Кроме того, вы можете выполнить проверку доступности выбранного Canvas API с помощью JavaScript. На основе этого вы можете обеспечить различную функциональность для пользователей браузеров с разной поддержкой HTML 5 Canvas;\nHTML 5 Canvas не подходит для создания веб-сайтов или интерфейсов веб-приложений, так как пользовательские интерфейсы обычно должны быть динамическими и интерактивными, а Canvas требует от вас постоянной перерисовки каждого элемента в интерфейсе.\nНедостатки SVG:\n-\tнизкая скорость рендеринга при увеличении сложности документа (рисунка), так как используется модель DOM;\n-\tскорее всего, SVG не подходит для таких приложений как игры.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКаждая технология имеет свою область применения.\nHTML 5 Canvas следует использовать для:\n-\tредактирования изображений обрезки, изменения размеров, фильтров (удаления эффекта красных глаз, создания эффекта сепии, изменения цветности или яркости);\n-\tсоздания растровой графики: визуализации данных, создания фракталов и графиков функций;\n-\tанализа изображений: создания гистограмм и т.п.;\n-\tсоздания игровой графики, такой как спрайты и фоны;\nSVG следует использовать для:\n-\tсоздания пользовательских интерфейсов веб-приложений, независимых от разрешения экрана;\n-\tвысокоинтерактивных анимированных пользовательских интерфейсов;\n-\tграфиков и диаграмм;\n-\tредактирования векторных изображений.\nНеобходимый функционал нам полностью обеспечивает SVG технология. Так же в работе есть моменты, для которых оптимальными будут решения на основе HTML и CSS. Это такие вещи, как закругленные углы, переходные эффекты, тени и прозрачность, расположение на экране, отступы.\nВ работе также бвкЬ использованы использовать библиотеки JavaScript — j Query UI (например, для создания более удобного и красивого скролла).\nЭти решения были успешно положены в основу создания мобильного компьютерного тренажера погрузочно-разгрузочного устройства. Таким образом, поставленная задача находит свое решение для конкретного объекта с учетом предъявленных к тренажеру требований.\nЛитература:\n1.\tДолгова Е.В., Файзрахманов РА., Курушин Д.С., Кротов Л.Н., Федоров А.Б., Хабибуллин А.Ф., Шилов В.С., Ромин Е.А., Бакунов РР, Бикметов Р.Р., Полевщиков И.С. «Моделирование динамики перемещения груза в компьютерном тренажере погрузочноразгрузочного устройства/ Вестник МГОУ, серия \"Физика-математика\", N 2, 2012.\n2.\tОрлов А.Н. Общая динамическая модель грузоподъемных кранов // В сб. «Оптимизация параметров строительных и дорожных машин». — Ярославль, изд-во Яросл. полит, ин-та, 1992. С.13-20.\n3.\tСкрипкина М.А. Применение методологических подходов при разработке модели\nформирования графической компетенции курсантов военного вуза [Электронный ресурс] // «Инженерный Вестник Дона», 2010,\t№4.\t-\tРежим\tдоступа:\nhttp://ivdon.ru/magazine/archive/n4y2010/257 (Доступ свободный) - Загл. с экрана. - Яз.рус\n4.\tФайзрахманов Р.А., Бакунов РР., Мехоношин А.С. Создание трехмерных моделей для системы визуализации тренажерного комплекса // Вестник ПГТУ Электротехника, информационные технологии, системы управления. - 2011. - №5. - С. 62-69.\n",
    "download_url": "https://cyberleninka.ru/article/n/arhitektura-mobilnogo-trenazhera-pogruzochno-razgruzochnogo-ustroystva/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/ispolzovanie-platformy-bitriks-dlya-sozdaniya-vysokonagruzhennyh-veb-prilozheniy",
    "slug": "ispolzovanie-platformy-bitriks-dlya-sozdaniya-vysokonagruzhennyh-veb-prilozheniy",
    "title": "ИСПОЛЬЗОВАНИЕ ПЛАТФОРМЫ БИТРИКС ДЛЯ СОЗДАНИЯ ВЫСОКОНАГРУЖЕННЫХ ВЕБ-ПРИЛОЖЕНИЙ",
    "abstract_description": "Предлагается использование технологии Битрикс для создания высоконагруженных веб-приложений. Рассматривается технология «Композитный сайт». Статья углубляется в структуру Bitrix, демонстрируя ее возможности обеспечения стабильной работы веб-приложения",
    "full_text_body": "\n\n\n\n\uFEFFУДК 664.143\nЛандарь А.А., Семенов Г.Н., Станкевич А.М.\nИСПОЛЬЗОВАНИЕ ПЛАТФОРМЫ БИТРИКС ДЛЯ СОЗДАНИЯ ВЫСОКОНАГРУЖЕННЫХ ВЕБ -ПРИЛОЖЕНИЙ\nЛандарь Александр Александрович, студент 4 курса бакалавриата факультета цифровых технологий и химического инжиниринга Российский химико-технологический университет им. Д.И. Менделеева, alexandrlandar33@gmail.com\nСеменов Геннадий Николаевич, к.т.н., доцент Российский химико-технологический университет им. Д.И. Менделеева, Москва, Россия, 125480, Москва, ул. Героев Панфиловцев, д. 20\nСтанкевич Александр Матвеевич, ведущий программист компании WEB-GOLDEN, Москва, Россия\nПредлагается использование технологии Битрикс для создания высоконагруженных веб-приложений. Рассматривается технология «Композитный сайт». Статья углубляется в структуру Bitrix, демонстрируя ее возможности обеспечения стабильной работы веб-приложения.\nКлючевые слова: Битрикс, веб-приложение, композитный сайт, высоконагруженное приложение, HTML, JavaScript\nUSING THE BITRIX CMS PLATFORM TO CREATE HIGH-LOAD WEB APPLICATIONS\nLandar A.A., Semenov G.N., Stankevich A.M.*\nD. Mendeleev University of Chemical Technology of Russia, Moscow, Russia *WEB-GOLDEN company, Moscow, Russia\nWe suggest utilizing Bitrix technology to create high-load web applications. The \"Composite site\" technology is considered. The article covers the Bitrix structure, demonstrating. Its capabilities to ensure stable operation of the web application. Keywords: Bitrix, web application, composite site, highload-application, HTML, JavaScript\nВведение\nВысоконагруженное бизнес-приложение - это система, которая постоянно масштабируется и хорошо справляется с текущими нагрузками. Главные качества таких систем растут параллельно с потребностями большого и малого бизнеса. Во-первых, это системы с обширной аудиторией клиентов. Отсюда следует такое важное качество системы, как то, что это распределительная система. Вследствие огромного количества запросов сервера выходят из строя, а поэтому от их количества зависит восстанавливаемость системы после сбоя. Во вторых это интерактивная система с позитивной динамикой. И последнее важное качество системы -это множество ресурсов. Для интерактивности необходимы свободные, в нужном количестве, ресурсы. Стремительный рост этих систем вызывает жесткий контроль ресурсов.\nВсе, что связано с доступом к базе данных трудно сделать универсальным. Для стабильной функциональности системы, необходимо четко представлять, с какой конкретно базой данных эта система будет взаимодействовать. При реализации проекта использовать все преимущества этой базы данных, исходя из параметров объема данных и частоты поступаемых обращений.\nНеобходимо понимать, что для придания гибкости высоконагруженной системе потребуется очень важные свойства:\n- Оптимальное время отклика. Это одно из достоинств высоконагруженных бизнес-приложений. Пользователь общается с системой через запрос, и ответ на него должен приходить спустя приемлемый интервал\nвремени. Вряд ли пользователь станет взаимодействовать с программой, которая будет производить необходимое вычисление слишком долгий промежуток времени.\n- Масштабируемость. Какое количество людей смогут одновременно пользоваться ресурсом; какое количество данных способна вместить база до того момента, когда она перестанет справляться с нагрузкой. Высоконагруженный проект должен быть масштабируемым в обязательном порядке. Технологии Битрикс позволяет\tпроводить\tгоризонтальное\nмасштабирование системы, благодаря возможности подключать дополнительные сервера или вертикальное, подключив cdn (contact delivery network) обеспечивая оптимизацию сети.\nЭти системы очень важно и необходимо масштабировать постоянно. Проделывать эту работу необходимо для бизнес-приложения [1]. Высоконагруженными системами пользуются CALL-центры, биржевые и финансовые организации, банки, компании с полным циклом. Для работы с высоконагруженными системами требуется повышенная внимательность. Чтобы задачи бизнеса выполнялись успешно необходимо подобрать точные параметры. Для снижения нагрузки машинный код, нагружающий сервер множеством функций, нужно оптимизировать.\nПодход Битрикса к построению архитектуры проектов сервисный. То-есть приложение разделяется на отдельные наборы компонентов, взаимодействующие между собой. Разработка приложений, благодаря решению использовать\nсервисный подход, значительно эффективнее, чем у альтернативных подходов к построению архитектуры.\nО технологии «Композит»\nТехнология «Композитный сайт» обеспечивает кеширование страниц на стороне сервера. Благодаря композитному режиму страницы загружаются у пользователя значительно быстрее, чем без включенной технологии. При использовании Bitrix Composite страницы сайта при посещении пользователя сохраняются, и уже последующие пользователи загружают сохраненную версию страницы уже с подключенными скриптами, стилями каскадных таблиц и контентом, что значительно ускоряет процесс загрузки и формирования блоков.\nОсновная суть технологии «Композитный сайт» состоит в том, что в матрицах компонентов, из которых создаётся динамическая страница, выделяются специальные зоны, в которых находится динамический контент. Во время обращения пользователя к странице, система создаёт кеш статической части страницы, в которую внедрен код, написанный на языке программирования JS (JavaScript), для обращения к серверу за необходимыми пользователю данными. Во время повторного обращения того же, или некоторого другого пользователя, система отдаёт созданный файл кеша, а потом еще досылает динамичный контент.\nПервый пользователь, попавший на страницу, столкнется со следующими действиями CMS (Content Management System) Битрикс:\n-\tсначала система проверит наличие прав у пользователя на получение страницы от сервера, далее система проверит подключена ли страница к системе композитного кеша, и наконец, наличие собственно файла кеша;\n-\tподключение файлов шаблона сайта и рабочей области с выполнением php (personal home page) скриптов компонентов, внедренных в них, с учётом возможностей пользователя и других приемлемых условий формирования страницы (расчёт корзины для конкретного пользователя, вывод лучших товаров из каталога в топ, как в нашем случае);\n-\tсистема обращается к базе данных, выполняет действия, определённые конкретными компонентами (подборка данных, их сортирование, обращение к файлам cms и вебсервера и другие);\n-\tcms выполняет формирование html (hypertext markup language) кода для передачи на браузер и собственно передачу кода браузеру пользователя [2].\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nПользователь получает страницу за 750 миллисекунд. Это стандартная скорость получения страницы пользователем большинства сайтов. Вебсервер продолжает работу в фоновом режиме. И в конце выполнения страницы:\n-\tзаменяет код динамических зон на заглушки, которые программист определяет специальной разметкой;\n-\tдобавляет JS загрузчик;\n-\tвысчитывает контрольную сумму страницы;\n-\tсохраняет на свой жёсткий диск HTML-код страницы, сформированный специально для первого пользователя;\n-\tбраузер пользователя посылает запрос на вебсервер;\n-\tсистема отслеживает наличие прав у пользователя на получение страницы, принадлежность страницы к системе композитного кеша, а также обладание собственным файлом кеша, при совпадении всех условий, выполняются параллельные действия;\n-\tсохранённый на диске html-код страницы отправляется веб-сервером пользователю;\n-\tсобирает динамическую часть страницы, отбрасывая статическую часть;\n-\tсобирает некоторые дополнительные данные;\n-\tjson (javascript object notation) отправляется загрузчику;\n-\tобновляет страницу в композитном кеше, если сумма не совпала.\n-\tзагрузчик расставляет контент и выполняет js код [3].\nПользователь получает сохранённую страницу за 15 миллисекунд, при этом непосредственно само отображение страницы занимает 2 миллисекунды. Затем загружаются стили, картинки и в результате страница полностью отображается за 290 миллисекунд. Актуальные данные приходят к пользователю через 550 миллисекунд. Эти действия происходят в фоновом режиме.\nДля использования данной технологии необходимо понять какой выбрать режим (автоматический или ручной) и воспользоваться кнопкой включения на нужной закладке. Активизация одного из режимов делает неактивной кнопку включения другого режима. Для смены режима необходимо сначала выключить ранее работавший режим. Перед включением любого из режимов следует очистить кеш компонентов.\nОсновным различием режимов является тот факт, что:\n-\tв режиме «композита» можно выполнять глобальные настройки \"голосования\" компонентов, выбор типа содержания заглушки динамической зоны.\tВ режиме «автоматического композита» управление этими параметрами выполняется на уровне самих компонентов;\n-\tв режиме «автоматического композита» добавление новых страниц на сайте автоматически подключает их к технологии. В режиме «композита» каждую новую страницу нужно настроить на работу в данном режиме.\nКомпозитный кеш в Битриксе можно отдавать через PHP или веб-сервер nginx. В случае с РНР дополнительные настройки не нужны, так как все\nсделает сам продукт, во втором же случае потребуется дополнительная настройка сервера nginx. Настройки сервера nginx производятся по аналогии с настройками сервера в виртуальной машине BitrixVM.\nСтруктура Bitrix\nВсе ядро системы находится в папке «Bitrix» от корня сайта. В этой папке содержатся основные модули, компоненты, скрипты, настройки, соединения с базой данных, а также шаблоны компонентов, шаблоны сайтов. В папке «Администраторы»\tпредставлены\nадминистративные скрипты, отвечающие за администрирование. Папка «Компонент» содержит компоненты. Модули - это папка с модулем, в котором хранятся настройки и административные скрипты для управления модулем. В папке php_интерфейсы находятся файлы для соединения с базой данных и файл init.php, отвечающий за использование обработчиков сайта. В папке «Templates» находятся шаблоны компонентов и сайта в общем виде.\nБД (база данных) хранит все данные системы, ее настройки, пользователей. В ядре содержатся функции по управлению базой данных. Модули - это набор скриптов, позволяющих управлять базой данных. К самым главным модулям относят модули инфоблоков. Компоненты - это часть системы, в которой могут сочетаться функции из разных модулей. Компоненты реализуют логику решения поставленной задачи. Вывод информации, это тот внешний вид, на котором будет выдаваться информация на внешнюю часть сайта [4]. Программные компоненты ядра отделены от пользовательских файлов, что позволяет избежать изменения ядра.\nКредитный калькулятор\nС помощью технологии Битрикс был реализован кредитный онлайн калькулятор. Его структура состоит из множества модулей (моделей данных), главными из которых являются модуля расчета, просмотра истории и модуль поиска контента (используется для поиска и сохранения актуальных ставок кредита в автоматическом режиме).\nКредитный калькулятор прост в обращении, подойдет любому пользователю. В программах по кредиту есть возможность задать процентные ставки, а также изменения ставок в зависимости от условий, схемы расчета платежей. Кредитный калькулятор рассчитывает суммы ежемесячного платежа,\nвыплаты по процентам. Технологии Битрикс позволяют обслуживать более 5000 пользователей сайта одновременно (рис.1), без потери в скорости отклика. Технология «Композит» успешно внедрена и используется.\nРис. 1. Результаты теста производительности многопоточных и веб-кластерных систем\nКредитный калькулятор успешно адаптируется под потребности сайта. Выделены максимально возможное количество одновременных обращений к серверу (хитов) и максимально возможное количество запросов на получение уникальных страниц.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВыводы\nРазработано на основе технологии Битрикс высокоэффективное веб-приложение кредитного калькулятора. Это значительно облегчит жизнь рядовых пользователей, избавит их от утомительного похода по кредитным учреждениям, сэкономит время и деньги\nСписок литературы\n1.\tАрхитектура высоконагруженных приложений [Электронный ресурс]: http://hawkhouse.ru/blog/chem-standartnaya-arhitektura-otlichaetsya-ot-arhitektury-vysokonagruzhennyh-prilozhenij/ (Дата обращения 09.05.2020).\n2.\tО технологии композитный сайт и ее настройке [Электронный ресурс]: https://dev.1c-bitrix.ru/learning/course/?COURSE_ID=39\t(Дата обращения 07.05.2020).\n3.\tКак сделать композитный сайт и его настройке [Электронный\tресурс] :\thttps://dev. 1c-bitrix.ru/learning/course/?COURSE_ID=39&LESSON_I D=4887&LESSON_PATH=3910.4887 (Дата обращения 11.05.2020).\n4.\tКурс Разработчик Bitrix Framework: Структура файлов [Электронный ресурс]: https://dev.1c-bitrix.ru/learning/course/index.php?COURSE_ID=43&L ESSON_ID=2287&LESSON_PATH=3913.4608.2287 (Дата обращения 18.05.2020).\n",
    "download_url": "https://cyberleninka.ru/article/n/ispolzovanie-platformy-bitriks-dlya-sozdaniya-vysokonagruzhennyh-veb-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/reshenie-zadachi-postroeniya-grafa-zavisimostey-programmnyh-moduley-v-sisteme-node-js",
    "slug": "reshenie-zadachi-postroeniya-grafa-zavisimostey-programmnyh-moduley-v-sisteme-node-js",
    "title": "Решение задачи построения графа зависимостей программных модулей в системе node. JS",
    "abstract_description": "Описаны принципы модульного SOLID -программирования для объектно-ориентированных языков программирования. Приведен алгоритм построения графа зависимостей модулей программы на основе теории абстрактных синтаксических деревьев, реализованный для модулей типов E S M и CommonJS в системе Node.js . В качестве вспомогательной решена задача обнаружения циклических зависимостей в графе. Выполнено сравнение времени выполнения, как для программ, состоящих только из модулей ESM , так и для программ, совмещающих ESM и CommonJS модули. Построенный граф зависимостей позволяет оптимизировать процесс регрессионного повторного тестирования программного продукта и удобен для учета всех зависимостей измененных модулей в программе, что имеет большое значение для отбора повторных регрессионных тестов.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.415.2.43\nЕ.В. Сидорова, Н.Г. Дмитриева, Н.А. Калинина\nРЕШЕНИЕ ЗАДАЧИ ПОСТРОЕНИЯ ГРАФА ЗАВИСИМОСТЕЙ ПРОГРАММНЫХ МОДУЛЕЙ В СИСТЕМЕ NODE.JS\nНижегородский государственный технический университет им. Р.Е. Алексеева\nОписаны принципы модульного SOLID-программирования для объектно-ориентированных языков программирования. Приведен алгоритм построения графа зависимостей модулей программы на основе теории абстрактных синтаксических деревьев, реализованный для модулей типов ESM и CommonJS в системе Node.js. В качестве вспомогательной решена задача обнаружения циклических зависимостей в графе. Выполнено сравнение времени выполнения, как для программ, состоящих только из модулей ESM, так и для программ, совмещающих ESM и CommonJS модули. Построенный граф зависимостей позволяет оптимизировать процесс регрессионного повторного тестирования программного продукта и удобен для учета всех зависимостей измененных модулей в программе, что имеет большое значение для отбора повторных регрессионных тестов.\nКлючевые слова: лексический и синтаксический анализ программного кода, абстрактные синтаксические деревья AST, принципы SOLID-программирования, управляющий граф программы, граф зависимостей модулей программы, ESM-модули, CommonJS-модули, модульная система Node.js, JavaScript.\nВведение\nВ роли преобразователей исходного кода программы в машинный выступают либо интерпретаторы, либо компиляторы. Программный код, представляющий собой обычный текст, проходит этап парсинга - превращения обычного текста в иерархическую структуру данных, называемую абстрактным синтаксическим деревом AST (Abstract Syntax Tree). На многих стадиях жизненного цикла программного обеспечения, анализ исходного кода программы является важной частью, как разработки, так и дальнейшей поддержки продукта. Это помогает изначально создавать качественный программный продукт, оценивать степень оттестированности программы и оптимизировать задачу регрессионного тестирования. Такой анализ удобно проводить на основе графа зависимостей модулей программного продукта. В данной статье рассматривается алгоритм построения графа зависимостей исходной программы в виде абстрактного синтаксического дерева для программ, состоящих из модулей системы Node.js. В таком дереве вершинами будут являться модули программы, а дугами их интерфейсы.\nМодульное программирование\nДля модульного программирования характерна декомпозиция исходного задания на отдельные задачи, которые представляются в виде программных модулей. Каждый модуль реализует отдельную функциональность программы и имеет публичный (public) интерфейс, доступный для использования в других модулях. Данный подход уменьшает зону ответственности разработчика модуля по сравнению с разрабатываемой программой, ускоряет процесс разработки, упрощает процессы отладки и тестирования. Кроме того, такая архитектура программного обеспечения уменьшает количество изменений, вызванных редактированием или расширением спецификаций, или отдельных частей исходного кода. Для написания качественного кода на языке объектно-ориентированного программирования соблюдение перечисленных ранее аспектов в архитектуре можно достичь, если придерживаться принципов SOLID-программирования. Аббревиатура SOLID включает первые буквы названий пяти\n© Сидорова Е.В., Дмитриева Н.Г., Калинина Н.А.\nследующих основных принципов современного объектно-ориентированного программирования, предложенных Робертом Мартином.\n1.\tS: Single Responsibility Principle (принцип единственной ответственности): каждый класс должен решать только одну задачу.\n2.\tO: Open-Closed Principle (принцип открытости-закрытости): программные элементы (классы, методы, функции) должны быть открыты только для расширения, но не для модификации.\n3.\tL: Liskov Substitution Principle (принцип подстановки Барбары Лисков (принцип заменяемости): классы-наследники можно использовать вместо родительских, не нарушая работу программы.\n4.\tI: Interface Segregation Principle (принцип разделения интерфейса): интерфейсы должны быть узкоспециализированными, для того чтобы конкретный клиент использовал только нужные ему методы.\n5.\tD: Dependency Inversion Principle (принцип инверсии зависимостей):\n•\tдолжна быть выстроена четкая иерархия классов (предки не должны зависеть от потомков);\n•\tсвязь между классами должна осуществляться через интерфейсы, а не напрямую;\n•\tв интерфейсах и абстрактных классах не должно быть конкретных реализаций кода, только сигнатура;\n•\tинтерфейсы должны реализовывать конкретные классы.\nПридерживаясь принципов SOLID-программирования, разработчик способен создать качественную, легко расширяемую программу, удобную для тестирования и дальнейшего сопровождения. Поскольку модули в архитектуре программы очень эффективны, то современные языки объектно-ориентированного программирования добавляют поддержку модульной структуры программ в свои стандарты.\nВ данной статье рассматривается реализация модульного подхода Node.js для языка программирования JavaScript [1]. В настоящий момент в Node.js поддерживаются два типа модулей:\n•\tсистема модулей, появившаяся в ES6 стандарте языка JavaScript - ESM [2];\n•\tсистема модулей, появившаяся в 0.4 версии Node.js - CommonJS [3].\nКаждый файл исходной программы, написанной на Node.js, является отдельным модулем, одного из перечисленных типов, между EMS и CommonJS-модулями поддерживается совместимость. Для предоставления публичного интерфейса используется синтаксические конструкции следующего вида:\n1.\tВ случае CommonJS:\nmodule.exports = { a: () => {...},\nb: someConstant,\n};\n2.\tВ случае ESM:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nexport const a = () => {...};\nexport const b = someConstant;\nВ данном примере, файл a.js, содержащий представленный выше программный код является модулем. А предоставляемые по ключам a и b методы - подмодулями данного модуля.\nДля получения доступа к объявленному в модуле интерфейсу используются следующие синтаксические конструкции require и import:\n1. В случае CommonJS:\nconst all = require(,a.js'); // получаем доступ ко всем подмодулям a.js\nconst {b} = require(,a.js'); // получаем доступ к подмодулю b\n2. В случае ESM:\nimport all from 'a.js'; // получаем доступ ко всем подмодулям a.js\nimport {b} from 'a.js'; // получаем доступ к подмодулю b\nПри разработке программы с помощью модулей становится возможным построение граф зависимостей. Связи между различными зависимостями берутся из инструкций import или require, которые используются в коде.\nВ процессе разработки и сопровождении программы граф зависимостей используется для оптимизации отбора тестов при регрессионном тестировании [4]. В ходе регрессионного тестирования специалист по тестированию проверяет внесенные программистом изменения. Для такого вида тестирования специалист использует уже разработанные тестовые наборы и сценарии, на которых была обнаружена исправляемая ошибка и, возможно, дополнительно разрабатывает новые регрессионные тесты, если при исправлении была изменена / добавлена / удалена какая-либо функциональность программного кода. Затем тестировщик пробует воспроизвести ошибку каким-либо другим способом и обязательно тестирует последствия исправлений, т.к. исправления, возможно, внесли новые ошибки в код, который до этого исправно работал. Для повторного прогона отбирать тесты можно по построенному дереву зависимостей, оставив в дереве только вершины, соответствующие измененным модулям программы и вершины, соответствующие модулям, связанным с ними интерфейсами.\nДля удобства отслеживания процесса изменения кода каждая версия программного продукта, отличающаяся от предыдущей версии исправлениями, должна иметь различные имена, показывающие название функционального модуля и его вариативность. После проведения последнего успешного тестирования программного продукта вносить изменения в программный код запрещено, поэтому готовым коммерческим продуктом, представляемым заказчику, является последняя успешно протестированная версия кода.\nАбстрактные синтаксические деревья\nАбстрактное синтаксическое дерево (далее - AST) - конечное дерево, в котором вершины описывают операторы языка, а листья - операнды, т.е., представляют собой граф зависимостей (управления) программы. Рассмотрим процесс парсинга исходного кода программы, представляющий собой перевод текстового представления исходного кода в дерево AST.\nДанный процесс состоит из двух фаз:\n•\tлексический анализ;\n•\tсинтаксический анализ.\nЛексический анализ\nВведем понятие морфологии, как множества, состоящего из языковых термов с описанием правил их использования. Морфология представляет собой описание доступных языковых конструкций исходного языка, в случае с языками программирования является частью спецификации языка программирования.\nЛексический анализ - процесс, на вход которого подается строковое представление исходной структуры, в результате возвращается упорядоченный список токенов. Токен -элемент из множества, заданного исходной морфологией языка программирования.\nРассмотрим следующую конструкцию произвольного языка: n*n.\nРезультатом лексического анализа заданной конструкции является список токенов:\n[\n{ type: { ... }, value: \"n\", start: 0, end: 1, loc: { ... } },\n{ type: { ... }, value: \"*\", start: 2, end: 3, loc: { ... } },\n{ type: { ... }, value: \"n\", start: 4, end: 5, loc: { ... } },\n]\nКаждый токен содержит информацию о:\n•\tтипе содержащегося терма - type;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tрасположении терма в исходном текстовом представлении - loc;\n• занимаемых позициях в линейном символьном представлении - start, end.\nСинтаксический анализ\nСинтаксический анализ - процесс, на вход которого подается упорядоченный список токенов, как результат - возвращается построенное дерево AST.\nНа этапе синтаксического анализа токены группируются в узлы дерева, между которыми задается продиктованная морфологией иерархическая связь.\nРассмотрим ранее объявленную конструкцию: n*n.\nПроизведем лексический анализ данной конструкции, используя морфологию Node.js, а затем, к получившемуся набору токенов, применим синтаксический анализ.\nВ качестве морфологии используем estree спецификацию: https://github.com/estree/estree. Нас будут интересовать следующие узлы:\n1.\tУзел ImportDeclaration, соответствующий программному коду, описанному в ESM системе модулей:\ninterface ImportDeclaration <: ModuleDeclaration { type: \"ImportDeclaration\";\nspecifiers: [ ImportSpecifier | ImportDefaultSpecifier | Import-NamespaceSpecifier ]; source: Literal;},\nгде source содержит информацию о пути в файловой системе до запрашиваемого модуля; specifiers множество запрашиваемых подмодулей.\n2.\tУзел CallExpression, соответствующий программному коду, описанному в CommonJS системе модулей:\nextend interface CallExpression { callee: Expression | Super;},\nгде callee содержит информацию о вызове функции, если узел CallExpression имеет тип Identifier:\ninterface Identifier <: Expression, Pattern{type:\"Identifier\";name: string;}\nгде параметр name со значением require будет соответствовать программному коду в CommonJS системе модулей.\nПостроение графа зависимостей модулей программы Постановка задачи\nПусть существует множество F - множество файлов исходной программы и T - множество узлов абстрактного синтаксического дерева.\nВведем функцию p(f): F^T, представляющую собой синтаксический парсер (переводчик текстового представления исходного кода в дерево AST). Применяя функцию p(f) для каждого элемента из множества модулей исходной программы F заполняем множество вершин соответствующего ей абстрактного дерева T. Необходимо построить граф G:=(V, E), где V - множество вершин графа G (конкретное имя модуля в файловой структуре), E - множество дуг графа (интерфейсы между модулями, будем хранить имена связанных с этой вершиной модулей). Для построения графа G введем функцию nf): F^V, возвращающую имя файла в файловой структуре. Применив функцию n(f) к каждому элементу из множества F, заполним множество вершин V графа G. Зададим функцию l(t): T^E, возвращающую имена связанных с данной вершиной дерева Т модулей. Применяя функцию l(f) к каждому из узлов дерева Т заполняем множество дуг Е графа G .\nОписание алгоритма\nНеобходимо найти в построенном синтаксическом дереве модуля все узлы с вызовами require и import, отвечающих за использование интерфейсов других модулей.\nПусть на каждом из уровней вложенности исходного дерева содержится ni вершин.\nк\nТогда общее кол-во вершин V = X П , где k - количество уровней в исходном дереве.\ni=0\nВ общем случае для поиска узлов отвечающих за вызов require и import придется совершить полный обход дерева. Если рассматривать приложение, программный код которого использует только ESM систему модулей, то согласно спецификации языка программирования, гарантируется факт того, что вызов import всегда находится в корневой области видимости. Это важная информация, поскольку позволяет нам ограничить уровни для поиска. Таким образом, вместо обхода всего множества вершин: {no, nj,..., m} достаточно будет обойти множество, состоящее из {no, nj}, где no является множеством, состоящим из одного элемента - корневого узла. Теперь задача сводится к тому, чтобы обойти всех детей корневого узла.\nИменно поэтому в современном программировании становится актуальным стиль разработки программ, приводящий исходный код приложения от CommonJS к ESM-системе модулей. Исходя из вышеописанного, задачу построения управляющего графа можно разбить на две этапа: преобразование программы из совокупности CommonJS и ESM-модулей к программе состоящей только из ESM-модулей; построение графа зависимостей.\nДля преобразования исходного кода в модульную структуру ESM предлагается следующий алгоритм:\n1.\tПо алгоритму обхода графа в ширину BFS (breadth-first search) находим в исходном коде программы все узлы CallExpression, такие, где callee соответствует вызову require.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n2.\tСоздаем узел ImportDeclaration с параметром source найденным в п. 1.\n3.\tДописываем данный узел в корневую область видимости, делая его ребенком узла Program.\n4.\tУдаляем найденные в п. 1 узлы.\n5.\tПерезаписываем исходный файл.\nПример преобразования\nИсходный программный файл a.js:\nfunction a() { return b};\nconst b = require('c');\nИзменения в AST дереве:\n(Statements\n{+(Import)+} (Function\n(Identifier) (StatementBlock (Return\n(Identifier)))) {-(VariableDeclaration {-(JavaScriptRequire\n{-(Identifier)-})-})-})\nСимволом «+» помечены добавленные узлы, символом «-» помечены удаленные узлы.\nСгенерированный в результате преобразования новый программный код:\nimport b from 'c';\nfunction a() { return b};\nПрограммная реализация\nДля удобной работы с иерархической структурой, содержащей в себе различные классы узлов, было решено использовать паттерн Visitor. Каждый узел AST-дерева является потомком класса ASTNode, в котором реализован метод принятия класса, имплементирующего интерфейс IVisitor. Такое решение позволяет реализовать логику обработки каждого типа узлов отдельно от класса и для каждой из двух исходных задач разработать свой класс:\n1.\tESMPatcherVisitor - реализует логику преобразования исходного кода, работает с узлами следующих классов: ImportDeclaration, CallExpression, Program.\n2.\tGraphBuilderVisitor - реализует логику построения графа зависимостей, работает с узлами следующих классов: ImportDeclaration, Program.\nАлгоритм построения графа следующий.\n1.\tПо алгоритму обхода графа в ширину BFS (breadth-first search) проходим по списку детей узла типа Program, являющихся объектами класса ImportDeclaration и заполняем множество V вершин графа.\n2.\tИз поля source получаем имя используемого модуля и в множество ребер E графа G добавляем соответствующее ребро (имя используемого модуля).\nРис. 1. UML-диаграмма классов программной реализации Результаты апробации предлагаемых алгоритмов\nВычислительные эксперименты проводились на машине со следующими характеристиками:\n•\tпроцессор: 2,7 GHz Intel Core i5;\n•\tпамять: 16 GB 1867 MHz DDR3.\nХарактеристики программного кода, для которого выполнялось построение графа:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tколичество модулей: 2296;\n•\tиспользованные системы модулей: ESM и CommonJS.\nПроцесс проведения экспериментов\nДля каждого из двух вариантов комбинаций модулей (ESM и CommonJS или только ESM) в исходной программе было проведены 50 запусков, в табл. 1 приведено среднее арифметическое времени построения графа зависимостей программы по результатам всех запусков.\nТаблица 1\nРезультаты экспериментов\nИспользованные модульные системы\tВремя выполнения программы, c\nESM + CommonJS\t237\nESM\t125\nЭтап перехода от архитектуры программы ESM + CommonJS к архитектуре ESM при помощи алгоритма преобразования позволил ускорить работу по построения графовой модели зависимостей модулей для конкретного программного кода в 1,9 раза.\nПараллельная реализация алгоритма\nПопробуем реализовать алгоритм обхода списка файлов с помощью распараллеливания вычислений. Для возможности распределенных вычислений применим MapReduce подход. Процесс MapReduce состоит из двух шагов: Map и Reduce.\n1.\tMap: на этом шаге происходит построение дерева AST из получаемого строкового представления исходного кода.\n2.\tReduce: главный узел получает результаты рабочих узлов, производит последовательное объединение множеств ребер, так как данные множества являются непересекающимися. Роль узла могут выполнять как потоки, в случае, если вычисления происходят в рамках одного физического сервера, так и отдельные физические сервера, если речь идет о распределенных вычислениях.\nВычислительные эксперименты по распараллеливанию проводились на машине обладающей следующими характеристиками:\n•\tпроцессор: 2,7 GHz Intel Core i5;\n•\tпамять: 16 GB 1867 MHz DDR3;\n•\tиспользовался NodeJS v12.4.0;\n•\tдля работы с потоками использовался встроенный модуль Worker Threadsl.\nХарактеристики программного кода, для которого строился граф: использованные системы модулей ESM.\nТаблица 2\nРезультаты экспериментов в случае параллельной реализации алгоритма\nВремя работы, с\tВремя работы, c\tВремя работы, c\nКоличество ESM мо-\t1 поток\t2 потока\t4 потока\nдулей в программе\n1000\t87\t64\t67\n2000\t219\t122\t92\n3000\t347\t182\t112\nПолученные результаты показывают, что реализация алгоритма через большое число параллельных потоков не всегда выгодна с точки зрения временных характеристик. Для программ, состоящих из порядка 1000 модулей, увеличение числа параллельных потоков до четырех привело к увеличению (ухудшению) времени работы по сравнению с двух потоковой реализацией (64 с и 67 с соответственно). Для программ, состоящих из порядка 2000 модулей, время выполнения сократилось в 1,7 раза для распараллеливания двумя потоками, а вот увеличение числа параллельных потоков до четырех улучшило время относительно двух параллельной версии незначительно, лишь на 24 %. Для 3000 модулей процесс распараллеливания сократил время для двух потоков в 1,9 и дальнейшее увеличение числа потоков до четырех привело улучшению времени лишь на 38 %.\nСледовательно, увеличение числа параллельных потоков для реализации предлагаемого алгоритма оправданно лишь в случае большого числа модулей ESM.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЗадача поиска циклических зависимостей в графе\nСтоит отметить, что Node.js не поддерживает автоматическое разрешение циклических зависимостей, а также является не компилируемым. Поэтому выявить ошибку циклической зависимости можно только во время работы самого приложения, что может являться узким местом в стабильности программного обеспечения. Решим задачу нахождения циклических зависимостей в AST.\nПостановка задачи\nНеобходимо найти циклы или подтвердить их отсутствие в построенном графе зависимостей модулей.\nОписание алгоритма\nЗадача сводится к поиску цикла в ориентированном графе, для ее решения был использован алгоритм обхода графа в ширину BFS (breadth-first search) с запоминанием посещенных вершин. Для визуализации построенных графов была использована библиотека graphviz.\nРезультаты\nРассмотрим простейший пример циклической зависимости. Исходный проект состоит из 4 файлов:\nFile: a.js require(\"./b.js\"); File: b.js require(\"./c.js\"); File: c.js require(\"./a.js\"); File: d.js require (\"./a.js\");\nПостроенный граф (рис. 2):\nРис. 2. Иллюстрация циклических зависимостей модулей\nКрасным визуально отмечаются узлы в построенном графе зависимостей модулей, отвечающие за модули, участвующие в циклической зависимости. Консольный вывод программы в таком случае (рис. 3):\nКол-во вершин: 4 Кол-во ребер: 4 Время выполнения: 451мс Циклические зависимости: cujs + b.js ■+ c.js\nРис. 3. Консольный вывод программы Выводы\nВ статье рассмотрен метод представления программного кода, использующего модульную структуру, в виде графа зависимостей модулей программы на основе построения и анализа абстрактных семантических деревьев. Проведен ряд вычислительных экспериментов, реализующих предлагаемые алгоритмы. Результаты показали улучшение временных метрик построения графа зависимостей программ, состоящих из ESM-модулей по отношению к программам, состоящим, как из ESM, так и Common.JS-модулей. Это говорит об эф-\nфективности предлагаемого алгоритма построения дерева на основе преобразований модульной структуры программы. Было проведено исследование параллельной реализации алгоритма. Можно достоверно утверждать, что реализация алгоритма даже через два параллельных потока приводит к более эффективной работе (табл. 2). Однако, говорить о том, что большее, чем два, число параллельных потоков всегда дает больший выигрыш по времени реализации неправильно. В дальнейших исследованиях предполагается использовать алгоритм построения графа, как составную часть алгоритма по оптимизации отбора регрессионных тестов из исходного множества для их прогона на измененной части программы.\nБиблиографический список\n1.\tWagner, J. Reduce JavaScript Payloads with Tree Shaking / J. Wagner, 2018. - Режим доступа: https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/ (дата обращения 06.08.2019).\n2.\tSrinuvasu, M.A. Class-Oriented Model Graph Design Based on Abstract Syntax Tree / M.A. Srinuvasu // International Journal of computer sciences and engineering. - 2016. - №2. - Т. 7. - С. 157-168.\n3.\tBreslav, A. DSL development based on target meta-models. Using AST transformations for automating semantic analysis in a textual DSL framework / A. Breslav, 2008. - Режим доступа: https://arxiv.org/ftp/arxiv/papers/0801/0801.1219.pdf (дата обращения 09.08.2019).\n4.\tСидорова, Е.В. Динамическое тестирование программного обеспечения / Е.В. Сидорова. - Нижний Новгород: НГТУ им. Р.Е. Алексеева, 2019. - 83 с.\nДата поступления в редакцию: 14.10.2019\nE.V. Sidorova, N.G. Dmitrieva, N.A. Kalinina\nSOLVING A PROBLEM OF BUILDING A GRAPH OF DEPENDENCIES IN THE PROGRAM MODULES OF THE SYSTEM NODE.JS\nNizhny Novgorod state technical university n.a. R.E. Alekseev\nPurpose: Create the algorithm based on abstract syntactic trees theory for building a graph of the dependencies of the program's modules.\nDesign/methodology/approach: An object of this research is a class of programs, which have a modular structure and consist from ESM and CommonJS modules in the Node.js system. A new proposed approach for creation of the graph of dependencies is based on abstract syntactic trees with following conversion of the program's structure to ESM modules. The algorithm finds cyclic dependencies in the result graph.\nFinding: Results this research showed decrease of time requited to build a graph og dependencies for programs consisting only of ESM modules comparing to these consisting of both ESM and CommonJS modules.\nResearch limitation/implication: The created graph of dependencies can be used for an optimization of the selection of the set of regression test.\nKey words: lexical and syntactical analysis of the source code, abstract syntactical trees AST, the principles of the SOLID coding approach, program's control graph, ESM modules, CommonJS modules, modular system Node.js.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n",
    "download_url": "https://cyberleninka.ru/article/n/reshenie-zadachi-postroeniya-grafa-zavisimostey-programmnyh-moduley-v-sisteme-node-js/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/analiz-metodov-prostranstvennoy-navigatsii-i-trassirovki-marshrutov-s-lineynymi-ogranicheniyami",
    "slug": "analiz-metodov-prostranstvennoy-navigatsii-i-trassirovki-marshrutov-s-lineynymi-ogranicheniyami",
    "title": "Анализ методов пространственной навигации и трассировки маршрутов с линейными ограничениями",
    "abstract_description": "Данная статья посвящена исследованиям проблем, связанных с навигацией внутри различных помещений, имеющих сложную архитектуру. В первой части проведен сравнительный анализ существующих систем, методов и технологий определения местоположения, рассмотрены их основные характеристики, достоинства и недостатки. Во второй части статьи рассмотрены проблемы построения навигационной системы, графической визуализации и поиска оптимальных маршрутов. Предложены оптимальные решения по графическому представлению карт зданий, рассмотрены различные программные технологии и алгоритмы построения навигационных маршрутов. В заключении приведены преимущества выбранного решения для построения навигации, даны рекомендации по применению.",
    "full_text_body": "\n\n\n\n\uFEFFМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nDOI: 10.18454/IRJ.2015.42.107 Дубовик Н.Н.1, Лавров А.В.2, Ногин О.А.1, Туманов В.М.1\n1\tМагистр, 2кандидат технических наук, доцент,\nМГТУ им. Н.Э. Баумана, кафедра «Проектирование и технология производства электронной аппаратуры» АНАЛИЗ МЕТОДОВ ПРОСТРАНСТВЕННОЙ НАВИГАЦИИ И ТРАССИРОВКИ МАРШРУТОВ\nС ЛИНЕЙНЫМИ ОГРАНИЧЕНИЯМИ\nАннотация\nДанная статья посвящена исследованиям проблем, связанных с навигацией внутри различных помещений, имеющих сложную архитектуру. В первой части проведен сравнительный анализ существующих систем, методов и технологий определения местоположения, рассмотрены их основные характеристики, достоинства и недостатки. Во второй части статьи рассмотрены проблемы построения навигационной системы, графической визуализации и поиска оптимальных маршрутов. Предложены оптимальные решения по графическому представлению карт зданий, рассмотрены различные программные технологии и алгоритмы построения навигационных маршрутов. В заключении приведены преимущества выбранного решения для построения навигации, даны рекомендации по применению.\nКлючевые слова: навигация, здания со сложной архитектурой, трассировка, ориентация, геометрия, трехмерная графика, алгоритмы, математическое обеспечение.\nDubovik N.N.1, Lavrov A.V.2, Nogin O.A.1, Tumanov V.M.1 1Master, 2PhD in Engineering, Associate Professor,\nBMSTU, Department \"Design and technology of electronic equipment\"\nANALYSIS OF METHODS OF SPATIAL NAVIGATION AND TRACE OF ROUTE WITH LINEAR\nCONSTRAINTS\nAbstract\nThis article is devoted to research issues related to navigation within the various rooms, which have a complex structure. The first part is a comparative analysis of existing systems, methods and technologies of positioning, considered their main characteristics, strengths and weaknesses. The second part of the article deals with the problems of building a navigation system, graphical visualization and optimal route search. Provided optimum solutions for the graphic representation of maps of buildings, considered various software technologies and algorithms for the construction of navigation routes in custody are the advantages of the chosen solution for the construction of the navigation recommendations for use.\nKeywords: navigation, a building with a complex structure, tracing, orientation, geometry, three-dimensional graphics, algorithms, software.\nВВЕДЕНИЕ\nРешению проблем гео- и локальной навигации посвящено большое количество работ, обзор которых приведен в [ 1], однако проблемы локальной навигации - навигации внутри различных зданий и помещений остается актуальной. Следует отметить и значительную заинтересованность в сервисных услугах, предоставляемых на основе местоположения клиента и его предпочтений. Здания с каждым днем становятся все более объемными, а их структура усложняется, в них вносятся планировочные изменения, которые не всегда оперативно учитываются. В сооружениях такого типа уверенно могут ориентироваться лишь постоянные посетители. Очевидно, что в такой ситуации на освоение в незнакомом месте тратится огромное количество времени. Таким образом, возникает потребность в сервисе, который поможет любому его пользователю максимально просто и без траты лишнего времени добраться до нужного ему места в здании. Такие системы, как: GPS, Galileo, ГЛОНАСС, iBeacon, WPS и др., обеспечивающие работу таких сервисов, как Google Maps, NAVIMIND, 2GIS и др., ориентированы на решение задач геонавигации и проблемы локальной навигации не решают. Стоит так же отметить, что решения проблемы локальной навигации часто являются актуальными не только внутри, но и вне зданий - в условиях плотной застройки часто неэффективны даже системы, предназначенные специально для навигации на открытой местности.\nТак как здания становятся все более громоздкими, классические методы навигации сильно теряют в эффективности. Решение в виде настенных планов уже не являются наглядными, особенно если размеры здания весьма велики. Зачастую конфигурация этажей разнится, что вносит еще больше путаницы в попытку сориентироваться и определить свое местоположение в здании. Вариант использования указателей так же крайне неэффективен, так как они используются лишь для обозначения самых важных помещений. Если же попытаться установить в здании указатели для всех помещений, то посетитель окажется просто переполнен количеством информации, в которой ему будет необходимо разобраться.\nРешением этой проблемы может являться автоматическая система, реализующая следующий функционал и обладающая такими свойствами:\n- единое ядро для мобильного и веб-приложения;\n- использование 2D и 3D - карт;\n- построение наиболее простых и понятных маршрутов;\n- упрощение взаимодействия клиентов (посетителей) и зданий;\n- возможность пользовательского развития, когда пользователи имеют возможность вносить (после модерации) оперативные изменения в планы помещений;\n- предоставление актуальной информации, такой как график работы, контактная информация и т.п.\nЗадачи прокладки эффективных маршрутов внутри зданий можно отнести к классическим задачам трассировки с линейными и пространственными ограничениями, которые хорошо проработаны и эффективно применяются в радиоэлектронике [2-9].\n35\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\n1\tСИСТЕМЫ ГЕОЛОКАЦИИ И ИХ ПАРАМЕТРЫ\nВ данный момент существуют несколько технологий, предназначенных для определения местоположения устройства. Системы, базирующиеся на этих технологиях, могут работать как внутри, так и вне зданий. Для детального анализа таких систем сведем их основные характеристики в таблицу 1.1 [1].\nТаблица 1.1 - Системы определения местоположения\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНазвание\tКраткое описание\tДостоинства\tНедостатки\nGPS - Global Positioning System\tGPS - американская спутниковая система навигации, определяющая местоположение.\tШирокое распространение, стабильная работа на большинстве устройств.\tТочность позиционирования составляет 2-4 метра, в помещениях сигнал со спутника часто теряется.\nGalileo\tGalileo - спутниковая система навигации, создаваемая Евросоюзом и Европейским космическим агентством. Ввод в эксплуатацию - 2016 год.\tСовместимость с системой GPS Точность определения позиции 0.5-1 метр.\tНизкая совместимость с современными навигационными приборами. Гражданское применение - не основная задача системы.\nГЛОНАСС - Глобальная навигационная спутниковая система\tГЛОНАСС - Российская спутниковая система навигации. Вторая глобальная система навигации (после GPS), работающая в данный момент.\tВысокая точность в северном полушарии, хорошо дополняет GPS в работе.\tТочность определения координат не стабильна, в среднем 3-6 метров. В помещениях сигнал часто теряется.\niBeacon\tiBeacon - сервис компании Apple, основан на навигации относительно Bluetooth -маячков.\tРаботает на устройствах под управлением IOS и Android. Обладает высокой (1-1.5 м) точностью.\tТребуется очень плотное расположение маячков, сигнал плохо проходит через препятствия\nWPS\tWPS - технология определения местоположения с помощью Wi-Fi роутеров. Положение определяется по силе сигнала от роутера.\tВысокая точность определения местоположения. В местах с плотной Wi-Fi сетью не требует дополнительного оборудования.\tТехнология совместима только с Android -устройствами.\nОднако местоположение устройства в виде координат необходимо обработать и привести к удобному виду.\nДля эффективной обработки таких данных о местоположении и построения маршрутов предназначены различные навигационные сервисы. Подобные сервисы привязывают данные о местоположении к специально обработанным картам местности или зданий, на которых затем строятся маршруты. Для повышения удобства такие сервисы часто выпускаются так же и в виде приложений для смартфонов, в которых пользователь может по своему усмотрению редактировать необходимые ему карты. Ключевым свойством подобных сервисов является корректировка данных о картах, которая позволяет быстро и своевременно вносить изменения, что в свою очередь обеспечивает постоянную актуальность информации.\nВ таблице 1.2 проанализируем различные представленные сейчас на рынке навигационные сервисы.\n36\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nТаблица 1.2 - Навигационные сервисы\nНазвание\tКраткое описание\tДостоинства\tНедостатки\nGoogle Maps\tGoogle Maps -сервис, распространяемый компанией Google, представляющий собой графическую и спутниковую карты, а так же карту сети автодорог.\tБольшое количество карт различных городов, легкая встраиваемость в приложения.\tОтсутствуют карты зданий. Местоположение определяется только по GPS.\nNAVIMIN D\tNAVIMIND - навигационный сервис, предназначенный для навигации в торговых центрах\tНаличие большого количества схем зданий. Система работает как на терминале, так и в мобильном приложении.\tИмеется только приложение для IOS. Отсутствует автоматическое определение местоположения.\n2GIS\t2GIS - Российский картографический сервис, предоставляющий карты, справочники и информационное сопровождение.\tБольшое количество информации. Имеются приложения для всех платформ и устройств.\tОтсутствуют карты зданий, местоположение определяется по GPS/ ГЛОНАСС.\nИз приведенных выше таблиц видно, что на данный момент на рынке навигационных сервисов нет системы, которая бы автоматически определяла местоположение устройства и эффективно прокладывала между двумя произвольными объектами внутри здания. Таким образом необходимость разработки навигационной системы, реализующей подобный функционал является крайне актуальной. В связи с этим возникает проблема выбора средств визуализации карт зданий и методов построения оптимального маршрута.\n2\tИНС - ИНФОРМАЦИОННО - НАВИГАЦИОННАЯ СИСТЕМА\n2.1\tПреимущества ИНС\nВ качестве примера для анализа принципов реализации indoor - систем рассмотрим информационно -навигационную систему (ИНС), которую авторский коллектив реализует на базе МГТУ им. Н.Э. Баумана. Что из себя представляет ИНС?\nВо-первых, это модульная система, состоящая из нескольких подсистем, которая позволяет пользоваться всем арсеналом функций навигации на максимальном количестве устройств: терминал, планшет, смартфон, web и т.д. (см. рис. 1). Это достигается благодаря выбранным технологиям, которые позволяют получить не только удобный интерфейс взаимодействия с пользователем, но и эффективную систему, обеспечивающую высококлассную навигацию по выбранному объекту, в данном случае по МГТУ им. Н.Э. Баумана, некоторые из зданий которого датируются 19 веком и имеют сложные архитектурные решения.\n37\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nВо-вторых, в системе помимо 2D карт используются и 3Б-карты, так как только они могут удовлетворить требованию качественной и понятной прокладки маршрута. Зачастую в зданиях со сложной архитектурой 2 D - карты не помогают, а наоборот вносят путаницу.\nРассмотрим эту проблему на примере ставшей нарицательной проблемой поиска аудитории 501Ю ГУК МГТУ им.Н.Э.Баумана: Ее расположение на 2D карте МГТУ им. Н.Э. Баумана показано на рис. 2:\nРис. 2 - 2D карта 5 этажа южного крыла - аудитория 501-Ю\nПроход к этой аудитории напрямую через центральную часть здания невозможен, так как все переходы закрыты. Попасть в аудиторию 501 Ю можно только поднявшись снизу и только по одной - единственной лестнице (рис. 3):\nРис. 3 - 2D карта 5 этажа южного крыла - путь к аудитории 501-Ю\nТаким образом, студенты сталкиваются с другой проблемой: как найти эту самую лестницу? Попасть на нее так же довольно сложно: гарантированный проход есть только на 3 этаже. 3D карты с легкостью решают эту проблему, наглядно показывая весь путь до необходимой аудитории, как это показано на рис. 4.\n38\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nРис. 4 - 3D путь до аудитории 501-Ю\nПостроенный 3D путь наглядно показывает кратчайший (а часто и единственный) маршрут, по которому можно быстрее всего дойти до необходимой аудитории, аналогичные проблемы свойственны большинству зданий старой постройки, а также современным торговым комплексам.\n2.2\tАрхитектура и виды обеспечений ИНС\nДля обеспечения работоспособности сервиса на максимальном количестве устройств используются следующие Web-технологии: HTML5, CSS3, Javascript. Но это лишь скелет программной составляющей. Для реализации необходимых функций используется огромное количество фреймворков и библиотек для Javascript. Так же для требуемой визуализации используется графическая библиотека WebGL [11].\nWebGL (Web-based Graphics Library) — программная библиотека для JavaScript, позволяющая создавать интерактивную 3D-графику, функционирующую в широком спектре совместимых с ней веб-браузеров. За счёт использования низкоуровневых средств поддержки OpenGL, часть кода на WebGL выполняется непосредственно на видеокартах. WebGL — это контекст элемента canvas HTML, который обеспечивает API 3D графику без использования плагинов.\nБиблиотека построена на основе OpenGL ES 2.0 и обеспечивает API для 3D-графики, использует HTML5-элемент canvas, также оперирует с DOM. Автоматическое управление памятью предоставляется языком JavaScript.\nНа сегодняшний день имеются эффективные реализации WebGL для большинства десктопных и мобильных браузеров: Mozilla Firefox, Google Chrome, Safari, Opera, IE11. В состав рабочей группы разработавший стандарт, входят: Khronos Group, Apple Safari, Google Chrome, Mozilla Firefox и Opera, а также специалисты AMD и Nvidia.\nWebGL [11] реализует императивный подход, то есть программный код должен точно описывать алгоритм преобразования данных для построения сцены. Несмотря на сложность, такой подход предоставляет гораздо больше возможностей для редактирования и обработки 3 D - сцены.\nОриентация на WebGL обусловлена следующими преимуществами:\n-\tкроссплатформенность —WebGL может использоваться практически для всех мобильных и десктопных браузеров;\n-\tоткрытость платформы, доступность и бесплатность.\nВ таблице 2.2.1 приведен сравнительный анализ алгоритмов поиска кратчайшего маршрута, которые могут использоваться для работы навигационных графов системы.\n39\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nТаблица 2.2.1 - Сравнение алгоритмов построения оптимального пути\nАлгоритм\tСложность\tНазначение\tОсобенности\nБеллмана-Форда [12]\tO(n*m)\tНахождение кратчайшего расстояния от одной из вершин графа до всех остальных\tДопускает рёбра с отрицательным весом\nДейкстры [13]\tO(m + n*log(n))\tАналогично алгоритму Беллмана-Форда\tРабота только с ребрами, имеющими положительный вес\nA* (ASTAR) [14]\tO(m)\tНахождение маршрута с наименьшей стоимостью пути\tСравнение различных путей по эвристической функции\nЛи [15]\tO(n+m)\tНаходит путь между двумя вершинами графа, с минимальным количеством промежуточных вершин (ребер)\tПрименяется при трассировке электрических соединений на кристаллах микросхем и на печатных платах.\nДжонсона [16]\tO(n2log(n) + n*m)\tНахождение кратчайшего пути между всеми парами вершин взвешенного ориентированного графа.\tСовместное использование алгоритмов Дейкстры и Беллмана-Форда\nФлойда-Уоршелла [17]\tO(n3)\tНахождение кратчайшего пути между всеми вершинами взвешенного ориентированного графа\nВ рассматриваемой системе используется алгоритм A*(ASTAR) [14].\nВо время исследований скорости работы алгоритма Дейкстры в 1964 году Н. Нильсен предложил улучшить уже имеющийся алгоритм путем дополнительного использования эвристики. Новый алгоритм был назван А1. В течении следующих трех лет коллега Нильсена Б. Рафаэль занимался улучшением и оптимизацией алгоритма А1, но значительного улучшения характеристик ему достичь не удалось. Тем не менее, следующая итерация алгоритма получила название А2. Годом спустя П. Э. Харт смог достичь оптимальности алгоритма благодаря дополнительным изменениям в эвристической части алгоритма. Так же он смог доказать, что в определенных условиях его версия алгоритма А2 была наиболее эффективной среди алгоритмов поиска маршрута в графе. Эта версия алгоритма была названа А*, где звездочкой были обозначены все прочие итерации алгоритма [14].\nАлгоритм А* используется для нахождения кратчайшего пути между двумя любыми вершинами графа, поочередно просматривая все возможные пути в графе, пока не находит наиболее короткий. От других алгоритмов А* отличает то, что при сравнении учитывается весь пройденный до вершины путь (функция g(x) отвечает именно за это). Алгоритм поэтапно просматривает все смежные вершины, двигаясь в сторону пути с наименьшим весом (функция f(x), определяющая общий вес пути). На каждом шаге алгоритм так же обрабатывает все оставшиеся пути до еще не пройденных вершин, помещая их в очередь по приоритету. Этот приоритет определяется общей функцией f(x) = g(x) + h(x), где h(x) - эвристическая составляющая пути. Алгоритм продолжает циклично просматривать все пути в очереди до тех пор, пока не найдет путь с наименьшим значением функции f(x). Этот путь и является искомым кратчайшим путем между двумя вершинами графа.\nПоследовательность шагов используемого алгоритма показана на рисунке 3.\n40\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\nРис. 3 - Основные шаги алгоритма А*\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИз множественных решений выбирается решение с наименьшей стоимостью. Чем меньше эвристическая функция h(x), тем больше приоритет. Таким образом, итоговым маршрутом является не первый попавшийся, а самый эффективный.\nЗАКЛЮЧЕНИЕ\nСозданная информационно-навигационная система решает множество важных задач, связанных с проблемами навигации в зданиях со сложной архитектурой, объединяя наиболее существенные возможности (функции) в единой системе.\nИНС обладает сразу несколькими преимуществами:\n-\tинформативность;\n-\tкроссплатформенность;\n-\tнавигация с использованием как 2D -, так и 3D - карт\nСистема дает возможность получить любую интересующую пользователя информацию об объекте или структуре, режимах работы или проводимых мероприятиях.\nПрограммная реализация системы и используемые решения позволяют системе быстро и эффективно работать на широком спектре платформ и устройств.\nВ свою очередь использование интерактивных 2D - и 3D - карт помогает легко сориентироваться в зданиях любой сложности.\nРазработанная система является универсальным и удобным инструментом, способным быстро и эффективно решить любую задачу, связанную с предоставлением информации касательно здания, в котором применяется ИНС.\nЛитература\n1.\tШепель В. И., Ергалиев Д. С., Тулегулов А. Д. Сравнительный анализ глобальных навигационных спутниковых систем // Труды Международного симпозиума «Надежность и качество». Том 1. 2012.\n2.\tКамышная Э.Н., Маркелов В.В., Соловьев В.В. Конструкторско-технологические расчеты электронной аппаратуры: Учебное пособие. - М. Изд-во МГТУ им. Н. Э. Баумана, 2014.\n3.\tАндреев К.А., Власов А.И., Камышная Э.Н., Тиняков Ю.Н., Лавров А.В. Автоматизированная пространственная оптимизация компоновки блока управления датчика давления по тепловому критерию // Инженерный журнал: наука и инновации. - 2013. № 6 (18). - С. 51.\n4.\tКамышная Э.Н., Маркелов В.В., Соловьев В.В. Формальное представление электрических принципиальных схем для решения задач автоматизированного проектирования электронной аппаратуры: Учебное пособие. - М.: Изд-во МГТУ им. Н.Э. Баумана, 2011. - 44, [4] с.\n5.\tПрименение методов искусственного интеллекта в САПР технологических процессов производства электронной аппаратуры: Учебное пособие / Григорьев В.П., Камышная Э.Н., Нестеров Ю.И., Никитин С.А. - М.: Изд-во МГТУ им. Н.Э. Баумана, 1998. 48 с.\n6.\tЕ.М. Парфенов, Э.Н. Камышная, В.П. Усачов. Проектирование конструкций радиоэлектронной аппаратуры: Учеб. Пособие для вузов. - М.: Радио и связь, 1989. - 272 с.\n7.\tАлексеев В.Г., Камышная Э.Н., Усачев В.П. Автоматизированная компоновка схем ЭВА и РЭА по конструктивным модулям первого уровня: Методические указания по курсовому и дипломному проектированию. -\nМ.: Изд-во МВТУ им. Н.Э. Баумана, 1988. - 40 с.\n41\nМеждународный научно-исследовательский журнал ■ № 11 (42) ■ Часть 2 ■ Декабрь\n8.\tН. Л. Дембицкий, А. В. Назаров. Модели и методы в задачах автоматизированного конструирования радиотехнических устройств - Москва, Изд-во МАИ. 2011. 203 с. Сер. Научная библиотека.\n9.\tНазаров А.В. Оптимизация расстановки элементов печатных модулей методом компактного размещения // Интеграл. 2014. № 4. С. 12-14.\n10.\tВласов А.И., Лыткин С.Л., Яковлев В.Л. Краткое практическое руководство разработчика по языку PL/SQL -Москва, Сер. Библиотечка журнала \"Информационные технологии\". Том 2. 2000.\n11.\tWebGL [Электронный ресурс] URL: https://ru.wikipedia.org/wiki/WebGL (дата обращения: 10.11.2015).\n12.\tBellman-Ford algorithm [Электронный ресурс] URL: https://goo.gl/rsxPd3\n13. Dijkstra's algorithm [Электронный ресурс] URL: https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm (дата обращения: 10.11.2015).\n14.\tA* search algorithm [Электронный ресурс] URL: https://en.wikipedia.org/wiki/A*_search_algorithm (дата обращения: 10.11.2015).\n15.\tLee algorithm [Электронный ресурс] URL: https://en.wikipedia.org/wiki/Lee_algorithm (дата обращения:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n10.11.2015)\t.\n16. Johnson's algorithm [Электронный ресурс] URL: https://en.wikipedia.org/wiki/Johnson%27s_algorithm (дата обращения: 10.11.2015).\n17.\tFloyd-Warshall algorithm [Электронный ресурс] URL: https://goo.gl/elqccH (дата обращения: 10.11.2015).\n18.\tДубовик Н. Н., Ногин О. А., Туманов В. М., Лагута А. Е. Исследование проблем 3D навигации в условиях пространственных ограничений // 17-ая международная конференция «Наукоемкие технологии и интеллектуальные системы». Том 2. 2015. [Электронный ресурс] URL: https:// http://iu4.ru/konf/2015_ts/03_tom02.pdf (дата обращения:\n10.11.2015)\t.\n19.\tДубовик Н. Н., Ногин О. А., Туманов В. М. Информационно -навигационная система «ИНС» // Международный инвестиционный форум «WEB - Ready 2015». [Электронный ресурс] URL: https:// web-ready.ru/files/ins_1.doc (дата обращения: 10.11.2015).\nReferences\n1.\tShepel' V. I., Ergaliev D. S., Tulegulov A. D. Sravnitel'nyj analiz global'nyh navigacionnyh sputnikovyh sistem // Trudy Mezhdunarodnogo simpoziuma «Nadezhnost' i kachestvo». Tom 1. 2012.\n2.\tKamyshnaja Je.N., Markelov V.V., Solov'ev V.V. Konstruktorsko-tehnologicheskie raschety jelektronnoj apparatury: Uchebnoe posobie. - M. Izd-vo MGTU im. N. Je. Baumana, 2014.\n3.\tAndreev K.A., Vlasov A.I., Kamyshnaja Je.N., Tinjakov Ju.N., Lavrov A.V. Avtomatizirovannaja prostranstvennaja optimizacija komponovki bloka upravlenija datchika davlenija po teplovomu kriteriju // Inzhenernyj zhurnal: nauka i innovacii. - 2013. № 6 (18). - S. 51.\n4.\tKamyshnaja Je.N., Markelov V.V., Solov'ev V.V. Formal'noe predstavlenie jelektricheskih principial'nyh shem dlja reshenija zadach avtomatizirovannogo proektirovanija jelektronnoj apparatury: Uchebnoe posobie. - M.: Izd-vo MGTU im.\nN.Je. Baumana, 2011. - 44, [4] s.\n5.\tPrimenenie metodov iskusstvennogo intellekta v SAPR tehnologicheskih processov proizvodstva jelektronnoj apparatury: Uchebnoe posobie / Grigor'ev V.P., Kamyshnaja Je.N., Nesterov Ju.I., Nikitin S.A. - M.: Izd-vo MGTU im. N.Je. Baumana, 1998. 48 s.\n6.\tE.M. Parfenov, Je.N. Kamyshnaja, V.P. Usachov. Proektirovanie konstrukcij radiojelektronnoj apparatury: Ucheb. Posobie dlja vuzov. - M.: Radio i svjaz', 1989. - 272 s.\n7.\tAlekseev V.G., Kamyshnaja Je.N., Usachev V.P. Avtomatizirovannaja komponovka shem JeVA i RJeA po konstruktivnym moduljam pervogo urovnja: Metodicheskie ukazanija po kursovomu i diplomnomu proektirovaniju. - M.: Izd-vo MVTU im. N.Je. Baumana, 1988. - 40 s.\n8.\tN. L. Dembickij, A. V. Nazarov. Modeli i metody v zadachah avtomatizirovannogo konstruirovanija radiotehnicheskih ustrojstv - Moskva, Izd-vo MAI. 2011. 203 s. Ser. Nauchnaja biblioteka.\n9.\tNazarov A.V. Optimizacija rasstanovki jelementov pechatnyh modulej metodom kompaktnogo razmeshhenija // Integral. 2014. № 4. S. 12-14.\n10.\tVlasov A.I., Lytkin S.L., Jakovlev V.L. Kratkoe prakticheskoe rukovodstvo razrabotchika po jazyku PL/SQL -Moskva, Ser. Bibliotechka zhurnala \"Informacionnye tehnologii\". Tom 2. 2000.\n11.\tWebGL [Jelektronnyj resurs] URL: https://ru.wikipedia.org/wiki/WebGL (data obrashhenija: 10.11.2015).\n12.\tBellman-Ford algorithm [Jelektronnyj resurs] URL: https://goo.gl/rsxPd3\n13.\tDijkstra's\talgorithm\t[Jelektronnyj\tresurs]\tURL:\thttps://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\t(data\nobrashhenija: 10.11.2015).\n14.\tA* search algorithm [Jelektronnyj resurs] URL: https://en.wikipedia.org/wiki/A*_search_algorithm (data obrashhenija:\n10.11.2015)\t.\n15.\tLee algorithm [Jelektronnyj resurs] URL: https://en.wikipedia.org/wiki/Lee_algorithm (data obrashhenija:\n10.11.2015)\t.\n16.\tJohnson's\talgorithm\t[Jelektronnyj\tresurs]\tURL:\thttps://en.wikipedia.org/wiki/Johnson%27s_algorithm\t(data\nobrashhenija: 10.11.2015).\n17.\tFloyd-Warshall algorithm [Jelektronnyj resurs] URL: https://goo.gl/elqccH (data obrashhenija: 10.11.2015).\n18.\tDubovik N. N., Nogin O. A., Tumanov V. M., Laguta A. E. Issledovanie problem 3D navigacii v uslovijah prostranstvennyh ogranichenij // 17-aja mezhdunarodnaja konferencija «Naukoemkie tehnologii i intellektual'nye sistemy». Tom 2. 2015. [Jelektronnyj resurs] URL: https:// http://iu4.ru/konf/2015_ts/03_tom02.pdf (data obrashhenija: 10.11.2015).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n19.\tDubovik N. N., Nogin O. A., Tumanov V. M. Informacionno-navigacionnaja sistema «INS» // Mezhdunarodnyj investicionnyj forum «WEB - Ready 2015». [Jelektronnyj resurs] URL: https:// web-ready.ru/files/ins_1.doc (data obrashhenija: 10.11.2015).\n42\n",
    "download_url": "https://cyberleninka.ru/article/n/analiz-metodov-prostranstvennoy-navigatsii-i-trassirovki-marshrutov-s-lineynymi-ogranicheniyami/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/rozrobka-instrumentalnih-zasobiv-dlya-pidtrimki-protsesu-analizu-diagram-potokiv-danih",
    "slug": "rozrobka-instrumentalnih-zasobiv-dlya-pidtrimki-protsesu-analizu-diagram-potokiv-danih",
    "title": "РОЗРОБКА іНСТРУМЕНТАЛЬНИХ ЗАСОБіВ ДЛЯ ПіДТРИМКИ ПРОЦЕСУ АНАЛіЗУ ДіАГРАМ ПОТОКіВ ДАНИХ",
    "abstract_description": "Розглянуто основні особливості існуючих систем управління бізнес-процесами, їх роль в автоматизації діяльності по накопиченню та розповсюдженню знань про діяльність організації, що представляються за допомогою моделей бізнес-процесів, зокрема діаграм потоків даних. Розроблено інструментальні засоби для підтримки процесу аналізу діаграм потоків даних в системі управління бізнес-процесами Bizagi",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.042 : 004.94\nБ01: 10.15587/2313-8416.2017.118799\nРОЗРОБКА 1НСТРУМЕНТАЛЬНИХ ЗАСОБ1В ДЛЯ П1ДТРИМКИ ПРОЦЕСУ АНАЛ1ЗУ Д1АГРАМ ПОТОК1В ДАНИХ\n© А. М. Копп, Д. Л. Орловський\nРозглянуто основт особливостг Iснуючих систем управлгння бгзнес-процесами, Их роль в автоматизацИ дгяльностг по накопиченню та розповсюдженню знань про дгяльнгсть органгзацИ, що представляються за допомогою моделей бгзнес-процесгв, зокрема д1аграм потошв даних. Розроблено тструментальнI за-соби для пгдтримки процесу аналгзу д1аграм потошв даних в систем1 управлгння бгзнес-процесами Bizagi Ключовi слова: дгаграми потоюв даних, системи управлгння бгзнес-процесами, моделювання, анализ, Iн-струментальнI засоби\n1.\tВступ\nВ даний час мае мюце змщення акценпв ввд структурного пдходу до об'ектно-орiентованоro шд-ходу до аналiзу i проектування систем. Незважаючи на це, в бiзнес-аналiзi i в аналiзi шформацшних систем як i рашше широко i ефективно використовуються струк-турш нотаци. Одним з основних шструменпв структурного аналiзу i проектування шформащйних систем е дiаграми потошв даних DFD (Data Flow Diagram). Вони призначеш для представлення процесiв обробки шформацп та описують систему, що моделюеться, як мережу бiзнес-процесiв, пов'язаних мгж собою за допомогою потошв даних. Створюваш моделi використовуються для накопичення знань про процеси оргашзацп. Для автоматизацй' ще! дiяльностi використовуються BPM-системи (Business Process Management).\nПеред тим як модель бiзнес-процесу потрапить в базу даних BPM-системи, вона повинна бути про-аналiзована з точки зору наявносп недолшв, пов'язаних з суб'ективним характером побудови моделей бiзнес-процесiв. У той час як шструментальш засоби зазвичай контролюють тiльки дотримання синтаксису то! чи шшо! нотаци моделювання.\nТаким чином, актуальною стае проблема ана-лiзу накопичуваних моделей бiзнес-процесiв, що представляють знання про процеси оргашзацп, в тому числ^ i у виглядi дiаграм DFD.\n2.\tАналiз лiтературних даних та постановка проблеми\nДля тдтримки безперервного вдосконалення бiзнес-процесiв вiдповiдно до концепци BPM, потрь бнi шформацшш технологи, що дозволяють моделю-вати, аналiзувати i вдосконалювати бiзнес-процеси в оргашзацп. В якосл таких шструменпв виступають BPM-системи, що дозволяють здшснювати шдтрим-ку всього циклу BPM [1].\nЕволюцiя BPM-систем i тенденци ринку вщо-бражаються у звггах консалтингових компанiй, таких як Gartner Group i Forrester Research [2, 3]. Дослщни-цька та консалтингова компашя Gartner щорiчно пуб-лшуе результати аналiзу ринку в обласп BPM-систем у виглядi так званих «мапчних квадранпв».\nЗпдно зi звгтом Gartner, до квадранту <шдери» потрапили постачальники BPM-систем Pegasystems, Appian i IBM. У квадрантах «претенденти» та «про-видщ» найкращi результати мають Bizagi i Software\nAG [2]. За вераею незалежно1 аналiтичноï компанп Forrester Research, постачальники Pegasystems, Appian i IBM також e «лщерами», а Bizagi i Software AG належать до «сильних виконавщв» [3].\nДля моделювання бiзнес-процесiв в розгляну-тих BPM-системах використовуеться нотащя BPMN (Business Process Model and Notation) [4]. Метою дано! нотаци е шдтримка моделювання бiзнес-процесiв, як для техшчних, так i для бiзнес-користувачiв, з ви-користанням iнструментiв, iнтуïтивно зрозумiлих для бiзнес-користувачiв, але здатних представляти скла-дну семантику процесу.\nЗа результатами звтв Gartner i Forrester, а також аналзу особливостей пропонованих BPM-систем [2], для подальшого розгляду було обрано систему управлшня бiзнес-процесами Bizagi BPM Suite. Дана BPM-система включае шструменти моделювання (Bizagi Modeler), автоматизацп (Bizagi Studio) i виконання бiзнес-процесiв (Bizagi Engine) [4].\nВиршальним фактором для вибору Bizagi BPM Suite e безкоштовнсть засобiв Bizagi Modeler i Bizagi Studio, можливостей яких достатньо для моделювання, автоматизаци, а також виконання бiзнес-процесiв в ре-жимi розробки [4]. Iншi ж розглянут BPM-системи, крiм Software AG, який надае безкоштовний iнструмент для моделювання бiзнес-процесiв, не мають безкоштов-них або демонстрацiйних версш. Основною перевагою Bizagi BPM Suite е гнучк можливосп по iнтеграцiï з зо-внiшнiми системами i застосунками [2].\nУ роботах [5, 6] розглядаеться необхвдшсть використання BPM-систем в зв'язку зi зростанням ш-лькосп та динамiчностi знань про оргашзацш. Для збору, зберiгання i поширення органiзацiйних знань використовуються iнструменти моделювання та управлшня бiзнес-процесами, в той час як для представлення знань послуговують моделi бiзнес-про-цеав [6]. Застосування процесного подходу для вдосконалення дгяльносп з управлшня знаннями оргаш-зацй' розглядаеться в робот [7], при цьому наголошу-еться на необхiдностi додаткового налаштування та iнтеграцiï iнструментальних засобiв.\nВ робот [8] розглядаеться розробка програм-ного забезпечення для побудови та перевiрки дiаграм DFD на ввдповщшсть правилам побудови. При цьому актуальною стае проблема сшльного використання такого автономного застосунка з уже юнуючими в оргашзацп програмними рiшеннями. У разi викорис-\nтання BPM-систем i, зокрема, Bizagi BPM Suite, дана проблема виршуеться за рахунок можливостей ште-грацп на рiвнi даних, Be6-cepBiciB i застосуншв [4]. KpiM того, функцюнальшсть Bizagi може бути роз-ширена з використанням вбудованих елементiв ште-рфейсу, якi називаються вiджетами (Widgets).\n3.\tМета та задачi дослвдження\nМета дослвдження - розробка шструменталь-них засобiв для пiдтримки процесу аналiзу дiаграм потоков даних в системi управлiння бiзнес-процесами Bizagi BPM Suite.\nДля досягнення мети були поставленi так1 задачi:\n-\tмоделювання процесу аналiзу дiаграм пото-шв даних за допомогою Bizagi Modeler;\n-\tавтоматизацш процесу аналiзу дiаграм пото-кiв даних за допомогою Bizagi Studio;\n-\tпрограмна реалзацш подходу до аналiзу дiаг-рам потоков даних;\n-\tрозробка ввджета для BPM-системи Bizagi, призначеного для воображения результатiв аналiзу дiаграм потоков даних.\n4.\tМатерiали i методи дослвдження\nАналiз дiаграм потоков даних включае наступ-нi етапи:\n1)\tналаштування властивостей дiаграми (автор, проект, дата створення i дата останньо! змiни, номер вузла i його найменування);\n2)\tналаштування елементiв дiаграми (додаван-ня, змiна або видалення робiт, зовнiшнiх сутностей i накопичувачiв даних);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n3)\tналаштування потоков даних;\n4)\tзв'язування елементiв дiаграми за допомогою потошв даних;\n5)\tаналiз дiаграми за допомогою запропонова-ного ранiше [9] подходу до аналiзу i вдосконалення дiаграм потоков даних, в основi якого полягае метод аналiзу зв'язк1в.\nПiсля того, як етапи процесу аналiзу дiаграм DFD були визначенi, за допомогою шструменпв моделювання Bizagi Modeler була побудована модель даного процесу в нотаци BPMN (рис. 1).\nАвтоматизащя процесу аналiзу дiаграм DFD здшснюеться за допомогою iнструментiв Bizagi Studio i включае наступи етапи:\n1)\tмоделювання даних на етат «Model Data» (рис. 2);\n2)\tстворення користувацьких форм на еташ «Define Forms»;\n3)\tвизначення бiзнес-правил на етат «Business Rules».\nРис. 1. Модель процесу анатзу дiаграм потокв даних\nРис. 2. Структура бази даних, яка використовуеться для аналiзу дiаграм DFD\nНа OCHOBÎ побудовано1 моделi даних (рис. 2), в Bizagi Studio була автоматично створена база даних пвд управлшням безкоштовно1 Bepciï СУБД SQL Server Express, яка встановлюеться разом з BPM-системою. Для запуску шструменту Bizagi Work Portal, необхщного для розгортання i виконання процесу аналiзу дiаграм потоков даних, був використа-ний web-сервер IIS Express, який також встановлю-еться разом з Bizagi Studio.\nПрограмна реалiзацiя шдходу до аналiзу дiаг-рам потоков даних була виконана у виглядi web-застосунка, розробленого за допомогою мови PHP. Для виконання розробленого застосунка було викори-стано безкоштовний web-сервер Apache. Звернення до web-застосунка здiйснюеться за допомогою методу GET протоколу HTTP (Hypertext Transfer Protocol). При зверненш до даного web-застосунка, з бази даних Bizagi одержуеться iнформацiя, яка використовуеться для розрахунку наступних показникiв [9] :\n1) коефщент збалансованостi з урахуванням вагових коефiцieнтiв wt [9] елеменпв дiаграм DFD (роботи, зовтшт сутностi, накопичувачi даних):\nKl =\n1\nn ¡=\n(Wi ■ Ai ) - max{w,. ■ At}\nде A - кшьшсть потокiв даних, з'еднаних з i -м еле-ментом; n - кшьшсть елеменпв дiаграми DFD;\n2)\tнормований коефiцieнт центральносгi мережц\n3)\tщiльнiсть мережi;\n4)\tнормован коефiцieнти центральностi вузлiв мережi.\nЗа допомогою шструментарш розробника Bizagi Widget Editor з використанням мови JavaScript був роз-роблений ввджет, який вбудовуеться в Bizagi Studio i до-зволяе звертатися до web-застосунка та вщображати ре-зультати аналзу дiаграм потокiв даних (рис. 3).\nРис. 3. Архитектура запропонованого ршення в нотацй' ArchiMate\nДля вщображення результатiв аналiзу дiаграм потокiв даних [9], що надаються розробленим web-застосунком у форматi JSON-об'екта (JavaScript Object Notation), були використаш наступи бiблiоте-ки мови JavaScript:\n1)\tjQuery - звернення до розробленого web-застосунка за допомогою подходу AJAX (Asynchronous JavaScript and XML) i обробка одержуваного JSON-об'екта;\n2)\tGoogle Chart - побудова дiаграми нерiвно-мiрностi розподшу потокiв даних [9], яка схожа за свшми властивостями з функцiонально-вартiсною дь аграмою, що була використана рашше для аналiзу моделей бiзнес-процесiв в нотацiï IDEF0 [10].\n5. Результата дослвджень\nДля виконання контрольних розрахункiв з використанням розроблених шструментальних засобiв\nбули використаш дiаграми потокiв даних, що опису-ють бiзнес-процеси закупiвлi продукцiï (рис. 4) [9].\nВикористовуючи Bizagi Studio i розроблеш ш-струменти, був виконаний аналiз (рис. 5, а) вихiдноï дiаграми DFD (рис. 4, а). Роботи, зовшшш сутносп i нaкопичувaчi даних позначенi за допомогою букв «A», «E», «D» i номерiв (рис. 5), що ввдповщають елементам дiaгрaм DFD (рис. 4).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДшсно, отримaнi значення коефiцiентa збалан-совaностi K = 1,29, нормованого коефщента центрaльностi = 0,22, а також дiaгрaмa нерiвно-мiрностi розподiлу потокiв даних сввдчать про нерiв-номiрний розподiл потошв даних на вихiднiй дiaгрa-мi DFD (рис. 4, а), i, ввдповщно, про нaявнiсть недо-лшв, пов'язаних з порушеннями правил побудови дь аграм потокiв даних.\nВидшення цих недолiкiв, а також формування рекомендaцiй щодо вдосконалення вихiдноï дiaгрaми\nDFD було детально розглянуто в робот [9]. Викорис-товуючи Bizagi Studio i розроблеш iнструментальнi засоби, було виконано аналiз (рис. 5, б) перетвореноï\nдiаграми DFD (рис. 4, б), що вщповвдае правилам побудови, вимогам до збалансованосп та рiвномiрностi розподiлу поток1в даних [9].\n2\ti Заказы\nДанные о\t1 клиентов\nзаказах\th\nклиентов\n(Г\n1\nДанные о количестве продукции на складе\nФормирование заказа на закупку\nСведения о поставщиках\nОтчет о\"\"\"\"\" состоянии склада\nДанные о предложении продукции на рынке\n. Заказ на\nзакупку f-\nУсловия\nзакупки\nпродукции\nСогласование с поставщиком сроков и формы оплаты\nПоставщики\nПодав ерждение заказа\nУсловия доставки продукции\nИнформация о наличии продукции на складе Расходная накладная поставщика\nДоставка продукции\nПоставщики\nСостояние рынка\nИнформация о предлагаемой продукции\nИнформация о состоянии склада\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nг 4\nПрием\nзакупленной\nпродукции\nИнформация о наличии продукции на складе\nСостояние склада\nПриходная накладная\nОтчет о состоянии склада\n1\nДанные о количестве продукции на складе\nДанные о заказах клиентов\n1\nДанные о количестве продукции на складе\nСостояние рынка\nI Заказы I клиентов\nI-*\nСостояние склада\n1\nФормирование заказа на закупку\nОтчет о\nсостоянии\nсклада\nДанные о предложении продукции на рынке\nПоставщики\nИнформация о надежности I поставщиков\nИнформация о наличии продукции на складе\nСведения о поставщиках\nЗаказ на\nзакупку f-\nУсловия\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nзакупки\nпродукции\nПоставщики\nСогласование с поставщиком сроков и формы оплаты\nУело в ил доставки продукции\nРасходная накладная поставщика\ns Подтверждение\n¡заказа ^ ?-\nДоставка продукции\nПрием закупленной продукции\nОтчет о состоянии склада\nИнформация о наличии продукции на складе\n1\nДанные о\nколичестве\n—>\tпродукции\nна\nскладе\nРис. 4. Аналiзованi дiаграми потоюв даних: а - вихщна дiаграма; б - перетворена дiаграма\nа\nб\nдиспропорцп в розподiлi потокiв дант для пeрeтво-рeноï дiaгрaми DFD (рис. 4, б) значно мeншi, шж для виxiдноï дiaгрaми (рис. 4, а).\nТаким чином, розроблeнi iнcтрyмeнти (web-зacтоcyнок i вiджeт) дозволяють розширити функцю-нaльнicть BPM-сисгеми Bizagi з мeтою ïï використан-ня для aнaлiзy нaкопичyвaпиx дiaгрaм DFD, що прeд-ставляють знання про бiзнec-процecи оргaпiзaцiï.\nРозроблeнi iнcтрyмeнтaльнi засоби y виглядi виxiдного коду web-застосунка та вiджeтa Bizagi дос-тyпнi для зaвaптaжeнпя [11].\nб. Висновки\nВ дaномy доcлiджeннi 6ули розроблeнi ш-cтрyмeнтaльнi засоби для тдтримки процecy aпaлiзy дiaгрaм потошв дaниx в cиcтeмi yпрaвлiнпя бiзнec-процecaми Bizagi BPM Suite.\n1.\tЗа допомогою Bizagi Modeler бyлa побудо-вана BPMN-модeль процecy aнaлiзy дiaгрaм пото-кiв дaниx.\n2.\tЗа допомогою Bizagi Studio була виконана автоматизащя пропсу aнaлiзy дiaгрaм потокiв да-ниx, включаючи модeлювaння дaниx, cтворeння признaчeниx для користувача форм i визнaчeння бiзнec-прaвил.\n3.\tПрограмна рeaлiзaцiя пiдxодy до aнaлiзy дь аграм потокiв дaпиx була виконана у виглядi web-застосунка, що одeржye iнформaцiю з бази дант Bizagi i надае рeзyльтaти обчиcлeнь коeфiцieнтiв зба-лaпcовaноcтi i ^тральноси для aнaлiзовaноï дiaг-рами DFD.\n4.\tДля вiдобрaжeння рeзyльтaтiв aнaлiзy дiaг-рам потокiв дaниx був розроблeний вiджeт, вбудова-ний в Bizagi Studio, який взaемодiе з розроблeним web-застосунком.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЛiтератyра\n1.\tWasilewski, A. Business process management suite (BPMS) market changes 2009-2015 [Text] / A. Wasilewski // Information Systems in Management. - 2016. - Vol. 5, Issue 4. - P. 585-592.\n2.\tDunie, R. Magic Quadrant for Intelligent Business Process Management Suites [Electronic resource] / R. Dunie, W. R. Schulte, M. Cantara, M. Kerremans // Gartner RAS Core Research Note G. - 2015. - Available at: https://www.gartner.com/ doc/3009617/magic-quadrant-intelligent-business-process\n3.\tRichardson, C. The Forrester Wave: BPM Platforms For Digital Business, Q4 2015 [Electronic resource] / C. Richardson, A. Cullen, S. McGovern, D. Lynch // Forrester Research. - 2015. - Available at: https://www.forrester.com/report/The+Forrester+ Wave+BPM+Platforms+For+Digital+Business+Q4+2015/-/E-RES115603\n4.\tBurattin, A. Introduction to Business Processes, BPM, and BPM Systems [Text] / A. Burattin // Process Mining Techniques in Business Environments. - Cham: Springer International Publishing, 2015. - P. 11-21. doi: 10.1007/978-3-319-17482-2_2\n5.\tCurko, K. The Role of Business Process Management Systems and Business Intelligence Systems in Knowledge Management [Text] / K. Curko, V. B. Vuksic, A. Loncar // International Journal of Computers And Communications. - 2009. -Vol. 3, Issue 2. - P. 17-24.\n6.\tMelo, A. C. S. Knowledge management for improving business processes: an analysis of the transport management process for indivisible exceptional cargo [Text] / A. C. S. Melo, M. A. C. Netto, V. J. M. Ferreira Filho, E. Fernandes // Pesquisa Operacional. - 2010. - Vol. 30, Issue 2. - P. 305-330. doi: 10.1590/s0101-74382010000200004\n7.\tDavenport, T. H. Process management for knowledge work [Text] / T. H. Davenport // Handbook on Business Process Management 1. - Berlin-Heidelberg: Springer, 2015. - P. 17-35. doi: 10.1007/978-3-642-45100-3_2\n8.\tIbrahim, R. Formalization of the Data Flow Diagram Rules for Consistency Check [Text] / R. Ibrahim, S. Y. Yen // International Journal of Software Engineering & Applications. - 2010. - Vol. 1, Issue 4. - P. 95-111. doi: 10.5121/ ijsea.2010.1406\n9.\tКопп, А. Разработка подxодa к анализу и оптимизации диаграмм потоков данным ^кст] / А. Копп, Д. Орлов-ський // ScienceRise. - 2017. - № 7. - С. 33-42. doi: 10.15587/2313-8416.2017.107048\nBalance coefficient: 1.29. Centralitv coefficient: 0.22\nIl I I I I I I I I\nI I\n111 ' ' I\n■ ■\tCentrality: 0.13 ■\nEl E2 D1 D2 D3 Al A2 A3 A4 Density\tCentraLity\nа\nб\nРис. 5. Рeзyльтaти aнaлiзy дiaгрaм DFD в Bizagi Studio: а - вж^на дiaгрaмa; б - пeрeтворeнa дiaгрaмa\nОтримаш знaчeння коeфiцiентa збалансовано-cri К'ь = 0,46, нормованого коeфiцiентa ^трально-cri C\"D = 0,03, а також дiaгрaмa нeрiвномiрноcтi роз-подшу потошв дант (рис. 5, б) сввдчать про тe, що\n10.\tКопп, А. М. Об одном подходе к решению задачи оптимизации структуры бизнес-процессов предприятия [Текст]: сб. науч. тр. / А. М. Копп, Д. Л. Орловский // Вюник НТУ «ХП1». Серiя: Системний aHani3, управлшня та шформа-цшт технологи. - 2015. - № 58. - С. 102-108.\n11.\tGitHub - andrei1293/bizagi-dfd-analysis-tool [Electronic resource]. - Available at: https://github.com/andrei1293/bizagi-dfd-analysis-tool\nРекомендовано до публжацп д-р техн. наук, професор Гамаюн I. П.\nДата надходження рукопису 25.10.2017\nКопп Андрш Михайлович, астрант, кафедра програмно1 шженери та шформацшних технологiй управлшня, Нацюнальний технiчний унiверситет «Харшвський полiтехнiчний iнститут», вул. Кирпичова, 2, м. Харшв, Украша, 61002 E-mail: kopp93@gmail.com\nОрловський Дмитро Леонiдович, кандидат техшчних наук, доцент, кафедра програмно1 iнженерii та iнформaцiйних технологiй управлшня, Нацюнальний техшчний унiверситет «Харшвський полггехшчний iнститут», вул. Кирпичова, 2, м. Харшв, Украша, 61002 E-mail: ordm@kpi.kharkov.ua\nУДК: 620.93: 66.083.4\nБ01: 10.15587/2313-8416.2017.118793\nПОКРИТТЯ П1КОВИХ НАВАНТАЖЕНЬ В ЕЛЕКТРИЧНИХ МЕРЕЖАХ ЗА РАХУНОК УТИЛ1ЗАЦП ПЕРЕПАДУ ТИСКУ НА ГРС\n©С. П. Крушневич, О. I. П'ятничко, Г. В. Жук, М. А. Солтаниберешне\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЗниження тиску природного газу на газорозпод1льчих станцях та пунктах вгдбуваеться з втратою енергИ. Встановлення детандера для утилгзацИ перепаду тиску дозволяе використати цю енерггю, але внаслгдок значного зниження температури газу тсля детандеру потргбно збтьшувати ктьюсть палив-ного газу для попереднього тдггргву. Автори виконали паливно-економ1чний розрахунок для поргвняння балансу мгж затратами та виробництвом енергИу грошовому еквгвалентг\nКлючовi слова: ГРС, ГРП, ГТС, виробництво електрики, утилгзацгя енергИ, перепад тиску, природний газ\n1.\tВступ\n1снуюча газотранспортна система Украши може забезпечити транзит природного газу через свою територш в обсязi до 170 млрд. м3/рш по газопроводах високого тиску загальною довжиною 33 тис. км.\nПодача газу споживачам забезпечуеться газопроводами низького тиску. Подача газу до споживача ввд малстрального газопроводу i зниження його тиску ввдбуваеться на газорозпод№них станщях (ГРС) та пунктах (ГРП), при цьому енерггя ввд розширення газу безповоротно втрачаеться. На ГРС тиск газу знижують до 1,2-1,6 МПа, попм на ГРП - до 0,10,3 МПа [1]. Розрахунки показують, що при розши-ренш природного газу в турбодетандерних установках на ГРС з 4,0 до 0,6 МПа можна виробити 47 кВтгод електричноi енергп i приблизно стшьки ж холоду на рiвнi -100 °С на кожнi 1000 н.м3 газу.\n2.\tЛггературний огляд\nРiшенням НАК «Нафтогаз Украши», ДК «Укр-ТрансГаз» i вiдповiдно до «Енергетичноi стратеги Укра-iни на перiод 2006-2010 рошв» передбачалося створен-ня 54 утитзацшних турбодетандерних електростaнцiй на ГРС сумарною потужнiстю 300 МВт, проте цi роботи не були розпочап. Необхвдш кaпiтaльнi ви-трати, на той час, оцшювалися в 725 млн. грн. Очiкувaнa економiя природного газу могла сягнути\n0,8 млрд. м3/рш, при виробництвi електроенергiï в обсязi 1,5...2,0 млрд. кВтгод.\nПитання особливостей установки детандера на ГРС розглядався в лiтературi неодноразово. У робот [2] придiлено увагу особливостям розрахунку детандера в умовах ГРС i показано, що прийняття в якосп робочого тiла повггря, замiсть природного газу вносить суттеву похибку в результати розрахуншв. В ро-ботi [3] представлено конструкцш кiлькох детанде-рiв, як можуть бути використанi в складi ГРС, представлено межi ймовiрностi утворення гiдратiв та показано термш окупностi у 4.5-8 рошв, але не приведено шформащю по економiчному балансу мгж ви-робленою електричною енергieю та затратами на ш-дiгрiв газу.\nВ роботах [4] та [5] демонструються результати розрахуншв по можливому впровадженню детандера на шлькох ГРС у Бангладешi [4] та 1раш [5], показано необхвдшсть у попередньому пiдiгрiвi природного газу для уникнення гiдратоутворення. Порiв-няння балансу затрат на природний газ для пщ^ву та вироблено1' електрично1' енергiï не проводиться у обох роботах. Додатково, у робот [5] наведено коли-вання рiчного споживання природного газу через ГРС та ввдповщна змiна витрати паливного газу. В роботi [6] запропонована iдея використання палив-них елеменпв в якостi джерела теплоти для попереднього пщ^ву природного газу, показано рiчне ко-\n",
    "download_url": "https://cyberleninka.ru/article/n/rozrobka-instrumentalnih-zasobiv-dlya-pidtrimki-protsesu-analizu-diagram-potokiv-danih/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/osobennosti-razrabotki-krossplatformennyh-mobilnyh-prilozheniy",
    "slug": "osobennosti-razrabotki-krossplatformennyh-mobilnyh-prilozheniy",
    "title": "Особенности разработки кроссплатформенных мобильных приложений",
    "abstract_description": "Рассмотрены популярные на сегодняшний день фреймворки, их особенности, преимущества и недостатки.",
    "full_text_body": "\n\n\n\n\uFEFFРешетневские чтения. 2017\nУДК 004.4*244\nОСОБЕННОСТИ РАЗРАБОТКИ КРОССПЛАТФОРМЕННЫХ МОБИЛЬНЫХ ПРИЛОЖЕНИИ\nА. Н. Жуковская, А. С. Заушицина\nСибирский государственный университет науки и технологий имени академика М. Ф. Решетнева Российская Федерация, 660037, г. Красноярск, просп. им. газ. «Красноярский рабочий», 31 E-mail: zhukowskaya.angelina@yandex.ru, anastasyazau@gmail.com\nРассмотрены популярные на сегодняшний день фреймворки, их особенности, преимущества и недостатки.\nКлючевые слова: фреймворк, мобильные приложения, кроссплатформенная разработка, PhoneGap, Xamarin, Unity.\nFEATURES OF DEVELOPING CROSSPLATFORM MOBILE APPLICATIONS\nA. N. Zhukovskaya, A. S. Zaushitsina\nReshetnev Siberian State University of Science and Technology 31, Krasnoyarsky Rabochy Av., Krasnoyarsk, 660037, Russian Federation E-mail: zhukowskaya.angelina@yandex.ru, anastasyazau@gmail.com\nThis article considers popular frameworks and their features, advantages and disadvantages.\nKeywords: framework, mobile apps, cross-platform development, PhoneGap, Xamarin, Unity.\nБлагодаря стремительному распространению мобильного Интернета и разработке IT- приложений, установленных на новых, интуитивно понятных пользовательских устройствах, мобильное приложение становится хорошим тоном, визиткой, коммерческим инструментом и дополнительным источником дохода. Поэтому разработка нового поколения мобильных приложений, использующих web-ресурсы и современные IT-технологии, становится популярной и потенциально выгодной.\nПри разработке мобильного приложения по отображению информации о работе станков (такты, время работы, остановки и т. п.) на заводе для сотрудников отдела автоматизации возникла потребность в создании этого приложения для различных операционных систем (ОС) за максимально короткие сроки. Для этого необходимо использовать инструменты для кроссплатформенных мобильных приложений.\nНа сегодняшний день самыми популярными и современными решениями для кроссплатформенной разработки мобильных приложений являются: PhoneGap, Xamarin, Unity [1]. Данные фреймворки на сегодняшний день занимают 80 % рынка кроссплат-форменной разработки для мобильных устройств [2].\nФреймворк PhoneGap позволяет создавать мобильные приложения используя стандартные веб-технологии (HTML5, JavaScript и CSS3) [3]. В результате это привело к быстрому росту популярности фреймворка, с его помощью можно обойтись без разработки на таких языках программирования как: Java для Android, Objective-C для iOS и C#. Основные преимущества PhoneGap: - простое API, позволяющее быстро начать разработку;\n-\tвозможность использования любых существующих JavaScript библиотек (JQuery, Prototype, Sencha Touch).\nУ данного фреймворка есть и недостатки, такие как:\n-\tвизуализация пользовательского интерфейс с помощью встроенного браузера. Это создает трудности в получении обратной связи по сравнению с нативным приложением;\n-\tнеобходимость написания своих плагинов, так как существующие плагины в большинстве случаев оказываются устаревшими.\nСледующий рассматриваемый фреймворк для кроссплатформенной разработки - Xamarin. Xamarin позволяет создавать одну единственную логику приложения с применением C# и .NET [4]. Функционально платформа Xamarin представляет ряд субплатформ. Эти субплатформы играют большую роль -через них приложения могут направлять запросы к прикладным интерфейсам на устройствах. Также в Xamarin определяется визуальный интерфейс, привязывается логика на C#, и все это работает на Android, iOS и Windows Phone.\nПреимущества Xamarin:\n1)\tразвивающееся сообщество;\n2)\tTestCloud, использующийся разработчиками, используется для тестирования приложений автоматически;\n3)\tмногократное использование уже написанного кода;\n4)\tдинамическая верстка для iOS;\n5)\tвозможность дополнения произвольными свойствами стандартных контролов за счет Custom Renderers.\nПрограммные средства и информационные технологии\nНедостатки Xamarin:\n-\tсложность реализации некоторых интерфейсных паттернов на monodroid и monotouch, так как решения по умолчанию для той или иной функции опираются на непродуманные до конца возможности платформы, которые могут попросту не работать в Xamarin;\n-\tвозникновение проблем со стороны платформы mono, monotouch и monodroid, так как приложение должно удовлетворять особенным требованиям стабильности;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tневозможность расположения Android страниц как части уже существующего Activity/Fragment;\n-\tнет возможности реализации некоторых контро-лов (RadioButton, CheckBox, Hyperlink).\nПоследний рассматриваемый инструмент - Unity. Мультиплатформенный инструмент для разработки 2D- и 3Б-приложений и игр Unity, также один из лучших инструментов для демонстрации 3D-контента [5]. Созданные с помощью Unity приложения работают под операционными системами Windows, OS X, Linux, Android, Apple iOS, Windows Phone, BlackBerry, а также на игровых приставках Wii, PlayStation 3 и Xbox 360.\nПреимущества:\n1)\tналичие бесплатных плагинов;\n2)\tвозможность создания собственных шейдеров и изменения пути, которым Unity осуществляет визуализацию.\nНедостатки:\n1)\tсложность в использовании для начинающих разработчиков, так как на сегодняшний день существует мало сопровождающей документации;\n2)\tотсутствие оптимизации компиляторов для ARM процессоров на некоторых мобильных устройствах.\nДля приложения по отображению информации о работе станков на заводе был выбран фреймворк Xamarin, так как он поддерживает все необходимые ОС, использует достаточно простой в освоении язык C# и поддерживает TestCloud для тестирования приложений на реальных устройствах в различных ОС.\nТаким образом, следует отметить, что нет идеального решения, каждый фреймворк имеет свои плюсы и минусы. Но благодаря Xamarin было выполнено главное требование, возникающее из потребности работников завода использовать различные мобильные устройства - разработка приложения в максимально короткие сроки с возможностью его работы на различных мобильных операционных системах (Android, iOS и Windows Phone).\nБиблиографические ссылки\n1.\tКроссплатформенное мобильное приложение. [Электронный ресурс]. URL: http://wiki.soloten.com/ (дата обращения: 11.09.2017).\n2.\tОбзор кросс-платформенных решений для разработки мобильных приложений. [Электронный ресурс]. URL: https://rn.habrahabr.ru/post/319348/ (дата обращения: 10.09.2017).\n3.\tДжесс Р., Рональд К. PhoneGap. M. : Книга по требованию, 2013. 104 с.\n4.\tПодробно о Xamarin. [Электронный ресурс]. URL: http://habrahabr.ru/post/188130/ (дата обращения: 11.09.2017).\n5.\tДжозеф Х. Unity в действии. Мультиплатфор-менная разработка на C#. М. : Питер, 2016. 336 с.\nReferences\n1.\tCross-platform mobile application. Available at: http://wiki.soloten.com/ (accessed: 11.09.2017).\n2.\tOverview of cross-platform solutions for the development of mobile applications. Available at: https:// m.habrahabr.ru/post/319348/ (accessed: 10.09.2017).\n3.\tJess R., Ronald K. PhoneGap [PhoneGap]. M. : The book on Demand Publ., 2013. 104 p.\n4.\tDetails about Xamarin. Available at: http:// habra-habr.ru/post/188130/ (accessed: 11.09.2017).\n5.\tJoseph H. Unity v deystvii. Mul'tiplatformennaya razrabotka na C# [Unity in action. Multiplatform development on C #]. M. : Peter Publ., 2016. 336 p.\n© Жуковская А. Н., Заушицина А. С., 2017\n",
    "download_url": "https://cyberleninka.ru/article/n/osobennosti-razrabotki-krossplatformennyh-mobilnyh-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/instrumenty-podhody-sposoby-optimizatsii-veb-prilozheniy-na-primere-net-i-android",
    "slug": "instrumenty-podhody-sposoby-optimizatsii-veb-prilozheniy-na-primere-net-i-android",
    "title": "Инструменты/подходы/способы оптимизации веб-приложений: на примере . Net и Android",
    "abstract_description": "В данной статье рассмотрены инструменты оптимизации вебприложений например .Net и Android. Обе эти технологии на сегодняшний день являются одними из самых популярных и охватывает рынок разработки веба: сайты, а так же мобильные устройства. Корректная и быстрая работа такого вида разработок должна быть первоочередной задачей.",
    "full_text_body": "\n\n\n\n\uFEFFИнновации в науке № 9 (46) 2015 г\nСибАК\nwww.sibac.info\nИНСТРУМЕНТЫ/ПОДХОДЫ/СПОСОБЫ ОПТИМИЗАЦИИ ВЕБ-ПРИЛОЖЕНИЙ:\nНА ПРИМЕРЕ .NET И ANDROID\nПобежимова Мария Павловна\nмагистрант научно-практического отделения Белорусского государственного университета информатики\nи радиоэлектроники, Республика Беларусь, г. Минск E-mail: lizmodern@gmail.com\nКазимирова Елизавета Игоревна\nмагистрант научно-практического отделения Белорусского государственного университета информатики\nи радиоэлектроники, Республика Беларусь, г. Минск E-mail: lizmodern@gmail.com\nСтержанов Максим Валерьевич\nассистент, магистр технических наук Белорусского государственного университета информатики\nи радиоэлектроники, Республика Беларусь, г. Минск E-mail: lizmodern@gmail.com\n29\nИнновации в науке № 9 (46), 2015 г.\n€•\n| СибАК\nwww.sibac.mfo\nTOOLS / APPROACHES / METHODS OPTIMIZE WEB APPLICATIONS: THE CASE OF .NET AND ANDROID\nMaria Pobegimova\nundergraduate scientific and practical branch of Belarusian State University of Informatics and Radioelectronics,\nRepublic of Belarus, Minsk\nElizaveta Kazimirova\nundergraduate scientific and practical branch of Belarusian State University of Informatics and Radioelectronics ,\nRepublic of Belarus, Minsk\nMaxim Sterganov\nassistant, Master of Engineering of Belarusian State University of Informatics and Radioelectronics,\nRepublic of Belarus, Minsk\nАННОТАЦИЯ\nВ данной статье рассмотрены инструменты оптимизации вебприложений например .Net и Android. Обе эти технологии на сегодняшний день являются одними из самых популярных и охватывает рынок разработки веба: сайты, а так же мобильные устройства. Корректная и быстрая работа такого вида разработок должна быть первоочередной задачей.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nABSTRACT\nThis article describes the tools to optimize Web applications such as .Net and Android. Both of these technologies today are among the most popular and covers market development web: sites, as well as mobile devices. Correct and quick work of this type of development should be a priority.\nКлючевые слова: Allocation Tracker; DDMS; Android; .net; оптимизация; анализ производительности; кэширование.\nKeywords: Allocation Tracker; DDMS; Android; .net; optimization; performance analysis; cache.\n•\tРазработка веб-сайтов и их оптимизация\nС каждым днем веб-приложения становятся все сложнее, у них появляется все больше возможностей, задач и функций. Однако чем разнообразнее контент, тем больше данных приходится скачивать. Чтобы производительность приложений оставалась высокой, нужно\n30\nИнновации в науке № 9 (46) 2015 г\nСибАК\nwww.sibac.info\nстараться оптимизировать каждый байт. Необходимо стараться сокращать время, которое пользователи проводят в ожидании загрузки, добиваться плавной визуализации страниц и быстрой работы интерактивных элементов.\nНе думаете что пара секунд может сыграть разницу? Подумайте снова. По данным исследований в 2006 году средний покупатель онлайн магазина ожидал, что страницы будет загружаться 4 секунды. Сегодня те же самые покупатели ожидают 2 секунды. Даже Google начал использовать скорость сайта как фактор в своих алгоритмах ранжирования.\nБыстрое веб-приложение дает больше просмотров, высокий уровень вовлеченности и конверсии. Исследования более 160 организаций показывают, что дополнительная секунда времени загрузки приводит к потерям в 7 % конверсии, 11 % от просмотров страниц, удовлетворенность клиентов понижается на 16 %.\n• Технические детали\nСкорость веб-приложения может уменьшаться по многим причинам, включая небольшую память сервера, неразделенные ресурсы и большой приток данных. Навигация, дизайн, изображения и приложения могут всегда влиять на быстроту и эффективность отображения.\nСуществует достаточно много путей оптимизации, таких как оптимальный порядок отображения контента в зависимости от его важности для пользователя, оптимизация производительности визуализации, а так же оптимизация контента. В данной работе более подробно будут рассмотрены подходы связанные с оптимизацией контента.\n1)\tУдаление ненужных ресурсов\nТак же как обычный магазин нуждается в организации, вебприложение нуждается в чистке. Страницы часто могут содержат ресурсы, которые не приносят пользы и даже наоборот мешают работе. Это относится как к собственным, так и внешним файлам и виджетам. Ресурс должен вызываться по мере необходимости. Данные не должны скачиваться напрасно. Поэтому необходимо проводить внимательный анализ эффективности ресурса. Например, при отображении слайд-шоу не стоит загружать все изображения вместе со страницей. Заранее не известно, сколько пользователей его просматривают.\n31\nИнновации в науке № 9 (46), 2015 г.\n€•\n| СибАК\nwww.sibac.mfo\n2)\tМинификация:\tпредварительная обработка и опти-\nмизация на основе контекста\nПредварительная обработка/минификация/оптимизация на основе контекста очень важна и может принести высокие результаты.\nЗная о формате данных и его свойствах, всегда можно значительно снизить размер ресурса, не меняя его суть. На простой HTML-странице содержатся: HTML-разметка, CSS-стили и JavaScript. Для всех этих типов есть разные правила написания и обозначения комментариев. Комментарии в коде это тоже текст, они помогают разработчику, но совершенно не нужны в браузере. Удаление комментариев значительно уменьшит размер файла. Т ак же сущесвуют продвинутые CSS-компрессоры, которые можут объединить два объявления в одно без изменения других стилей и сэкономит ещё больше байтов. Пробелы и табуляция нужны только для удобства разработчика. Дополнительный компрессор может удалить их.\nКонечно, после таких изменений прочитать код непросто, но это и не нужно. Можно сохранить оригинальную страницу в качестве версии для разработчика и применить описанные выше шаги, когда мы захотим опубликовать приложение.\nВсе описанные техники можно применять не только к текстовым, но и к другим ресурсам. Изображения, видео и другие типы контента также содержат метаданные и полезные данные.\n3)\tОптимизация изображений\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИзображения — это ресурсы, которые часто занимают много места на странице и весят больше всего. Благодаря их оптимизации можно значительно уменьшить количество скачиваемых данных и улучшить работу сайта. Чем больше сжато изображение, тем меньше пропускной способности канала занимает скачивание и тем быстрее браузер сможет показать страницу пользователю.\nСледующие советы помогут в оптимизации изображения:\n•\tВыбирайте изображения в векторных форматах. Их качество не зависит от разрешения и масштаба, поэтому они подходят для больших экранов и разных типов устройств.\n•\tВыбирайте наиболее подходящие растровые форматы. Определите необходимые требования к изображениям и выберите нужный формат для каждого ресурса.\n•\tПробуйте разные настройки качеств для растровых\nформатов. Не бойтесь снижать качество:\tчасто изображение\nпо-прежнему хорошо выглядит, а размер файла становится значительно меньше.\n32\nИнновации в науке № 9 (46) 2015 г\nСибАК\nwww.sibac.info\n•\tУдаляйте ненужные метаданные. Многие растровые изображения содержат лишнюю информацию о ресурсе: геоданные, сведения о камере и т. д. Для их удаления используйте соответствующие инструменты.\n•\tМасштабируйте изображения. Уменьшайте файлы на сервере, чтобы исходный и отображаемый размеры были практически одинаковы. Обратите особое внимание на большие изображения. Если их масштабирует браузер, производительность вашего сайта значительно снижается.\n•\tАвтоматизируйте. Используйте надежные инструменты и ПО, которые будут автоматически оптимизировать изображения на вашем сайте.\n4)\tHttp-кеширование\nСкачивать ресурсы страницы заново при каждом посещении — это очень неудобно. Из-за повторных отправок запроса, сайт может работать медленно. Кроме того, пользователю придется зря тратить большое количество трафика. Именно поэтому кеширование данных имеет огромное значение при оптимизации сайта.\nНе существует одного идеального правила кеширования. Вы сами должны выбрать и установить подходящие настройки для каждого ресурса, а также указать нужную иерархию кешей. При это вы должны учесть много факторов: использование траффика, тип контента и требования к его актуальности.\nСледующие советы могут помочь в выборе стратегии кеширования [5]:\n1.\tИспользуйте одинаковые URL для одного ресурса.\nВ противном случае контент каждый раз будет скачиваться заново. Помните, что в URL регистр букв имеет значение!\n2.\tУбедитесь, что сервер отправляет маркер подтверждения (ETag). Если ресурс на сервере не изменился, то благодаря этому маркеру те же байты не будут передаваться повторно.\n3.\tОпределите, какие ресурсы можно сохранить в промежуточных кешах. Чаще всего это ответы, которые одинаковы для всех пользователей.\n4.\tОпределите подходящий срок действия для каждого\nресурса. У данных могут быть разные требования к частоте обновления информации. Учитывая это, выберите подходящее значение max-age для каждого ресурса.\n5.\tУстановите подходящую иерархию кешей для вашего сайта. Используйте URL ресурсов с идентификационными отметками контента и короткие сроки действия (или директиву no-cache) для\n33\nИнновации в науке № 9 (46), 2015 г.\n€•\n| СибАК\nwww.sibac.mfo\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nHTML-документов. С их помощью вы можете указать, когда кешированные версии данных будут обновлены.\n6. Уменьшите пересылку данных. Если часть ресурса, например функции JavaScript или наборы CSS-стилей, обновляется часто, отправляйте ее код в отдельном файле. Тогда та часть контента, которая меняется редко, например коды библиотек, может быть загружена из кеша. Это уменьшит количество скачиваемых данных при обновлении ресурса.\n5)\tИспользование CDN\nContent Delivery Network (CDN) сервисы обеспечивают множество преимуществ, и главное из них — возможность распределения контента по всему миру и предоставление этого контента из близлежащего места к клиенту, позволяет значительно сократить время прохождения всех пакетов данных.\nМы не может заставить пакеты данных путешествовать быстрее, но мы можем уменьшить дистанцию путем стратегического позиционирования наших серверов ближе к пользователям.\nВ мире высокочастотного трейдинга время пинга к серверу приобретает особое значение. Каждая миллисекунда может быть на вес золота. Свидетельством этому является мегапроект компании Hibernia Atlantic по прокладке оптоволоконного кабеля через Атлантический океан.\nСтоимость проекта — более $ 300 млн. Инвестиции окупятся с лихвой, потому что за счёт более короткого маршрута этот кабель позволит клиентам Hibernia Atlantic совершать сделки на фондовой бирже за океаном на 6 миллисекунд быстрее, чем конкурентам. По предварительной оценке, клиенты готовы платить за аренду полосы Hibernian Express в 50раз больше, чем за AC-1.\n•\tРазработка андроид-приложений и их оптимизация\nСегодня мобильные устройства полноценно входят в нашу жизнь: мы используем мобильные устройства совершенно в разных направлениях. Соответственно, программирование под них на сегодняшний день весьма актуальная тематика. Разработка подразумевает постоянно работу над повышением производительности приложения. Разработчики должны заранее задумываться над архитектурой, которая позволит модифицировать приложение, расширить и переделать с легкостью, при этом производительность не должна пострадать. Существуют целые технологии, которые позволяют заложить такие модификации. Многие из них позволяют измерить производительность на этапе уже законченного приложения [1].\nВ данной статье мне хотелось бы рассмотреть анализ памяти для андроид приложения и оценку производительности приложений.\n34\nИнновации в науке № 9 (46) 2015 г\nСибАК\nwww.sibac.info\nАнализ памяти андроид-приложения.\nDalvik обладает сборщиком мусора, тем не менее, ни для кого не секрет, что не всегда сборщик работает именно так, как ожидается — поэтому использование памяти для мобильных приложений очень важная часть. Проблемы, которые могут появиться из-за недостатка памяти — утечка данных, OutOfMemory или просто ASR. Каждая из этих проблем для пользователя выглядит, как падение приложения — т. е. некорректиная работа [4].\nAndroid SDK обеспечивает два устройства, которые позволяют управлять памятью и отслеживать ее работу: Allocation Tracker в DDMS и дампы кучи.\nДамп кучи\nЭто бинарный файл в формате HPROF, который представляет снимок всей кучи приложения. ДЛя того, чтобы создать подобный снимок достаточно просто использовать кнопку Dump HPROF file в DDMS либо\tже использовать программный метод\nandroid.os.Debug.dumpHprofData(). Анализировать такие снимки лучше всего jhat либо же Eclipse Memory Analyzer (MAT).\nЭтапы анализа дамп-кучи:\n1.\tсоздание кучи\n2.\tКонвертирование .hprof файла из Dalvik формата в J2SE HPROF с помощью утилиты hprof-conv (она входит в ANDROID SDK) [2; 3].\nAllocation Tracker используется в том случае, если нас интересует определенные период времени. Вариант использования данной утилиты подходит на порядок меньше, чем предыдущий — так как не дает полной картины кучи.\nDDMS — позволяет отслеживать потоки и профилировать их. Делается это с помощью вкладки «Обновить потоки».\ncom. intel. deviceinfo\t16523\nРисунок 1. Внешний виде Allocation Tracker\nС помощью этой вкладки с легкостью можно проанализировать некоторые данные потоков. Столбцы utime и stime дают возможность проанализировать время, затраченное на данный поток (пользовательский и системный). Все измеряется в jiffy. С помощью данного\n35\nИнновации в науке № 9 (46), 2015 г.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n€•\n| СибАК\nwww.sibac.mfo\nанализа можно уменьшить общее количество выполнения той или иной части кода.\nQ Heap [''Q Allocation TrackerJ^^i^Fi^eExplorer Threads \\\nго\tTid\tStatus\tutime\tstime\tName\n1\t16523\trunning\t105801\t10643\tmain\n*2\t16524\tvmwait\t220\t69\tHeapWorker\n*3\t16525\tvmwait\t17503\t378\tGC\n*4\t16526\tvmwait\t0\t0\tSignal Catcher\n*5\t16527\trunning\t44\t123\tJDWP\n*6\t16528\tvmwait\t44\t31\tCompiler\n7\t16529\tnative\t0\t0\tBinder Thread #1\n8\t16530\tnative\t0\t0\tBinderThread #2\n9\t16531\tnative\t2211\t1613\tandroid.hardware.SensorManaqerSSensorThread f\nРисунок 2. Основной функционал Allocation Tracker\nИспользуя эти простые методы анализа — можно добиться поразительных результатов по ускорению работы приложения, его оптимизации и повышению производительности. В статье не рассмотрены все виды анализа, но были взяты в качестве примера наиболее популярные и оптимальные.\nВыводы\nСегодняшние интернет-пользователи хотят, чтобы открываемые ими страницы были интерактивными и работали плавно. Именно этому и требуется уделять много времени и труда. Страницы должны не только быстро загружаться, но и работать хорошо: прокрутка должна быть быстрой, а анимация и взаимодействия — плавными.\nСкорость вашего сайта может быть той самой разницей между лучением и не получением прибыли.\nСписок литературы:\n1.\tГолощапов А. Google Android. Программирование для мобильных устройств (+ CD-ROM); БХВ-Петербург — М., 2011.\n2.\tГолощапов Алексей Google Android. Программирование для мобильных устройств; БХВ-Петербург — М., 2012. — 448 с.\n3.\tДэрси Лорен, Кондер Шейн Android за 24 часа. Программирование приложений под операционную систему Google; Рид Групп — М., 2011. — 464 с.\n4.\tКолисниченко Денис Программирование для Android. Самоучитель; БХВ-Петербург — М., 2012. — 272 с.\n5.\tOptimizing Perfomance — [Электронный ресурс]. — Режим доступа. —\nURL:\thttps://developers.google.com/web/fundamentals/performance/\nindex?hl=en (дата обращения 01.09.2015).\n36\n",
    "download_url": "https://cyberleninka.ru/article/n/instrumenty-podhody-sposoby-optimizatsii-veb-prilozheniy-na-primere-net-i-android/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/osobennosti-primeneniya-predmetno-orientirovannyh-yazykov-dlya-testirovaniya-veb-prilozheniy",
    "slug": "osobennosti-primeneniya-predmetno-orientirovannyh-yazykov-dlya-testirovaniya-veb-prilozheniy",
    "title": "Особенности применения предметно-ориентированных языков для тестирования веб-приложений",
    "abstract_description": "В статье сравниваются основные методы, а также существующие программные средства создания и поддержки доменно-ориентированных языков (англ. DSL, domain specific language), нацеленных на использование в контексте работы с тестовыми сценариями для тестирования интерфейсов веб-приложений. Определены наиболее подходящие технические приемы и средства для решения подобных задач на основе опыта авторов и результатов схожих исследований других специалистов. Проведен обзор существующих подходов к работе с инструментом Selenium, активно использующимся (как в данной работе, так и в большинстве подобных проектов) при автоматизации процесса тестирования для имитации действий пользователя в веб-браузере. Описаны преимущества использования DSL в тестировании, определены функциональные и нефункциональные требования к созданию предметно-ориентированных языков для их дальнейшего эффективного использования, рассмотрены различные методы создания DSL с точки зрения структуры языка. В качестве одного из основных критериев для работы было выбрано вовлечение нетехнических специалистов на каждом этапе тестирования (решение так называемой проблемы перевода), что особенно важно для реализации всестороннего тестирования программного продукта. Одной из ключевых особенностей статьи является демонстрация реализации прототипа DSL на основе Selenium с последующим тестированием и оценкой применимости реализованного прототипа. В упрощенном виде продемонстрирована структура внутреннего устройства языка по Java-пакетам. Сформулированы рекомендации по написанию DSL на основе ранее определенных требований и произведенной оценки прототипа. Показан способ разработки дополнительного инструмента метапрограммирования для дальнейшего упрощения создания, поддержки, модификации тестовых сценариев и их миграции на новые платформы.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 519.682:004.423\tДата подачи статьи: 11.04.19\nБ01: 10.15827/0236-235Х.128.601-606\t2019. Т. 32. № 4. С. 601-606\nОсобенности применения предметно-ориентированных языков для тестирования веб-приложений\nВ.Г. Федоренков 1, студент,, vlad.fedorenkov@gmcdl.com П.В. Балакшин 1, к.т.н., доцент, pvbalakshm@gmail.com\n1 Санкт-Петербургский национальный исследовательский университет информационных технологий, механики и оптики (Университет ИТМО), г. Санкт-Петербург, 197101, Россия\nПеред разработчиками как крупных, так и небольших проектов, стремящихся выпустить по-настоящему качественный, хороший продукт с минимальным числом ошибок, часто встает немало вопросов относительно реализации процесса его тестирования. Данная работа посвящена поиску ответов на эти вопросы.\nВ статье сравниваются основные методы, а также существующие программные средства создания и поддержки доменно-ориентированных языков (англ. DSL, domain specific language), нацеленных на использование в контексте работы с тестовыми сценариями для тестирования интерфейсов веб-приложений. Определены наиболее подходящие технические приемы и средства для решения подобных задач на основе опыта авторов и результатов схожих исследований других специалистов. Проведен обзор существующих подходов к работе с инструментом Selenium, активно использующимся (как в данной работе, так и в большинстве подобных проектов) при автоматизации процесса тестирования для имитации действий пользователя в веб-браузере. Описаны преимущества использования DSL в тестировании, определены функциональные и нефункциональные требования к созданию предметно-ориентированных языков для их дальнейшего эффективного использования, рассмотрены различные методы создания DSL с точки зрения структуры языка.\nВ качестве одного из основных критериев для работы было выбрано вовлечение нетехнических специалистов на каждом этапе тестирования (решение так называемой проблемы перевода), что особенно важно для реализации всестороннего тестирования программного продукта.\nОдной из ключевых особенностей статьи является демонстрация реализации прототипа DSL на основе Selenium с последующим тестированием и оценкой применимости реализованного прототипа. В упрощенном виде продемонстрирована структура внутреннего устройства языка по Java-пакетам. Сформулированы рекомендации по написанию DSL на основе ранее определенных требований и произведенной оценки прототипа. Показан способ разработки дополнительного инструмента метапро-граммирования для дальнейшего упрощения создания, поддержки, модификации тестовых сценариев и их миграции на новые платформы.\nКлючевые слова: DSL, программное обеспечение, тестирование, веб-приложение, разработка, интерфейс, функциональность, Selenium.\nСчитается, что ПО для тестирования имеет решающее значение для обеспечения качества финального продукта. Часто стратегии тестирования в средних и крупных проектах (из-за сравнительно большого числа участников данного процесса) сильно варьируются в плане используемых инструментов, уровней тестирования, методологий, уровня автоматизации [1, 2]. При этом неизменно самым желанным результатом является выпуск качественного продукта с минимальным числом ошибок. В общем случае ключ к качественному тестированию можно найти, ответив на три фундаментальных вопроса:\n- каким образом можно обеспечить раннее начало процесса тестирования и наименьший\nинтервал между запусками тестов с целью снижения рисков;\n-\tкаким образом можно обеспечить достаточную продолжительность поддержки тестов, их улучшение и повторное использование;\n-\tкак можно вовлечь в процесс тестирования все заинтересованные стороны с целью максимального соответствия поставленным требованиям.\nВ настоящее время веб-приложения являются одной из наиболее распространенных областей разработки и применения современного ПО. Следовательно, необходимо ответить на три поставленных вопроса именно с точки зрения веб-приложений.\nДанная работа посвящена поиску ответов на эти вопросы, главным инструментом которого является концепция использования DSL - до-менно-ориентированных языков, разработанных для решения узкоспециализированных задач (в рассматриваемом случае - задач тестирования пользовательских интерфейсов веб-приложений).\nСредства создания и поддержки DSL\nПринято разделять два основных типа до-менно-ориентированных языков на внешние и внутренние. Внешние DSL имеют собственный синтаксис, отделенный от основного языка приложения. Внутренние DSL используют в своей основе язык программирования общего назначения, но отличаются тем, что используют конкретное подмножество возможностей этого языка в определенном стиле [3, 4]. Для разработки DSL существует достаточное число всевозможных языков, платформ и сред разработки [5, 6]. Выбор средства необходимо определять исходя из требований тестируемой системы (англ. SUT, system under test), необходимых навыков у команды разработчиков и тестировщиков. Опыт авторов и результаты других исследований [5, 7, 8] показывают, что для дальнейшей качественной поддержки и применения в тестировании программных продуктов целесообразно использовать средства, основанные на грамматиках языков программирования общего назначения.\nИспользование DSL в тестировании\nDSL для SUT дает возможность команде стандартизировать определенный набор терминов для описания домена, что минимизирует ошибки перевода. Кроме того, DSL позволяют нетехническим заинтересованным сторонам взаимодействовать с тестировщиками более конструктивно. Правильно спроектированный DSL, как минимум, сделает тесты легко читаемыми для всех заинтересованных сторон. При правильном развитии такого DSL любые нетехнические пользователи, в том числе эксперты по предметным вопросам (англ. SME, subject matter expert), могут быть вовлечены непосредственно в процесс написания тестов.\nВ рамках тестирования интерфейсов веб-приложений главным инструментом, вокруг которого и будет сфокусирована разработка DSL, является популярная библиотека Selenium.\nТакой выбор действительно прост и однозначен, ведь только Selenium предоставляет достаточный функционал для взаимодействия с приложением посредством большинства современных браузеров [9, 10]. Взаимодействие возможно благодаря набору драйверов, выпускаемых непосредственно компаниями-разработчиками браузеров. Именно они дают возможность осуществлять имитацию действий пользователя в веб-приложении, алгоритм которых может быть изложен на одном из множества поддерживаемых прикладных языков программирования, например, на Ruby, Python, Scala, C#, F#, Haskel и других [5, 11]. Для разработки прототипа языка в данной работе был использован язык Java.\nВ качестве домена, то есть веб-приложения, для тестирования которого и разработан прототип, было использовано приложение, представляющее собой пользовательский интерфейс для работы с системой комплексной диагностики сети, применяемое в немецком концерне Deutsche Telekom AG. Интерфейс этого приложения отличается нетривиальной структурой и содержит практически все возможные веб-компоненты, что позволяет отлично продемонстрировать работу DSL. Были определены требования к языку, поскольку именно формирование четких требований позволяет избежать всех проблем и сложностей, включая создание языковой инфраструктуры, появляющихся у специалистов по тестированию [5]. Функциональные требования:\n-\tполная совместимость с актуальной версией библиотеки Selenium;\n-\tмаксимальное соответствие используемой бизнес-модели;\n-\tимплементация работы со всеми наиболее часто используемыми элементами вебстраниц (кнопки, текстовые поля, селекторы, выпадающие списки и т.п.);\n-\tвозможность параллельного выполнения операций;\n-\tналичие понятного для конечного пользователя языка функционала для логирования.\nК нефункциональным требованиям относится читаемость (в частности, для нетехнических пользователей).\nДля выбора оптимальной структуры языка были рассмотрены три основных метода создания DSL: на основе вложенных функций, на основе цепочек методов, на основе лямбда-выражений.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nИз них был выбран метод создания DSL на основе цепочек методов. Такой выбор обуслов-\nлен наиболее простой структурой с точки зрения конечного пользователя языка, что критически важно для вовлечения в процесс тестирования нетехническеских пользователей.\n•\tDSL на основе вложенных функций:\nGraph(\nedge(from(\"a\"), to(\"b\"), weight(12.3)),\nedge(from(\"b\"), to(\"c\"), weight(10.5))\n);\n•\tDSL на основе лямбда-выражений:\nGraph(g -> {\ng.edge(e -> { e.from(\"a\"); e.to(\"b\"); e.weight(12.3);\n});\ng.edge(e -> { e.from(\"b\"); e.to(\"c\"); e.weight(10.5);\n});\n});\n•\tDSL на основе цепочек методов:\nGraph() .edge()\n.from(\"a\") .to(\"b\") .weight(12.3) .edge()\n.from(\"b\")\n.to(\"c\")\n.weight(10.5);\nРазработанный DSL\nВ упрощенном виде структура внутреннего устройства языка включает (по Java-пакетам):\n-\tAuthorize - функции для basic-авториза-ции, реализованные для различных браузеров (так, например, для Selenium 3 способы авторизации при помощи Google Chrome и Internet Explorer 11 принципиально различаются);\n-\tConfig - всесторонняя конфигурация тестов от аспектов бизнес-логики до настроек записи видео;\n-\tConstants, Enums, Exception - определяемые бизнес-логикой константы, перечисления, исключения;\n-\tCtx - контекст выполнения, управляющий потоками и содержащий всю необходимую в ходе теста информацию;\n-\tDriver - функционал для работы с различными браузерами;\n-\tHelpdesk - пакет, включающий классы и методы для работы со всеми используемыми в тестируемом веб-приложении элементами (кнопками, radio-кнопками, полями для ввода, иконками и т.п. );\n-\tLogic - методы, реализующие логические операторы в DSL;\n-\tRecording - функционал для сохранения скриншотов и видео выполнения тестов (с использованием ffmpeg).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nНа основе разработанных требований к языку были сформулированы следующие рекомендации по его написанию.\n•\tДля обеспечения наилучшей читаемости разрабатываемый язык должен оперировать только в терминах бизнес-логики. Любые технические операторы лучше оставить за кадром.\n•\tДолжны существовать различные способы конфигурирования тестов для различных сценариев их использования. Для нетехнических пользователей будет намного понятнее конфигурирование теста непосредственно в его коде при помощи специальных конструкций в DSL.\n•\tПри использовании структуры языка, где каждый метод представляет собой обратный вызов, цепочка из которых начинает свое исполнение лишь при достижении замыкающего метода такой цепочки, целесообразно использование Java Concurrency API. Это заметно усложняет внутреннее устройство языка (но не саму структуру DSL), но позволяет удобно организовывать параллельную обработку выполняемых в тесте проверок.\n•\tУже на начальном этапе разработки языка стоит спланировать процесс логирова-ния. На практике это позволяет значительно быстрее находить источник ошибки, причем подобный функционал работоспособен даже при запуске браузера в headless-режиме, что особенно полезно для автоматических тестов.\nОчевидно, что основными критериями для определения оценки применимости прототипа на базе DSL являются его удобочитаемость и наглядность. Так, например, выглядит код теста без использования DSL:\nlogger.debug(\"Verifying icons in Diagnosestart panel\");\nlogger.debug(\"1) Icon 'VoIP fehlerhaft' expected state - Error\");\nassertTrue(Tools.isDiagnoseIconError (\"VoIP fehlerhaft\", wait));\nlogger.debug(\"2) Icon 'PFS-Fehler' expected state - Error\");\nassertTrue(Tools.isDiagnoseIconError (\"PFS-Fehler\", wait));\nlogger.debug(\"3) Icon 'Ereignis-Ermittlung' expected state - OK\");\nassertTrue(Tools.isDiagnoseIconOk (\"Ereignis-Ermittlung\", wait));\nlogger.debug(\"4) Icon 'Konfiguration fehlerfrei' expected state - OK\");\nassertTrue(Tools.isDiagnoseIconOk (\"Konfiguration fehlerfrei\", wait));\nА так аналогичный код с использованием DSL:\n.diagnoseProzesse()\n.togglePanel(\"Diagnosestart\")\n.isProcessIndicatorError(\"VoIP fehlerhaft\")\n.isProcessIndicatorError(\"PFS-\nFehler\")\n.isProcessIndica-torOk(\"Ereignis-Ermittlung\")\n.isProcessIndicatorOk(\"Konfigu-ration fehlerfrei\") .ende()\n.ende()\nПрименение метапрограммирования с разработанным прототипом DSL\nДля ряда программных продуктов, подразумевающих продолжительный цикл разработки, поддержки и сопровождения, помимо создания ранее рассмотренного DSL с целью оптимизации процесса тестирования, может быть целесообразно внедрение дополнительных инструментов метапрограммирования [4, 12].\nСамо по себе использование DSL при тестировании веб-приложений значительно сокращает время написания тестов благодаря оперированию тестировщиками понятными для них терминами. Но даже это можно практически автоматизировать, доверив генерирование кода теста программе и поручив пользователю выполнять привычные для него действия, сохранив при этом все те преимущества, которые дает DSL [13].\nИными словами, с готовым DSL-языком достаточно просто можно разработать дополнительный инструмент, который позволил бы переводить действия тестировщика (если речь идет о тестировании веб-приложений, то это, очевидно, действия пользователя на веб-странице: навигация, клики, ввод текста и т.п.) в готовый к исполнению код на этом DSL. Это позволило бы свести затраты времени и усилий на каждый новый тест к минимуму, обеспечив ту же степень читаемости кода и простоты его сопровождения, как если бы он был написан непосредственно человеком [6].\nВ рамках данной работы для той же предметной области, что и ранее рассмотренный язык, было разработано расширение для браузера Chromium на языке Javascript. Выбор формата обусловлен простотой использования конечным пользователем, так как в таком случае для написания теста от последнего потребуется\nлишь наличие совместимого браузера. Расширение позволяет интегрировать в просматриваемую веб-страницу специальный Javascript-код, отображающий некий оверлей для всех ключевых элементов, таких как кнопки, таблицы, иконки, текстовые элементы и т.п.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nБлагодаря этому пользователь может буквально в несколько нажатий мыши осуществить определенную проверку (например, соответствие иконки или текста ячейки таблицы ожидаемым значениям), которая далее будет отражена в сгенерированном коде.\nТаким образом, создание нового теста приложения сводится к однократному выполнению тестировщиком всех необходимых действий, а результатом является код на DSL, который легко читать и сопровождать в дальнейшем.\nВ результате внедрения такого DSL в работу проекта можно сделать, в том числе на основе отзывов конечных пользователей языка, а также статистики тестов на сервере непрерывной интеграции, следующие выводы.\n•\tЧитаемость кода действительно становится намного выше. Даже грамотно оформленный и прокомментированный код теста в обычном формате будет в лучшем случае более нагруженным, например, для заказчика, который имеет слабое представление о классических языках программирования.\n•\tТесты на основе DSL проще создавать и сопровождать. В среднем для нетехнического пользователя создание теста на основе DSL занимает примерно на 20-30 % меньше времени по сравнению с традиционным подходом.\n•\tПри изменениях, например, в Ыт1-раз-метке тестируемого приложения, DSL позволяет восстановить работоспособность тестов при минимальном числе правок, как правило, оставляя код самих тестов нетронутым, что дает возможность значительно эффективнее организовать работу автоматических тестов (например, при использовании непрерывной интеграции).\n•\tДля ряда программных продуктов может быть целесообразна разработка дополнительного инструмента генерирования DSL-кода. При его использовании создание нового теста приложения сводится к однократному выполнению тестировщиком всех тех действий, которые он хочет реализовать, а результатом является код на DSL, легко читаемый и сопровождаемый в дальнейшем.\nЗаключение\nИспользование различных средств автоматизации практически всегда приводит к сокращению расходов и улучшению тестирования автоматизируемого процесса. Для сферы информационных технологий данный тезис является полностью верным. Для широко распространенных в настоящее время веб-приложений создание и поддержку автоматизации\nтестирования целесообразно делать, применяя доменно-ориентированные языки с использованием элементов метапрограммирования. Это обеспечит раннее начало процесса тестирования, улучшит его сопровождение, миграцию на новые платформы, браузеры и т.п., а также за счет небольшого порога вхождения позволит SME и другим заинтересованным сторонам участвовать в тестировании на любой его стадии.\nЛитература\n1.\tКуликов С.С. Тестирование программного обеспечения. Базовый курс. Минск, 2017. 312 с.\n2.\tЕрмыкин А.А. Разработка метода построения комплекса нагрузочного тестирования распределенной информационной системы. СПб: Изд-во СПбГУ ИТМО, 2005. 147 с.\n3.\tFowler M. Domain specific languages. Addison-Wesley Professional, 2010, 640 p.\n4.\tKirgizov G.V., Kirilenko I.A. Heterogeneous architectures programming library. Proc. ISP RAS, 2018, vol. 30, iss. 4, pp. 45-62. DOI: 10.15514/ISPRAS-2018-30(4)-3.\n5.\tБотов Д. С. Обзор современных средств создания и поддержки предметно -ориентированных языков программирования // Вестн. ЮУрГУ. 2013. Т. 13. № 1. С. 10-15.\n6.\tJetBrains. Meta Programming System. Create your own domain-specific language. URL: https://www. jetbrains.com/mps/ (дата обращения: 17.01.2019).\n7.\tRatiu D., Voelter M., Pavletic D. Automated testing of DSL implementations - experiences from building mbeddr. Software Quality J., 2018, vol. 26, iss. 4, pp. 1483-1518. DOI: 10.1145/2896921.2896922.\n8.\tСухов А.О. Разработка предметно-ориентированных языков на основе онтологий // Современные проблемы математики и ее прикладные аспекты: сб. тез. конф. Пермь, 2013. С. 45.\n9.\tGochenour P. Getting Started with Selenium for Automated Website Testing. URL: https://wiki. saucelabs.com/display/DOCS/Getting+Started+with+Selenium+for+Automated+Website+Testing (дата обращения: 29.12.2018).\n10.\tLeotta M., Clerissi D., Ricca F., Spadaro C. Improving test suites maintainability with the page object pattern: an industrial case study. Proc. ICSTW, Luxembourg, 2013, pp. 108-113. DOI: 10.1109/ICSTW. 2013.19.\n11.\tGray J., Yue S. SPOT: A DSL for Extending Fortran Programs with Metaprogramming. Advances in Software Engineering, 2014, vol. 2014, art. ID 917327, 23 p. DOI: 10.1155/2014/917327.\n12.\tHandy non-default settings for MPS. URL: http://dslfoundry.com/category/meta-programming-system/ (дата обращения: 11.03.2019).\n13.\tRadojicic M. Selenium + JavaScript Best Practices. URL: https://blog.testproject.io/2018/03/08/ selenium-javascript-best-practices/ (дата обращения: 02.02.2019).\nSoftware & Systems\tReceived 11.04.19\nDOI: 10.15827/0236-235X.128.601-606\t2019, vol. 32, no. 4, pp. 601-606\nDomain-specific languages for testing web applications V.G. Fedorenkov l, Student, vlad.fedorenkov@gmail.com\nP.V. Balakshin l, Ph.D. (Engineering), Associate Professor, pvbalakshin@gmail.com\n1 The National Research University of Information Technologies, Mechanics and Optics, St. Petersburg, 197101, Russian Federation\nAbstract. The desire to release a high quality product with minimal errors often raises many problems regarding product testing for developers of both large and smaller projects. This work is devoted to searching for solutions for these problems.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nThe paper compares the main methods as well as the existing software tools for creating and supporting domain specific languages aimed at working with test scripts to testing interfaces of web applications. It also\nconsiders existing tools for working with Selenium, reviews the methodology of writing DSL (with further selection of the most appropriate), shows how to implement a prototype of DSL based on Selenium and to test and assess the applicability of a prototype. It describes the advantages of using DSL in testing, its functional and non-functional requirements, shows the developed DSL in a simplified form, the language structure (Java-packages).\nOne of the main criteria for working with all of the abovementioned is the involvement of non-technical specialists at each testing stage (solving the so-called translation problem), which is important for implementing comprehensive testing of a software product.\nOne of the key features of the article is the demonstration of implementing a DSL prototype based on Selenium, followed by testing and evaluating the applicability of the implemented prototype. The paper shows a method of creating an additional metaprogramming tool for further simplification of creation, support, and modification of the developed test scripts.\nKeywords: DSL, software, testing, web application, development, user interface, functionality, Selenium.\nReferences\n1.\tKulikov S.S. Software Testing. Base Course. 2nd ed. Minsk, 2017, 312 p.\n2.\tYermykin A.A. Development of a Method for Constructing a Load-Testing Complex of a Distributed Information System. PhD Thesis. St. Petersburg, SPb ITMO Publ., 2005, 147 p.\n3.\tFowler M. Domain Specific Languages. Addison-Wesley Prof. Publ., USA, 2010, 640 p.\n4.\tKirgizov G.V., Kirilenko I.A. Heterogeneous Architectures Programming Library. Proc. ISP RAS. 2018, vol. 30, iss. 4, pp. 45-62. DOI: 10.15514/ISPRAS-2018-30(4)-3.\n5.\tBotov D.S. Review of modern development and support tools for domain-specific programming languages. Bulletin of South Ural State Univ. Series Computer Technologies, Control, Radioelectronics. 2013, vol. 13, no. 1, pp. 10-15 (in Russ.).\n6.\tJetBrains. Meta Programming System. Create Your Own Domain-Specific Language. Available at: https://www.jetbrains.com/mps/ (accessed January 17, 2019).\n7.\tRatiu D., Voelter M., Pavletic D. Automated testing of DSL implementations - experiences from building mbeddr. Software Quality J. 2018, vol. 26, iss. 4, pp. 1483-1518. DOI: 10.1145/2896921.2896922.\n8.\tSukhov A.O. Ontology based creation of domain specific languages. Conf. Proc. Actual problems of mathematics and its application aspects. Perm, 2013, p. 45 (in Russ.).\n9.\tGochenour P. Getting Started with Selenium for Automated Website Testing. Available at: https://wiki. saucelabs.com/display/DOCS/Getting+Started+with+Selenium+for+Automated+Website+Testing (accessed December 29, 2018).\n10.\tLeotta M., Clerissi D., Ricca F., Spadaro C. Improving test suites maintainability with the page object pattern: An industrial case study. Proc. 2013 IEEE 6th Intern. Conf. on Software Testing, Verification and Validation Workshops. Luxembourg, 2013, pp. 108-113. DOI: 10.1109/ICSTW.2013.19.\n11.\tGray J., Yue S. SPOT: A DSL for extending fortran programs with metaprogramming. Advances in Software Engineering. 2014, vol. 2014, art. ID 917327, 23 p. DOI: 10.1155/2014/917327.\n12.\tHandy Non-Default Settings for MPS. Available at: http://dslfoundry.com/category/meta-program-ming-system/ (accessed March 11, 2019).\n13.\tRadojicic M. Selenium + JavaScript Best Practices. Available at: https://blog.testproject.io/2018/03/08/ selenium-javascript-best-practices/ (accessed February 2, 2019).\nДля цитирования\nФедоренков В.Г., Балакшин П.В. Особенности применения предметно-ориентированных языков для тестирования веб-приложений // Программные продукты и системы. 2019. Т. 32. № 4. С. 601-606. DOI: 10.15827/0236-235X.128.601-606.\nFor citation\nFedorenkov V.G., Balakshin P.V. Domain-specific languages for testing web applications. Software & Systems. 2019, vol. 32, no. 4, pp. 601-606 (in Russ.). DOI: 10.15827/0236-235X.128.601-606.\n",
    "download_url": "https://cyberleninka.ru/article/n/osobennosti-primeneniya-predmetno-orientirovannyh-yazykov-dlya-testirovaniya-veb-prilozheniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/metody-optimizatsii-dostupnosti-informatsionnyh-resursov-uchrezhdeniy-kultury",
    "slug": "metody-optimizatsii-dostupnosti-informatsionnyh-resursov-uchrezhdeniy-kultury",
    "title": "Методы оптимизации доступности информационных ресурсов учреждений культуры",
    "abstract_description": "Рассмотрены вопросы увеличения доступности информационных ресурсов учреждений культуры за счет методов клиентской оптимизации (прикладного программного обеспечения). Представлены результаты теоретических и практических работ в области высокой производительности и доступности информационных ресурсов со стороны клиентского приложения.",
    "full_text_body": "\n\n\n\n\uFEFF120\nУДК 004.455.1:004.738.12\nН. С. Мациевский\nМЕТОДЫ ОПТИМИЗАЦИИ доступности ИНФОРМАЦИОННЫХ РЕСУРСОВ УЧРЕЖДЕНИЙ КУЛЬТУРЫ\nРассмотрены вопросы увеличения доступности информационных ресурсов учреждений культуры за счет методов клиентской оптимизации (прикладного программного обеспечения). Представлены результаты теоретических и практических работ в области высокой производительности и доступности информационных ресурсов со стороны клиентского приложения.\nClient-side optimization methods are very efficient to improve performance of web resources of culture organizations. In comparison to server-side optimization these methods are related to frontend architecture only and can't be achieved only with additional hardware.\nКлючевые слова: клиентская оптимизация, учреждения культуры, программное обеспечение, информационные ресурсы.\nKey words: client-side optimization, web resources, culture organization, web performance.\nПри создании информационных ресурсов, обладающих высокой доступностью в сети Интернет, должен присутствовать и клиентский, и серверный подход. Главное отличие клиентского подхода состоит в том, что в качестве объекта оптимизации рассматриваются страницы информационного ресурса, получаемые браузером пользователя. Эти страницы являются HTML-документом, содержащим вызовы внешних объектов, а также сами внешние объекты (чаще всего — файлы CSS, файлы JavaScript и изображения).\nДоказано, что увеличение доступности страниц информационного ресурса на различных стадиях загрузки принципиально возможно за счет ограниченного количества методов при исключении из рассмотрения всех факторов, относящихся к серверному программному обеспечению и каналу передачи данных [2].\nПроцедуру анализа проблем доступности информационного ресурса можно разделить на несколько основных стадий: изучение страниц ресурса и их компонентов, анализ стадий загрузки страниц и анализ характеристик браузеров, которые применяются пользователями для доступа к конкретным ресурсам [3].\nЦелью оптимизации доступности может быть решение задач:\n—\tдостижение минимально возможного времени загрузки какой-либо конкретной страницы;\n—\tдостижение минимально возможного времени загрузки группы страниц, просматриваемых в произвольном порядке;\nВестник Балтийского государственного университета им. И. Канта. 2011. Вып. 5. С. 120 — 121.\nМетоды оптимизации доступности информационных ресурсов\n—\tобеспечение минимально возможного времени с момента запроса страницы до момента появления у пользователя возможности просматривать страницу и взаимодействовать с ней.\nВыше дан далеко не полный перечень предполагаемых целей. Иногда и вовсе требуется достигать компромисса и выбирать между несколькими взаимоисключающими вариантами оптимизации доступности. В таких ситуациях лучше иметь максимум сведений о посетителях информационных ресурсов.\nОчевидный способ увеличения скорости загрузки страницы — уменьшение размера загружаемых объектов. В большинстве ситуаций можно без потерь содержания уменьшить суммарный размер данных, которые загружаются пользователями.\nПомимо непосредственной загрузки каждого внешнего объекта браузеру необходимо совершить ряд дополнительных действий, вызывающих существенные временные издержки. При отсутствии этих издержек один внешний объект всегда загружается быстрее, чем несколько объектов того же суммарного размера, загружающихся последовательно.\nНаибольший эффект от уменьшения количества запросов к серверу ощутят пользователи аппаратов с низкой пропускной способностью канала и большим временем отклика от сервера — обычно это пользователи мобильных устройств и коммутируемых соединений [1].\nПрименение всей совокупности методов повышения доступности информационных ресурсов решает задачу распространения содержания информационных ресурсов учреждений культуры и мультимедийных материалов, на них расположенных, для пользователей из труднодоступных мест (коммутируемый доступ и места слабого проникновения сети Интернет) без потери качества передаваемой информации.\nСписок литературы\n1.\tМациевский Н. С. Разгони свой сайт. М., 2009.\n2.\tМациевский Н. С., Степанищев Е. В., Кондратенко Г. И. Реактивные веб-сайты. М., 2010.\n3.\tМациевский Н. С. Проблемы скорости загрузки веб-ресурсов на стороне клиента: классификация и методы решения // Всероссийский конкурсный отбор обзорно-аналитических статей по приоритетному направлению «Информационно-телекоммуникационные системы». М., 2008.\nОб авторе\nНиколай Сергеевич Мациевский — асп., Московский государственный университет культуры и искусств, e-mail: speed@webo.name\nAuthor\n121\nNikolay Matsievsky — PhD student, Moscow State University of Culture and Arts, e-mail: speed@webo.name\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n",
    "download_url": "https://cyberleninka.ru/article/n/metody-optimizatsii-dostupnosti-informatsionnyh-resursov-uchrezhdeniy-kultury/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/programmnoe-obespechenie-na-osnove-veb-tehnologiy-dlya-geonavigatsii-neftegazovyh-skvazhin",
    "slug": "programmnoe-obespechenie-na-osnove-veb-tehnologiy-dlya-geonavigatsii-neftegazovyh-skvazhin",
    "title": "Программное обеспечение на основе веб-технологий для геонавигации нефтегазовых скважин",
    "abstract_description": "Для эффективного освоения залежей углеводородов чрезвычайно важной становится высокая точность проводки горизонтальных скважин в целевых пластах-коллекторах. В процессе бурения геонавигация скважины со сложной траекторией выполняется по геофизическим данным в реальном масштабе времени. Представленная работа посвящена разработке нового программного обеспечения для геонавигации нефтегазовых скважин с горизонтальным завершением. Для решения задач геонавигации используются алгоритмы, основанные на методах корреляции каротажных данных и численной инверсии измерений электромагнитного каротажа. Разработанное новое программное приложение основано на веб-технологиях и имеет клиент-серверную архитектуру. Для оптимизации времени выполнения ресурсоемких расчетов используются высокопроизводительные облачные вычисления.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 550.832\nDOI 10.25205/1818-7900-2019-17-2-5-17\nПрограммное обеспечение на основе веб-технологий для геонавигации нефтегазовых скважин\nК. Н. Даниловский \\ А. Р. Дудаев 1 2, В. Н. Глинских 1-3 М. Н. Никитенко 1, И. А. Москаев 1 2\n1 Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН 2 Новосибирский государственный университет 3 Новосибирский государственный технический университет Новосибирск, Россия\nАннотация\nДля эффективного освоения залежей углеводородов чрезвычайно важной становится высокая точность проводки горизонтальных скважин в целевых пластах-коллекторах. В процессе бурения геонавигация скважины со сложной траекторией выполняется по геофизическим данным в реальном масштабе времени. Представленная работа посвящена разработке нового программного обеспечения для геонавигации нефтегазовых скважин с горизонтальным завершением. Для решения задач геонавигации используются алгоритмы, основанные на методах корреляции каротажных данных и численной инверсии измерений электромагнитного каротажа. Разработанное новое программное приложение основано на веб-технологиях и имеет клиент-серверную архитектуру. Для оптимизации времени выполнения ресурсоемких расчетов используются высокопроизводительные облачные вычисления. Ключевые слова\nпрограммное обеспечение, веб-технологии, геонавигация, каротаж в процессе бурения, горизонтальная скважина, численная инверсия, высокопроизводительные вычисления, клиент-серверная архитектура, облачные вычисления Благодарности\nАвторы благодарят Научно-производственное предприятие геофизической аппаратуры «Луч» за предоставленные практические материалы.\nРазвитие программно-алгоритмической базы математического моделирования и инверсии электромагнитных полей в пространственных моделях сред выполнено в рамках ФНИ № 0331-2019-0014 «Скважинная геофизика в электропроводящих анизотропных диспергирующих средах на основе высокопроизводительных решений трехмерных задач, высокоточных данных каротажа и лабораторных исследований керна». Для цитирования\nДаниловский К. Н., Дудаев А. Р., Глинских В. Н., Никитенко М. Н., Москаев И. А. Программное обеспечение на основе веб-технологий для геонавигации нефтегазовых скважин // Вестник НГУ. Серия: Информационные технологии. 2019. Т. 17, № 2. С. 5-17. БО! 10.25205/1818-7900-2019-17-2-5-17\nWeb-Technologies Based Software for Oil and Gas Wells Geosteering\nK. N. Danilovskiy \\ A. R. Dudaev 1 2, V. N. Glinskikh 1-3 M. N. Nikitenko 1, I. A. Moskaev 1 2\n1 Trofimuk Institute of Petroleum Geology and Geophysics SB RAS 2 Novosibirsk State University 3 Novosibirsk State Technical University Novosibirsk, Russian Federation\nAbstract\nAccuracy of the horizontal well placement in the target reservoir becomes essential for efficient oilfield development. Geosteering of a well with a complex trajectory is performed using real-time geophysical data obtained while drilling.\n© К. Н. Даниловский, А. Р. Дудаев, В. H. Глинских, M. H. Никитенко, И. А. Москаев, 2019\nThe presented work is devoted to the development of a new software for horizontal oil and gas wells geosteering. Algorithms based on logging data correlation and electromagnetic logging data numerical inversion methods are used for well placement. The developed application is based on web-technologies and has a client-server architecture. To optimize the resource-intensive calculations execution time, high-performance cloud computing is used. Keywords\nsoftware, web-technologies, geosteering, logging while drilling, horizontal well, numerical inversion, highperformance computations, client-server architecture, cloud computations Acknowledgements\nThe authors acknowledge Scientific Production Enterprise of geophysical equipment \"Looch\" (SPE \"Looch\") for the provided practical materials.\nThe development of the software-algorithmic base of electromagnetic fields mathematical modeling and inversion in spatial models of media was carried out within the FSR No. 0331-2019-0014 \"Borehole geophysics in electrically conductive anisotropic dispersing media based on three-dimensional problems high-performance solutions, high-precision logging data and laboratory core studies\". For citation\nDanilovskiy K. N., Dudaev A. R., Glinskikh V. N., Nikitenko M. N., Moskaev I. A. Web-Technologies Based Software for Oil and Gas Wells Geosteering. VestnikNSU. Series: Information Technologies, 2019, vol. 17, no. 2, p. 5-17. (in Russ.) DOI 10.25205/1818-7900-2019-17-2-5-17\nВведение\nВ связи с повсеместным переходом в бурении от вертикальных скважин к скважинам с горизонтальным завершением существенно усложняется и расширяется круг задач промысловой геофизики. При бурении горизонтального участка скважины применяют геонавигацию - оперативную корректировку траектории бурения с целью ее удержания в целевом нефтеносном пласте. Следует отметить, что геонавигация - это сложный процесс, требующий использования дорогостоящего оборудования и программного обеспечения (ПО), а также работы квалифицированных геофизиков-геонавигаторов. Решение о корректировке траектории принимают непосредственно в процессе бурения на основе каротажных данных с использованием приборов, входящих в состав буровой колонны. Стандартные программные комплексы, предназначенные для интерпретации каротажных данных из вертикальных скважин, не подходят для проведения геонавигации, что приводит к необходимости разработки специализированного ПО.\nКаротаж в процессе бурения начал активно развиваться еще в 80-х гг. прошлого столетия [1]. Несмотря на это, в России для каротажа в процессе бурения до сих пор используют приборы в основном только крупных иностранных нефтесервисных компаний: Baker Hughes, Halliburton, Schlumberger, Weatherford. В рамках реализации программ импортозамещения Научно-производственным предприятием геофизический аппаратуры «Луч» (НПП ГА «Луч», Новосибирск) и Институтом нефтегазовой геологии и геофизики им. А. А. Трофиму-ка СО РАН (ИНГГ СО РАН, Новосибирск) разработан и опробован на месторождениях Западной Сибири аппаратурный комплекс «ЛУЧ». Комплекс включает в себя ряд приборов для проведения каротажа в процессе бурения, при этом набор геофизических измерений достаточен для проведения как геонавигации, так и петрофизической интерпретации.\nОперативная интерпретация данных каротажа в процессе бурения может проводиться либо самим заказчиком - нефтедобывающей компанией, либо теми же нефтесервисными компаниями. Для нефтедобывающих компаний на российском рынке в настоящее время представлен ряд программных решений для геонавигации: «Геонафт» от компании Геонавигационные технологии, «Geosteering office» от Геонавигация, «StarSteer» от ROGII. Однако всё перечисленное ПО обладает одним недостатком: не использует наиболее продвинутые подходы для задач геонавигации, основанные на алгоритмах численных решений прямых и обратных задач электродинамики в классе реалистичных интерпретационных моделей. Сервисные компании используют ПО, узко ориентированное на «свои» приборы. В связи с этим в ИНГГ СО РАН разработано ПО, позволяющее проводить геонавигацию скважин\nс использованием комплекса «ЛУЧ» двумя методами: корреляции каротажных данных и численной инверсии измерений электромагнитного каротажа (ЭМК).\nАппаратурный комплекс «ЛУЧ» для каротажа в процессе бурения\nПриборы, входящие в состав комплекса каротажа в процессе бурения (рис. 1), позволяют проводить геофизические исследования в скважинах следующими методами:\n•\tмногозондовый высокочастотный индукционный каротаж (ВИКПБ);\n•\tбоковой сканирующий каротаж (БКС);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tгамма-каротаж (ГК);\n•\tнейтрон-нейтронный каротаж по тепловым нейтронам (ННК-Т);\n•\tгамма-гамма плотностной каротаж (ГГК-П);\n•\tдругие измерения (инклинометрия, положения угла отклонителя, температура, ударные нагрузки).\nа\nб\nРис. 1. Приборы каротажа в процессе бурения, входящие в состав комплекса «ЛУЧ»:\nа - ВИКПБ; б - БКС\nFig. 1. Logging while Drilling Tools Included in the Complex \"LOOCH\": a - VIKPB; b - BK/BKS\nДля решения ключевых задач геологического сопровождения бурения используют данные ЭМК из-за его наибольшей радиальной глубинности. Входящий в аппаратурный комплекс «ЛУЧ» прибор ВИКПБ, основанный на методе высокочастотного индукционного каротажа ВИКИЗ [2; 3], выполняет измерения относительных амплитудно-фазовых характеристик эдс, наведенной в приемных катушках. Измерения эдс проводятся в двух основных и четырех дополнительных трехкатушечных зондах с длинами от 0,7 до 1,4 м на двух частотах 0,88 и 3,5 МГц. Зонды одинаковой длины различаются базой, т. е. расстоянием между дальней и ближней приемными катушками. В парах приемных катушек регистрируются разности фаз наведенных эдс Дф и отношения амплитуд ДА, а также выполняется их трансформация в кажущееся удельное электрическое сопротивление (УЭС).\nПроведенные опытно-промышленные испытания приборов каротажа в процессе бурения «ЛУЧ» на месторождениях АО «НК «Роснефть» и АО «Сургутнефтегаз» показывают, что приборы соответствуют техническим и эксплуатационным требованиям для бурения наклонно направленных и горизонтальных скважин [4; 5]. Однако для успешной проводки скважины недостаточно одних приборов каротажа в процессе бурения, необходимо также и специализированное ПО для оперативной интерпретации геофизических данных.\nАрхитектура и ИТ-технологии\nРазработанное ПО для геонавигации представляет собой веб-приложение, состоящее из трех основных структурных блоков: клиентского, серверного и вычислительного (рис. 2).\nКлиент отвечает только за визуализацию данных, что сводит к минимуму требования, предъявляемые к оборудованию. Использовать такое ПО можно на любых устройствах: от персональных компьютеров до смартфонов. Требуется лишь наличие веб-браузера и доступ к серверу по сети. При этом обновление приложения выполняется для всех клиентов одновременно благодаря использованию единого ресурса. Серверная часть обрабатывает пользовательские запросы, управляет очередностью выполнения ресурсоемких задач и возвращает результаты расчетов клиентам. В вычислительной части непосредственно производятся расчеты на серверах (кластерах) с использованием распределенных масштабируемых и высокопроизводительных параллельных вычислений.\nРис. 2. Схема архитектуры разработанного приложения для геонавигации Fig. 2. Architecture Scheme of the Developed Geosteering Application\nНиже приведен полный стек технологий, использованный при разработке ПО:\n•\tTypeScript 1 и JavaScript 2 - языки программирования (ЯП), используемые для создания графического интерфейса, отображаемого в браузерах;\n•\tAngular 3 - платформа для сборки веб-приложений из созданных компонентов и используемых библиотек;\n•\tD3 4 - библиотека для визуализации в формате SVG сложных элементов: траектории скважины, моделей геологических пластов, каротажных данных;\n•\tNodeJS 5 - платформа, позволяющая разрабатывать серверную часть на языке JavaScript;\n•\tMongoDB 6 - нереляционная база данных для хранения учетных записей и пользовательских данных;\n•\tRabbitMQ 7 - брокер сообщений для взаимодействия сервера с вычислительными модулями;\n1\tTypeScript documentation / Microsoft. URL: https://www.typescriptlang.org/docs\n2\tJavaScript documentation / Mozilla foundation. URL: https://developer.mozilla.org/bm/docs/Web/JavaScript\n3\tAngular documentation / Google. URL: https://angular.io/docs\n4\tD3.js documentation / Bostock M., Davies J., Heer J., Ogievetsky V. URL: https://github.com/d3/d3/wiki\n5\tNode.js documentation / Various. URL: https://nodejs.org/en/docs\n6\tMongoDB documentation / MongoDB Inc. URL: https://docs.mongodb.com/manual\n•\tDocker 8 - платформа для создания кроссплатформенных вычислений;\n•\tС++ 9, Fortran 10 - ЯП, позволяющие разрабатывать высокопроизводительные вычислительные алгоритмы.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nКлиент\nИнтерфейс, с которым работает пользователь, отображается в веб-браузере. За счет этого достигается кроссплатформенность клиентской части, поскольку веб-браузеры есть практически во всех операционных системах. Движок JavaScript V8 11, считывающий и исполняющий исходный код на JavaScript, а также другие аналоги встроены в большинство браузеров. Однако не все браузеры в одинаковой степени хорошо поддерживают новые стандарты ЯП. Поэтому для полной совместимости необходимо транслировать код в более старые версии JavaScript. Для этого в проекте используется язык TypeScript. Кроме того, статическая типизация, которая вводится TypeScript, фиксирует несоответствия типов на этапе трансляции в необходимый стандарт JavaScript до непосредственного выполнения программы. Это облегчает читаемость кода, а также помогает осуществлять поиск ошибок на этапе разработки и компиляции.\nДля упрощения и ускорения разработки существуют различные фреймворки, определяющие структуру веб-приложения. Одним из наиболее известных является активно развивающийся Angular. Его отличительная особенность состоит в том, что он предназначен для разработки приложений именно на TypeScript. Для создания интуитивно понятного интерфейса используется библиотека Angular Material 12, являющаяся адаптацией Google Material Design 13. Этот пакет упрощает создание таких компонентов взаимодействия с интерфейсом, как кнопки, переключатели, вкладки и пр. В вышеописанной библиотеке реализованы только простые компоненты, поэтому не все элементы интерфейса могут быть отображены с ее помощью. Более сложные элементы, такие как каротажные диаграммы и графические изображения моделей, визуализируются с помощью библиотеки D3. Она отличается высокой производительностью, гибкостью и возможностью работы с масштабируемой векторной графикой.\nСервер\nСерверная часть принимает запросы пользователей, выполняет их обработку, взаимодействует с вычислительной частью и отправляет результаты обратно клиенту. Для обеспечения доступности (возможности всегда отвечать на запросы пользователей) сам сервер не выполняет сложных вычислений. При получении запроса на проведение расчетов происходит генерация входных данных для вычислительных алгоритмов. Они добавляются в очередь сообщений с заданной меткой, затем выполняются расчеты, и результаты возвращаются обратно в очередь сообщений. Последние изымаются и обрабатываются, а пользователю отправляются данные для отображения.\nДля разработки серверной части выбрана программная платформа NodeJS, позволяющая разрабатывать серверную и клиентскую части на одном ЯП. NodeJS основана на движке V8, транслирующем JavaScript в машинный код. Поскольку для введения типизации используется TypeScript, перед запуском код транслируется в JavaScript, используя компилятор TypeScript. Для хранения пользовательских учетных записей и геофизических данных используется NoSQL база данных MongoDB. MongoDB предназначена для хранения данных без задания схем. Это позволяет проще менять формат хранимой информации, в сравнении\n7\tRabbitMQ documentation / Pivotal Software. URL: https://www.rabbitmq.com/documentation.html\n8\tDocker documentation / Docker Inc. URL: https://docs.docker.com\n9\tC++ documentation / Cppreference.com. URL: https://cppreference.com\n10\tFortran documentation / O. Certic. URL: https://www.fortran90.org\n11\tV8 documentation / V8 project. URL: https://v8.dev/docs\n12\tAngular Material documentation / Google. URL: https://material.angular.io\n13\tMaterial Design documentation / Google. URL: https://material.io\nс SQL решениями. Для взаимодействия с вычислительной серверная часть использует очередь сообщений RabbitMQ. Это делает их слабо зависимыми друг от друга, а также решает задачу сохранения еще не выполненных задач.\nВычислительные модули и организация взаимодействия с ними\nАлгоритмы численной инверсии, лежащие в основе одного из методов геонавигации, требуют значительных вычислительных мощностей, особенно для трехмерных моделей среды. Для повышения быстродействия используются распределенные масштабируемые и высокопроизводительные параллельные вычисления. Численная инверсия данных ЭМК выполняется последовательно в заданных интервалах скважины (инверсионных окнах). Это делает возможным организацию параллельных вычислений на графических ускорителях и сопроцессорах [6].\nВысокопроизводительные вычисления требуют распараллеливания кода на низкоуровневых ЯП (С++ / Fortran). Использование таких языков требует предварительной компиляции кода со всеми необходимыми зависимостями под каждый вычислительный ресурс. Для проверки корректности работы алгоритма его необходимо тестировать на каждой машине в отдельности. Альтернативным вариантом является запуск программы с помощью платформы Docker. Достаточно поместить вычислительную программу и все ее зависимости в Docker-контейнер вместе со скриптом, передающим данные из очереди сообщений в программу и возвращающим результаты. Такой контейнер работает быстро и надежно вне зависимости от вычислительного окружения, как на Linux, так и на Windows.\nМетоды геонавигации\nРазработанное ПО позволяет проводить оперативную интерпретацию данных каротажа в процессе бурения, полученных комплексом «ЛУЧ». За проведение геонавигации отвечают модули «Корреляция» и «Инверсия», использующие методы корреляции каротажных данных и численной инверсии соответственно.\nКорреляция каротажных данных\nБольшая часть существующих программных решений для геонавигации основана на идейно близких методах, имеющих в литературе различные названия: «модельно-стратиграфиче-ский», «сравнения каротажных данных», «матчинг», «model-compare-update» [7; 8]. Их суть состоит в сопоставлении данных, измеряемых приборами в процессе бурения, и синтетических данных, полученных в моделях среды, построенных по опорным скважинам. По этим априорным данным создается двумерная модель части разреза, в которой предполагается проводить горизонтальный участок скважины. Синтетические диаграммы каротажа вычисляются в такой модели на проекции запланированной траектории горизонтальной скважины. Начальная модель корректируется так, чтобы добиться совпадения между синтетическими и практическими данными.\nВ разработанном ПО каротажные данные пилотной субвертикальной скважины, приведенные к истинной вертикальной глубине, распространяются по латерали, тем самым формируя стартовую двумерную модель геологической среды. Синтетические каротажные диаграммы в горизонтальной скважине, как правило, получают путем линейной интерполяции данных модели среды в точках с соответствующими вертикальными глубинами. Однако линейная интерполяция не учитывает влияния прилегающих пластов (вмещающей среды) на сигналы ЭМК, которое обусловлено большой глубинностью метода. В связи с этим синтетические сигналы ВИКПБ рассчитываются с помощью специально разработанных алгоритмов численного моделирования [9].\nГеонавигатор работает с данными, привязанными к глубине по стволу скважины, а также с их проекциями на вертикальную и горизонтальную оси. Стартовая модель разбивается на блоки по горизонтали, при этом для каждого из блоков задается свой угол наклона\n(рис. 3). При наличии предпосылок в модель могут вводиться разломы, т. е. линии, на которых происходит скачкообразное изменение параметров модели. После каждого изменения параметров модели или траектории скважины синтетические каротажные диаграммы рассчитываются заново, и процесс подбора повторяется. Достоверность модели, полученной в результате таких операций, достигается за счет наилучшего совпадения синтетических и практических данных каротажа в процессе бурения. Совпадение признается достаточным, если различие между практическими и синтетическими данными в среднем не превышает погрешности измерений.\n50\t100\tIS0\t21X1\t2SU\t300\n3730 ■\nч\nДлина горизонтальной проекции ствола скважины, м\nРис. 3. Интерфейс модуля для проведения геонавигации методом корреляции каротажных данных Fig. 3. Interface of the Module for Geosteering Using Logging Data Corrélation Method\nОднако метод геонавигации на основе корреляции каротажных данных обладает существенным недостатком. Поскольку датчики каротажных приборов располагаются на некотором удалении от бурового долота, пересечение геологической границы определяется лишь постфактум. Траекторию скважины корректируют, чтобы вернуться в пласт, а не просто удержаться в нем. Такие способы геонавигации принято называть «реактивными». Незапланированные пересечения геологических границ зачастую приводят к нежелательным последствиям. В частности, пересечение водонефтяного контакта может привести к поступлению воды в скважину, а вскрытие газовой шапки - и вовсе к аварийной ситуации.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nЧисленная инверсия данных ЭМК\nВ противоположность реактивным выделяют «проактивные» методы геонавигации, когда траекторию скважины корректируют до того, как произойдет нежелательное пересечение геологической границы буровым долотом [10-13]. Радиальная глубинность исследования ВИКПБ может достигать 3 м [14; 15]. Это позволяет проводить проактивную геонавигацию и картировать геоэлектрические границы коллектора в процессе бурения, используя алгоритмы численной инверсии сигналов прибора.\nЧисленная инверсия данных ЭМК представляет собой целенаправленный подбор параметров геоэлектрической модели путем минимизации функционала невязки измеренных и синтетических данных [16-18]. В разработанном ПО моделирование синтетических данных проводится путем численного решения прямой задачи ЭМК в классе слоисто-однородных моделей методом разделения переменных. Минимизация функционала невязки выполняется с использованием алгоритма на основе метода деформируемых многогранников.\nРазработанное ПО предоставляет пользователю гибкий интерфейс для выполнения по-оконной инверсии сигналов ВИКПБ в автоматическом и ручном режимах (рис. 4). Геонавигатор загружает входные данные, выбирает интервал для инверсии, устанавливает ширину и перекрытие окон. Стартовая модель для инверсии подбирается, исходя из априорных данных, либо импортируется из модуля геонавигации методом корреляции каротажных данных. Алгоритм численной инверсии позволяет использовать произвольные комбинации сигналов из полного набора измерений ВИКПБ. Благодаря этому при ограниченной скорости передачи данных в реальном времени для инверсии можно задействовать только часть измеряемых сигналов. Уточнить параметры модели можно, получив всю информацию из памяти прибора, после его подъема из скважины на поверхность.\nРис. 4. Интерфейс модуля для проведения геонавигации методом инверсии данных ЭМК Fig. 4. Interface of the Module for Geosteering Using Electromagnetic Logging Data Inversion Method\nПрименение метода геонавигации с использованием численной инверсии данных ВИКПБ позволяет картировать границы пласта-коллектора и заблаговременно корректировать траекторию скважины в процессе бурения, не пересекая сами границы. Такой подход значительно повышает эффективную длину ствола скважины, т. е. расстояние, пройденное скважиной внутри продуктивного пласта. Помимо этого, инверсия данных ЭМК позволяет изучать электрофизические характеристики отложений, не вскрытых скважиной и располагающихся ниже по разрезу.\nМетоды геонавигации скважин развиваются в связи с возникновением практической потребности нефтегазовой отрасли в высокоточной проводке скважин с горизонтальным завершением во все более сложных геологических условиях. При этом ключевую роль играет развитие аппаратурной базы наклонно направленного бурения и каротажа в процессе бурения. Дальнейшее развитие методического аспекта ПО связано с внедрением модуля интерпретации скважинных имиджей УЭС, предоставляемых азимутальным прибором БКС [19-21].\nЗаключение\nРазработано ПО для геологического сопровождения бурения с использованием данных аппаратурного комплекса для каротажа в процессе бурения «ЛУЧ». Алгоритмическая составляющая ПО реализует два метода геонавигации. Первый использует традиционный подход корреляции каротажных данных, второй - численную инверсию данных ЭМК. Использование этих методов в комплексе позволяет повысить достоверность результатов интерпретации данных каротажа в процессе бурения, что приводит к более эффективной проводке скважины. Предложен облачный сервис для обработки и интерпретации геофизических данных с использованием кроссплатформенных распределенных масштабируемых вычислений. Использование современных вычислительных технологий позволяет значительно ускорить решение задачи численной инверсии, что необходимо для оперативной геонавигации.\nСписок литературы / References\n1.\tАксельрод С. М. Методы опережающей навигации при бурении горизонтальных скважин (по материалам зарубежной литературы) // Каротажник. 2012. № 219. С. 87-122.\nAkselrod S. M. Metody operezhajushhej navigacii pri burenii gorizontal'nyh skvazhin (po materialam za-rubezhnoj literatury) [Advance navigation methods for drilling horizontal wells (based on materials from foreign literature)]. Karotazhnik, 2012, no. 219, p. 87-122. (in Russ.)\n2.\tГлинских В. Н., Никитенко М. Н., Даниловский К. Н., Еремин В. Н., Москаев И. А.\nТелеметрические системы каротажа: программно-методическое обеспечение в процессе бурения наклонного-горизонтальных скважин // Neftegaz.RU. 2017. № 10. С. 42-49.\nGlinskikh V. N., Nikitenko M. N., Danilovskiy K. N., Eremin V. N., Moskaev I. A.\nTelemetricheskie sistemy karotazha: programmno-metodicheskoe obespechenie v processe bu-renija naklonnogo-gorizontal'nyh skvazhin [Telemetry logging systems: software and methodological support in the process of drilling inclined-horizontal wells]. Neftegaz.RU, 2017, no. 10, p. 42-49. (in Russ.)\n3.\tГлинских В. Н., Никитенко М. Н., Эпов М. И., Ерёмин В. Н. Алгоритмы и программное обеспечение для геонавигации по данным электромагнитного каротажа в процессе бурения // II Науч.-практ. конф. «Горизонтальные скважины 2017: Проблемы и перспективы»: расширенные тезисы докладов, 2017. 3G05. DOI 10.3997/2214-4609.201700431\nGlinskikh V. N., Nikitenko M. N., Epov M. I., Eremin V. N. Algorithms and Software for Geosteering According to LWD EM Data. In: Horizontal Wells 2017 Challenges and Opportunities: extended abstracts, 2017, pap. 3G05. (in Russ.) DOI 10.3997/2214-4609.201700431\n4.\tЕрёмин В. Н., Волканин Ю. М., Тарасов А. В. Аппаратурно-методическое обеспечение электромагнитного каротажа в процессе бурения // Каротажник. 2013. № 226. С. 6269.\nEremin V. N., Volkanin Yu. M., Tarasov A. V. Apparaturno-metodicheskoe obespechenie elektromagnitnogo karotazha v protsesse bureniya [Instrumental and methodological support of electromagnetic logging while drilling]. Karotazhnik, 2013, no. 226, p. 62-69 (in Russ.)\n5.\tКаюров К. Н., Ерёмин В. Н., Эпов М. И., Глинских В. Н., Сухорукова, К. В., Никитенко, М. Н. Аппаратура и интерпретационная база электромагнитного каротажа в процессе бурения // Нефтяное хозяйство. 2014. № 12. С. 112-115.\nKayurov K. N., Eremin V. N., Epov M. I., Glinskikh V. N., Sukhorukova K. V., Nikiten-\nko M. N. Electromagnetic-logging-while-drilling equipment and numerical inversion software. Oil Industry, 2014, no. 12, p. 112-115. (in Russ.)\n6.\tДудаев А. Р., Соболев А. Ю., Глинских В. Н. Программное обеспечение с облачными вычислениями для электромагнитного каротажа в процессе бурения нефтегазовых скважин // XIX Науч.-практ. конф. «Геомодель 2017 - Вопросы геологоразведки и разработки месторождений нефти и газа»: расширенные тезисы докладов, 2017. CD-ROM 43814.\nDudaev A. R., Sobolev A. Yu., Glinskikh V. N. Development of cloud computing software for LWD measurements and geosteering. In: Extended Abstracts of the 19th Science and Applied Research Conference on Oil and Gas Geological Exploration and Development \"Geomodel 2017\", 2017, CD-ROM 43814 (in Russ.)\n7.\tSalehi M., Abadie J., Asif S., Ito K., Maggs D., Morriss C., Ortenzi L., Rasmus J., Griffiths R. Rapid and practical characterization of near-wellbore layer structure and properties in high-angle and horizontal wells. In: Transactions of the SPWLA 56th Annual Logging Symposium, 2015, pap. DDDD.\n8.\tPolyakov V., Omeragic D., Shetty S., Brot B., Habashy T., Mahesh A., Friedel T., Vik T., Flugsrud T. 3D Reservoir Characterization Workflow Integrating High Angle and Horizontal Well Log Interpretation with Geological Models. In: Extended abstracts of the International Petroleum Technology Conference, 2013, pap. 16828. DOI 10.2523/iptc-16828-abstract\n9.\tNikitenko M. N., Epov M. I., Glinskikh V. N., Suhorukova K. V., Eremin V. N. Development of LWD High-frequency Resistivity Tool. In: Extended abstracts of the 6th Saint Petersburg International Conference & Exhibition «Geosciences - Investing in the Future», 2014, pap. ThD05. DOI 10.3997/2214-4609.20140177\n10.\tRabinovich M., D'Arcy B., Leslie R. Quantifying VOI in geosteering: a North Sea case study. In: Transactions of the SPWLA 59th Annual Logging Symposium, 2018, pap. P.\n11.\tLarsen D., Antonov Y., Luxey P., Skillings J., Skaug M., Wagner V. Navigating the horizontal section in a heterogeneous formation while using Extra Deep Azimuthal Resistivity for optimizing the wellbore placement within a narrow TVD window. In: Transactions of the SPWLA 57th Annual Logging Symposium, 2016, pap. IIII.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n12.\tSviridov M., Mosin A., Antonov Y., Nikitenko M., Martakov S., Rabinovich M. New\nsoftware for processing of LWD extra-deep resistivity and azimuthal resistivity data. SPE Reservoir Evaluation and Engineering, 2014, vol. 17, no. 02, p. 109-127. DOI 10.2118/160257-pa\n13.\tTilsley-Baker R., Antonov Y., Martakov S., Maurer H., Mosin A., Sviridov M., Klein K., Iversen M., Barbosa J., Carneiro G. Extra-Deep Resistivity Experience in Brazil Geosteering Operations. In: Extended abstracts of the SPE Annual Technical Conference and Exhibition, 2013, pap. 166309. DOI 10.2118/166309-ms\n14.\tЭпов М. И., Никитенко М. Н., Глинских В. Н., Сухорукова К. В. Численное моделирование и анализ сигналов электромагнитного каротажа в процессе бурения // Каротаж-ник. 2014. № 245. С. 29-42.\nEpov M. I., Nikitenko M. N., Glinskikh V. N., Sukhorukova K. V. Chislennoe modeliro-vanie i analiz signalov elektromagnitnogo karotazha v protsesse bureniya [Numerical modeling and analysis of electromagnetic logging while drilling signals]. Karotazhnik, 2014, no. 245, p. 29-42. (in Russ.)\n15.\tЭпов М. И., Никитенко М. Н., Сухорукова К. В., Глинских В. Н. Исследование возможностей электрического и электромагнитного каротажа в электрически макроанизо-\nтропных пластах, вскрытых наклонно-горизонтальными скважинами // Каротажник. 2016. № 260. С. 64-79.\nEpov M. I., Nikitenko M. N., Sukhorukova K. V., Glinskikh V. N. Issledovaniye vozmozh-nostey elektricheskogo i elektromagnitnogo karotazha v elektricheski makroanizotropnykh plastakh, vskrytykh naklonno-gorizontal'nymi skvazhinami [Investigation of the possibilities of electrical and electromagnetic logging in electrically macroanisotropic formations intersected by inclined-horizontal wells]. Karotazhnik, 2016, no. 260, p. 64-79. (in Russ.)\n16.\tНикитенко М. Н., Сухорукова К. В., Глинских В. Н., Ерёмин В. Н. Оперативная обработка и интерпретация данных электромагнитного каротажа на разных этапах строительства нефтегазовой скважины // IV Междунар. науч.-практ. конф. «Тюмень-2015: Глубокие горизонты науки и недр»: расширенные тезисы докладов. 2015. P06. DOI 10.3997/2214-4609.201412045\nNikitenko M. N., Sukhorukova K. V., Glinskikh V. N., Eremin V. N. Operativnaya obra-botka i interpretatsiya dannykh elektromagnitnogo karotazha na raznykh etapakh stroitel'stva neftegazovoj skvazhiny [Fast processing and interpretation of electromagnetic logging data at different oil and gas well construction stages]. In: Tyumen 2015 - Deep Subsoil and Science Horizons, 2015, pap. P06 (in Russ.) DOI 10.3997/2214-4609.201412045\n17.\tЭпов М. И., Глинских В. Н., Сухорукова К. В., Никитенко М. Н., Ерёмин В. Н. Численное моделирование и инверсия данных электромагнитного каротажа в процессе бурения и шаблонирования нефтегазовых скважин // Геология и геофизика. 2015. № 56 (8). С. 1520-1529. DOI 10.15372/gig20150809\nEpov M. I., Glinskikh V. N., Sukhorukova K. V., Nikitenko M. N., Eremin V. N. Forward modeling and inversion of LWD induction data. Russian Geology and Geophysics, 2015, vol. 56, no. 8, p. 1194-1200. (in Russ.) DOI 10.15372/gig20150809\n18.\tЭпов М. И., Никитенко М. Н., Сухорукова К. В., Глинских В. Н., Ерёмин В. Н., Гор-батенко А. А., Павлова М. А. Сигналы электромагнитного каротажа в процессе бурения и их численная инверсия // Геология и минерально-сырьевые ресурсы Сибири. 2014. № 3 (19). С. 49-55.\nEpov M. I., Nikitenko M. N., Sukhorukova K. V., Glinskikh V. N., Eremin V. N., Gorba-tenko A A., Pavlova M. A. Electromagnetic LWD signals and their numerical inversion. Geology and mineral resources of Siberia, 2014, no. 3 (19), p. 49-55. (in Russ.)\n19.\tDanilovskiy K., Glinskikh V., Nechaev O. 3D modelling of the new resistivity microimaging tool signals for logging while drilling. In: Extended Abstracts of the 80th EAGE Conference & Exhibition, 2018, pap. Tu SP2 01. DOI 10.3997/2214-4609.201801679\n20.\tГлинских В. Н., Даниловский К. Н., Нечаев О. В. Трехмерное численное моделирование сигналов азимутального микробокового каротажа в процессе бурения // Геология, геофизика и разработка нефтяных и газовых месторождений. 2018. № 10. С. 32-39. DOI 10.30713/2413-5011-2018-10-32-39\nGlinskikh V. N., Danilovsky K. N., Nechaev O. V. 3D numerical simulation of the azimuthal microlateral LWD signals. Geology, Geophysics and Development of Oil and Gas Fields, 2018, no. 10, p. 32-39. (in Russ.) DOI 10.30713/2413-5011-2018-10-32-39\n21.\tДаниловский К. Н., Нечаев О. В. Моделирование сигналов электрического LWD-мик-роимиджера применительно к задаче геонавигации горизонтальных скважин // Материалы V Всерос. молодежной науч.-практ. конф. «Науки о Земле. Современное состояние», 2018. С. 23-25.\nDanilovskiy K. N., Nechaev O. V. Modelirovanie signalov elektricheskogo LWD-mikro-imidzhera primenitel'no k zadache geonavigatsii gorizontal'nykh skvazhin [Simulation of LWD resistivity microimaging tool signals applied to the horizontal wells geosteering]. In: Proceed-\nings of the 5 th All-Russian Youth Scientific and Practical Conference \"Earth Sciences. Modern state\", 2018, p. 23-25. (in Russ.)\nМатериал поступил в редколлегию Received 21.03.2019\nСведения об авторах / Information about the Authors\nДаниловский Кирилл Николаевич, аспирант, младший научный сотрудник, Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН (пр. Академика Коптюга, 3, Новосибирск, 630090, Россия)\nKirill N. Danilovskiy, PhD Student, Junior Researcher, Trofimuk Institute of Petroleum Geology and Geophysics SB RAS (3 Koptyug Ave., Novosibirsk, 630090, Russian Federation)\nDanilovskiiKN@ipgg.sbras.ru ResearcherlD: 0-1475-2017\nДудаев Александр Русланович, лаборант, Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН (пр. Академика Коптюга, 3, Новосибирск, 630090, Россия), магистрант факультета информационных технологий, Новосибирский государственный университет (ул. Пирогова, 1, Новосибирск, 630090, Россия)\nAlexander R. Dudaev, Laboratory Assistant, Trofimuk Institute of Petroleum Geology and Geophysics SB RAS (3 Koptyug Ave., Novosibirsk, 630090, Russian Federation), Master's Student, Faculty of Information Technologies, Novosibirsk State University (1 Pirogov Str., Novosibirsk, 630090, Russian Federation)\nDudaevAR@ipgg.sbras.ru ResearcherID: D-4181-2019\nГлинских Вячеслав Николаевич, доктор физико-математических наук, профессор РАН, заведующий лабораторией, Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН (пр. Академика Коптюга, 3, Новосибирск, 630090, Россия), доцент кафедры геофизики геолого-геофизического факультета, Новосибирский государственный университет (ул. Пирогова, 1, Новосибирск, 630090, Россия), профессор кафедры интеллектуальных геофизических систем ФТФ, Новосибирский государственный технический университет (пр. К. Маркса, 20, Новосибирск, 630073, Россия)\nViacheslav N. Glinskikh, Doctor in Physics and Mathematics, Professor of the Academy of Sciences, Head of Laboratory, Trofimuk Institute of Petroleum Geology and Geophysics SB RAS (3 Koptaug Ave., Novosibirsk, 630090, Russian Federation), Associate Professor of Chair of Geophysics at the Department of Geology and Geophysics, Novosibirsk State University (1 Pirogov Str., Novosibirsk, 630090, Russian Federation), Professor, Novosibirsk State Technical University (20 Karl Marx Ave., Novosibirsk, 630073, Russian Federation)\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nGlinskikhVN@ipgg.sbras.ru ResearcherID: C-6551-2018\nНикитенко Марина Николаевна, кандидат технических наук, старший научный сотрудник, Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН (пр. Академика Коптюга, 3, Новосибирск, 630090, Россия)\nMarina N. Nikitenko, PhD, Senior Researcher, Trofimuk Institute of Petroleum Geology and Geophysics SB RAS (3 Koptaug Ave., Novosibirsk, 630090, Russian Federation)\nNikitenkoMN@ipgg.sbras.ru ResearcherID: J-6876-2018\nМоскаев Илья Алексеевич, инженер, Институт нефтегазовой геологии и геофизики им. А. А. Трофимука СО РАН (пр. Академика Коптюга, 3, Новосибирск, 630090, Россия), магистрант геолого-геофизического факультета, Новосибирский государственный университет (ул. Пирогова, 1, Новосибирск, 630090, Россия)\nIlya A. Moskaev, Engineer, Trofimuk Institute of Petroleum Geology and Geophysics SB RAS (3 Koptaug Ave., Novosibirsk, 630090, Russian Federation), Master's Student, Department of Geology and Geophysics, Novosibirsk State University (1 Pirogov Str., Novosibirsk, 630090, Russian Federation)\nMoskaevIA@ipgg.sbras.ru ResearcherID: D-6392-2019\n",
    "download_url": "https://cyberleninka.ru/article/n/programmnoe-obespechenie-na-osnove-veb-tehnologiy-dlya-geonavigatsii-neftegazovyh-skvazhin/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/tehnologiya-postroeniya-korporativnogo-web-sayta",
    "slug": "tehnologiya-postroeniya-korporativnogo-web-sayta",
    "title": "Технология построения корпоративного Web-сайта",
    "abstract_description": "Рассматриваются основные требования к современному корпоративному сайту, предлагается подход к организации структуры сайта и технические подходы к его построению.",
    "full_text_body": "\n\n\n\n\uFEFFС. Г. Толузаков, Е.Н. Якунина\nТЕХНОЛОГИЯ ПОСТРОЕНИЯ КОРПОРАТИВНОГО WEB-САЙТА\nРассматриваются основные требования к современному корпоративному сайту, предлагается подход к организации структуры сайта и технические подходы к его построению.\nОдной из задач при построении автоматизированной корпоративной информационной системы является построение интернет-представительства, или Web-сайта.\nИдея предлагаемой технологии заключается не только в том, чтобы создать представительство организации в сети Интернет, содержащее статичную часть, но и тесно интегрировать его функции с остальными составляющими информационной системы, предоставить возможность динамичного изменения структуры, степени доступности и информационной составляющей в соответствии с нуждами организации.\nТРЕБОВАНИЯ К СОВРЕМЕННЫМ САЙТАМ\nК современным корпоративным сайтам предъявляются следующие требования:\n-\tединое внешнее оформление для всех генерируемых страниц (цветовая гамма, символика организации, пространственное расположение элементов страниц);\n-\tединая и гибкая структура сайта;\n-\tединообразие навигации по сайту, наличие карты сайта;\n-\tудобочитаемость и интуитивная ясность генерируемых ссылок;\n-\tминимальные затраты на поддержку, администрирование и развитие сайта;\n-\tналичие внешней (пользовательской) и внутренней (корпоративной) частей сайта;\n-\tвозможность заполнения страниц с использованием Web-браузера, минимальные требования к аппаратно-программной оснащенности рабочего места;\n-\tвозможность посещения сайта с помощью всего множества существующих браузеров;\n-\tналичие гибко настраиваемой системы безопасности (аутентификация пользователей, авторизация доступа к структурным и информационным элементам, возможность работы в защищенных сеансах (SSL, PKI));\n-\tвозможность оценки и контроля степени актуальности предоставляемой информации (отображение даты последнего изменения и ответственного за раздел);\n-\tраспределенность источников информации;\n-\tтесная интеграция с существующими средствами автоматизации делопроизводства и учета;\n-\tоткрытость встроенных программных средств, возможность обращения к открытым программным средствам сторонних производителей (технологии Java VM, COM, CORBA);\n-\tвозможность функционирования сайта в кластерном режиме (масштабируемость, отказоустойчивость и распределение нагрузки);\n-\tвозможность полнотекстового поиска по выбранным разделам или по сайту в целом;\n-\tвысокая производительность обслуживания пользователей.\nИНСТРУМЕНТАРИЙ\nНа текущий момент на рынке корпоративных систем, включающих поддержку служб Интернета, представлено множество продуктов и надстроек над существующими СУБД:\n-\tNovell exteNd;\n-\tNetscape FastTrack Server, Netscape Enterprise;\n-\tMicrosoft Internet Information Server, .NET;\n-\tOracle 9i;\n-\tApache Web Server;\n-\tIBM Lotus Domino.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nВсе эти продукты имеют специфическую ориентацию, но с точки зрения построения Web-сайтов их можно отнести к одному классу.\nКлиент-серверная среда Lotus Domino/Notes, лидер среди группового программного обеспечения, ориентирована, в общем случае, на приложения для автоматизации документооборота и деловых процессов [1].\nЭта платформа включает в себя:\n-\tинтегрированную среду (Integrated Development Environment) для быстрой разработки приложений (Rapid Application Development), позволяющую быстро разрабатывать и разворачивать приложения и поддерживающую открытые интерфейсы COM, CORBA, языки Java и JavaScript;\n-\tмеханизм наследования программных элементов (форм, подформ, видов, агентов и т.д.), позволяющий повторное использование разработанных структурных элементов и автоматическое их наследование, что решает задачу построения единого пользовательского интерфейса и единого внешнего оформления;\n-\tвстроенные средства репликации, позволяющие создавать распределенные источники информации с автоматической актуализацией данных;\n-\tвстроенную службу HTTP для генерирования страниц, соответствующих объектам Domino, включающую виртуальную машину Java (JVM);\n-\tвстроенный механизм индексирования информации, содержащейся в документах для последующего полнотекстового поиска;\n-\tвстроенную систему безопасности, использующую симметричные и асимметричные алгоритмы шифрования и электронной подписи, протоколы аутентификации (SSL) и поддерживающую инфраструктуру PKI;\n-\tнадстройки, позволяющие интегрировать разработанные приложения с реляционными источниками данных;\n-\tслужбы для создания кластеров уровня приложений Domino и интернет-кластеров.\nТаким образом, выбор в качестве основы для построения Web-сайта Lotus Domino удовлетворяет большинству из предъявляемых требований.\nОстальные требования удовлетворяются технологией построения сайта с использованием встроенных средств разработки и международных стандартов Интернета.\nИнструментами при разработке Web-сайта в этой среде являются:\n-\tвиды с критерием отбора документов и сортировкой в колонках;\n-\tформы и подформы, являющиеся внешней оболочкой для документов и несущие функциональные составляющие интерфейса пользователя;\n-\tагенты, запускающиеся по команде из формы, либо при наступлении определенного события (изменение документов в базе, сохранение Web-документа);\n-\tязык @-формул, являющийся наиболее производительным по сравнению с остальными языками;\n-\tязык Lotus Script версии 3.1, менее производительный, чем язык @-формул, но более гибкий в случае, когда необходимо произвести достаточно сложные действия над большим количеством документов;\n-\tязык разметки гипертекста HTML и таблицы каскадных стилей CSS не являются встроенными средствами Domino, но их можно включать в генерируемые страницы;\n-\tязык JavaScript, позволяющий создавать интерактивные приложения для браузера и клиента Notes [2].\nЛОГИЧЕСКАЯ СТРУКТУРА САЙТА\nЛогическая структура сайта в основном определяется организационной структурой и сферами деятельности организации. В большинстве случаев ее утверждает руководитель организации.\nСуществуют определенные требования к построению структур, обеспечивающие наглядное представление элементов, порядка их следования друг за другом и вложенности.\nОдно из таких требований - «7±2» - задает количество элементов на уровне. Естественно, существуют и исключения из этого правила (к примеру, в разд. «Подразделения организации» может быть 10 и более подразделений).\nДругое требование продиктовано техническими средствами просмотра сайтов. Это «правило трех кликов», требующее, чтобы до необходимой пользователю информации он мог «добраться», нажав не более трех раз на элемент системы навигации.\nОба эти требования ограничивают количество элементов на уровне, а также высоту дерева рубрикации.\nФормально логическую структуру сайта можно представить либо в виде дерева (с неявным корневым элементом «стартовая страница»), либо в виде леса, деревьями в котором являются рубрики сайта первого уровня.\nДля иллюстрации логической структуры и ее реализации в виде структурных элементов будем использовать следующий фрагмент структуры сайта:\n1.\tОбщие сведения\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n1.1.\tПриветствие ректора\n1.2.\tУстав ТГУ\n1.3.\tУченый совет ТГУ\n1.3.1.\tСостав\n1.3.2.\tКомиссии\n1.3.3.\tРешения\n1.3.4.\tОбъявления о заседаниях\n1.4.\tРекторат\n1.5.\tСтруктура университета\n2.\tАбитуриенту\n2.1.\tФакультеты, специальности\n2.2.\tУровни образования и формы обучения\n2.3.\tПравила приема\n2.4.\tВступительные экзамены\nДля представления логической структуры в архитектуре сайта предусмотрены соответствующие «элементы структуры», исполненные в виде документов, создаваемых на основе формы «Элемент структуры».\nАРХИТЕКТУРА САЙТА\nОснову архитектуры сайта составляет главная база данных (соге.шГ), содержащая как логическую структуру сайта, так и архитектурные элементы, общие для всех страниц сайта (рис. 1 ).\nРис. 1. Логическая структура сайта\nВсе остальные базы сайта являются специфичными для конкретных подразделений (информационно -рекламный отдел, ученый совет и др.), используют некоторые общие элементы (на основе механизма наследования дизайна) и подключаются к этой главной базе регистрацией в ней соответствующих ссылок.\nСтруктура сайта представлена в виде иерархии документов с максимальной степенью вложенности 4 (что, вообще говоря, продиктовано существующей структурой сайта и удобством навигации, нежели программными ограничениями).\nКак уже было сказано выше, элементы структуры служат для построения иерархии разделов сайта и автоматического создания удобочитаемых ссылок. Кроме того, сам структурный элемент может содержать и конечную информацию, отображаемую посетителю сайта в браузере.\nДалее рассмотрим внутреннюю реализацию элемента структуры.\nПоля элемента структуры\nФорма структурного элемента (рис.2) содержит поля:\n-\tИмя документа. Это имя будет отображаться в заголовке документа и будет включено в тег <Ше>.\n-\tУровень документа. Это многозначное поле, содержащее последовательный список имен документов родителей - путь от корня сайта до этого документа.\nРис. 2. Форма структурного элемента\nНапример, уровень у страницы «Объявления о заседаниях» содержит «Общие сведения :: Ученый совет ТГУ».\n-\tИмя внутренней ссылки. Обязательное поле, состоящее из латинских букв и (при необходимости) арабских цифр, для поиска этого документа среди других документов на своем уровне иерархии. Например, для элемента «Объявления о заседаниях» на уровне common_sci_counsil внутренней ссылкой будет являться «announces».\nПри отображении списков документов в браузере Domino генерируют неудобочитаемые ссылки типа: http://ic1004.ic.tsu.ru/webdesign/tsu/core.nsf/31D594288 8B0C3E1C625 6CC200499D2A/B5802D3C02007CE6C6 256CC400452A93?OpenDocument. Этот способ формирования внутренней ссылки не только исполняет поисковую функцию, но и позволяет решить проблему неудобочитаемости [3]. Полная ссылка будет выглядеть следующим образом:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nhttp://ic1004.ic.tsu.ru/WebDesign/TSU/core.nsf/structurl/\ncommon_sci_counsil_announce.\n-\tТип внешней ссылки:\nабсолютная: страница находится в текущей базе данных (core);\nотносительная:\n1)\tесли страница находится в другой (отличной от core) базе данных, дополнительно указывается путь к этой базе данных;\n2)\tесли, более того, страница находится на другом (отличном от текущего) сайте, тогда при регистрации дополнительно указывается имя этого сайта.\n-\tПолная внутренняя ссылка. Эта ссылка состоит из последовательно располагающихся имен внутренних ссылок родительских документов, разделенных символом подчерка «_». Например, страница, содержащая объявления о заседаниях ученого совета, имеет полную внутреннюю ссылку common_sci_counsil_announces.\n-\tПорядковый номер на уровне. Уникальность документов структуры в пределах всей сердцевинной базы данных (и, следовательно, в пределах всего сайта) обеспечена требованием уникальности документов на каждом уровне и способом построения полных внутренних ссылок. Порядок же расположения, вне зависимости от лексикографического порядка названий страниц и внутренних ссылок, определяется от-\nдельным полем - порядковый номер на уровне. Именно по значению в этом поле будет осуществляться сортировка элементов структуры (рис. 3). Если это поле не заполнено, то при сортировке вместо его значения подставляется значение 99, сдвигая страницу в самый низ относительно других.\nСайт ТГУ - ИзначальноСтруктура - Lotus Notes\nПравка Вид Создание Действия Справка\nufl«S^ It l-t %Jt *\nРабочая область\tСайт\tТГУ\t■\tИзначальноСтруктура\tх\nJ »4 ©\n■'\t^\tJ--I\t[Иг\nnotes\nУвеличить порядковый номер Уменьшить порядковый номер\nпорядковый\nномер\nвенные организации 1ие сведения\nfipftpercjst/e рвКПфЭ Усгае ТГУ Учеяый совет ТГУ\nРЖЫП.ЩТ\nнаучная аигнрюпзка н У Мзазг&чыляо ТГУ\nЗа\tЧ.ТЛ #Z>7l?A С\nета\nвнутренняя\nссылка\ncommon common_s common n common_p comi\nlav icoi\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nctorat\nlucture\nitsu\njblisherstsu\nurns\nимя\nстраницы\n► НИИ\n^ Управления\ncom mon_stiucture_f acuities common_stiucture_nii common_stiucture_repiesentation с о m mon_ sti и с t и r e_ b ranch es common_stiucture department\nг Факцльтеты и цчебные институты\nSita паго -по чвенньяй факциьгег\ncommon_stiucture_faculties_bpf\n‘I1—-J | Работа\nРис. 3. Элементы структуры сайта\n-\tОтображение на первой странице. Для создания динамической первой страницы в каждом элементе структуры задается, в которой из двух колонок будет видно название и ссылка на этот элемент. Такой способ организации первой страницы напоминает карту сайта, если большинство структурных элементов отображены на ней. Положение элементов в пределах колонки задается структурными и ссылочными полями, указанными выше.\n-\tАвторы. Это поле с разделяемым доступом аутентифицированных пользователей к документам. Все пользователи, перечисленные в этом поле, имеют право изменять этот элемент структуры.\n-\tАвтор. Отдельное поле, хранящее имя пользователя, редактировавшего документ последним (рис. 4).\nРис. 4. Отображение контактной информации ответственного в Интернете\nНа основе этого поля и документа информации об ответственном на странице выводится информация о дате и времени последнего изменения и ФИО, структурное подразделение, должность и контактная информация ответственного.\n-\tЧитатели. Поле для распределения доступа на чтение документов аутентифицированными пользователями. Это поле содержит в обязательном порядке анонимного пользователя (Anonymous), чтобы обычный (не аутентифицированный) пользователь сайта мог получить доступ к документу.\n-\tСтепень актуальности. Редактируемое поле для корректора сайта или контролирующего наполнение сайта. Оно может содержать одно из трех значений:\n1)\tне заполнено. Низшая степень актуальности. Страница должна быть немедленно заполнена либо удалена, если, конечно, этот структурный элемент не описывает внешнюю ссылку и по логике не должен содержать тела страницы;\n2)\tзаполнено. Средняя степень актуальности. Страница содержит определенную информацию, но нельзя говорить о ее актуальности и непротиворечивости;\n3)\tзаполнено и актуально. Информация была заполнена исполнителем и проверена корректором.\nЭто поле на страницах не отображается никоим образом, оно используется только в автоматизированном рабочем месте корректора.\n-\tТело страницы. Это основное форматируемое поле, которое содержит всю информацию страницы. Это поле может содержать как обычный текст, так и форматированный текст, таблицы, изображения, ссылки и объекты. Это поле и будет доступно интернет-браузеру.\nПодформы\nУпомянутая выше возможность наследовать элементы форм была использована при создании под-форм. Созданные подформы верхней и нижней частей отображаемых страниц были объявлены как наследуемые всеми другими базами данных.\nКоличество подформ, включаемых в формы, определяет, с одной стороны, гибкость программирования формы и высокую объектную степень абстракции, с другой стороны, производительность приложения в целом, поскольку при отображении формы тратится время на выборку подформ [4]. Для достижения гибкости внешнего исполнения с минимальными потерями производительности было создано всего две подформы:\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n-\tверхняя часть (top). Эта часть содержит начало разметки, стартовые теги таблицы, вычисление оглавления разделов первого уровня, если текущий раздел -первого уровня, то вычисление оглавления этого раздела по ключу - имени текущего раздела и т. д. до четвертого уровня. Оглавление разделов отображается на любой странице, оглавление подразделов - в зависимости от того, на каком уровне пользователь находится. Здесь же располагается открывающий тег <td> табличной ячейки, содержащей основное тело документа;\n-\tнижняя часть (bottom). Эта часть обычно следует за телом документа, начинаясь с закрывающего тега </td> табличной ячейки, содержащей основное тело документа. Здесь вычисляется информация об ответственном на основе имени пользователя, занесенного в документ при записи документа в поле \"автор\". Завершается описание нижней части закрываю-\nщими табличными тегами и традиционной информацией об авторском праве.\nЭлементы оформления\nНаряду с элементами структуры в главной базе данных были созданы также элементы оформления в виде документов, имеющих имя и набор присоединенных файлов, либо исходный текст и созданных по отдельной форме. Эти элементы могут содержать:\n-\tприсоединенные изображения. В этих документах хранятся графические изображения (рамки, значки, баннеры, логотипы) (рис.5);\n-\tприсоединенные файлы. Некоторые, необходимые для статической части, файлы, присоединенные и доступные для скачивания ;\n-\tкод ИТЫЬ. Эти документы не содержат присоединенных файлов, в них находится исходный текст ЫТМЬ, используемый модульно при формировании страниц;\nРис. 5. Форма элемента оформления\n-\tкод JavaScript. Документы без присоединенных файлов, в них, так же, как в HTML-коде, приводится исходный текст на языке JavaScript (описание переменных и функций и пр.). С точки зрения оптимизации загрузки отображаемых данных в браузер, такие описания можно также помещать в присоединенные файлы с расширением js - тогда браузер расценивает такой модуль как файловый ресурс и в состоянии его кэшировать;\n-\tкод CSS, XSL. Так же, как HTML- и JavaScript-документы, эти элементы дизайна содержат описания таблиц каскадных стилей, классов, псевдоклассов. Страницы обращаются к таким элементам посредством тега <link rel=stylesheet type=\"text/css\" href-'путь к CSS\"> [5].\nВиды для поиска и заполнения\nСтруктурные элементы сайта хранятся в главной базе данных. В качестве поисковых ключей в виде используются поля внутренних ссылок. При генерировании страниц осуществляются запросы к этим видам. Генерируемая страница запрашивает по ключу название ссылки и саму ссылку, в зависимости от поля \"тип ссылки\". Если ссылка внутренняя, то конечная полная ссылка формируется приписыванием пути до сердцевинной базы от корня сайта без указания имени сайта и\nпрефикса протокола \"http://\". Если ссылка внешняя, подставляется значение из поля внешней ссылки.\nСписок разделов. В этом виде отбираются документы первого уровня (т.е. те, у которых поле уровня пустое) (рис.6).\nurl\n0\n2\n3\n4\n5\nЬ\n7\nS\nЭ\n10\n11\n12\nЭО\n2\t1\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n2\t1\n9\t1\nНовости\nАктуальные рубрики Общие сведения Абитуриенту Образование Наука\nМеждународное сотрудничество И здательская деятельность Культура, спорт и здоровье Студенту\nОбщественные организации Интернет-ресурсы Форумы Ввод данных Расписание занятий\nОсновные направления научной деятельности\nСпециальности и напраеления\nИ нгернет-ресурсы\n125-летие ТГУ\nПрофком сотрудников\nПриветствие ректора\nАнонсы\nФакультеты, специальности Вестник Томского государственного универск Центр культуры Общая информация\n/WebD esign/T S U /tsu_news. nsf/allne ws /webdesign/tsu/core. nsf/structurl/first /WebDesign/TSU /core. nsf/structurl/common /WebDesign/TSU /core. nsf/structurl/abitur /WebD esign/T SU /core, nsf/structurl/education /WebD esign/T SU /core, nsf/structurl/science /WebD esign/T SU /core, nsf/structurl/intercooperation /WebD esign/T SU /core, nsf/structurl/publish /WebDesign/TSU /core, nsf/structurl/culture /WebD esign/T SU /core, nsf/structurl/student /WebD esign/T SU /core, nsf/structurl/publicbodies http: //www. list. tsu. ru/ http://ic1004. ic.tsu.ru: 81 /forum/index, html /webdesign/tsu/core. nsf/structurl/enter /WebDesign/TSU /core, nsf/structurl/timetable /WebD esign/T SU /core, nsf/structurl/sciacti vity /WebDesign/TSU /core, nsf/structurl/directions http: //w w w. list. tsu. ru/\n/webdesign/tsu/core. nsf/structurl/agetsu /WebDesign/TSU /core, nsf/structurl/tucstaff /webdesign/tsu/core. nsf/structurl/greeting /WebD esign/tsu/tsu_news. nsf/allnews /webdesign/tsu/core. nsf/structurl/f acuities /WebDesign/TSU /core, nsf/structurl/vestnik /webdesign/tsu/core. nsf/structurl/center /WebDesign/TSU /core, nsf/structurl/information\nРис. 6. Список разделов\nВид используется страницами при генерации навигации по разделам сайта. Первая колонка - ключевая, по ней делается запрос. Вторая и третья колонки возвращают соответственно название раздела (имя страницы в структуре) и ссылку на раздел (внутреннюю или внешнюю).\nОглавление раздела. В этом виде отбираются все документы структуры, у которых многозначное поле уровня содержит лишь одно значение, т. е. все элементы второго уровня. Первая, ключевая колонка содержит имя родительского раздела (раздела первого уровня) с тем, чтобы по ключу-имени раздела можно было получить список документов-подразделов запрашиваемого раздела.\nВторая и третья колонки возвращают соответственно имя подразделов и их ссылки (так же - внутренние или внешние) (рис.7).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nАбитуриенту\nАбитуриенту\nАбигцриентч\nФакультеты, специальности Уровни образования и формы обучения\nАбитуриенту Абитуриенту Абитуриенту Абитуриенту Абитуриенту Актуальные рубрики Актуальные рубрики Ввод данных Ввод данных Ввод данных Ввод данных Издательская деятельн( Издательская деяпгельн( Издательская деятельн{ Издательская деяпгельн( Интернет ресурсы Интернет-ресурсы Культура, спорт и здоро!\nПравила приема\n/webdesign/tsu/core. nsf/structurl/abitur_faculti /WebD esign/T S U /cote, nsf/structurl/abitur_edi_\n/WebD es¡qn/T S U /coie. nsf/structurl/abitur adr\nВступительные экзамены Платные образовательные услуги Отдел по новому набору и довузовской по Подготовительные курсы и отделения Эксперимент по ЕГЭ 125-летие ТГУ Университет сегодня Ввш данных страниц Служба новостей Диссертационные советы Ученые советы\nВестник Томского государственного унив\nИзвестия вузов. Физика\nГазета 'Aima Mater\"\nРедакционно-издательский отдел ТГУ\nИнтернет-ресурсы\nДискуссии и Форумы\nЦентр культуры\n/WebD esign/T SU /core. nsf/structurl/abitur_exí /WebD esign/T S U /core, nsf/structurl/abitur_ser /WebD esign/T S U /coie. nsf/structurl/abitur_pre /WebD esign/T S U /core, nsf/structurl/abitur_coi /webdesign/tsu/core. nsf/structurl/abitur_ege /webdesign/tsu/core.nsf/structurl/first_agetsu /webdesign/tsu/core.nsf/structurl/first_tsutoda> /webdesign/tsu/core. nsf/enter /WebD esign/T S U /tsu_news. nsf/enternews /WebD esign/T S U /diss_council_ne ws. nsf/ente /WebD esign/T S U /sci_council_news. nsf/enterr /WebD esign/T S U /core, nsf/structurl/publish_vt /WebD esign/T S U /coie. nsf/structurl/publish_pl http://www. almamater. tsu. ru /WebD esign/T S U /coie. nsf/structurl/publish_iic http://www.list.tsu.ru/ http://ic1004.ic.tsu.ru: 81 /forum/ /webdesign/tsu/core. nsf/structurl/culture_centi\nРис. 7. Оглавление раздела\nОглавление подраздела. Еще один вид, отсекающий только документы структуры третьего уровня, т. е. документы, у которых поле уровня содержит ровно два значения - название корневого раздела и его подраздела.\nВвод данных. Это рабочий вид в головной базе данных, предназначенный для работы ответственных за заполнение частей сайта. Поскольку каждая страница имеет поля типа «читатели», то аутентифицирован-\nные пользователи в одном и том же виде будут видеть только те документы, которые доступны им для редактирования. Такой способ организации рабочих мест для ввода информации позволяет создать только один вид для всех пользователей, распределение доступа происходит автоматически на уровне документов.\nWeb-интерфейс рабочего места пользователя представляет собой многооконную среду, где в верхнем фрейме предоставляется возможность редактировать документы, а в нижнем открывается библиотека графических ресурсов (рис.8).\nРис. 8. Web-интерфейс пользователя. Страница сайта в режиме просмотра в верхнем фрейме\nДизайн страниц, единый в пределах всего сайта, определяет форму для ввода, от пользователя же требуется знание основных тегов разметки HTML. Библиотека изображений физически находится в другой базе данных и является общей для всех авторов.\nАгенты\nАгенты используются при построении сайта в рабочих местах пользователей, заполняющих сайт. Агент запускается по определенному событию, например, при попытке сохранения документа в браузере.\nВ частности, агенты используются при присоединении файлов к документам - документов Word или файлов изображений (рис.9). В качестве языка был использован язык Lotus Script.\nРис. 9. Карточка графического ресурса\nПосле того, как пользователь создал документ, присоединил к нему файл и попытался его сохранить, агент вычисляет имя присоединенного файла и заносит его в соответствующее поле - имя файла для последующей генерации ссылки на этот присоединенный к документу файл [6].\nПосле того, как документ с присоединенным файлом сохранен, его можно использовать в других документах, создавая в них ссылки на ресурс Интернет (рис.10).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nО-О-В @\t1»^-\n|21.03.2003 |01.05.2003\nІД 212^267.07 v|\nТекст объявления о защите\n|[<а hr8l=/WebDesigi^SU/diss_council_n8ws.nsfÆI//*EA6D391CC66C5D8C6256CCC002E6B66/$(ile/Sostav.doc>/!| О Черновик ©Опубликовать\n▼Д 212.267.11\nРис. 10. Web-интерфейс аттестационного отдела.\nПример вставки ссылки на автореферат в форму объявления о диссертационном совете\nПри реализации автоматического вычисления ссылок был использован обработчик события формы «WebQuerySave», который, как видно из названия, активизируется при попытке сохранения, т.е. до фактического сохранения документа.\nСуть обработчика состоит в том, чтобы получить список имен присоединенных файлов и создать соответствующее многозначное поле для последующей генерации ссылок. Присоединенный же файл появляется в списке только после сохранения документа. Поэтому авторы столкнулись с проблемой «двойного сохранения» при присоединении файла.\nГенерация же ссылок заключалась в склеивании строки (при помощи @-формул) с тегами со списочным полем имен присоединенных файлов:\n\"[<a href=javascript:putURL(\\\"\"+ @ReplaceSubstring(@Subset(@DbName;-\n1);\"\\\\\";\"/\")+\"/0/\"+@Text(@DocumentUniqueID)+\"/$file/ \"+images+\"\\\")> <img src=/\"+@ReplaceSubstring( @Subset(@DbName;-1);\"\\\\\";\"/\")+\"/0/\"+@Text( @DocumentUniqueID)+\"/$file/\"+images+\" width=100 height=100 alt=\\\"\"+images+\"\\\"></a>]\"\nФункция putURL была реализована на языке JavaScript:\nfunction putURL (URLstring) { parent.text.document.forms[0].text.value = \"[[<img src=/\"+URLstring+\" align=left hspace=15 vspace=0>]]\"+parent.text.document.forms[0].text.value }\nОбработчики событий JavaScript.\nВ приложениях пользователей - других базах данных сайта (новости ТГУ, новости диссертационных советов ТГУ, ученый совет ТГУ и др.) - созданы спе-\nцифичные формы для ввода и поиска информации, содержащие свойственный конкретным подразделениям инструментарий.\nПри этом для клиентов web (браузеров) разработаны \"действия\", облегчающие подключение ресурсов интернета к редактируемым страницам. В описании страницы существуют описания функций JavaScript, позволяющие помещать в документ, находящийся в одном фрейме браузера, ссылку на открытый ресурс в другом фрейме браузера. Другими словами, пользователь, видя предварительный просмотр изображения, нажимает на изображения, получая в редактируемом документе ссылку на него (рис. 11).\nО - ©-В В\n28.04.2003\n102.05.2003\tI\nЗаголовок большой новости\nБольшая НОВОСТЬ (выделение ясирным текста возможно с помощью вставки тегов <Ь>текст жирньш</Ь> в []) [<img src=/HebDesign/TSU/tsu_neras.nsf/0/0F2 D3 D50A7BC3 051C 62 5 6D17001BD582/\t■\nСтатус публикации большой НОВОСТИЬ (выберите ДА -ест тело большой новости заполнено и НЕТ- если тело большой новости пусто) ®Да О Нет\nКраткая аннотация к новости\n|<Ь>29 апреля в 16:30 час.</Ь>] в Актовом зале Томского государственного универс Статус\tФлаг 01 (что)\tФлаг 02 (где)\nО Черновик\tD1.визит\tП1.администрация\n® Опубликовать ШЗ. выставка\tЩ2.Ботсад\nО Удалить\t□ 4. конференция\tШЗ.БПФ\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nРис. 11. ^еЪ-интерфейс службы новостей. В верхнем окне открыта форма на редактирование\nДругим примером использования JavaScript могут послужить вызовы различного рода диалоговых окон. Определение общей функции показа диалогов. function showMenu(name) { hideAllMenu(); if (name == \"AuthorDetails\") { document.all[name].style.pixelTop = docu-ment.body.clientHeight+document.body.scrollTop-200;\ndocument.all[name].style.pixelLeft = (docu-ment.body.clientWidth)/2+60;\ndocument.all[name].style.visibility = 'visible';\n}\nelse\n{\ndocument.all[name].style.pixelLeft = (docu-ment.body.clientWidth-640)/2+130;\ndocument.all[name].style.visibility =\n'visible';\n}\n}\nВызов диалогового окна «Автор».\n<a title-'послать почту\" href=mailto: on-MouseOver=\"showMenu('AuthorDetails'); return false;\" onMouseOut=\"hideMenu('AuthorDetails'); return false;\">Иванов И.И.</г>\nВызовы списка разделов и оглавления раздела.\n<a href=\"/\" onClick=\"showMenu('Menu1'); return false;\"><img src=/webdesign/tsu/core.nsf/designobjects /images/$file/lgroups.gif width=160 height=17 border=0 alt-'Список разделов сайта\"></a>\n\"поиск Диссертационные советы\nЗЗЗ\n<a href=\"/\" onClick=\"showMenu('Menu2'); return false;\"><img src=/webdesign/tsu/core.nsf/designobjects /images/$file/lpages.gif width=160 height=17 border=0 ак=\"Оглавление раздела\"></a>\nРЕАЛИЗАЦИЯ ССЫЛОЧНОСТИ\nПри построении главной базы сайта, регистрирующей как внутренние, так и внешние ссылки, необходимо было создать механизм для получения навигации всех уровней в каждой базе, являющейся частью одного сайта, избежав дублирования информации и множественных запросов при генерации страниц. Это достигнуто путем использования нескольких механизмов:\n-\tнаследование дизайна. Главная база (core.nsf) была объявлена шаблоном баз данных. Таким образом, унаследованные другими базами сайта подфор-мы top и bottom приводятся в актуальное состояние сервером Domino по расписанию ежечасно;\n-\tпеременные-указатели на головную базу. В самой головной базе и в других базах данных были созданы поля, вычисляемые при открытии и содержащие путь к головной базе при запросах навигации. Таким образом, привязка к головной базе была осуществлена введением всего лишь одной константы, это придает сайту мобильность в случаях, когда файлы будет необходимо переместить в другое место на сервере.\n-\tимя и путь. Каждая страница, осуществляющая поиск контекстно зависимой навигации, должна передать в запросе в качестве параметра свое имя и путь. Так же, как и в головной базе, в других базах в соответствующих формах для этой цели должны быть созданы поля, значения которых будут использоваться в подформе top. Эти поля могут содержать как константу (если, например, все документы, созданные по конкретной форме, относятся к одному и тому же разделу сайта), так и значения, вводимые пользователем (в этом случае каждый документ, имеющий свой путь, должен быть дополнительно зарегистрирован в структуре - в головной базе).\nСТАТИКА, ДИНАМИКА И ВРЕМЯ ЖИЗНИ\nТеоретически все множество страниц сайта можно разделить на три группы по степени изменяемости:\n1)\tстатические страницы. Такого рода страницы всегда присутствуют на сайте и практически никогда не изменяются;\n2)\tдинамические страницы. Информация, представленная на такого рода страницах, актуальна только определенное, фиксированное время;\n3)\tстраницы с произвольным временем жизни. Для такого рода страниц задается промежуток времени, в который они будут доступны пользователям сайта.\nЕстественно, каждый корпоративный сайт, имеющий не только представительскую, но и информационную направленность, содержит и статичные, и динамичные данные. В техническом плане «устаревшие» страницы можно делать просто недоступными, проверяя, к примеру, дату и время их создания, можно перемещать в архив или удалять из рабочей базы данных сайта. Динамическими являются страницы, ссылки на которые располагаются на первой странице сайта, а также практически все страницы баз данных сайта, имеющих новостную направленность.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДля того чтобы автоматизировать механизм слежения за актуальностью страниц сайта, возможно создание специализированного агента, запускающегося на сервере периодически и проверяющего актуальность всех динамических страниц. Для того чтобы отделить устаревшие естественным образом страницы (например, новости) от страниц, потерявших актуальность и требующих обновления в формах этих страниц, можно создать соответствующие поля (например, «важность» и «периодичность обновления»). Тогда агент, нашедший важные устаревшие документы, использует в них указанное выше поле «авторы» с тем, чтобы напомнить по электронной почте авторам обновить информацию на сайте.\nРАБОТА В КЛАСТЕРНОЙ СРЕДЕ\nLotus Domino позволяет строить приложения, в т.ч. и для Web-сайтов, с автоматическим распределением нагрузки между серверами.\nПростейший случай, позволяющий работать сайту на нескольких серверах, - это репликация всех баз данных средствами Domino. Для того, чтобы ссылки продолжали вычисляться должным образом, изначально ссылочность необходимо реализовывать относительно корня сервера. При этом накладывается дополнительное ограничение на расположение баз на серверах: они должны располагаться в тех же каталогах данных, либо администраторы серверов должны создать соответствующие символические ссылки [7].\nДля того, чтобы сайт, располагающийся на нескольких серверах Domino, имел единый дизайн, необходимо создать реплики главной базы сайта на всех серверах - членах сайта, и на периодической основе реплицировать изменения в этой базе, а также обновлять в других базах унаследованный из этой базы набор структурных элементов.\nЛИТЕРАТУРА\n1. Линд Дебби, Керн Стив. Lotus Notes и Domino R5.Энциклопедия пользователя: Пер. с англ./Дебби Линд, Стив Керн. К.:Изд-во «Диасофт», 2000. 656 с.\n2. Ионцев Н.Н., Поляков Е.В., Таранченко О.Г. Программирование в Lotus Domino R5: формулы и функции, язык LotusScript, встроенные класс LotusScript и Java. М.: Изд-во «Светотон», 2000. 936 с.\n3.\tDomino R5 Developer’s Handbook. IBM RedBook sg245331.\n4.\tDomino R5 Designer Help. IBM Lotus Software.\n5. Карандин С., Колосов М., Поляков Е. Краткий справочник по разработке Web-приложений на базе Lotus Domino R5. М.: Изд-во «Свето-тон», 2000. 331 с.\n6. Поляков Е.В. Средства разработки приложений в Lotus Domino R5: Domino Designer. М.: Изд-во «Светотон», 2002. 468 с.\n7.\tDomino R5 Administration Help. IBM Lotus Software.\nСтатья представлена кафедрой теоретических основ информатики факультета информатики Томского государственного университета, поступила в научную редакцию 11 мая 2003 г.\n",
    "download_url": "https://cyberleninka.ru/article/n/tehnologiya-postroeniya-korporativnogo-web-sayta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/optimizatsiya-raschetov-v-fizicheskoy-arhitekture-za-schet-primeneniya-programmnogo-obespecheniya",
    "slug": "optimizatsiya-raschetov-v-fizicheskoy-arhitekture-za-schet-primeneniya-programmnogo-obespecheniya",
    "title": "ОПТИМИЗАЦИЯ РАСЧЕТОВ В ФИЗИЧЕСКОЙ АРХИТЕКТУРЕ ЗА СЧЕТ ПРИМЕНЕНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ",
    "abstract_description": "Предложен метод оптимизации расчетов некоторых параметров, используемых при проектировании городов и зданий. Представлен вариант исполнения программы для этих расчетов, включая интерфейс пользователя и текст программы.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 711.4; 004.42\nОПТИМИЗАЦИЯ РАСЧЕТОВ В ФИЗИЧЕСКОЙ АРХИТЕКТУРЕ ЗА СЧЕТ ПРИМЕНЕНИЯ ПРОГРАММНОГО ОБЕСПЕЧЕНИЯ\nО.С. Горчакова, О.А. Савкова, Е.Ю. Сорокина\nПредложен метод оптимизации расчетов некоторых параметров, используемых при проектировании городов и зданий. Представлен вариант исполнения программы для этих расчетов, включая интерфейс пользователя и текст программы.\nКлючевые слова: градостроительство, архитектура, расчет, программное обеспечение, звуковая среда.\nСтроительство, архитектура и градостроительство всегда связаны со сложными проектными расчетами, требующими больших временных и финансовых затрат. Существует множество программ, позволяющих облегчить работу инженера-проектировщика среди которых САПР, системы математической алгебры и др.\nПри проектировании городов и зданий большое внимание уделяется звуковой среде и ее расчетам. Но специализированное программное обеспечение для таких расчетов стоит больших денег. Лицензия на универсальные программы для расчётов на подобии Mathcad стоит несколько меньше, но такие финансовые затраты могут быть понесены не всеми компаниями и физическими лицами.\nМногие инженеры, чтобы избежать значительных трат, пользуются программами для работы с электронными таблицами, куда вбиваются формулы и на их основе решаются некоторые расчетные задачи. Однако такой подход имеет ряд недостатков, в том числе невысокие математические возможности программ. В связи с этим было разработано ПО для расчета некоторых параметров архитектурной физики, используемых для оценивания и проектирования звуковой среды [1, 2].\nВ качестве языка программирования, используемого в расчетах, был выбран JavaScript, интерфейс пользователя был описан на языках HTML и CSS. Выбор был сделан исходя из того, что [3 - 5]:\nдля написания программ на данных языках не требуется специальных программ (компиляторов),\nнет необходимости в дополнительном ПО для работы с разработанной программой, т.к. пользование осуществляется в браузере,\nполучаемая программа является кроссплатформенной, т.к. все операционные системы обладают встроенным браузером, а также поддержкой браузеров сторонних производителей,\nна этих языках писать легче, чем на многих других, в частности,\nC++.\nПри разработке программы, а именно веб-сервиса предполагалось, что пользователи будут обладать современным браузером с включенной поддержкой JavaScript. Программа не была оптимизирована для индекса-\nции поисковыми системами, а также для пользования в мобильных операционных системах так как программа будет применяться для внутреннего пользования и в локальной сети. Именно поэтому особого внимания к стилю оформления приложения не было уделено.\nДля упрощенного доступа к DOM была использована библиотека jQuery (версии 3.4.1), позволяющая облегчить процесс получения данных, введенных в поля форм. Для разметки страницы был выбран последний существующий на данный момент стандарт языка HTML - HTML5.\nВ программе будет производиться расчет следующих величин [6]:\n-\tплотность энергии в помещении Do;\n-\tвремя реверберации T;\n-\tуровень звукового давления в помещении с источником шума L.\nПример интерфейса разработанной программы представлен на рис.\n1, а текст программы - на рис. 2.\nДля удобства пользования программой, после проведенных расчетов вводные значения не удаляются, а заменяются на «placeholder» для того, чтобы можно было просмотреть введенный параметр и одновременно не удалять его при вводе новых значений.\nРасчет архитектурной акустики\n—Плотность энергии в помещешш (DO)-\nР=\nРассчитать\nРезультат расчета\n—Время реверберации (Т)-\nV=\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nS=\nРассчитать\nРезультат расчета\n—Уровень звукового давления в помещении с источником шумя (L)\nLP=\nА=\nРассчитать\nРезультат расчета\nРис. 1. Интерфейс программы\n360\n1\t<!DOCTYPE html>\n2\t< lang=\"ru\">\n3\t< ead>\n4\t< ä charset=\"llTF-8\" />\n<\t11:1е>Физическая архитектура-e/title >\n6\n<\thref=\"assets/css/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\"/>\n8\n<\t: src=\"assets/js/jquery-3.4.1.min.js\"></\t>\n10\t<\t: src=\"assets/js/script.js\"></\t>\n11\t</head>\n12\t< )dy>\n13\t< >Расчет Архитектурной акустикис/ 1>\n14\t<fonn- name=\"l_f\">\n15\t<Fieldse >\n<\tegend>r^0TH0CTb энергии в помещении (D0)</ egend>\n17\tР=<\ttype=\"text\" name=\"l_l\" />< />\n18\tA=< Dut type=\"text\" name=\"l_2\" />< />\n19\t<\ttype=\"button\" name=\"l_s\" уа1ие=\"Рассчитать\" />< />\n<\ttype=\"text\" name=\"l_r\" placeholdeг=\"Peзyльтaт расчета\" />\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n21\t</ Leids >\n22\t</forr >\n23\t<br />\n24\t<fonn- name=\"2_f\">\n25\t< Fieldse >\n26\t< egend>BpeMfl реверберации (Т)</ egeni >\n27\tV=< Dut type=\"text\" name=\"2_l\" />< />\n28\tS=<\ttype=\"text\" name=\"2_2\" />< />\n29\tSalpha;=<\ttype=\"text\" name=\"2_3\" />< />\n<\ttype=\"button\" name=\"2_s\" уа1ие=\"Рассчитать\" />< />\n31\t<\ttype=\"text\" name=\"2_r\" placeholdeг=\"Peзyльтaт расчета\" />\n32\t</ Leids >\n33\t</forr >\n34\t<br />\n35\t<fonn' name=\"3_f\">\n36\t<Fieldse >\n<\tegend>ypoeeHb звукового давления в помещении с источником шума (L)</Legen > Lp=<\ttype=\"text\" name=\"3_l\" />< />\n39\tA=< Dut type=\"text\" name=\"3_2\" />< />\n40\t<\ttype=\"button\" name=\"3_s\" уа1ие=\"Рассчитать\" />< />\n41\t<\ttype=\"text\" name=\"3_r\" placeholdeг=\"Peзyльтaт расчета\" />\n42\t</ Leids >\n43\t</fonr >\n44\t</bod >\n1\tI (document).ready( function(){\n2\n$(\"[name - l_s]\") .clickf/unctionOí 4\tvar temp_l_l (\"[name = 1_1]\").val();\nvar temp_l_2 (\"[name = 1_2]\").val(); 6\tvar rez_l 4 temp_l_l / (343.3 : temp_l_2);\n(\"[name = 1_1]\"). attr(' placeholder' ..tempJLJl) ,val(''); S(\"[name = 12]\").attr('placeholder'jtemp_l_2).val(''); 9\t(\"[name = l_r]\").val(rez_l);\n10 }); 11\n12\t$(\"[name = 2_s]\"),click(function(){\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n13\tvar temp_2_l (\"[name = 2_1]\").val();\n14\tvar temp_2_2 (\"[name = 2_2]\").val();\n15\tvar temp_2_3 (\"[name = 2_3]\").val();\n16\tvar rez_2 (0.163*temp_2_l)/(■ temp_2_2 Math.log(l temp_2_3)); S(\"[name = 21]\").attr('placeholder'jtemp_2_l).val('');\n18\t(\"[name = 22]\").attr('placeholder'Jtemp_2_2).val('');\n19\t$(\"[name = 2_3]\").attr('placeholder'jtemp_2_3).val('');\n20\t(\"[name = 2_r]\").val(rez_2);\n21\t}); 22\n23\t$(\"[name = 3_s]\"),click(function(){\n24\tvar temp_3_l (\"[name = 3_1]\").val();\n25\tvar temp_3_2 (\"[name = 3_2]\").val();\n26\tvar rez_3 temp_3_l (ie Math.log(temp_3_2) / Math.log(18)) + 6; S(\"[name = 31]\").attr('placeholder'jtemp_3_l).val('');\n(\"[name = 3_2]\").attr('placeholder'jtemp_3_2).val('');\n29\t(\"[name = 3_r]\"),val(rez_3);\n30\t});\n32 });\nРис. 2. Текст программы: а - раздел head HTML страницы; б - основной раздел HTML страницы; в - скриптовая часть\n361\nДанная программа позволяет рассчитать некоторые физические величины, используемые при архитектурном проектировании. В статье представлено три варианта расчета, однако их количество может быть значительно больше.\nТакой подход позволит значительно уменьшить временные затраты на расчеты, а также снизить финансовые издержки на покупку дорогостоящего специализированного программного обеспечения. Путем написания собственных программ можно оптимизировать труд инженеров и оптимизировать значительную часть расчетов. Дальнейшая разработка будет посвящена внедрению новых функциональных возможностей, дополнительных возможных расчетов, а также улучшению визуального представления данных. Помимо этого, планируется внедрить проверку формы на правильность введенных данных.\nСписок литературы\n1.\tАлексеев Ю.В., Сомов Г.Ю. Эволюция градостроительного планирования поселений. Т. 1. Общие представления о градостроительстве, промышленная революция, индустриальное производство: учебник. М.: Изд-во Ассоциации строительных вузов, 2014. 368 с.\n2.\tФоков Р.И. Экологическая реконструкция и оздоровление урбанизированной среды. М.: Изд-во Ассоциации строительных вузов, 2012. 304 с.\n3.\tМэтью Д. HTML5. Разработка веб-приложений. М.: Рид Групп, 2012. 320 с.\n4.\tМэтьюз М., Кронан Д. Динамическое веб-программирование (+ CD-ROM). М.:Эксмо, 2010. 384 с.\n5.\tДунаев В.В. Web-программирование для всех. СПб.: Питер -Москва, 2012. 985 с.\n6.\tАрхитектурная физика: учебник для вузов: спец. «Архитектура» / В.К. Лицкевич [и др.]; под ред. Н.В. Оболенского. М.: Архитектура-С, 2007. 448 с.\nГорчакова Ольга Сергеевна, магистрант, konnav78@gmail.com, Россия, Тула, Тульский государственный университет,\nСавкова Олеся Алексеевна, магистрант, konnav78@gmail. com, Россия, Тула, Тульский государственный университет,\nСорокина Евгения Юрьевна, магистрант, konnav 78@gmail. com, Россия, Тула, Тульский государственный университет\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nOPTIMIZATION OF CALCULATIONS IN PHYSICAL ARCHITECTURE AT THE BASIS OF\nAPPLICATION OF THE SOFTWARE\nO.S. Gorchakova, O.A. Savkova, E.Y. Sorokina 362\nThe article proposes a method for optimizing the calculations of some parameters used in the design of cities and buildings. A version of the program execution for these calculations is presented, including the user interface and program text.\nKey words: urban planning, architecture, calculation, software, sound environment.\nGorchakova Olga Sergeevna, undergraduate, konnav 78@gmail. com, Russia, Tula, Tula State University,\nSavkova Olesya Alekseevna, undergraduate, konnav 78@gmail. com, Russia, Tula, Tula State University,\nSorokina Evgeniya Yuryevna, undergraduate, konnav 78@gmail. com, Russia, Tula, Tula State University\nУДК 004.056.55\nПРИМЕНЕНИЕ ПРОТОКОЛА HTTPS ДЛЯ ПОВЫШЕНИЯ ИНФОРМАЦИОННОЙ БЕЗОПАСНОСТИ В СЕТИ\nД.В. Афанасьева, А. А. Абидарова, Е.А. Плахина\nРассмотрено применение и достоинства использования протокола передачи данных HTTPS и описан механизм работы протокола. Перечислены способы получения ssl-сертификата, их виды и основные особенности.\nКлючевые слова: информация, безопасность, HTTPS, протокол, сертификат криптозащита.\nСовременные предприятия, зависимые от информационно-компьютерного поля, требует безопасности личных и коммерческих данных. Сохранение конфиденциальности требуется как отдельным людям, так и государственных учреждений, и частных компаний. В связи с этим все чаще применяются различные протоколы информационной безопасности, обеспечивающие лучшую сохранность компьютерных данных. В данной работе пойдет речь о протоколе HTTPS.\nГлавное преимущество протокола HTTPS заключается в максимальной защите данных, достигаемой за счет криптографического шифрования. [1, 2] Это всегда было важно в сферах, требующих защиты конфиденциальной информации.\nОбеспечить полную защиту трафика от несанкционированного просмотра возможно, только переведя интернт-ресурс на протокол HTTPS. не предусматривает регистрацию и заполнение каких-либо личных данных.\nКомпания Google ещё в 2014 году заявила, что сайты, работающие по защищенному протоколу, получат преимущество в выдаче. Поисковик официально признал наличие SSL-сертификата фактором ранжирования, значимость которого с каждым годом будет увеличиваться. Сегодня топ выдачи Google по всем тематикам представлен преимущественно HTTPS-сайтами, а браузер Chrome выводит предупреждение об опасности при отсутствии зашифрованного соединения.\n363\n",
    "download_url": "https://cyberleninka.ru/article/n/optimizatsiya-raschetov-v-fizicheskoy-arhitekture-za-schet-primeneniya-programmnogo-obespecheniya/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/imitatsiya-dvizheniya-avtomobiley-po-grafu-marshruta",
    "slug": "imitatsiya-dvizheniya-avtomobiley-po-grafu-marshruta",
    "title": "Имитация движения автомобилей по графу маршрута",
    "abstract_description": "Статья связана с актуальной проблемой организации целенаправленного движения. Разработаны концептуальная модель движения автомобилей по маршруту, программа имитационного моделирования на языке JavaScript, граф маршрута, привязанный к ГИС-карте г. Омска, проведены имитационные эксперименты. В концептуальной модели определены наборы параметров цели и образца. Автомобиль, достигший конечной вершины, получает приз (0, 1 или 2) в зависимости от расстояния показателей движения до координат целевой точки. Семь параметров образца задают точку в пространстве из семи измерений. В узле графа для движения выбирается та дуга, у которой наименьшее расстояние набора текущих параметров до точки образца. Имитационные эксперименты показали сложные зависимости между значениями параметров образца и величиной призов. Разработанные способы использования образцов и программа имитации могут быть использованы для анализа целенаправленногодвижения по ориентированному графу в системах различного назначения, например, технических, экономических, социальных.",
    "full_text_body": "\n\n\n\n\uFEFFКак видно из табл. 3, уменьшение вероятности отказа в 100 раз для семи элементов в графе, содержащем 100 элементов, привело к уменьшению вероятности отказа всей системы в 10 000 раз. Также стоит отметить, что несмотря на уменьшенную вероятность отказа «влиятельных» вершин, их отказ по-прежнему приводил к отказу всей системы чаще других вершин. Новые «влиятельные» вершины также не появились после изменения вероятностей отказа «влиятельных» элементов. Это приведено в табл. 4, в которой произведена сортировка элементов графа по их числу отказов, вследствие которых система стала неработоспособна (в таблице произведена сортировка по числу отказов и показаны только первые 10 вершин).\nV. Заключение\nВ ходе проведенного исследования были получены результаты, подтверждающие теорию о том, что относительная центральность по посредничеству, предложенная в данной статье, оказывает влияние на надежность системы. Тем не менее, во время эксперимента встретились случаи, в которых элементы, не обладающие большим значением относительной центральности по посредничеству, оказывали существенное влияние на надежность системы. Наиболее вероятно, что помимо предложенной относительной центральности по посредничеству на вероятности отказа надежностного графа в меньшей степени оказывают влияние другие топологические показатели, например центральность по близости. Планируется продолжить исследования в данной области.\nБлагодарности\nАвтор благодарит своего научного руководителя Задорожного Владимира Николаевича за помощь в написании данной статьи.\nСписок литературы\n1.\tЗадорожный В. Н., Юдина М. Н. Методы ускоренного расчета и параметрической оптимизации высоконадежных структурно сложных систем // Омский научный вестник. Серия «Приборы, машины и техноло-гии»2016. № 4. С 132-138.\n2.\tБредихин С. В., Ляпунов Н. Г., Щербакова Н. Г., Юргенсон А. Н. Параметры «центральности» узлов сети цитирования научных статей // Проблемы информатики. 2016. № 1. С 39-57.\n3.\tЗадорожный В. Н., Юдин Е. Б. Точная теория графов Барабаши-Альберт // Омский научный вестник. 2009. № 3. С 13-19\n4.\tЛюк Д. А. Анализ сетей (графов) в среде R / пер. с англ. А.В. Груздева. М.: ДМК Пресс, 2017. 250 с.\n5.\tСеджвик Р., Уэйн К. Алгоритмы на Java / пер. с англ. М. : ООО «И.Д. Вильямс» , 2017. 848 с.\nУДК 519.876.5\nИМИТАЦИЯ ДВИЖЕНИЯ АВТОМОБИЛЕЙ ПО ГРАФУ МАРШРУТА SIMULATION OF CAR MOVEMENTS ON THE GRAPH OF THE ROUTE\nА. М. Пуртов\nИнститут математики им. С. Л. Соболева СО РАН, г. Омск, Россия\nA. M. Purtov\nSobolev Institute of Mathematics, Siberian Branch of Russian Academy of Science, Omsk, Russia\nАннотация. Статья связана с актуальной проблемой организации целенаправленного движения. Разработаны концептуальная модель движения автомобилей по маршруту, программа имитационного моделирования на языке JavaScript, граф маршрута, привязанный к ГИС-карте г. Омска, проведены имитационные эксперименты. В концептуальной модели определены наборы параметров цели и образца. Автомобиль, достигший конечной вершины, получает приз (0, 1 или 2) в зависимости от расстояния показателей движения до координат целевой точки. Семь параметров образца задают точку в пространстве из семи измерений. В узле графа для движения выбирается та дуга, у которой наименьшее расстояние набора текущих параметров до точки образца. Имитационные эксперименты показали сложные зависимости между значениями параметров образца и величиной призов. Разработанные способы использования образцов и программа имитации могут быть использованы для анализа целенаправленного\nдвижения по ориентированному графу в системах различного назначения, например, технических, экономических, социальных.\nКлючевые слова: автомобильный маршрут, граф, образец, имитационная модель, результаты экспериментов.\nDOI: 10.25206/2310-9793-7-4-170-177\nI. Введение\nЦеленаправленное движение по ориентированному графу является хорошей моделью процессов в системах различного назначения. В разных областях деятельности разработано много методов выбора направлений движения в узлах графа. Автор статьи разрабатывает методы использования образцов для принятия решений. Обучение и принятие решений по неформализованным образцам часто используется в живой природе. Ранее автором статьи в качестве объектов для анализа эффективности применения образцов использовались автодорожный перекресток [1] и фрагмент сети передачи данных [2]. В статье приведены способы использования образцов на примере имитации движения автомобилей по графу маршрута.\nМного методов анализа данных и классифицирования объектов разработано Н. Г. Загоруйко [3]. Некоторые методы основаны на использовании столпов (эталонов, образцов). Считается, что нормализованные параметры объектов являются их координатами в n-мерном пространстве. После обработки данных статистическими методами определяются типовые объекты - столпы. Классифицирование заключается в вычислении Евклидовых расстояний объектов до столпов и приписывании объектов к тем столпам, расстояния до которых минимально.\nАвтор статьи использует образцы не для классифицирования объектов, а для принятия решений. Объекты системы имеют набор случайных, изменяющихся во времени параметров, значения которых зависят от текущей ситуации. Образцы задаются тем же набором параметров, но их значения не изменяются в процессе функционирования системы. Решение принимается в зависимости от того, к какому из образцов ближе текущая ситуация в системе.\nДля подбора значений параметров образца и получения результатов их влияния на целевые параметры использовалось программное имитационное моделирование. Аналитико-имитационное моделирования часто используется для анализа транспортных сетей [4], [5]. Для построения имитационных моделей используются разные программы и системы моделирования [6]. Ранее автор статьи использовал GPSSW (General Purpose Simulating System World) [7]. В представляемой работе имитационная модель запрограммирована на языке JavaScript. К основным достоинствам JavaScript можно отнести популярность интерпретатора (встроен в Internet Explorer), большие возможности визуализации. Недостатками являются слабые средства отладки, отсутствие специальных средств моделирования (диспетчер событий, средства имитации систем массового обслуживания, сбор статистики), которые приходиться программировать самостоятельно.\nII. Постановка задачи\nНеобходимо разработать имитационную модель целенаправленного движения по ориентированному графу, построить граф автодорожного маршрута, выбрать наборы параметров образца и цели, провести имитационные эксперименты. Целью экспериментов является получение зависимостей времени прохождения маршрута от набора и значений параметров образца и цели, апробация способов использования образцов для организации целенаправленного движения.\nIII. Концептуальная модель\nМаршрут общественного транспорта обычно представляет собой одну траекторию движения из точки А в точку В. Водитель личного автомобиля в зависимости от конкретной ситуации может двигаться по разным траекториям. Такое движение можно представить ориентированным графом. В узлах графа принимается решение о направлении движения.\nРеальный маршрут представляется графом, состоящим из вершин, соединенных направленными дугами. Вершина может быть начальной, конечной, промежуточной, текущей, соседней. Начальная вершина является первой в маршруте. Маршрут заканчивается в конечной вершине. Промежуточные вершины находятся в траектории между начальной вершиной и конечной. В текущей вершине принимается решение о направлении движения. Соседней является вершина, соединенная дугой с промежуточной вершиной. Вершина может обладать сразу несколькими качествами. Например, начальная вершина может быть текущей. Основными параметрами вершины являются ее номер, номера исходящих дуг и число посещений.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nДуги имеют направление и соединяют соседние узлы. Направление исключает циклы и обеспечивает достижение цели. Дуга может быть моделью прямого соединения, последовательности вершин, графа. На рис. 1 представлены упрощения исходного графа.\nо—►—о\nРис. 1. Три типа замещающих дуг\nОсновные параметры дуги.\n1.\tНомер дуги, номера соединяемых вершин, направление.\n2.\tДлина (L). Если дуга отображает последовательность участков, то L равно сумме длин участков. Если дуга заменяет граф, то для определения L нужны экспертные оценки.\n3.\tСкорость передвижения по дуге (V).\n4.\tТ1 - время задержки при передвижении по дуге. Т1 равно сумме задержек на участках, заменяемых дугой (на пешеходных переходах, перекрестках, светофорах).\n5.\tТ2 - фиксированное время перемещения по дуге. Т2 равно сумме Т1 и времени свободного пробега, зависящего от L и V.\n6.\tТ3 - текущее время перемещения по дуге. T3 равно сумме T2 и модифицированного Т1 с помощью случайной функции. Т3 имитирует влияние внешней среды, например, очередей автомобилей.\n7.\tТ4 - время последнего перемещения от начального узла до конечного по траектории, проходящей через дугу.\n8.\tТ5 - среднее время перемещения от начального узла до конечного по траектории, проходящей через\nдугу.\n9.\tIN - интенсивность (оценка вероятности) выбора дуги.\n10.\tCost1 - стоимость перемещения от начального узла до конечного по траектории, проходящей через\nдугу.\n11.\tCost2 - средняя стоимость перемещения от начального узла до конечного по траектории, проходящей через дугу.\n12.\tPrice1 - приз, полученный после последнего перемещения от начального узла до конечного по траектории, проходящей через дугу.\n13.\tPrice2 - средний приз после перемещения от начального узла до конечного по траектории, проходящей через дугу.\nЦель и приз за достижение цели задаются следующим образом: purpose = {Xp1, Xp2, R1, R2}.\nXp1 - время перемещения по маршруту.\nXp2 - стоимость перемещения от начального узла до конечного.\nXp1, Xp2 - координаты точки цели\nR1 - радиус малой окружности с центром Xp1, Xp2, приз =2.\nR2 - радиус большой окружности с центром Xp1, Xp2.\nЕсли после завершения маршрута точка с координатами (Т4, Cost1) попала в малую окружность, всем дугам, входящим в траекторию, присуждается приз, равный 2. Если точка с координатами (Т4, Cost1) попала в область кольца, определяемого разницей R2 и R1, всем дугам, входящим в траекторию, присуждается приз, равный 1. Если точка с координатами (Т4, Cost1) оказалась за пределами окружности с радиусом R2, то приз равен 0.\nОбразец определяется набором параметров, задающих точку в пространстве из семи измерений.\nsample = { Xs1, Xs2, Xs3, Xs4, Xs5, Xs6, Xs7 }.\nXs1 - средний приз.\nXs2 - приз при последней реализации.\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nXs3 - интенсивность выбора дуги.\nXs4 - среднее время перемещения от начального узла до конечного.\nXs5 - время последнего перемещения от начального узла до конечного.\nXs6 - средняя стоимость перемещения от начального узла до конечного.\nXs7 - стоимость последнего перемещения от начального узла до конечного.\nКаждая дуга имеет аналогичный набор параметров. Bi={ Xb1, Xb2, Xb3, Xb4, Xb5, Xb6, Xb7 }. Значения параметров образца постоянны, а значения параметров дуги изменяются во времени, характеризуют ее текущее состояние. При принятии решения в узле о направлении движения выбирается та дуга, для которой расстояние от Bi до sample минимально. В некоторых ситуациях эта процедура принятия решения может быть модифицирована.\nЗначения параметров цели, образца, дуг, которые используются для вычисления расстояний, должны быть нормализованы, приведены в единый диапазон. Перед началом моделирования минимальные и максимальные значения параметров дуг неизвестны. Это затрудняет использование формулы для линейной нормализации. Поэтому значения параметров приводятся в приблизительно одинаковый диапазон с помощью выбора единиц измерения и подбора коэффициентов нормализации.\nIV. Построение имитационной модели\nИмитационная модель (ИМ) основана на разработанной концептуальной модели. Программа имитации (Simmove) реализована на языке JavaScript. На входе программы Simmove может быть задан ориентированный граф любой топологии. Изменяя интерпретацию параметров цели и образца программу можно использовать для имитации систем и процессов различного назначения.\nРис. 2. Граф маршрута\nПри подготовке данных для моделирования строится ориентированный граф. На рис. 2 показаны фрагмент карты г. Омска и два этапа построения графа. На первом этапе с помощью средств геоинформационных систем строится подробная ГИС-карта задержек при прохождении маршрута. Задержки возникают на светофорах, перекрестках, пешеходных переходах. На рисунке 2 задержки изображены мелкими точками. Оценивается величина задержек. На втором этапе происходит построение ориентированного графа маршрута для моделирования.\nНа рис.2 крупными точками изображены вершины графа. Линиями изображены дуги, соединяющие вершины. Последовательность задержек заменяется дугами. Например, реальный маршрут от автовокзала (узел 3) до городка Водников (узел 5) проходит через мост, затем по Красному пути. Этот маршрут заменяется дугой от узла 3 до узла 5. При этом задержка на дуге 3 -> 5 равна сумме задержек при перемещении по исходному графу. Расстояние для дуги 3 -> 5 равно расстоянию на исходном графе. C узла 1 начинается маршрут, в узле 21 он заканчивается.\nВ каждый момент времени на экране по графу перемещается один автомобиль. Как выше было сказано, влияние других автомобилей имитируется увеличением фиксированного времени перемещения по дуге на случайную величину задержки. После достижения автомобилем конечного узла, в начальном узле начинает движение следующий автомобиль. Перемещение автомобилей визуализируется в Internet Explorer. Визуализация полезна при отладке модели, проведении экспериментов, презентации. Время моделирования задается числом прохождений автомобилей по графу. Основные исходные данные для модели задаются в таблицах MS Access. Затем таблицы конвертируются в текстовые файлы и подаются на вход программы Sim_move. В программе Sim_move эти файлы преобразуются в массивы. Результаты моделирования записываются в текстовые файлы res_lin и res_node, которые присоединяются к базе данных MS Access.\nV. Результаты имитационных экспериментов\nПеред проведением основных экспериментов для задания начальных данных запускается алгоритм «первопроходец». Суть алгоритма в том, что в узле выбирается для перемещения та дуга, которая реже всего используется. Это гарантирует использование всех возможных траекторий движения от начального узла до конечного. Таким образом, для всех дуг задаются начальные значения параметров. Результаты работы алгоритма записываются в текстовые файлы reslin и resnode. Затем эти файлы копируются в файлы lin_graph и node_graph, которые содержат исходные данные для всех последующих экспериментов. Без использования алгоритма «первопроходец» возникала ситуация, при которой первоначально выбранная дуга становилась по параметрам ближе к образцу и блокировала выбор других дуг в течение всего эксперимента. Основные требования к алгоритму «первопроходец» заключались в использовании всех траекторий при минимальном числе реализаций timemod (число перемещений от начального узла до конечного). Минимальное значение time_mod необходимо для того, чтобы в последующих экспериментах быстрее «победить» статистику, накопленную алгоритмом «первопроходец». Эти требования выполняются при time_mod=100.\nДля борьбы с монополизацией часто используемыми дугами редко используемых дуг использовалась еще и процедура «реабилитации». Если интенсивность использования выбранной дуги превышает в 2 раза интенсивность использования другой исходящей из узла дуги, для перемещения выбирается дуга с малой интенсивностью. Это дает шанс редко используемой дуге «подправить» свою статистику.\nДля проведения всех экспериментов использовались следующие исходные данные.\nВремя перемещения для каждой дуги модифицировалось через 5 реализаций (перемещений от начального узла до конечного). T3=T2+T1*[-ln(1-RN)], где RN - равномерно распределенная случайная величина от 0 до 1. Кроме того, для дуг 3 -> 5, 8 -> 15, 8 -> 6 через каждые 10 реализаций генерируется «пробка». Вероятность того, что сгенерированная «пробка» будет на одной из трех дуг равна 0,333. Для дуги, на которой произошла «пробка», T3=20*T1+L/V.\nСтоимость передвижения по маршруту Cost1 = st_km*Lr/10, где Lr - длина маршрута (км), st_km=40 руб. - стоимость горючего, истраченного на 10 км.\ntime_mod = 100 для эксперимента «первопроходец», time_mod = 5000 для всех других экспериментов.\nvspid=50 - средняя скорость (км/час).\nРезультаты анализа значимости параметров приведены в табл. 1. Во всех экспериментах использовались параметры цели purpose = {40, 50, 5, 15}. Стоимость задана в рублях. Остальные параметры заданы в минутах. Для определения значений параметров цели и образца проводились предварительные эксперименты. В первом столбце приведен номер эксперимента. Во втором столбце приведены значения параметров образца. Прочерк означает, что параметр в эксперименте не использовался. В третьем столбце приведено среднее время прохождения маршрута. В четвертом столбце приведен средний приз.\nТАБЛИЦА 1 АНАЛИЗ ЗНАЧИМОСТИ ПАРАМЕТРОВ\nНомер\tsample\tT_m (мин.)\tPrice_m\n1\t{50, 50, 50, 40, 40, 50, 50}\t44\t1,30\n2\t{50, 50, 50, 40, 40, 50, 50}\t42\t1,24\n3\t{50, -, 50, 40, -, 50, -}\t44\t1,20\n4\t{-, 50, -, -, 40, -, 50}\t42\t1,27\n5\t{-, 50, 50, 40, 40, 50, 50}\t42\t1,14\n6\t{50, -, 50, 40, 40, 50, 50}\t42\t1,30\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n7\t{50, 50, -, 40, 40, 50, 50}\t41\t1,25\n8\t{50, 50, 50, -, 40, 50, 50}\t41\t1,24\n9\t{50, 50, 50, 40, -, 50, 50}\t42\t1,23\n10\t{50, 50, 50, 40, 40, -, 50}\t42\t1,23\n11\t{50, 50, 50, 40, 40, 50, -}\t41\t1,25\n12\t{-, -, 50, 40, 40, 50, 50}\t42\t1,25\n13\t{50,50, 50, -, -, 50, 50}\t41\t1,15\n14\t{50,50, 50, 40, 40, -, -}\t41\t1,24\n15\t{50, -, -, -, -, -, -}\t45\t1,19\n16\t{-, 50, -, -, -, -, -}\t43\t1,17\n17\t{-, -, 50, -, -, -, -}\t46\t1,1\n18\t{-, -, -, 40, -, -, -}\t44\t1,08\n19\t{-, -, -, -, 40, -, -}\t43\t1,26\n20\t{-, -, -, -, -, 50, -}\t44\t1,2\n21\t{-, -, -, -, -, -, 50}\t43\t1,07\n22\t{50, -, 50, 40, -, -, -}\t44\t1,19\n23\t{-, 50, 50, 40, -, -, 50}\t41\t1,15\nВ первом эксперименте не использовалась процедура «реалибитация». Во втором эксперименте (как и во всех других) эта процедура использовалась. Результаты этих экспериментов показывают, что возможность попробовать редко используемые траектории движения позволяет снизить T_m. С другой стороны, снижение T_m не всегда сопровождается увеличением Рпсе_т.\nВ третьем эксперименте использовались средние значения параметров образца и не использовались текущие. В четвертом эксперименте использовались текущие значения параметров образца и не использовались средние. Сравнивая результаты экспериментов 3 и 4, можно сделать вывод о том, что в данном случае учет текущих параметров дает результаты лучше, чем учет средних параметров.\nЭксперименты 5-11 показывают, что исключение из рассмотрения одного любого параметра не влияет существенно на T_m. Эксперименты 12-14 показывают, что исключение из рассмотрения двух параметров может влиять на среднее время прохождения маршрута. Все зависит от того, какие именно параметры исключаются. В целом, эксперименты 2-14 показывают, что учет некоторых параметров при принятии решений может приносить пользу, вред или ни на что не влиять.\nВ экспериментах 15-21 для принятия решений используется только один параметр образца. Эксперименты показывают разное влияние параметров на T_m и Рпсе_т, а также говорят о том, что при учете одного параметра результаты хуже, чем при использовании нескольких. Эксперименты 22 и 23 показывают, что результат может сильно зависеть от используемого набора параметров образца.\nВ табл. 2 показано влияние значений параметров образца purpose на значения T_m и Рпсе_т.\nТАБЛИЦА2\nВЛИЯНИЕ НА РЕЗУЛЬТАТЫ ЗНАЧЕНИЙ ПАРАМЕТРОВ ЦЕЛИ И ОБРАЗЦА\nНомер\tpurpose\tsamples\tT_m (мин.)\tPriсe_m\n1\t{35, 50, 5, 15}\t{50, 50, 50, 40, 40, 50, 50}\t41,7\t1,26\n2\t{40, 50, 5, 15}\t{50, 50, 50, 40, 40, 50, 50}\t41,5\t1,24\n3\t{45, 50, 5, 15}\t{50, 50, 50, 40, 40, 50, 50}\t41,6\t1,02\n4\t{50, 50, 5, 15}\t{50, 50, 50, 40, 40, 50, 50}\t43,6\t0,73\n5\t{40, 50, 5, 10}\t{50, 50, 50, 40, 40, 50, 50}\t41,3\t1,13\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n6\t{40, 50, 5, 15}\t{50, 50, 50, 40, 40, 50, 50}\t41,5\t1,24\n7\t{40, 50, 5, 20}\t{50, 50, 50, 40, 40, 50, 50}\t41,8\t1,26\n8\t{40, 50, 5, 25}\t{50, 50, 50, 40, 40, 50, 50}\t42,5\t1,24\n9\t{40, 50, 5, 10}\t{-, 50, 50, 40, -, -, 50}\t42,4\t0,94\n10\t{40, 50, 5, 15}\t{-, 50, 50, 40, -, -, 50}\t41,3\t1,15\n11\t{40, 50, 5, 20}\t{-, 50, 50, 40, -, -, 50}\t41,5\t1,13\n12\t{40, 50, 5, 30}\t{-, 50, 50, 40, -, -, 50}\t42\t1,15\n13\t{40, 50, 10, 20}\t{-, 50, 50, 40, -, -, 50}\t42,0\t1,52\nВ экспериментах 1-8 использовался образец с полным набором параметров, а в экспериментах 9-13 образец состоял из меньшего, но «хорошего» набора параметров. Эксперименты 1-13 показывают влияние значений параметров цели на T_m и Рпсе_т при разных сочетаниях параметров образца. Результаты демонстрируют сложную зависимость между возможностью получения приза (изменение радиусов R1 и R2) и T_m.\nVI. Обсуждение результатов\nК основным результатам работы можно отнести разработанную концептуальную модель, программу имитационного моделирования на языке JavaScript, граф маршрута, привязанный к ГИС-карте г. Омска, результаты экспериментов. В основе концептуальной модели лежат выбранные параметры цели и образца. Набор параметров образца может быть предметом обсуждения. Например, эксперименты показали, что некоторые сокращенные наборы параметров дают результат, аналогичный тому, который показывает полный набор параметров. Благодаря тому, что модель позволяет использовать любой набор параметров, первоначальный выбор параметров образца можно считать достаточно универсальным. Непривычно выглядит имитация перемещения по маршруту только одного автомобиля в каждый момент времени, замена очередей генерацией случайных задержек. Такой подход можно обосновать тем, что он позволяет значительно упростить модель, а надежные данные о поступлении автомобилей в различных направлениях возможны только в конкретный момент времени с помощью специальной аппаратуры. Кроме того, целенаправленное движение во многих областях деятельности реализуется в каждый момент времени одним объектом. Проведенные эксперименты демонстрируют сложные зависимости между параметрами образца, цели и показателями функционирования системы.\nVII. Выводы и заключение\nНа примере имитации движения автомобилей показаны возможность и целесообразность использования образцов для выбора маршрутов при целенаправленном движении по ориентированному графу. Разработанная программа имитационного моделирования достаточно универсальна. При соответствующей интерпретации параметров образца и цели программа может быть использована для анализа процессов достижения цели в системах различного назначения: технических, экономических, социальных и др. В дальнейшем планируется расширение области применения разрабатываемого подхода.\nИсточник финансирования\n«Работа выполнена при поддержке программы фундаментальных научных исследований СО РАН № 1.5.1., проект № 0314-2019-0020»\nСписок литературы\n1.\tПуртов А. М. Имитация систем управления потоками автомобилей на перекрестке // Омский научный вестник. 2016. № 3 (147). С. 92-96.\n2.\tПуртов А. М. Использование образцов для выбора маршрута в сетях передачи данных // Информационные технологии. 2019. Т. 25, № 4. С. 228-233. DOI: 10.17587/it.25.228-233\n3.\tЗагоруйко Н. Г. Когнитивный анализ данных - Новосибирск: Академическое изд-во «Гео», 2013. 186 с.\n4.\tЗадорожный В. Н. Транспортная сеть массового обслуживания: теория и эксперименты // Динамика систем, механизмов и машин. 2014. № 4. С. 162-165.\n5.\tЗадорожный В. Н., Долгушин Д. Ю., Юдин Е. Б. Аналитико-имитационные методы решения актуальных задач системного анализа больших сетей: монография / под. ред. В. Н. Задорожного. Омск: изд-во ОмГТУ, 2013. 324 с.\n6.\tЗадорожный В. Н., Юдин Е. Б. Обзор программ моделирования транспортных потоков // Динамика систем, механизмов и машин. 2012. № 1. С. 254-257.\n7.\tБоев В. Д. Моделирование систем. Инструментальные средства GPSS World: учеб. пособие. СПб.: БХВ-Петербург, 2004. 368 с.\n",
    "download_url": "https://cyberleninka.ru/article/n/imitatsiya-dvizheniya-avtomobiley-po-grafu-marshruta/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/instrumenty-dlya-vypolneniya-i-emulyatsii-kvantovyh-vychisleniy",
    "slug": "instrumenty-dlya-vypolneniya-i-emulyatsii-kvantovyh-vychisleniy",
    "title": "ИНСТРУМЕНТЫ ДЛЯ ВЫПОЛНЕНИЯ И ЭМУЛЯЦИИ КВАНТОВЫХ ВЫЧИСЛЕНИЙ",
    "abstract_description": "В настоящее время квантовые технологии находятся на передовой развития научной мысли. Крупные корпорации создают собственные квантовые суперкомпьютеры, разрабатываются квантовые аналоги классических алгоритмов, ведутся исследования в области квантовой криптографии. Но так как квантовые компьютеры еще не получили широкого распространения, актуальным становится вопрос: как обычным пользователям, ученым и исследователям не отставать от развития науки? Одним из возможных решений является использование различного рода инструментов для эмуляции квантовых вычислений на локальном неквантовом компьютере. Кроме того, существует также возможность получить в распоряжение несколько кубит квантового суперкомпьютера IBM. Как правило, такие инструменты реализуются в виде библиотек для различных языков программирования. Ввиду того что работа с реальными квантовыми компьютерами доступна лишь узкому кругу исследователей, эмуляторы просто необходимы для проверки гипотез или алгоритмов. В данной статье рассмотрены наиболее популярные квантовые эмуляторы, использующиеся для квантовых вычислений и позволяющие эмулировать процесс работы квантового компьютера. Были изучены квантовые эмуляторы, выявлены и описаны их индивидуальные особенности, составлены рекомендации для более удобного начала работы с ними, а также описаны их достоинства и недостатки. Произведен обзор нескольких библиотек для языков JavaScript, Python, C/C++, а также рассмотрены средство с веб-интерфейсом (Quantum Programming Studio) и набор инструментов от компании Microsoft (Microsoft Quantum Development Kit), основным языком которого служит Q#.",
    "full_text_body": "\n\n\n\n\uFEFFУДК 004.438\nDOI 10.25205/1818-7900-2020-18-2-43-53\nИнструменты для выполнения и эмуляции квантовых вычислений\nП. Е. Баскаков, Ю. Ю. Хабовец, И. А. Пилипенко В. О. Кравченко, Л. В. Черкесова\nДонской государственный технический университет Ростов-на-Дону, Россия\nАннотация\nВ настоящее время квантовые технологии находятся на передовой развития научной мысли. Крупные корпорации создают собственные квантовые суперкомпьютеры, разрабатываются квантовые аналоги классических алгоритмов, ведутся исследования в области квантовой криптографии. Но так как квантовые компьютеры еще не получили широкого распространения, актуальным становится вопрос: как обычным пользователям, ученым и исследователям не отставать от развития науки? Одним из возможных решений является использование различного рода инструментов для эмуляции квантовых вычислений на локальном неквантовом компьютере. Кроме того, существует также возможность получить в распоряжение несколько кубит квантового суперкомпьютера IBM. Как правило, такие инструменты реализуются в виде библиотек для различных языков программирования. Ввиду того что работа с реальными квантовыми компьютерами доступна лишь узкому кругу исследователей, эмуляторы просто необходимы для проверки гипотез или алгоритмов. В данной статье рассмотрены наиболее популярные квантовые эмуляторы, использующиеся для квантовых вычислений и позволяющие эмулировать процесс работы квантового компьютера. Были изучены квантовые эмуляторы, выявлены и описаны их индивидуальные особенности, составлены рекомендации для более удобного начала работы с ними, а также описаны их достоинства и недостатки. Произведен обзор нескольких библиотек для языков JavaScript, Python, C/C++, а также рассмотрены средство с веб-интерфейсом (Quantum Programming Studio) и набор инструментов от компании Microsoft (Microsoft Quantum Development Kit), основным языком которого служит Q#.\nКлючевые слова\nквантовые вычисления, библиотеки, эмуляция, кубит, языки программирования\nДля цитирования\nБаскаков П. Е., Хабовец Ю. Ю., Пилипенко И. А., Кравченко В. О., Черкесова Л. В. Инструменты для выполнения и эмуляции квантовых вычислений // Вестник НГУ. Серия: Информационные технологии. 2020. Т. 18, № 2. С. 43-53. DOI 10.25205/1818-7900-2020-18-2-43-53\nTools for Performing and Emulating Quantum Computing\nP. E. Baskakov, Yu. Yu. Khabovets, I. A. Pilipenko V. O. Kravchenko, L. V. Cherkesova\nDon State Technical University Rostov on Don, Russian Federation\nAbstract\nCurrently, quantum technologies are at the forefront of scientific thought. Large corporations are creating their own quantum supercomputers, developing quantum analogues of classical algorithms, and research is being conducted in the field of quantum cryptography. But since quantum computers have not yet become widespread, the question be-\n© П. Е. Баскаков, Ю. Ю. Хабовец, И. А. Пилипенко, В. О. Кравченко, Л. В. Черкесова, 2020\ncomes relevant: how can ordinary users, scientists and researchers keep up with the development of science? One possible solution is to use various kinds of tools to emulate quantum computing on a local non-quantum computer. In addition, there is also the opportunity to have several qubits of IBM's quantum supercomputer available. As a rule, such tools are implemented in the form of libraries for various programming languages. Due to the fact that working with real quantum computers is available only to a narrow circle of researchers, emulators are simply necessary to test hypotheses or algorithms. This article examined the most popular quantum emulators used for quantum computing and allowing emulating the process of a quantum computer. Work was carried out to study quantum emulators, to identify and describe their individual characteristics, to make recommendations for a more convenient start to work with them, as well as to describe their advantages and disadvantages. A review of several libraries for the JavaScript, Python, C / C ++ languages was made, as well as a tool with a web interface (Quantum Programming Studio) and a set of tools from Microsoft (Microsoft Quantum Development Kit), the main language of which is Q #, is examined. At the end of the article, a conclusion is made regarding the considered tools.\nKeywords\nquantum computations, libraries, emulation, qubit, programming languages\nFor citation\nBaskakov P. E., Khabovets Yu. Yu., Pilipenko I. A., Kravchenko V. O., Cherkesova L. V. Tools for Performing and Emulating Quantum Computing. Vestnik NSU. Series: Information Technologies, 2020, vol. 18, no. 2, p. 43-53. (in Russ.) DOI 10.25205/1818-7900-2020-18-2-43-53\nВведение\nИдея применения квантовых механизмов для создания устройств, названных впоследствии квантовыми компьютерами, была подана советским ученым Юрием Маниным в работе «Вычислимое и невычислимое» [1], позднее в работе «Simulating physics with computers» Ричард Фейнман продолжил эти рассуждения [2]. Квантовый компьютер является единственной на сегодняшний день моделью, способной предложить экспоненциальный прирост скорости вычислений по сравнению с обычными современными компьютерами, пусть это и касается лишь ограниченного круга задач [3].\nВ статье «Quantum supremacy using a programmable superconducting processor» вводится такое понятие, как «квантовое превосходство». Это потенциальная способность квантовых вычислительных устройств решать проблемы, которые классические компьютеры практически не могут, или им требуется для этого слишком много времени [4]. В той же статье был дан критерий наступления квантового превосходства: по мнению авторов, это порог вычислительной мощности в 50 кубитов. Таким образом, квантовое превосходство было достигнуто, а недавно созданная 72-кубитная квантовая машина Google Bristlecone уже превосходит классический суперкомпьютер по четко определенной вычислительной задаче. Но, к сожалению, таких компьютеров в мире всего несколько, поэтому большинству исследователей еще долго придется довольствоваться эмуляторами квантовых вычислений.\nЦелью данной работы является обзор современных инструментов для работы с квантовыми вычислениями и компьютерами. В данной статье можно ознакомиться с существующим инструментарием разработчика квантовых приложений, прикоснуться к реальным квантовым вычислениям и выбрать для себя наиболее подходящий инструмент для работы с квантовым эмулятором или компьютером.\n1. Quantum circuit - это библиотека с открытым исходным кодом, предназначенная для эмуляции квантовых вычислений в программах на языке программирования JavaScript. Благодаря этому можно его использовать прямо в браузере при создании html-страницы либо на сервере node.js. Также можно применять quantum cirquit внутри Jupyter Notebook, однако в этом случае понадобится установка дополнительного плагина. Созданные квантовые схемы доступны для импорта / экспорта в форматы других распространенных эмуляторов (Qiskit, Cirq, QuEST и др.) и для сохранения в виде векторных рисунков.\nПо заверениям разработчиков библиотеки, quantum cirquit способен обеспечивать эмуляцию более 20 кубит без существенного влияния на производительность системы 1. Для этого используется ряд «ухищрений», призванных оптимизировать потребление оперативной памяти. В частности, алгоритм симуляции не хранит полный вектор состояний в памяти в виде массива размера 2\", где n - количество кубит в схеме, а использует специальную структуру данных, в которой сохранены только ненулевые значения. Элементы матрицы преобразований рассчитываются, умножаются на вектор состояний и сохраняются «на лету», таким образом позволяя достичь единовременного хранения максимум 2 векторов состояний. Алгоритм допускает распараллеливание, то есть проведение расчетов возможно в том числе с использованием графического ускорителя (Graphics Processing Unit, GPU), однако данная особенность в настоящее время не реализована.\nРассмотрим теперь пример работы с библиотекой на основе следующего листинга кода на языке JavaScript:\nvar circuit = new QuantumCircuit(2);\ncircuit.addGate(\"h\", 0, 1);\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ncircuit.addMeasure(1, \"c\", 0);\ncircuit.run();\nconsole.log(circuit.getCregValue(\"c\")).\nВ данном примере создается схема с двумя кубитами, ко второму из которых применяется преобразование Адамара с последующим измерением кубита и сохранением результата в 0-й бит классического не квантового регистра с, после чего схема запускается на выполнение и на экран выводится значение регистра. Следует отметить, что нужные регистры будут добавлены на схему автоматически, если ранее этого не было сделано явным образом. Полный список реализованных преобразований доступен на странице документации библиотеки 2.\nДля определения сравнительных признаков рациональным будет выделить достоинства и недостатки пакета quantum-circuit.\nК достоинствам можно отнести:\n•\tоткрытость исходного кода;\n•\tхорошую документированность;\n•\tвозможность интеграции с форматами других библиотек и оптимизированное потребление памяти.\nГлавным недостатком является несбалансированное использование ресурсов вычислительной системы 3. Так, реализация проведения вычислений на GPU позволила бы снять часть нагрузки с процессора и сократить время, требуемое на обработку.\n2. QuEST. Вышеописанный недостаток устранен в другой популярной библиотеке квантовых вычислений - QuEST (Quantum Exact Simulation Toolkit), разрабатываемой специалистами исследовательской группы Оксфордского университета QTechTheory.\nДанная библиотека предназначена для использования совместно с языками программирования C / C++. Благодаря этому достигается возможность использования ее на любой целевой платформе - от ноутбуков до суперкомпьютеров, требуется лишь наличие соответствующего компилятора.\nБиблиотека направлена на точную и эффективную симуляцию глубоких квантовых схем с большим числом кубитов. Отличительной особенностью является возможность построения распределенной сети, что позволяет объединить вычислительные мощности нескольких ком-\n1\tQuantum Circuit Simulator. 2020. URL: https://www.npmjs.com/package/quantum-circuit (дата обращения 15.03.2020).\n2\tТам же.\n3\tList of QC simulators / Quantiki - Portal and Wiki, 2020. URL: https://quantiki.org/wiki/list-qc-simulators (дата обращения 12.04.2020).\nпьютеров-узлов для достижения наибольшей производительности. Так, с использованием 2 048 компьютеров ARCUS и ARCHER удалось смоделировать 38 кубит [5].\nАлгоритмы симуляции являются многопоточными, задействуются не только мощности центрального процессора, но и GPU, для чего требуется наличие библиотек Nvidia CUDA (Compute Unified Device Architecture). Сообщается, что с использованием видеоадаптера с объемом памяти 2 Гб возможно моделирование 26 кубитов, на ноутбуке с 16 Гб оперативной памяти - 29 кубитов 4.\nРабота с библиотекой должна начинаться с вызова функции createQuESTEnv, которая вернет объект класса QuESTEnv - окружение, инкапсулирующее конфигурацию многопоточ-ности, распределенности и GPU-ускорения.\nРассмотрим следующий код на языке программирования C++:\nQuESTEnv env = createQuESTEnv(); Qureg qubits = createQureg(3, env); initZeroState(qubits); hadamard(qubits, 0); controlledNot(qubits, 0, 1); rotateY(qubits, 2, .1); destroyQureg(qubits, env); destroyQuESTEnv(env).\nКвантовые регистры создаются вызовом функции createQreg. Затем регистры могут быть инициализированы нулевым состоянием (initZeroState) либо положительным (initPlusState).\nДалее к регистрам можно применять преобразования (которые тут называются гейтами). Список реализованных гейтов доступен по ссылке 5.\nПри завершении работы рекомендуется освободить память, выделенную под регистры и окружение (функции destroyQureg и destroyQuESTEnv соответственно).\nНа основании вышесказанного можно сделать вывод, что главное преимущество QuEST заключается в комбинировании производительности центрального процессора (Central Processing Unit, CPU) и GPU, а также возможности проведения распределенных вычислений. На данный момент это единственный симулятор с открытым исходным кодом, обладающий подобным функционалом [5]. Также следует отметить подробную документированность и наличие примеров схем в официальном репозитории.\n3. Qiskit - фреймворк для квантовых вычислений с открытым исходным кодом, разрабатываемый исследовательской группой IBM Research, а также сообществом энтузиастов с целью создания ПО для облачных квантовых вычислений.\nОсновная версия Quiskit использует Python в качестве языка программирования, однако доступны также версии для языков Swift и JavaScript 6. Quiskit предоставляет возможность разработки квантового ПО как на высоком уровне абстракции (для пользователей без опыта квантового программирования), так и на низком уровне, близком к машинному коду OpenQASM. Такая возможность обеспечивается благодаря использованию 4-х компонентов: Terra, Aqua, Aer, Ignis.\n• Qiskit Terra является своего рода ядром фреймворка 7. Данный модуль предоставляет инструменты для создания квантовых схем на машинном или близком к нему уровне, а также квантовых гейтов. Кроме этого, Qiskit Terra содержит инструменты для оптимизации кванто-\n4\tQuantum Exact Simulation Toolkit, 2020. URL: https://quest.qtechtheory.org/about/ (дата обращения 02.04.2020).\n5\tQuEST Coding / Quantum Exact Simulation Toolkit, 2020. URL: https://quest.qtechtheory.org/docs/#coding (дата обращения 02.04.2020).\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n6\tQiskit / Wikipedia - The free Encyclopedia, 2020. URL: https://en.wikipedia.org/wiki/Qiskit (дата обращения 10.04.2020).\n7\tWelcome to Quantum / Quantum computing software, 2020. URL: https://qiskit.org/ (дата обращения 24.03.2020). ISSN 1818-7900 (Print). ISSN 2410-0420 (Online)\nВестник НГУ. Серия: Информационные технологии. 2020. Том 18, № 2 Vestnik NSU. Series: Information Technologies, 2020, vol. 1 8, no. 2\nвых схем под конкретные типы вычислительных систем и версии бэкенда (локальный эмулятор или удаленные вычисления).\n• Qiskit Aqua может быть использован без непосредственного квантового программирования. Данный модуль предоставляет набор инструментов для решения кросс-квантовых задач [6]. В настоящее время доступны эксперименты в области химии, искусственного интеллекта, оптимизации и финансовой сферы. Пользователь может определить какую-либо проблему и получить решение, а Qiskit Aqua реализует соответствующий квантовый алгоритм.\nQiskit Aer предоставляет высокопроизводительный симулятор для всего стека технологий. Он содержит в себе оптимизированный C++ - симулятор для выполнения схем, скомпилированных в Qiskit Terra, а также инструменты для построения конфигурируемых моделей шума для реалистичной симуляции ошибок, возникающих во время вычислений на реальном квантовом оборудовании.\nQiskit Ignis - это компонент, содержащий инструменты для измерения и верификации уровня шума в устройствах ближнего действия, а также позволяющий проводить вычисления в присутствии шума. Также следует отметить наличие процедур смягчения шума, которые реализованы в виде калибровочных схем и могут быть применены к наборам результатов, полученных с использованием одной и той же платформы.\nГлавным преимуществом Qiskit является возможность бесплатно проводить вычисления на суперкомпьютере IBM с предоставлением 5 кубитов. Для этого требуется создать аккаунт IBM Q Experience и получить токен для дальнейшего доступа. Рассмотрим пример на языке программирования Python:\nfrom qiskit import QuantumCircuit, QuantumRegister, ClassicalRegister, execute\nfrom qiskit import IBMQ\nfrom qiskit.providers.ibmq import least_busy\nIBMQ.enable_account('PASTE_YOUR_API-KEY_HERE')\nleast_busy_device = least_busy(IBMQ.get_provider().backends(simulator=False))\nq = QuantumRegister(1)\nc = ClassicalRegister(1)\nstate = QuantumCircuit(q, c)\nstate.measure(q, c)\nstate.draw(output-mpl')\njob = execute(state, backend=least_busy_device, shots=1024) import time\nwhile job.status().name != 'DONE': print(job.status()) time.sleep(10) result = job.result()\nfrom qiskit.tools.visualization import plot_histogram plot_histogram(result.get_counts(state))\nПосле импорта всех необходимых сущностей активируется аккаунт с использованием полученного ранее токена, находится наиболее доступное устройство для проведения вычислений, создаются квантовый и классический регистры и соответствующая квантовая схема, на которую добавляется гейт измерения.\nКоманда state.draw(output='mpl') позволяет отобразить текущее состояние схемы. В данном случае она будет выглядеть так, как показано на рис. 1.\nРис. 1. Отображения состояния квантовой схемы Fig. 1. Quantum scheme image\nДалее создается задание на выполнение схемы (функция execute) на реальном устройстве, и с периодичностью 10 секунд проверяется статус выполнения задания. Когда задание создано, оно помещается в очередь со статусом QUEUED, с началом выполнения статус сменяется на RUNNING, а по завершении принимает значение DONE.\nВизуализировать результат можно с использованием столбчатой диаграммы. На рис. 2 показан примерный вывод состояния кубита.\nРис. 2. Визуализация результатов Fig. 2. Results Visualization\nТаким образом, главной особенностью Qiskit, безусловно, является уникальная возможность проведения вычислений на действительно существующем квантовом устройстве, а не только с использованием локального эмулятора. Однако у данного преимущества есть обратная сторона - ждать начала выполнения задачи приходится довольно долго, в данном случае время ожидания составило порядка 9 минут.\nТакже достоинствами являются открытый исходный код и подробная документирован-ность - на официальном сайте можно найти инструкции по установке фреймворка и примеры использования.\n4. Quantum Programming Studio. Данный сервис представляет собой веб-интерфейс, который позволяет создавать квантовые схемы и алгоритмы, а после получать результаты путем непосредственного моделирования в окне браузера. При этом вычисления могут осуще-\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nствляться, как в режиме эмуляции с помощью встроенного пакета Quantum cirquit (был рассмотрен ранее), так и непосредственно на квантовом компьютере 8.\nQuantum Programming Studio (QPS) позволяет конструировать квантовые схемы путем простого перетаскивания ее элементов из специальной панели инструментов, что показано на рис. 3.\nРис. 3. Создание квантовый схемы в QPS Fig. 3. Creating quantum circuits in QPS\nКаждый клиент сервиса QPS взаимодействует лишь с его графическим веб-интерфейсом. Непосредственные вычисления могут происходить на сторонних сервисах и эмуляторах и в редких случаях на клиентской ЭВМ. QPS позволяет работать с Rigetti QCS, Rigetti Forest SDK и IBM Qiskit на выбор. Эти сервисы позволяют выполнять вычисления на своих квантовых компьютерах и специальных эмуляторах [7]. Обычно пользователь QPS взаимодействует с веб-интерфейсом локально у себя на ЭВМ посредством HTTPS протокола. Также и выполнение квантовых схем происходит либо на пользовательском компьютере, либо в облаке, где установлены все необходимые программные зависимости. Для этого в процессе работы происходит установка соединения через защищенный веб-сокет между сервером QPS и QPS-клиентом, который выполняет квантовые схемы на серверном симуляторе или же на оборудовании партнерских компаний. QPS-клиент является адаптером между запросами пользователя и непосредственно реальным оборудованием, которое предоставляют партнеры QPS. Схема полного взаимодействия пользователя с сервисом представлена на рис. 4.\n8 Quantum Programming studio, 2020. URL: https://quantum-circuit.com/docs (дата обращения 27.03.2020).\nРис. 4. Взаимодействие пользователя с сервисом QPS Fig. 4. User Interaction with QPS\nОтмечая все особенности QPS, можно выделить ряд достоинств и недостатков. К достоинствам, несомненно, можно отнести возможность выполнения вычислений в облаке в режиме эмулятора и, конечно же, тот факт, что QPS может работать с разными реализациями настоящих квантовых компьютеров. Здесь также стоит сказать о кросс-платформенности и гибкости всего сервиса QPS: пользователь сможет разрабатывать и выполнять свои квантовые решения с абсолютно любого устройства и из любой точки мира. Недостатком по сути является тот факт, что если пользователь захочет использовать локальные эмуляторы, то ему придется устанавливать их самостоятельно.\n5. Microsoft Quantum Development Kit (MQDK). Выше были рассмотрены различные конкретные решения для работы с квантовыми алгоритмами и компьютерами, а MQDK представляет собой целую инфраструктуру, которая может пригодиться как начинающему, так и уже опытному разработчику в области квантовых технологий.\nОсновным инструментом для всех инструментов MQDK служит квантово-ориентирован-ный язык программирования Q# и библиотеки для него, которые находятся в полностью от-\n9\nкрытом доступе . С их помощью даже новичок сможет построить свое квантовое решение. Доступен Q# как составляющий элемент загружаемого для Visual Studio плагина MQDK. Данный язык также считается новаторским в области квантовых компьютеров, предоставляет весь инструментарий разработчика, включая полноценную отладку написанных приложений и возможность оценить затраты на запуск решения. На данный момент Q# способен в условиях эмуляции работать с 30 кубитами. Стоит отметить, что Q# совместим с языком Python. Эта совместимость по сути заключается в наличии модуля qsharp для Python, который позволяет запускать программы, написанные на языке Q# 10.\nКонечно же, MQDK должен обладать возможностью использовать для вычисления квантовых решений настоящие квантовые компьютеры и специализированное высокопроизводительное программное обеспечение. С этой целью создан сервис Azure Quantum, который представляет собой огромный набор служб, включает готовые квантовые решения, программное обеспечение, способное достичь связности порядка 40 кубитов. Azure Quantum\n9\tMicrosoft Quantum Documentation / Microsoft Docs, 2020. URL: https://docs.microsoft.com/en-us/quantum/ (дата обращения 08.04.2020).\n10\tТам же.\nпредставляет своим пользователям доступ к наиболее конкурентно способным предложениям на рынке квантовых технологий. Данный сервис дает возможность использовать инструменты, которые можно разделить на следующие категории:\n•\tготовые квантовые решения, работающие в промышленных масштабах;\n•\tквантовое ПО (симуляторы, средства оценки ресурсов);\n•\tквантовая аппаратная система с множеством конфигураций связанных кубитов;\n•\tинструменты масштабирования, безопасности и постоянной поддержки от команды Azure и их партнеров.\nСтруктура всей системы Azure Quantum представлена на рис. 5.\nРазработчики MQDK также позаботились о теоретической и практической подготовленности своих пользователей. Благодаря коллекции учебных пособий под названием «Quantum Katas» каждый может изучить на наглядных примерах принципы квантового программирования и научиться работать со всей инфраструктурой MQDK. Также на официальном сайте MQDK можно найти ссылку на GitHub репозиторий с всевозможными рабочими примерами квантовых решений 11.\n!8 Microsoft\nAppkcation\nOptimization Machine Learning Simulation oi Quantum Syltems Cryptography\nQuantum Solution« ] Bit Post-Quantum Crypto Solution!\nSoftware\nTools and\t^ython/C«»/W_ 0* 00« Simulation Resourte estimation\niirVK«\nP\"*\"1\tAar.\nCompute\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\ntontral\"1\tRoom Temp Controller\tCryo Controller\nSS^\"1\tQiONQ\t<•\tв Microsoft\nРис. 5. Cxcr сервиса Azure Quantum Fig. 5. User Interaction with QPS\nВ целом MQDK является наиболее оптимальным решением для разработки и изучения квантовых решений. Уже на данный момент MQDK - это набор очень удобных инструментов, которые помогут овладеть знаниями в области квантовых вычислений, научиться разрабатывать и оперировать квантовыми решениями.\nЗаключение. В данной работе рассмотрены различные библиотеки для проведения квантовых вычислений, проведено их сравнение и проанализированы достоинства и недостатки. Каждый из инструментов предназначен для использования с различным языком программирования, однако все они имеют открытый исходный код и распространяются бесплатно.\nВозможности библиотек в целом схожи, однако Quest и Qiskit выделяются на общем фоне: первая благодаря поддержке распределенных вычислений, вторая из-за возможности использования 5 кубит квантового суперкомпьютера IBM для расчета схем. Конечно, на данный момент реализация технологии имеет недостатки, но сама возможность подключиться к квантовому компьютеру, пусть и в учебных целях, уникальна.\nВыбор конкретного инструмента каждый пользователь должен осуществлять сам, в зависимости от своих целей и предпочтений. Авторам данной статьи наиболее импонирует биб-\n11 Microsoft Quantum Documentation / Microsoft Docs, 2020.\nлиотека Qiskit благодаря возможности создавать квантовые схемы на высоком уровне абстракции, хорошей документированности и использования имеющего низкий порог вхождения\nязыка Python в качестве основной платформы.\nСписок литературы\n1.\tМанин Ю. Вычислимое и невычислимое. М.: Сов. радио, 1980. 128 с.\n2.\tFeynman R. P. Simulating physics with computers. International Journal of Theoretical Physics, 1982, no. 21, p. 467-488. DOI 10.1007/BF02650179\n3.\tNational Academies of Sciences, Engineering, and Medicine. Quantum Computing: Progress and Prospects. Washington, DC, The National Academies Press, 2018. DOI 10.17226/25196\n4.\tAryte F., Arya K., Babbush R. et al. Quantum supremacy using a programmable superconducting processor. Nature, 2019, no. 574, p. 505-510. DOI 10.1038/s41586-019-1666-5\n5.\tJones T., Brown A., Bush I., Benjamin S. C. QuEST and High Performance Simulation of Quantum Computers. Scientific Reports volume, 2019, no. 9. DOI 10.1038/s41598-019-47174-9\n6.\tMoran С. Mastering Quantum Computing with IBM QX: Explore the world of quantum computing using the Quantum Composer and Qiskit. Packt Publishing, 2019. 308 с.\n7.\tKaiser S. C., Granade Ch. E. Learn Quantum Computing with Python and Q#. Manning Publication, 2020. URL: https://www.manning.com/books/learn-quantum-computing-with-python-and-q-sharp#reviews (дата обращения 03.04.2020).\nReferences\n1.\tManin Yu. Computable and non-computable. Moscow, Soviet Radio Publ., 1980, 128 p. (in Russ.)\n2.\tFeynman R. P. Simulating physics with computers. International Journal of Theoretical Physics, 1982, no. 21, p. 467-488. DOI 10.1007/BF02650179\n3.\tNational Academies of Sciences, Engineering, and Medicine. Quantum Computing: Progress and Prospects. Washington, DC, The National Academies Press, 2018. DOI 10.17226/25196\n4.\tAryte F., Arya K., Babbush R. et al. Quantum supremacy using a programmable superconducting processor. Nature, 2019, no. 574, p. 505-510. DOI 10.1038/s41586-019-1666-5\n5.\tJones T., Brown A., Bush I., Benjamin S. C. QuEST and High Performance Simulation of Quantum Computers. Scientific Reports volume, 2019, no. 9. DOI 10.1038/s41598-019-47174-9\n6.\tMoran С. Mastering Quantum Computing with IBM QX: Explore the world of quantum computing using the Quantum Composer and Qiskit. Packt Publishing, 2019. 308 с.\n7.\tKaiser S. C., Granade Ch. E. Learn Quantum Computing with Python and Q#. Manning Publication, 2020. URL: https://www.manning.com/books/learn-quantum-computing-with-python-and-q-sharp#reviews (дата обращения 03.04.2020).\nМатериал поступил в редколлегию Received 03.05.2020\nСведения об авторах\nБаскаков Павел Евгеньевич, студент 5-го курса кафедры «Кибербезопасность информационных систем» Донского государственного технического университета (Ростов-на-Дону, Россия)\npavelbaskakov98@gmail.com\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\nХабовец Юрий Юрьевич, студент 5-го курса кафедры «Кибербезопасность информационных систем» Донского государственного технического университета (Ростов-на-Дону, Россия)\nyuriy 131196@gmail.com\nПилипенко Ирина Александровна, ассистент кафедры «Кибербезопасность информационных систем» Донского государственного технического университета (Ростов-на-Дону, Россия)\nirenphil@yandex.ru\nКравченко Вероника Олеговна, аспирант 3-го года кафедры «Кибербезопасность информационных систем» Донского государственного технического университета (Ростов-на-Дону, Россия) olenikr@yandex.ru\nЧеркесова Лариса Владимировна, доктор технических наук, профессор кафедры «Кибер-безопасность информационных систем» Донского государственного технического университета (Ростов-на-Дону, Россия) chia2002@inbox.ru\nInformation about the Authors\nPavel E. Baskakov, 5th year student of the Department \"Cybersecurity of information systems\" of the Don State Technical University (Rostov on Don, Russian Federation) pavelbaskakov98@gmail.com\nYuri Yu. Khabovets, 5th year student of the Department \"Cybersecurity of information systems\" of the Don State Technical University (Rostov on Don, Russian Federation) yuriy 131196@gmail.com\nIrina A. Pilipenko, assistant of the Department \"Cybersecurity of information systems\" of the Don State Technical University (Rostov on Don, Russian Federation) irenphil@yandex.ru\nVeronika O. Kravchenko, 3-year post-graduate student of the Department \"Cybersecurity of information systems\" of the Don State Technical University (Rostov on Don, Russian Federation)\nolenikr@yandex.ru\nLarisa V. Cherkesova, doctor of technical Sciences, Professor of the Department \"Cybersecurity of information systems\" of the Don State Technical University (Rostov on Don, Russian Federation)\nchia2002@inbox.ru\n",
    "download_url": "https://cyberleninka.ru/article/n/instrumenty-dlya-vypolneniya-i-emulyatsii-kvantovyh-vychisleniy/pdf"
  },
  {
    "url": "https://cyberleninka.ru/article/n/optimizatsiya-informatsionnoy-sistemy-avtomasterskoy",
    "slug": "optimizatsiya-informatsionnoy-sistemy-avtomasterskoy",
    "title": "Оптимизация информационной системы автомастерской",
    "abstract_description": "В статье рассматривается задача оптимизации информационного портала автомастерской. В результате изучения планируется разобраться в способах улучшения интернет-ресурса для водителей автомобилей, для которых актуально будет ознакомиться с ценами, возможностями, услугами автомастерской. На основе анализа интернет сайтов, а именно удобства использования и скорости загрузки определяется направление улучшения портала. Главные преимущества данного сайта наличие удобного и приятного интерфейса, информативность.",
    "full_text_body": "\n\n\n\n\uFEFFОптимизация информационной системы\nавтомастерской\nЖелтый Д.А.\nМосковский институт электроники и математики Национального исследовательского университета «Высшая школа экономики»\n¿агке11л^(д)^аИ. сот\nАннотация. В статье рассматривается задача оптимизации информационного портала автомастерской. В результате изучения планируется разобраться в способах улучшения интернет-ресурса для водителей автомобилей, для которых актуально будет ознакомиться с ценами, возможностями, услугами автомастерской. На основе анализа интернет сайтов, а именно удобства использования и скорости загрузки определяется направление улучшения портала. Главные преимущества данного сайта - наличие удобного и приятного интерфейса, информативность.\nКлючевые слова: оптимизация, информационная система, анализ.\nДанный ресурс рассчитан на предоставление информации об автомобильной мастерской. Предполагается, что цель использования данной системы это сбор отзывов и предложений по поводу работы мастерской, а также получение необходимой информации непосредственно самими водителями. Кроме того, распространение информации о графике работы, скидках, акциях и ценах позволит привлечь большее число посетителей, таким образом, будут сэкономлены средства. Также, собственный сайт позволит получать дополнительную прибыль от размещения рекламы других предприятий на своих страницах.\nОднако, процесс создания данного ресурса не так прост, в связи с чем требуется провести анализ интернет ресурсов других компаний, чтобы определиться со стилем сайта и другими критериями позволяющими привлечь клиентов.\nСкорость загрузки страницы влияет на множество факторов и это не секрет. В результате быстрой загрузки страниц сайта клиенты дольше находятся на нем, а это в свою очередь играет нам на руку. Также учитывается скорость загрузки и в поисковых системах при ранжировании сайтов, т.е. чем больше скорость, тем больше клиентов возможно привлечь на данный ресурс. Таким образом, было принято решение провести сравнительный анализ скорости загрузки страниц сайтов конкурирующих компаний. Скорость сайтов определяется относительно сервера, находящегося в Германии. Для анализа выбраны следующие ресурсы:\n1.\tРемонт авто \"М-СЕРВИС\". Ш: http://9266902.ru/;\n2.\tАвтомастерская \"ПРЕСТИЖ\". Иг1: http://avtoprestig-usinsk.ru/:\n3.\tАвтомастерская \"УНИВЕРСАЛ\". Ш: http://autouniversal22.ru/:\n4.\tАвтомастерская \"КУЛИБИН КЛУБ\". Ш: http://www.kulibin-club.ru/:\n5.\tАвтомастерская \"8Ь0К\". 1М: http://slok.su/.\nОптимизация информационной системы автомастерской\nСкорость загрузки страниц\n300 250 200 150 100 50 0\n270,04\n86,4\n1\n1,32\n44,8\t49,24\n■ 26,22 197 1,71\t0,4\n9,4\n0,25\n37'59\t31,05\n9,3\n0,3\nсР\n¿0\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n.О\nrff\nл\nJ\nJ>\"\t/ß\n<f\tс/\t£\n^ / J\n✓ / / J\ns\nРазмер(кб) ■ Время загрузки(с) ■ Средняя скорость(Кб/сек)\nВ результате есть несколько путей улучшения загрузки сайта - это оптимизация страниц (уменьшение размера страниц, уменьшение количества HTTP-запросов, минимизация CSS и JAVASCRIPT и т.д.), увеличение скорости работы сервера (серверов) хостинга, или использование обоих путей [1].\nДалее будет проводиться сравнительный анализ сайтов, находящихся в ТОПе. Это имеет смысл, так как оптимизация над ними уже проведена. Этапы анализа:\n1.\tОценка своего сайта.\nНа своем сайте замечены следующие необходимые наработки:\na)\tгоризонтальное меню, с помощью которого можно ознакомиться с необходимой информацией об автосервисе;\nb)\tвозможность оставлять отзывы о работе мастерской;\nc)\tосновная информация на главной странице;\nd)\tсистема вопросов - ответов для пользователей;\ne)\tвозможность ознакомления с акциями и скидками;\nf)\tсписок оказываемых услуг.\n2.\tВыбираем сайты конкурентов.\nРассмотрим те же сайты конкурентов, которые анализировали при оценке скорости загрузки сайта.\n3.\tПроводим анализ сайтов конкурентов.\nНайдём преимущества данных сайтов и запишем их. 4. Совпадения по своему сайту и сайтам конкурентов отбрасываем.\nВ результате должен получиться список необходимых наработок, для успешного попадания сайта в ТОП. В итоге выявлены следующие необходимые доработки:\n•\tсписок услуг необходимо показывать вместе с ценами;\n•\tсписок необходимых вакансий на сайте;\n•\tпоиск по сайту.\n•\tвидеоролик о компании и услугах;\n•\tнаграды данного предприятия на странице сайта;\niНе можете найти то, что вам нужно? Попробуйте сервис подбора литературы.\n•\tдать возможность клиентам общаться через альтернативные каналы коммуникации: электронная почта, Skype, социальные сети;\n•\tраздел \"Новости компании\".\nТаким образом производится оптимизация интернет сайта, необходимая для его продвижения. Проведя необходимый анализ конкурентов, был обнаружен путь дальнейшего развития сайта. Изучив интернет-сайты автомастерских, замечены обходимые доработки своего ресурса. А рассмотрев скорости загрузки сайтов аналогов, стало понятно, как улучшить скорость загрузки данного портала.\nСписок литературы\n\"Топ-10 советов о том, как увеличить скорость загрузки страницы\", Habrahabr, URL: http://habrahabr.ru/post/137239/\n",
    "download_url": "https://cyberleninka.ru/article/n/optimizatsiya-informatsionnoy-sistemy-avtomasterskoy/pdf"
  }
]